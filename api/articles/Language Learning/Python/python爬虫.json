{"title":"基本的Python爬虫","uid":"d2b3e77ca5e5c321ffd72dd8a363d797","slug":"Language Learning/Python/python爬虫","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T20:01:22.000Z","comments":true,"path":"api/articles/Language Learning/Python/python爬虫.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"基本的python爬虫\">基本的Python爬虫</h1>\r\n<h2\r\nid=\"第一步引入包并准备临时存储数据的列表\">第一步：引入包并准备临时存储数据的列表</h2>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> random, time <span class=\"comment\"># 设置每个网页之间的爬取间隔，防止被ban</span></span><br><span class=\"line\"><span class=\"comment\"># import xlwt, xlwings, sqlite3</span></span><br><span class=\"line\"><span class=\"comment\"># import selenium</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1.设定爬取网页对象</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 2 准备临时保存数据的列表</span></span><br><span class=\"line\">A = []</span><br><span class=\"line\">B = []</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># 3 文件保存路径</span></span><br><span class=\"line\">saveAddress = <span class=\"string\">&quot;D:\\\\project\\\\code\\\\python\\\\&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 4 设立序号num</span></span><br><span class=\"line\">num = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"第二步获取网页内容源代码\">第二步：获取网页内容（源代码）</h2>\r\n<h4 id=\"采用urllib\">采用<strong>urllib</strong></h4>\r\n<ol type=\"1\">\r\n<li><p>使用手册：</p>\r\n<p><a href=\"https://www.runoob.com/python3/python-urllib.html\">Python\r\nurllib | 菜鸟教程 (runoob.com)</a></p>\r\n<p><a\r\nhref=\"https://docs.python.org/3/library/urllib.request.html#module-urllib.request\">urllib.request\r\n— Extensible library for opening URLs — Python 3.9.6\r\ndocumentation</a></p></li>\r\n<li><p>简明教程：</p>\r\n<blockquote>\r\n<ol type=\"1\">\r\n<li><p><strong>urllib</strong>包内文件设计：</p>\r\n<ul>\r\n<li><strong>urllib.request</strong> - 打开和读取 URL。它定义了一些打开\r\nURL\r\n的函数和类，包含<strong>授权验证</strong>、<strong>重定向</strong>、<strong>浏览器\r\ncookies</strong>等。</li>\r\n<li><strong>urllib.error</strong> - 包含 urllib.request\r\n抛出的异常。</li>\r\n<li><strong>urllib.parse</strong> - 解析 URL。</li>\r\n<li><strong>urllib.robotparser</strong> - 解析 robots.txt 文件。</li>\r\n</ul></li>\r\n<li><p>打开一个 URL：</p>\r\n<p>urllib.request.urlopen(url, data=None, [timeout, ], cafile=None,\r\ncapath=None, cadefault=False, context=None)</p>\r\n<p>注意返回值：This function always returns an object which can work as\r\na <a\r\nhref=\"https://docs.python.org/3/glossary.html#term-context-manager\">context\r\nmanager</a> <strong>and</strong> has the properties <em>url</em>,\r\n<em>headers</em>, and <em>status</em>.</p>\r\n<p>注意 url 对象：Open the URL <em>url</em>, which can be either a\r\nstring or a <a\r\nhref=\"https://docs.python.org/3/library/urllib.request.html#urllib.request.Request\"><code>Request</code></a>\r\nobject.</p></li>\r\n<li><p>解析 urlopen()的返回值：（注意还要 decode()）</p>\r\n<p>read( [length = number] )</p>\r\n<p>readline( )</p>\r\n<p>readlines( [ ] )：返回列表</p></li>\r\n<li><p>模拟头部信息（身份伪装）：</p>\r\n<p>urllib.request.Request(url, data=None, headers={},\r\norigin_req_host=None, unverifiable=False, method=None)</p>\r\n<p><del>如果用到了 Request 对象，自然是直接将 data 放在这里面而不是在\r\nurlopen 里</del></p></li>\r\n</ol>\r\n</blockquote></li>\r\n</ol>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ask_html</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">\t<span class=\"comment\"># 对基础url做处理，拿到新的、需要爬取的实际目标网页url，并在接下来对这个网址做处理</span></span><br><span class=\"line\">\ttempUrl = url + <span class=\"built_in\">str</span>(i * <span class=\"number\">25</span>)</span><br><span class=\"line\">\t<span class=\"comment\"># 伪装user-agent</span></span><br><span class=\"line\">\theaders = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) ......&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\"># # 用户表单信息</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># data = bytes(urllib.parse.urlencode(&#123;&#x27;user_name&#x27;: &#x27;bunjie&#x27;&#125;), encoding=&#x27;utf-8&#x27;)，是urlopen中的data参数，用来发送post请求，否则是get请求</span></span><br><span class=\"line\">\t<span class=\"comment\"># 对爬虫身份做封装</span></span><br><span class=\"line\">\tresponse = urllib.request.Request(url=url_now, headers=headers, method=<span class=\"string\">&quot;GET&quot;</span>) <span class=\"comment\"># 要发送表单信息的话，请使用POST</span></span><br><span class=\"line\">\t<span class=\"comment\"># 进行网页爬取并解码</span></span><br><span class=\"line\">\treq = urllib.request.urlopen(response, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">\thtml = req.read().decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"comment\"># 返回目标网页对应的html代码内容</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> html</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"采用-requests\">采用 requests</h4>\r\n<blockquote>\r\n<ol type=\"1\">\r\n<li>官方示例：</li>\r\n</ol>\r\n</blockquote>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = requests.get(<span class=\"string\">&#x27;https://api.github.com/user&#x27;</span>, auth=(<span class=\"string\">&#x27;user&#x27;</span>, <span class=\"string\">&#x27;pass&#x27;</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.status_code</span><br><span class=\"line\"><span class=\"number\">200</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.headers[<span class=\"string\">&#x27;content-type&#x27;</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;application/json; charset=utf8&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.encoding</span><br><span class=\"line\"><span class=\"string\">&#x27;utf-8&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.text</span><br><span class=\"line\"><span class=\"string\">&#x27;&#123;&quot;type&quot;:&quot;User&quot;...&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.json()</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;private_gists&#x27;</span>: <span class=\"number\">419</span>, <span class=\"string\">&#x27;total_private_repos&#x27;</span>: <span class=\"number\">77</span>, ...&#125;</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<ol start=\"2\" type=\"1\">\r\n<li><p>文档：</p>\r\n<p><a href=\"https://docs.python-requests.org/en/master/\">Requests: HTTP\r\nfor Humans™ — Requests 2.26.0 documentation\r\n(python-requests.org)</a></p>\r\n<p><a href=\"https://docs.python-requests.org/zh_CN/latest/\">Requests: 让\r\nHTTP 服务人类 — Requests 2.18.1 文档 (python-requests.org)</a></p></li>\r\n<li><p>简明教程：</p>\r\n<ol type=\"1\">\r\n<li><p>API Reference:</p>\r\n<blockquote>\r\n<p><strong><code>requests</code>.<code>get</code></strong>(<em>url</em>,\r\n<em>params=None</em>, <em>**kwargs</em>)</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 3%\" />\r\n<col style=\"width: 96%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">Parameters:</th>\r\n<th style=\"text-align: left;\"><strong>url</strong> – URL for the new <a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>\r\nobject.<br><strong>params</strong> – (optional) Dictionary, list of\r\ntuples or bytes to send in the query string for the <a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.<br/><strong>**kwargs</strong>\r\n– Optional arguments that <code>request</code> takes.</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">Returns:</td>\r\n<td style=\"text-align: left;\"><a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Response\"><code>Response</code></a>\r\nobject</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong><code>requests</code>.<code>post</code></strong>(<em>url</em>,\r\n<em>data=None</em>, <em>json=None</em>, <em>**kwargs</em>)</p>\r\n<p>Sends a POST request.</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 2%\" />\r\n<col style=\"width: 97%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">Parameters:</th>\r\n<th><strong>url</strong> – URL for the new <a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>\r\nobject.<br><strong>data</strong> – (optional) Dictionary, list of\r\ntuples, bytes, or file-like object to send in the body of the <a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.<br/><strong>json</strong>\r\n– (optional) json data to send in the body of the <a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.<br/><strong>**kwargs</strong>\r\n– Optional arguments that <code>request</code> takes.</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">Returns:</td>\r\n<td><a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Response\"><code>Response</code></a>\r\nobject</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</blockquote>\r\n<blockquote>\r\n<p><strong>**kwargs 参数列表:</strong></p>\r\n<ul>\r\n<li><strong>params</strong> – (optional) Dictionary, list of tuples or\r\nbytes to send in the query string for the <a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.</li>\r\n<li><strong>data</strong> – (optional) Dictionary, list of tuples,\r\nbytes, or file-like object to send in the body of the <a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.</li>\r\n<li><strong>json</strong> – (optional) A JSON serializable Python object\r\nto send in the body of the <a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.</li>\r\n<li><strong>headers</strong> – (optional) Dictionary of HTTP Headers to\r\nsend with the <a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.</li>\r\n<li><strong>cookies</strong> – (optional) Dict or CookieJar object to\r\nsend with the <a\r\nhref=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.</li>\r\n<li><strong>files</strong> – (optional) Dictionary of\r\n<code>'name': file-like-objects</code> (or\r\n<code>&#123;'name': file-tuple&#125;</code>) for multipart encoding upload.\r\n<code>file-tuple</code> can be a 2-tuple\r\n<code>('filename', fileobj)</code>, 3-tuple\r\n<code>('filename', fileobj, 'content_type')</code> or a 4-tuple\r\n<code>('filename', fileobj, 'content_type', custom_headers)</code>,\r\nwhere <code>'content-type'</code> is a string defining the content type\r\nof the given file and <code>custom_headers</code> a dict-like object\r\ncontaining additional headers to add for the file.</li>\r\n<li><strong>auth</strong> – (optional) Auth tuple to enable\r\nBasic/Digest/Custom HTTP Auth.</li>\r\n<li><strong>timeout</strong> (<a\r\nhref=\"https://docs.python.org/3/library/functions.html#float\"><em>float</em></a>\r\n<em>or</em> <a\r\nhref=\"https://docs.python.org/3/library/stdtypes.html#tuple\"><em>tuple</em></a>)\r\n– (optional) How many seconds to wait for the server to send data before\r\ngiving up, as a float, or a <a\r\nhref=\"https://docs.python-requests.org/en/latest/user/advanced/#timeouts\">(connect\r\ntimeout, read timeout)</a> tuple.</li>\r\n<li><strong>allow_redirects</strong> (<a\r\nhref=\"https://docs.python.org/3/library/functions.html#bool\"><em>bool</em></a>)\r\n– (optional) Boolean. Enable/disable\r\nGET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to\r\n<code>True</code>.</li>\r\n<li><strong>proxies</strong> – (optional) Dictionary mapping protocol to\r\nthe URL of the proxy.</li>\r\n<li><strong>verify</strong> – (optional) Either a boolean, in which case\r\nit controls whether we verify the server’s TLS certificate, or a string,\r\nin which case it must be a path to a CA bundle to use. Defaults to\r\n<code>True</code>.</li>\r\n<li><strong>stream</strong> – (optional) if <code>False</code>, the\r\nresponse content will be immediately downloaded.</li>\r\n<li><strong>cert</strong> – (optional) if String, path to ssl client\r\ncert file (.pem). If Tuple, (‘cert’, ‘key’) pair.</li>\r\n</ul>\r\n</blockquote></li>\r\n</ol></li>\r\n</ol>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; *<span class=\"class\"><span class=\"keyword\">class</span>* **`<span class=\"title\">requests</span>`.`<span class=\"title\">Response</span>`**</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt; <span class=\"title\">The</span> [`<span class=\"title\">Response</span>`](<span class=\"title\">https</span>://<span class=\"title\">docs</span>.<span class=\"title\">python</span>-<span class=\"title\">requests</span>.<span class=\"title\">org</span>/<span class=\"title\">en</span>/<span class=\"title\">latest</span>/<span class=\"title\">api</span>/#<span class=\"title\">requests</span>.<span class=\"title\">Response</span>) <span class=\"title\">object</span>, <span class=\"title\">which</span> <span class=\"title\">contains</span> <span class=\"title\">a</span> <span class=\"title\">server</span>’<span class=\"title\">s</span> <span class=\"title\">response</span> <span class=\"title\">to</span> <span class=\"title\">an</span> <span class=\"title\">HTTP</span> <span class=\"title\">request</span>.</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt; 1. **<span class=\"title\">content</span>**</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt; ​\t\t<span class=\"title\">Content</span> <span class=\"title\">of</span> <span class=\"title\">the</span> <span class=\"title\">response</span>, <span class=\"title\">in</span> <span class=\"title\">bytes</span>.</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt; 2. **<span class=\"title\">text</span>**</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt;    <span class=\"title\">Content</span> <span class=\"title\">of</span> <span class=\"title\">the</span> <span class=\"title\">response</span>, <span class=\"title\">in</span> <span class=\"title\">unicode</span>.</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt;    <span class=\"title\">If</span> <span class=\"title\">Response</span>.<span class=\"title\">encoding</span> <span class=\"title\">is</span> <span class=\"title\">None</span>, <span class=\"title\">encoding</span> <span class=\"title\">will</span> <span class=\"title\">be</span> <span class=\"title\">guessed</span> <span class=\"title\">using</span> `<span class=\"title\">charset_normalizer</span>` <span class=\"title\">or</span> `<span class=\"title\">chardet</span>`.</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt;    <span class=\"title\">The</span> <span class=\"title\">encoding</span> <span class=\"title\">of</span> <span class=\"title\">the</span> <span class=\"title\">response</span> <span class=\"title\">content</span> <span class=\"title\">is</span> <span class=\"title\">determined</span> <span class=\"title\">based</span> <span class=\"title\">solely</span> <span class=\"title\">on</span> <span class=\"title\">HTTP</span> <span class=\"title\">headers</span>, <span class=\"title\">following</span> <span class=\"title\">RFC</span> 2616 <span class=\"title\">to</span> <span class=\"title\">the</span> <span class=\"title\">letter</span>. <span class=\"title\">If</span> <span class=\"title\">you</span> <span class=\"title\">can</span> <span class=\"title\">take</span> <span class=\"title\">advantage</span> <span class=\"title\">of</span> <span class=\"title\">non</span>-<span class=\"title\">HTTP</span> <span class=\"title\">knowledge</span> <span class=\"title\">to</span> <span class=\"title\">make</span> <span class=\"title\">a</span> <span class=\"title\">better</span> <span class=\"title\">guess</span> <span class=\"title\">at</span> <span class=\"title\">the</span> <span class=\"title\">encoding</span>, <span class=\"title\">you</span> <span class=\"title\">should</span> <span class=\"title\">set</span> `<span class=\"title\">r</span>.<span class=\"title\">encoding</span>` <span class=\"title\">appropriately</span> <span class=\"title\">before</span> <span class=\"title\">accessing</span> <span class=\"title\">this</span> <span class=\"title\">property</span>.</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt; 3. **`<span class=\"title\">url</span>` *= <span class=\"title\">None</span>***</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt;    <span class=\"title\">Final</span> <span class=\"title\">URL</span> <span class=\"title\">location</span> <span class=\"title\">of</span> <span class=\"title\">Response</span>.</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt; 4. **`<span class=\"title\">status_code</span>` *= <span class=\"title\">None</span>***</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt;    <span class=\"title\">Integer</span> <span class=\"title\">Code</span> <span class=\"title\">of</span> <span class=\"title\">responded</span> <span class=\"title\">HTTP</span> <span class=\"title\">Status</span>, <span class=\"title\">e</span>.<span class=\"title\">g</span>. 404 <span class=\"title\">or</span> 200.</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt; 5. **`<span class=\"title\">request</span>` *= <span class=\"title\">None</span>***</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt;    <span class=\"title\">The</span> [`<span class=\"title\">PreparedRequest</span>`](<span class=\"title\">https</span>://<span class=\"title\">docs</span>.<span class=\"title\">python</span>-<span class=\"title\">requests</span>.<span class=\"title\">org</span>/<span class=\"title\">en</span>/<span class=\"title\">latest</span>/<span class=\"title\">api</span>/#<span class=\"title\">requests</span>.<span class=\"title\">PreparedRequest</span>) <span class=\"title\">object</span> <span class=\"title\">to</span> <span class=\"title\">which</span> <span class=\"title\">this</span> <span class=\"title\">is</span> <span class=\"title\">a</span> <span class=\"title\">response</span>.</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt;    <span class=\"title\">You</span> <span class=\"title\">can</span> **<span class=\"title\">check</span> <span class=\"title\">the</span> <span class=\"title\">response</span>** <span class=\"title\">header</span> <span class=\"title\">through</span> <span class=\"title\">this</span> <span class=\"title\">method</span>!</span></span><br><span class=\"line\"><span class=\"class\">&gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt; &gt; <span class=\"title\">When</span> <span class=\"title\">you</span> <span class=\"title\">make</span> <span class=\"title\">a</span> <span class=\"title\">request</span>, <span class=\"title\">Requests</span> <span class=\"title\">makes</span> <span class=\"title\">educated</span> <span class=\"title\">guesses</span> <span class=\"title\">about</span> <span class=\"title\">the</span> <span class=\"title\">encoding</span> <span class=\"title\">of</span> <span class=\"title\">the</span> <span class=\"title\">response</span> <span class=\"title\">based</span> <span class=\"title\">on</span> <span class=\"title\">the</span> <span class=\"title\">HTTP</span> <span class=\"title\">headers</span>. <span class=\"title\">The</span> <span class=\"title\">text</span> <span class=\"title\">encoding</span> <span class=\"title\">guessed</span> <span class=\"title\">by</span> <span class=\"title\">Requests</span> <span class=\"title\">is</span> <span class=\"title\">used</span> <span class=\"title\">when</span> <span class=\"title\">you</span> <span class=\"title\">access</span> **`<span class=\"title\">r</span>.<span class=\"title\">text</span>`**. <span class=\"title\">You</span> <span class=\"title\">can</span> <span class=\"title\">find</span> <span class=\"title\">out</span> <span class=\"title\">what</span> <span class=\"title\">encoding</span> <span class=\"title\">Requests</span> <span class=\"title\">is</span> <span class=\"title\">using</span>, <span class=\"title\">and</span> <span class=\"title\">change</span> <span class=\"title\">it</span>, <span class=\"title\">using</span> <span class=\"title\">the</span> **`<span class=\"title\">r</span>.<span class=\"title\">encoding</span>`** <span class=\"title\">property</span>:</span></span><br><span class=\"line\"><span class=\"class\">&gt; &gt;</span></span><br><span class=\"line\"><span class=\"class\">&gt; &gt; ```<span class=\"title\">python</span></span></span><br><span class=\"line\"><span class=\"class\">&gt; &gt; &gt;&gt;&gt; <span class=\"title\">r</span>.<span class=\"title\">encoding</span></span></span><br><span class=\"line\"><span class=\"class\">&gt; &gt; &#x27;<span class=\"title\">utf</span>-8&#x27;</span></span><br><span class=\"line\"><span class=\"class\">&gt; &gt; &gt;&gt;&gt; <span class=\"title\">r</span>.<span class=\"title\">encoding</span> = &#x27;<span class=\"title\">ISO</span>-8859-1&#x27;</span></span><br><span class=\"line\"><span class=\"class\">&gt; &gt; ```</span></span><br></pre></td></tr></table></figure>\r\n<ol start=\"2\" type=\"1\">\r\n<li><h2 id=\"make-a-request\">Make a Request</h2></li>\r\n</ol>\r\n<blockquote>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> requests <span class=\"comment\"># first import the module</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = requests.get(<span class=\"string\">&#x27;https://api.github.com/events&#x27;</span>) <span class=\"comment\"># get a webpage. In GET requests mode</span></span><br></pre></td></tr></table></figure>\r\n<p>Now, we have a Response object called r. We can get all the\r\ninformation we need from this object.</p>\r\n<p>meanwhile, requests’ simple API means that all forms of HTTP request\r\nare as obvious. For example, this is how you make an HTTP POST\r\nrequest:</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = requests.post(<span class=\"string\">&#x27;https://httpbin.org/post&#x27;</span>, data = &#123;<span class=\"string\">&#x27;key&#x27;</span>:<span class=\"string\">&#x27;value&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 我们当热可以在之前就将要发送的数据包data封装好，在post中就可以直接调用了</span></span><br></pre></td></tr></table></figure>\r\n<p>Nice, rights? What about the other HTTP request types: PUT, DELETE,\r\nHEAD and OPTIONS? These are all just as simple:</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = requests.put(<span class=\"string\">&#x27;https://httpbin.org/put&#x27;</span>, data = &#123;<span class=\"string\">&#x27;key&#x27;</span>:<span class=\"string\">&#x27;value&#x27;</span>&#125;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = requests.delete(<span class=\"string\">&#x27;https://httpbin.org/delete&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = requests.head(<span class=\"string\">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = requests.options(<span class=\"string\">&#x27;https://httpbin.org/get&#x27;</span>)</span><br></pre></td></tr></table></figure>\r\n</blockquote>\r\n<ol start=\"2\" type=\"1\">\r\n<li><h2 id=\"passing-parameters-in-urls\">Passing Parameters In\r\nURLs</h2></li>\r\n</ol>\r\n<blockquote>\r\n<p>You often want to send some sort of data in the URL’s query string.\r\nIf you were constructing the URL by hand, this data would be given as\r\nkey/value pairs in the URL after a question mark, e.g.\r\n<code>httpbin.org/get?key=val</code>. Requests allows you to provide\r\nthese arguments as a dictionary of strings, using the\r\n<code>params</code> keyword argument. As an example, if you wanted to\r\npass <code>key1=value1</code> and <code>key2=value2</code> to\r\n<code>httpbin.org/get</code>, you would use the following code:</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>payload = &#123;<span class=\"string\">&#x27;key1&#x27;</span>: <span class=\"string\">&#x27;value1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>: <span class=\"string\">&#x27;value2&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = requests.get(<span class=\"string\">&#x27;https://httpbin.org/get&#x27;</span>, params=payload)</span><br></pre></td></tr></table></figure>\r\n<p>You can see that the URL has been correctly encoded by printing the\r\nURL:</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(r.url)</span><br><span class=\"line\">https://httpbin.org/get?key2=value2&amp;key1=value1</span><br></pre></td></tr></table></figure>\r\n<p>Note that any dictionary key whose value is <code>None</code> will\r\nnot be added to the URL’s query string.</p>\r\n</blockquote>\r\n</blockquote>\r\n<h2 id=\"第三步利用-bs-和-re-来对爬取内容做处理\">第三步：利用 bs 和 re\r\n来对爬取内容做处理</h2>\r\n<h4 id=\"bs4一级处理可跳过\">bs4：一级处理（可跳过）</h4>\r\n<ol type=\"1\">\r\n<li><p>使用手册：</p>\r\n<p><a\r\nhref=\"https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/\">Beautiful Soup\r\n4.4.0 文档 — Beautiful Soup 4.2.0 中文 文档</a></p></li>\r\n<li><p>简明教程：</p>\r\n<blockquote>\r\n<ol type=\"1\">\r\n<li><p>创建 BeautifulSoup 对象：</p>\r\n<p>将一段文档传入 BeautifulSoup 的构造方法,就能得到一个文档的对象,\r\n可以传入一段<strong>字符串</strong>或一个<strong>文件</strong>句柄.</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(<span class=\"built_in\">open</span>(<span class=\"string\">&quot;index.html&quot;</span>)) <span class=\"comment\"># 方法一：读取文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(<span class=\"string\">&quot;&lt;html&gt;data&lt;/html&gt;&quot;</span>) <span class=\"comment\"># 方法二：读取现成、字符串形式的html代码片段</span></span><br></pre></td></tr></table></figure>\r\n<p>首先,文档被转换成 Unicode,并且 HTML 的实例都被转换成 Unicode 编码</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BeautifulSoup(<span class=\"string\">&quot;Sacr&amp;eacute; bleu!&quot;</span>)</span><br><span class=\"line\">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Sacré bleu!&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\r\n<p>然后,Beautiful Soup\r\n选择最合适的解析器来解析这段文档,如果手动指定解析器那么 Beautiful Soup\r\n会选择指定的解析器来解析文档.(参考 <a\r\nhref=\"https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#xml\">解析成\r\nXML</a> ).</p></li>\r\n<li><p>对文档进行处理：</p>\r\n<p>Beautiful Soup 将复杂 HTML 文档转换成一个复杂的树形结构,每个节点都是\r\nPython 对象,所有对象可以归纳为 4 种: <code>Tag</code> ,\r\n<code>NavigableString</code> , <code>BeautifulSoup</code> ,\r\n<code>Comment</code> .</p>\r\n<p><strong><code>Tag</code></strong>：即原文档中的标签，可以通过<strong>name</strong>和<strong>attrs</strong>来直接调用对应的名称和属性，请<em>务必注意属性的返回值！</em>我们还可以通过<strong>string</strong>来调用内容，但是内容不能被直接修改</p>\r\n<p><del>如果只想得到 tag 中包含的文本内容,那么可以嗲用\r\n<code>get_text()</code> 方法,这个方法获取到 tag\r\n中包含的所有文版内容包括子孙 tag 中的内容,并将结果作为 Unicode\r\n字符串返回</del></p>\r\n<p><strong><code>NavigableString</code></strong>：字符串常被包含在 tag\r\n内.Beautiful Soup 用 <code>NavigableString</code> 类来包装 tag\r\n中的字符串，tag 中包含的字符串不能编辑,但是可以被替换成其它的字符串,用\r\n<a\r\nhref=\"https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#replace-with\">replace_with()</a>\r\n方法:</p>\r\n<ol type=\"1\">\r\n<li><p>进行文档遍历：低效</p></li>\r\n<li><p>文档搜索（√）：</p>\r\n<ol type=\"1\">\r\n<li><p>select()css 选择器，支持 id(#)，class(.)，tag，父子选择等 css\r\n匹配规则</p>\r\n<p>example: bs.select(a[class = 'hello!' ])</p></li>\r\n<li><p>find_all()几乎同 select，但是支持了正则表达式</p>\r\n<p>example: bs.find<em>all('div', class</em>='item') /\r\nbs.find_all(re.compile(\"a\"))</p></li>\r\n</ol></li>\r\n</ol></li>\r\n</ol>\r\n</blockquote></li>\r\n</ol>\r\n<h4 id=\"re二级处理从根本解决问题\">re：二级处理（从根本解决问题）</h4>\r\n<ol type=\"1\">\r\n<li><p>正则表达式使用手册：</p>\r\n<p><a\r\nhref=\"onenote:https://d.docs.live.net/a85fd0932d62f536/文档/JBR_Bunjie/开发笔记/前端开发笔记/H5.one#正则表达式&amp;section-id=%7B95089512-DFC7-49F9-A7C1-466EEB6B429A%7D&amp;page-id=%7B262783D3-2B94-4AF5-877C-BDB6CBCD4806%7D&amp;end\">正则表达式</a>\r\n(<a\r\nhref=\"https://onedrive.live.com/view.aspx?resid=A85FD0932D62F536!617&amp;id=documents&amp;wd=target(开发笔记%2F前端开发笔记%2FH5.one%7C95089512-DFC7-49F9-A7C1-466EEB6B429A%2F正则表达式%7C262783D3-2B94-4AF5-877C-BDB6CBCD4806%2F)\">Web\r\n视图</a>)</p></li>\r\n<li><p>re 模块使用手册：</p>\r\n<p><a\r\nhref=\"onenote:https://d.docs.live.net/a85fd0932d62f536/文档/JBR_Bunjie/开发笔记/Linux_Windows/python.one#re模块&amp;section-id=%7B973AA90C-36D3-413E-AB01-5823E7C25713%7D&amp;page-id=%7B6914C45C-28DA-48B3-A552-0A19C3C9064D%7D&amp;end\">re\r\n模块</a> (<a\r\nhref=\"https://onedrive.live.com/view.aspx?resid=A85FD0932D62F536!617&amp;id=documents&amp;wd=target(开发笔记%2FLinux_Windows%2Fpython.one%7C973AA90C-36D3-413E-AB01-5823E7C25713%2Fre模块%7C6914C45C-28DA-48B3-A552-0A19C3C9064D%2F)\">Web\r\n视图</a>)</p></li>\r\n</ol>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全部html代码已经在前面的url处理中完全取得</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_information</span>(<span class=\"params\">html</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> num</span><br><span class=\"line\">\tbs = BeautifulSoup(html, <span class=\"string\">&#x27;lxml&#x27;</span>) <span class=\"comment\"># 推荐使用lxml作为解析器,因为效率更高.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfind_movie_address = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class=\"line\">\tfind_title = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>, re.S)</span><br><span class=\"line\">\tfind_more_title = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;&lt;span class=&quot;other&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>, re.S)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> bs.find_all(<span class=\"string\">&#x27;div&#x27;</span>, class_=<span class=\"string\">&#x27;item&#x27;</span>):</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span>*<span class=\"number\">30</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(num + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\titem = <span class=\"built_in\">str</span>(item)</span><br><span class=\"line\">\t\tmovie_address_data.append(re.findall(find_movie_address, item)[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(re.findall(find_title, item)) == <span class=\"number\">2</span>:   <span class=\"comment\"># 不是所有影片都有“两个title”的class</span></span><br><span class=\"line\">\t\t\tmovie_title_data.append(re.findall(find_title, item)[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t\tmovie_traditional_title_data.append(re.findall(find_title, item)[<span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tmovie_title_data.append(re.findall(find_title, item)[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t\tmovie_traditional_title_data.append(<span class=\"string\">&#x27; &#x27;</span>)  <span class=\"comment\"># 用空格&#x27; &#x27;来代表该电影是中文电影，没有外文“原名”</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmovie_more_title_data.append(re.findall(find_more_title, item)[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttemp = movie_title_data[num] + movie_traditional_title_data[num] + movie_more_title_data[num]</span><br><span class=\"line\">\t\tmovie_title_collection.append(temp)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(movie_address_data[num])</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(movie_title_collection[num])</span><br><span class=\"line\">\t\tnum = num + <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"comment\"># 模拟正常浏览网页的停留时间</span></span><br><span class=\"line\">\ttime.sleep(random.random() * <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"第四步保存数据\">第四步：保存数据</h2>\r\n<ol type=\"1\">\r\n<li><p>excel 表：<a href=\"http://www.python-excel.org/\">Python Resources\r\nfor working with Excel - Working with Excel Files in Python\r\n(python-excel.org)</a></p>\r\n<p>xlwings：<a href=\"https://www.xlwings.org/\">Automate Excel with\r\nPython (Open Source and Free) (xlwings.org)</a></p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xlwings示例代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> xlwings <span class=\"keyword\">as</span> xw</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#连接到excel</span></span><br><span class=\"line\">workbook = xw.Book(<span class=\"string\">r&#x27;path/myexcel.xlsx&#x27;</span>)<span class=\"comment\">#连接excel文件</span></span><br><span class=\"line\"><span class=\"comment\">#连接到指定单元格</span></span><br><span class=\"line\">data_range = workbook.sheets(<span class=\"string\">&#x27;Sheet1&#x27;</span>).<span class=\"built_in\">range</span>(<span class=\"string\">&#x27;A1&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#写入数据</span></span><br><span class=\"line\">data_range.value = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"comment\">#保存</span></span><br><span class=\"line\">workbook.save()</span><br></pre></td></tr></table></figure></li>\r\n</ol>\r\n<p>以上步骤综合即是一个完整的 python 爬虫程序</p>\r\n","text":"基本的Python爬虫 第一步：引入包并准备临时存储数据的列表 12345678910111213141516171819import urllib.requestimport urllib.parseimport requestsfrom bs4 import Beautifu...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Python","slug":"Python","count":9,"path":"api/categories/Python.json"},{"name":"Language Learning","slug":"Python/Language-Learning","count":8,"path":"api/categories/Python/Language-Learning.json"}],"tags":[{"name":"Language Learning","slug":"Language-Learning","count":16,"path":"api/tags/Language-Learning.json"},{"name":"Python","slug":"Python","count":10,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84python%E7%88%AC%E8%99%AB\"><span class=\"toc-text\">基本的Python爬虫</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%BC%95%E5%85%A5%E5%8C%85%E5%B9%B6%E5%87%86%E5%A4%87%E4%B8%B4%E6%97%B6%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">第一步：引入包并准备临时存储数据的列表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E8%8E%B7%E5%8F%96%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9%E6%BA%90%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">第二步：获取网页内容（源代码）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%87%E7%94%A8urllib\"><span class=\"toc-text\">采用urllib</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%87%E7%94%A8-requests\"><span class=\"toc-text\">采用 requests</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#make-a-request\"><span class=\"toc-text\">Make a Request</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#passing-parameters-in-urls\"><span class=\"toc-text\">Passing Parameters In\r\nURLs</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5%E5%88%A9%E7%94%A8-bs-%E5%92%8C-re-%E6%9D%A5%E5%AF%B9%E7%88%AC%E5%8F%96%E5%86%85%E5%AE%B9%E5%81%9A%E5%A4%84%E7%90%86\"><span class=\"toc-text\">第三步：利用 bs 和 re\r\n来对爬取内容做处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#bs4%E4%B8%80%E7%BA%A7%E5%A4%84%E7%90%86%E5%8F%AF%E8%B7%B3%E8%BF%87\"><span class=\"toc-text\">bs4：一级处理（可跳过）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#re%E4%BA%8C%E7%BA%A7%E5%A4%84%E7%90%86%E4%BB%8E%E6%A0%B9%E6%9C%AC%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">re：二级处理（从根本解决问题）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">第四步：保存数据</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"selenium自动化爬虫","uid":"46c2c3df1cbb91d145ce37d8e3350c78","slug":"Language Learning/Python/selenium自动化","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T20:03:21.000Z","comments":true,"path":"api/articles/Language Learning/Python/selenium自动化.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"目标：使用 selenium 来解决网页中的大量同质化人工操作内容 零：想好该怎么做： 关于指定网站： 网站是网盘网站，其文件有密码保护，即每个文件都有不同且无规律的受保护地址；同时，这些网页的操作完全重复。 我们可以使用 selenium 来完成自动化代替重复劳动。 关于 se...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Python","slug":"Python","count":9,"path":"api/categories/Python.json"},{"name":"Language Learning","slug":"Python/Language-Learning","count":8,"path":"api/categories/Python/Language-Learning.json"}],"tags":[{"name":"Language Learning","slug":"Language-Learning","count":16,"path":"api/tags/Language-Learning.json"},{"name":"Python","slug":"Python","count":10,"path":"api/tags/Python.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"使用python自动化处理的文件及zipfile模块的介绍","uid":"54ad4410b8e441eafc3ef2cc6f0cea8f","slug":"Language Learning/Python/使用python解决文件自动化处理的方案及zipfile模块的介绍","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T20:02:46.000Z","comments":true,"path":"api/articles/Language Learning/Python/使用python解决文件自动化处理的方案及zipfile模块的介绍.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"使用python自动化处理的文件及zipfile模块的介绍 使用 Python 解决文件自动化改名和命名 原因：获取压缩文件的实际名称： 压缩文件名称使用了随机字符，而原文件夹作为压缩文件的根目录来保存，为了避免打开压缩文件才能知道打开的到底是哪个文件，需要将压缩文件内的文件夹名...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"Python","slug":"Python","count":9,"path":"api/categories/Python.json"},{"name":"Language Learning","slug":"Python/Language-Learning","count":8,"path":"api/categories/Python/Language-Learning.json"}],"tags":[{"name":"Language Learning","slug":"Language-Learning","count":16,"path":"api/tags/Language-Learning.json"},{"name":"Python","slug":"Python","count":10,"path":"api/tags/Python.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
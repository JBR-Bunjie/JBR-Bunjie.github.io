{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Python/python爬虫","date":"2023-03-07T16:14:45.605Z","updated":"2022-12-23T11:55:19.604Z","comments":true,"path":"api/articles/Language Learning/Python/python爬虫.json","keywords":null,"cover":null,"content":"<h2 id=\"第一步：引入包并准备临时存储数据的列表\"><a href=\"#第一步：引入包并准备临时存储数据的列表\" class=\"headerlink\" title=\"第一步：引入包并准备临时存储数据的列表\"></a>第一步：引入包并准备临时存储数据的列表</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import urllib.request\nimport urllib.parse\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\nimport random, time # 设置每个网页之间的爬取间隔，防止被ban\n# import xlwt, xlwings, sqlite3\n# import selenium\n\n# 1.设定爬取网页对象\nurl &#x3D; &quot;&quot;\n# 2 准备临时保存数据的列表\nA &#x3D; []\nB &#x3D; []\n...\n# 3 文件保存路径\nsaveAddress &#x3D; &quot;D:\\\\project\\\\code\\\\python\\\\&quot;\n# 4 设立序号num\nnum &#x3D; 0</code></pre>\n\n\n\n<h2 id=\"第二步：获取网页内容（源代码）\"><a href=\"#第二步：获取网页内容（源代码）\" class=\"headerlink\" title=\"第二步：获取网页内容（源代码）\"></a>第二步：获取网页内容（源代码）</h2><h4 id=\"采用urllib\"><a href=\"#采用urllib\" class=\"headerlink\" title=\"采用urllib\"></a>采用<strong>urllib</strong></h4><ol>\n<li><p>使用手册：</p>\n<p>​    <a href=\"https://www.runoob.com/python3/python-urllib.html\">Python urllib | 菜鸟教程 (runoob.com)</a></p>\n<p>​    <a href=\"https://docs.python.org/3/library/urllib.request.html#module-urllib.request\">urllib.request — Extensible library for opening URLs — Python 3.9.6 documentation</a></p>\n</li>\n<li><p>简明教程：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><p><strong>urllib</strong>包内文件设计：</p>\n<ul>\n<li><strong>urllib.request</strong> - 打开和读取 URL。它定义了一些打开 URL 的函数和类，包含<strong>授权验证</strong>、<strong>重定向</strong>、<strong>浏览器cookies</strong>等。</li>\n<li><strong>urllib.error</strong> - 包含 urllib.request 抛出的异常。</li>\n<li><strong>urllib.parse</strong> - 解析 URL。</li>\n<li><strong>urllib.robotparser</strong> - 解析 robots.txt 文件。</li>\n</ul>\n</li>\n<li><p>打开一个 URL：</p>\n<p>urllib.request.urlopen(url, data=None, [timeout, ], cafile=None, capath=None, cadefault=False, context=None)</p>\n<p>​    注意返回值：This function always returns an object which can work as a <a href=\"https://docs.python.org/3/glossary.html#term-context-manager\">context manager</a> <strong>and</strong> has the properties <em>url</em>, <em>headers</em>, and <em>status</em>.</p>\n<p>​    注意url对象：Open the URL <em>url</em>, which can be either a string or a <a href=\"https://docs.python.org/3/library/urllib.request.html#urllib.request.Request\"><code>Request</code></a> object.</p>\n</li>\n<li><p>解析urlopen()的返回值：（注意还要decode()）</p>\n<p>​    read( [length = number] )</p>\n<p>​    readline( )</p>\n<p>​    readlines( [ ] )：返回列表</p>\n</li>\n<li><p>模拟头部信息（身份伪装）：</p>\n<p>​    urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)</p>\n<p>​    <del>如果用到了Request对象，自然是直接将data放在这里面而不是在urlopen里</del></p>\n</li>\n</ol></blockquote>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def ask_html(i):\n\t# 对基础url做处理，拿到新的、需要爬取的实际目标网页url，并在接下来对这个网址做处理\n\ttempUrl &#x3D; url + str(i * 25)\n\t# 伪装user-agent\n\theaders &#x3D; &#123;\n\t\t&quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) ......&quot;\n\t&#125;\n\t\t# # 用户表单信息\n\t\t# data &#x3D; bytes(urllib.parse.urlencode(&#123;&#39;user_name&#39;: &#39;bunjie&#39;&#125;), encoding&#x3D;&#39;utf-8&#39;)，是urlopen中的data参数，用来发送post请求，否则是get请求\n\t# 对爬虫身份做封装\n\tresponse &#x3D; urllib.request.Request(url&#x3D;url_now, headers&#x3D;headers, method&#x3D;&quot;GET&quot;) # 要发送表单信息的话，请使用POST\n\t# 进行网页爬取并解码\n\treq &#x3D; urllib.request.urlopen(response, timeout&#x3D;30)\n\thtml &#x3D; req.read().decode(&#39;utf-8&#39;)\n\t# 返回目标网页对应的html代码内容\n\treturn html</code></pre>\n\n<h4 id=\"采用requests\"><a href=\"#采用requests\" class=\"headerlink\" title=\"采用requests\"></a>采用requests</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>官方示例：</li>\n</ol></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;api.github.com&#x2F;user&#39;, auth&#x3D;(&#39;user&#39;, &#39;pass&#39;))\n&gt;&gt;&gt; r.status_code\n200\n&gt;&gt;&gt; r.headers[&#39;content-type&#39;]\n&#39;application&#x2F;json; charset&#x3D;utf8&#39;\n&gt;&gt;&gt; r.encoding\n&#39;utf-8&#39;\n&gt;&gt;&gt; r.text\n&#39;&#123;&quot;type&quot;:&quot;User&quot;...&#39;\n&gt;&gt;&gt; r.json()\n&#123;&#39;private_gists&#39;: 419, &#39;total_private_repos&#39;: 77, ...&#125;</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol start=\"2\">\n<li><p>文档：</p>\n<p>​    <a href=\"https://docs.python-requests.org/en/master/\">Requests: HTTP for Humans™ — Requests 2.26.0 documentation (python-requests.org)</a></p>\n<p>​    <a href=\"https://docs.python-requests.org/zh_CN/latest/\">Requests: 让 HTTP 服务人类 — Requests 2.18.1 文档 (python-requests.org)</a></p>\n</li>\n<li><p>简明教程：</p>\n<ol>\n<li><p>API Reference:</p>\n<blockquote>\n<p><strong><code>requests</code>.<code>get</code></strong>(<em>url</em>, <em>params=None</em>, **<em>kwargs</em>)</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameters:</th>\n<th align=\"left\"><strong>url</strong> – URL for the new <a href=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a> object.<br><strong>params</strong> – (optional) Dictionary, list of tuples or bytes to send in the query string for the <a href=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.<br/>*<strong>*kwargs</strong> – Optional arguments that <code>request</code> takes.</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Returns:</td>\n<td align=\"left\"><a href=\"https://docs.python-requests.org/en/latest/api/#requests.Response\"><code>Response</code></a> object</td>\n</tr>\n</tbody></table></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong><code>requests</code>.<code>post</code></strong>(<em>url</em>, <em>data=None</em>, <em>json=None</em>, **<em>kwargs</em>)</p>\n<p>Sends a POST request.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Parameters:</th>\n<th><strong>url</strong> – URL for the new <a href=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a> object.<br><strong>data</strong> – (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the <a href=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.<br/><strong>json</strong> – (optional) json data to send in the body of the <a href=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.<br/>*<strong>*kwargs</strong> – Optional arguments that <code>request</code> takes.</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Returns:</td>\n<td><a href=\"https://docs.python-requests.org/en/latest/api/#requests.Response\"><code>Response</code></a> object</td>\n</tr>\n</tbody></table></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>**kwargs参数列表:</strong></p>\n<ul>\n<li><strong>params</strong> – (optional) Dictionary, list of tuples or bytes to send in the query string for the <a href=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.</li>\n<li><strong>data</strong> – (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the <a href=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.</li>\n<li><strong>json</strong> – (optional) A JSON serializable Python object to send in the body of the <a href=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.</li>\n<li><strong>headers</strong> – (optional) Dictionary of HTTP Headers to send with the <a href=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.</li>\n<li><strong>cookies</strong> – (optional) Dict or CookieJar object to send with the <a href=\"https://docs.python-requests.org/en/latest/api/#requests.Request\"><code>Request</code></a>.</li>\n<li><strong>files</strong> – (optional) Dictionary of <code>&#39;name&#39;: file-like-objects</code> (or <code>&#123;&#39;name&#39;: file-tuple&#125;</code>) for multipart encoding upload. <code>file-tuple</code> can be a 2-tuple <code>(&#39;filename&#39;, fileobj)</code>, 3-tuple <code>(&#39;filename&#39;, fileobj, &#39;content_type&#39;)</code> or a 4-tuple <code>(&#39;filename&#39;, fileobj, &#39;content_type&#39;, custom_headers)</code>, where <code>&#39;content-type&#39;</code> is a string defining the content type of the given file and <code>custom_headers</code> a dict-like object containing additional headers to add for the file.</li>\n<li><strong>auth</strong> – (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.</li>\n<li><strong>timeout</strong> (<a href=\"https://docs.python.org/3/library/functions.html#float\"><em>float</em></a> <em>or</em> <a href=\"https://docs.python.org/3/library/stdtypes.html#tuple\"><em>tuple</em></a>) – (optional) How many seconds to wait for the server to send data before giving up, as a float, or a <a href=\"https://docs.python-requests.org/en/latest/user/advanced/#timeouts\">(connect timeout, read timeout)</a> tuple.</li>\n<li><strong>allow_redirects</strong> (<a href=\"https://docs.python.org/3/library/functions.html#bool\"><em>bool</em></a>) – (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to <code>True</code>.</li>\n<li><strong>proxies</strong> – (optional) Dictionary mapping protocol to the URL of the proxy.</li>\n<li><strong>verify</strong> – (optional) Either a boolean, in which case it controls whether we verify the server’s TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to <code>True</code>.</li>\n<li><strong>stream</strong> – (optional) if <code>False</code>, the response content will be immediately downloaded.</li>\n<li><strong>cert</strong> – (optional) if String, path to ssl client cert file (.pem). If Tuple, (‘cert’, ‘key’) pair.</li>\n</ul></blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">&gt; *class* **&#96;requests&#96;.&#96;Response&#96;**\n&gt;\n&gt; The [&#96;Response&#96;](https:&#x2F;&#x2F;docs.python-requests.org&#x2F;en&#x2F;latest&#x2F;api&#x2F;#requests.Response) object, which contains a server’s response to an HTTP request.\n&gt;\n&gt; 1. **content**\n&gt;\n&gt; ​\t\tContent of the response, in bytes.\n&gt;\n&gt; 2. **text**\n&gt;\n&gt;    Content of the response, in unicode.\n&gt;\n&gt;    If Response.encoding is None, encoding will be guessed using &#96;charset_normalizer&#96; or &#96;chardet&#96;.\n&gt;\n&gt;    The encoding of the response content is determined based solely on HTTP headers, following RFC 2616 to the letter. If you can take advantage of non-HTTP knowledge to make a better guess at the encoding, you should set &#96;r.encoding&#96; appropriately before accessing this property.\n&gt;    \n&gt; 3. **&#96;url&#96; *&#x3D; None***\n&gt;\n&gt;    Final URL location of Response.\n&gt;\n&gt; 4. **&#96;status_code&#96; *&#x3D; None***\n&gt;\n&gt;    Integer Code of responded HTTP Status, e.g. 404 or 200.\n&gt;\n&gt; 5. **&#96;request&#96; *&#x3D; None***\n&gt;\n&gt;    The [&#96;PreparedRequest&#96;](https:&#x2F;&#x2F;docs.python-requests.org&#x2F;en&#x2F;latest&#x2F;api&#x2F;#requests.PreparedRequest) object to which this is a response.\n&gt;\n&gt;    You can **check the response** header through this method! \n&gt;\n&gt; &gt; When you make a request, Requests makes educated guesses about the encoding of the response based on the HTTP headers. The text encoding guessed by Requests is used when you access **&#96;r.text&#96;**. You can find out what encoding Requests is using, and change it, using the **&#96;r.encoding&#96;** property:\n&gt; &gt;\n&gt; &gt; &#96;&#96;&#96;python\n&gt; &gt; &gt;&gt;&gt; r.encoding\n&gt; &gt; &#39;utf-8&#39;\n&gt; &gt; &gt;&gt;&gt; r.encoding &#x3D; &#39;ISO-8859-1&#39;</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n2. ## Make a Request\n\n&gt; &#96;&#96;&#96;python \n&gt; &gt;&gt;&gt; import requests # first import the module\n&gt; \n &gt; &gt;&gt;&gt; r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;api.github.com&#x2F;events&#39;) # get a webpage. In GET requests mode</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Now, we have a Response object called r. We can get all the information we need from this object.</p>\n<p>meanwhile, requests’ simple API means that all forms of HTTP request are as obvious. For example, this is how you make an HTTP POST request:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; r &#x3D; requests.post(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;, data &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;)\n# 我们当热可以在之前就将要发送的数据包data封装好，在post中就可以直接调用了</code></pre>\n<p>Nice, rights? What about the other HTTP request types: PUT, DELETE, HEAD and OPTIONS? These are all just as simple:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; r &#x3D; requests.put(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;put&#39;, data &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;)\n&gt;&gt;&gt; r &#x3D; requests.delete(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;delete&#39;)\n&gt;&gt;&gt; r &#x3D; requests.head(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)\n&gt;&gt;&gt; r &#x3D; requests.options(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)</code></pre></blockquote>\n<ol start=\"2\">\n<li><h2 id=\"Passing-Parameters-In-URLs\"><a href=\"#Passing-Parameters-In-URLs\" class=\"headerlink\" title=\"Passing Parameters In URLs\"></a>Passing Parameters In URLs</h2></li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>You often want to send some sort of data in the URL’s query string. If you were constructing the URL by hand, this data would be given as key/value pairs in the URL after a question mark, e.g. <code>httpbin.org/get?key=val</code>. Requests allows you to provide these arguments as a dictionary of strings, using the <code>params</code> keyword argument. As an example, if you wanted to pass <code>key1=value1</code> and <code>key2=value2</code> to <code>httpbin.org/get</code>, you would use the following code:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; payload &#x3D; &#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;&#125;\n&gt;&gt;&gt; r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;, params&#x3D;payload)</code></pre>\n\n<p>You can see that the URL has been correctly encoded by printing the URL:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; print(r.url)\nhttps:&#x2F;&#x2F;httpbin.org&#x2F;get?key2&#x3D;value2&amp;key1&#x3D;value1</code></pre>\n\n<p>Note that any dictionary key whose value is <code>None</code> will not be added to the URL’s query string.</p></blockquote>\n</blockquote>\n<h2 id=\"第三步：利用bs和re来对爬取内容做处理\"><a href=\"#第三步：利用bs和re来对爬取内容做处理\" class=\"headerlink\" title=\"第三步：利用bs和re来对爬取内容做处理\"></a>第三步：利用bs和re来对爬取内容做处理</h2><h4 id=\"bs4：一级处理（可跳过）\"><a href=\"#bs4：一级处理（可跳过）\" class=\"headerlink\" title=\"bs4：一级处理（可跳过）\"></a>bs4：一级处理（可跳过）</h4><ol>\n<li><p>使用手册：</p>\n<p>​    <a href=\"https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/\">Beautiful Soup 4.4.0 文档 — Beautiful Soup 4.2.0 中文 文档</a></p>\n</li>\n<li><p>简明教程：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><p>创建BeautifulSoup对象：</p>\n<p>​    将一段文档传入BeautifulSoup 的构造方法,就能得到一个文档的对象, 可以传入一段<strong>字符串</strong>或一个<strong>文件</strong>句柄.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">soup &#x3D; BeautifulSoup(open(&quot;index.html&quot;)) # 方法一：读取文件\n\nsoup &#x3D; BeautifulSoup(&quot;&lt;html&gt;data&lt;&#x2F;html&gt;&quot;) # 方法二：读取现成、字符串形式的html代码片段</code></pre>\n\n<p>​        首先,文档被转换成Unicode,并且HTML的实例都被转换成Unicode编码</p>\n <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">BeautifulSoup(&quot;Sacr&amp;eacute; bleu!&quot;)\n&lt;html&gt;&lt;head&gt;&lt;&#x2F;head&gt;&lt;body&gt;Sacré bleu!&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre>\n<p>​        然后,Beautiful Soup选择最合适的解析器来解析这段文档,如果手动指定解析器那么Beautiful Soup会选择指定的解析器来解析文档.(参考 <a href=\"https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#xml\">解析成XML</a> ).</p>\n</li>\n<li><p>对文档进行处理：</p>\n<p>​    Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种: <code>Tag</code> , <code>NavigableString</code> , <code>BeautifulSoup</code> , <code>Comment</code> .</p>\n<p>​    <strong><code>Tag</code><strong>：即原文档中的标签，可以通过</strong>name</strong>和<strong>attrs</strong>来直接调用对应的名称和属性，请<em>务必注意属性的返回值！</em>我们还可以通过<strong>string</strong>来调用内容，但是内容不能被直接修改</p>\n<p>​                <del>如果只想得到tag中包含的文本内容,那么可以嗲用 <code>get_text()</code> 方法,这个方法获取到tag中包含的所有文版内容包括子孙tag中的内容,并将结果作为Unicode字符串返回</del></p>\n<p>​    **<code>NavigableString</code>**：字符串常被包含在tag内.Beautiful Soup用 <code>NavigableString</code> 类来包装tag中的字符串，tag中包含的字符串不能编辑,但是可以被替换成其它的字符串,用 <a href=\"https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#replace-with\">replace_with()</a> 方法:</p>\n<ol>\n<li><p>进行文档遍历：低效</p>\n</li>\n<li><p>文档搜索（√）：</p>\n<ol>\n<li><p>select()css选择器，支持id(#)，class(.)，tag，父子选择等css匹配规则</p>\n<p>​    example: bs.select(a[class = ‘hello!’ ])</p>\n</li>\n<li><p>find_all()几乎同select，但是支持了正则表达式</p>\n<p>​    example: bs.find_all(‘div’, class_=’item’) / bs.find_all(re.compile(“a”))</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol></blockquote>\n</li>\n</ol>\n<h4 id=\"re：二级处理（从根本解决问题）\"><a href=\"#re：二级处理（从根本解决问题）\" class=\"headerlink\" title=\"re：二级处理（从根本解决问题）\"></a>re：二级处理（从根本解决问题）</h4><ol>\n<li><p>正则表达式使用手册：</p>\n<p>​    <a href=\"onenote:https://d.docs.live.net/a85fd0932d62f536/文档/JBR_Bunjie/开发笔记/前端开发笔记/H5.one#正则表达式&section-id={95089512-DFC7-49F9-A7C1-466EEB6B429A}&page-id={262783D3-2B94-4AF5-877C-BDB6CBCD4806}&end\">正则表达式</a> (<a href=\"https://onedrive.live.com/view.aspx?resid=A85FD0932D62F536!617&id=documents&wd=target(%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/H5.one%7C95089512-DFC7-49F9-A7C1-466EEB6B429A/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%7C262783D3-2B94-4AF5-877C-BDB6CBCD4806/)\">Web 视图</a>)</p>\n</li>\n<li><p>re模块使用手册：</p>\n<p>​    <a href=\"onenote:https://d.docs.live.net/a85fd0932d62f536/文档/JBR_Bunjie/开发笔记/Linux_Windows/python.one#re模块&section-id={973AA90C-36D3-413E-AB01-5823E7C25713}&page-id={6914C45C-28DA-48B3-A552-0A19C3C9064D}&end\">re模块</a> (<a href=\"https://onedrive.live.com/view.aspx?resid=A85FD0932D62F536!617&id=documents&wd=target(%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/Linux_Windows/python.one%7C973AA90C-36D3-413E-AB01-5823E7C25713/re%E6%A8%A1%E5%9D%97%7C6914C45C-28DA-48B3-A552-0A19C3C9064D/)\">Web 视图</a>)</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 全部html代码已经在前面的url处理中完全取得\ndef get_information(html):\n\tglobal num\n\tbs &#x3D; BeautifulSoup(html, &#39;lxml&#39;) # 推荐使用lxml作为解析器,因为效率更高.\n\n\tfind_movie_address &#x3D; re.compile(r&#39;&lt;a href&#x3D;&quot;(.*?)&quot;&gt;&#39;, re.S)\n\tfind_title &#x3D; re.compile(r&#39;&lt;span class&#x3D;&quot;title&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;, re.S)\n\tfind_more_title &#x3D; re.compile(r&#39;&lt;span class&#x3D;&quot;other&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;, re.S)\n\n\tfor item in bs.find_all(&#39;div&#39;, class_&#x3D;&#39;item&#39;):\n\t\tprint(&#39;-&#39;*30)\n\t\tprint(num + 1)\n\t\titem &#x3D; str(item)\n\t\tmovie_address_data.append(re.findall(find_movie_address, item)[0])\n\n\t\tif len(re.findall(find_title, item)) &#x3D;&#x3D; 2:   # 不是所有影片都有“两个title”的class\n\t\t\tmovie_title_data.append(re.findall(find_title, item)[0])\n\t\t\tmovie_traditional_title_data.append(re.findall(find_title, item)[1])\n\t\telse:\n\t\t\tmovie_title_data.append(re.findall(find_title, item)[0])\n\t\t\tmovie_traditional_title_data.append(&#39; &#39;)  # 用空格&#39; &#39;来代表该电影是中文电影，没有外文“原名”\n\n\t\tmovie_more_title_data.append(re.findall(find_more_title, item)[0])\n\n\t\ttemp &#x3D; movie_title_data[num] + movie_traditional_title_data[num] + movie_more_title_data[num]\n\t\tmovie_title_collection.append(temp)\n\n\t\tprint(movie_address_data[num])\n\t\tprint(movie_title_collection[num])\n\t\tnum &#x3D; num + 1\n\t# 模拟正常浏览网页的停留时间\n\ttime.sleep(random.random() * 100)</code></pre>\n\n<h2 id=\"第四步：保存数据\"><a href=\"#第四步：保存数据\" class=\"headerlink\" title=\"第四步：保存数据\"></a>第四步：保存数据</h2><ol>\n<li><p>excel表：<a href=\"http://www.python-excel.org/\">Python Resources for working with Excel - Working with Excel Files in Python (python-excel.org)</a></p>\n<p>​    xlwings：<a href=\"https://www.xlwings.org/\">Automate Excel with Python (Open Source and Free) (xlwings.org)</a></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># xlwings示例代码：\n\nimport xlwings as xw\n\n#连接到excel\nworkbook &#x3D; xw.Book(r&#39;path&#x2F;myexcel.xlsx&#39;)#连接excel文件\n#连接到指定单元格\ndata_range &#x3D; workbook.sheets(&#39;Sheet1&#39;).range(&#39;A1&#39;)\n#写入数据\ndata_range.value &#x3D; [1,2,3]\n#保存\nworkbook.save()</code></pre></li>\n</ol>\n<p>以上步骤综合即是一个完整的python爬虫程序</p>\n","text":"第一步：引入包并准备临时存储数据的列表import urllib.request import urllib.parse import requests from bs4 import BeautifulSoup import re import random, time # 设...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"11 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%BC%95%E5%85%A5%E5%8C%85%E5%B9%B6%E5%87%86%E5%A4%87%E4%B8%B4%E6%97%B6%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">第一步：引入包并准备临时存储数据的列表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E8%8E%B7%E5%8F%96%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9%EF%BC%88%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%89\"><span class=\"toc-text\">第二步：获取网页内容（源代码）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%87%E7%94%A8urllib\"><span class=\"toc-text\">采用urllib</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%87%E7%94%A8requests\"><span class=\"toc-text\">采用requests</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Passing-Parameters-In-URLs\"><span class=\"toc-text\">Passing Parameters In URLs</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%88%A9%E7%94%A8bs%E5%92%8Cre%E6%9D%A5%E5%AF%B9%E7%88%AC%E5%8F%96%E5%86%85%E5%AE%B9%E5%81%9A%E5%A4%84%E7%90%86\"><span class=\"toc-text\">第三步：利用bs和re来对爬取内容做处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#bs4%EF%BC%9A%E4%B8%80%E7%BA%A7%E5%A4%84%E7%90%86%EF%BC%88%E5%8F%AF%E8%B7%B3%E8%BF%87%EF%BC%89\"><span class=\"toc-text\">bs4：一级处理（可跳过）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#re%EF%BC%9A%E4%BA%8C%E7%BA%A7%E5%A4%84%E7%90%86%EF%BC%88%E4%BB%8E%E6%A0%B9%E6%9C%AC%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%EF%BC%89\"><span class=\"toc-text\">re：二级处理（从根本解决问题）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">第四步：保存数据</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Python/Requirements.txt","date":"2023-03-07T16:14:45.608Z","updated":"2022-02-09T08:50:30.000Z","comments":true,"path":"api/articles/Language Learning/Python/Requirements.txt.json","keywords":null,"cover":[],"text":"requirements.txt in Python project写python程序的时候，我们经常的会下载很多外部模块，当我们编写完成后，准备在其他设备上部署的时候，那么新设备上需要安装我当前环境下的所有包——非常麻烦 我们可以利用pip来生成一个requirements.t...","link":"","photos":[],"count_time":{"symbolsCount":879,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Python/Python拷贝与赋值","date":"2023-03-07T16:14:45.602Z","updated":"2022-04-05T13:11:46.000Z","comments":true,"path":"api/articles/Language Learning/Python/Python拷贝与赋值.json","keywords":null,"cover":null,"text":"深浅拷贝概念与使用Reference： 彻底理解Python中的”指针”_杰克小麻雀的博客-CSDN博客_python有指针吗 deep copy and shallow copy浅拷贝，指的是重新分配一块内存，创建一个新的对象，但里面的元素是原对象中各个子对象的引用 深拷贝，是...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
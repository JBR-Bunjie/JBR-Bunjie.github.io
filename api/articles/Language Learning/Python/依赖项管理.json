{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Python/依赖项管理","date":"2023-03-07T16:14:45.640Z","updated":"2022-09-14T10:08:28.000Z","comments":true,"path":"api/articles/Language Learning/Python/依赖项管理.json","keywords":null,"cover":null,"content":"<h1\r\nid=\"依赖项管理requirements.txt-setup.py及更多\">依赖项管理：Requirements.txt,\r\nSetup.py及更多</h1>\r\n<h2 id=\"write-a-setup.py\">Write a setup.py</h2>\r\n<blockquote>\r\n<p>remember what you use, or try to use some tools to control the\r\ndependenies efficiently and fine</p>\r\n</blockquote>\r\n<p>Yes, we can write this file in multiple ways - python is a script\r\nlanguage after all.</p>\r\n<p>However, what's the most imporant part?</p>\r\n<p>I think we should follow the codes below:</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from setuptools import setup, find_packages()\nsetup(\n    # metadata with info\n    name&#x3D;&#39;SetupFileExample&#39;,\n    version&#x3D;&#39;0.1&#39;,\n    author&#x3D;&#39;JBR&#39;,\n    author_email&#x3D;&#39;jbr@example.com&#39;,\n    packages&#x3D;find_packages(),\n    description&#x3D;&#39;Useful towel-related stuff.&#39;,\n    # dependencies \n    install_requires&#x3D;[\n        &quot;Django &gt;&#x3D; 1.1.1&quot;,\n        &quot;caldav &#x3D;&#x3D; 0.1.4&quot;,\n    ],\n)</code></pre>\r\n<p>As for metadata, you can use this chart:</p>\r\n<figure>\r\n<img\r\nsrc=\"https://pic3.zhimg.com/80/v2-4563e810d05ec25ce283c7f54a271e2e_1440w.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>and, the next one is a problem: how can we remember the packages we\r\ninstalled thousands of years ago?</p>\r\n<p>well, thanks to the pip-tools we list at link4 - Link below, we can\r\nclearly see the main dependencies and decide which to list. With that,\r\nwe can figure out what's important</p>\r\n<h2\r\nid=\"why-we-need-setup.py-even-if-requirements.txt-already-exists\">Why we\r\nneed setup.py even if requirements.txt already exists?</h2>\r\n<p>see link3 - it's pretty nice!</p>\r\n<h2 id=\"links\">Links：</h2>\r\n<ul>\r\n<li><strong><em>highly recommend to read:</em></strong> <a\r\nhref=\"https://godatadriven.com/blog/a-practical-guide-to-using-setup-py/\">A\r\nPractical Guide to Using Setup.py - GoDataDriven</a></li>\r\n<li><strong>recommend to read:</strong> <a\r\nhref=\"https://blog.konghy.cn/2018/04/29/setup-dot-py/\">Python\r\n库打包分发(setup.py 编写)简易指南 | Huoty's Blog (konghy.cn)</a></li>\r\n<li><strong>recommend to read:</strong> <a\r\nhref=\"https://pyzh.readthedocs.io/en/latest/python-setup-dot-py-vs-requirements-dot-txt.html#setup-py-vs-requirements-txt\">12.\r\nsetup.py vs requirements.txt — 一起写Python文章，一起看Python文章\r\n(pyzh.readthedocs.io)</a></li>\r\n<li><a href=\"https://cloud.tencent.com/developer/article/1943416\">别再用\r\nrequirements.txt 来管理依赖了 - 腾讯云开发者社区-腾讯云\r\n(tencent.com)</a></li>\r\n<li><a href=\"https://github.com/jazzband/pip-tools\">jazzband/pip-tools:\r\nA set of tools to keep your pinned Python dependencies fresh.\r\n(github.com)</a></li>\r\n<li><a href=\"https://zhuanlan.zhihu.com/p/480534599\">Python 中的\r\nrequirements.txt 与 setup.py - 知乎 (zhihu.com)</a></li>\r\n<li><a href=\"https://docs.python.org/3/distutils/setupscript.html\">2.\r\nWriting the Setup Script — Python 3.10.7 documentation</a></li>\r\n<li><a\r\nhref=\"https://setuptools.pypa.io/en/latest/setuptools.html\">Building and\r\nDistributing Packages with Setuptools - setuptools 65.3.0.post20220826\r\ndocumentation (pypa.io)</a></li>\r\n</ul>\r\n","text":"依赖项管理：Requirements.txt, Setup.py及更多 Write a setup.py remember what you use, or try to use some tools to control the dependenies efficiently ...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E9%A1%B9%E7%AE%A1%E7%90%86requirements.txt-setup.py%E5%8F%8A%E6%9B%B4%E5%A4%9A\"><span class=\"toc-text\">依赖项管理：Requirements.txt,\r\nSetup.py及更多</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#write-a-setup.py\"><span class=\"toc-text\">Write a setup.py</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#why-we-need-setup.py-even-if-requirements.txt-already-exists\"><span class=\"toc-text\">Why we\r\nneed setup.py even if requirements.txt already exists?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#links\"><span class=\"toc-text\">Links：</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Python/数组","date":"2023-03-07T16:14:45.646Z","updated":"2022-02-24T13:22:22.000Z","comments":true,"path":"api/articles/Language Learning/Python/数组.json","keywords":null,"cover":null,"text":"二维数组的定义 创建一个二维数组？还是一个n*n的二维数组？ 1. 直接定义： a &#x3D; [[]] 2.众多间接定义？ a.直接地间接创建 a&#x3D;[] arrays&#x3D;[a*3] 注意！这里的arrays并不是[[], [], []]，而是[[]] b.通...","link":"","photos":[],"count_time":{"symbolsCount":629,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Python/使用python解决文件自动化处理的方案及zipfile模块的介绍","date":"2023-03-07T16:14:45.637Z","updated":"2022-02-24T13:21:30.000Z","comments":true,"path":"api/articles/Language Learning/Python/使用python解决文件自动化处理的方案及zipfile模块的介绍.json","keywords":null,"cover":null,"text":"使用Python解决文件自动化改名和命名 原因：获取压缩文件的实际名称： 压缩文件名称使用了随机字符，而原文件夹作为压缩文件的根目录来保存，为了避免打开压缩文件才能知道打开的到底是哪个文件，需要将压缩文件内的文件夹名复制出来为外部压缩文件改名 采用方案： 解压缩模块：zipfil...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Python/asyncio","date":"2023-03-07T16:14:45.585Z","updated":"2023-02-15T09:15:54.474Z","comments":true,"path":"api/articles/Language Learning/Python/asyncio.json","keywords":null,"cover":null,"content":"<h1 id=\"Python-Asynchronous-I-O-Asyncio\"><a href=\"#Python-Asynchronous-I-O-Asyncio\" class=\"headerlink\" title=\"Python Asynchronous I/O - Asyncio\"></a>Python Asynchronous I/O - Asyncio</h1><h2 id=\"intro：\"><a href=\"#intro：\" class=\"headerlink\" title=\"intro：\"></a>intro：</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>asyncio is a library to write <strong>concurrent</strong> code using the <strong>async/await</strong> syntax.</p></blockquote>\n<h2 id=\"Detail：\"><a href=\"#Detail：\" class=\"headerlink\" title=\"Detail：\"></a>Detail：</h2><p>example01:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import asyncio\nimport random\n\nasync def myCoroutine(id):\n    process_time &#x3D; random.randint(1,5)\n    await asyncio.sleep(process_time)\n    print(&quot;Coroutine: &#123;&#125;, has successfully completed after &#123;&#125; seconds&quot;.format(id, process_time))\n\nasync def main():\n    tasks &#x3D; []\n    for i in range(10):\n        tasks.append(asyncio.ensure_future(myCoroutine(i)))\n\n    await asyncio.gather(*tasks)\n\n\nloop &#x3D; asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(main())\nfinally:\n    loop.close()</code></pre>\n\n<p>explanation:</p>\n<p>example02:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import asyncio\nimport time\n\nasync def say_after(delay, what):\n    await asyncio.sleep(delay)\n    print(what)\n    print(f&quot;end: &#123;time.strftime(&#39;%X&#39;)&#125;&quot;)\n\nasync def main():\n    print(f&quot;started at &#123;time.strftime(&#39;%X&#39;)&#125;&quot;)\n    task1 &#x3D; asyncio.create_task(say_after(1, &#39;hello&#39;))\n    task2 &#x3D; asyncio.create_task(say_after(2, &#39;world&#39;))\n    # Wait until both tasks are completed (should take around 2 seconds.)\n\n    await task1\n    # time.sleep(1)\n    # await say_after(2, f&quot;&#123;time.strftime(&#39;%X&#39;)&#125;&quot;) # 延迟一秒运行，与上方task1耗时一直\n    # await say_after(2, f&quot;&#123;time.strftime(&#39;%X&#39;)&#125;&quot;)\n    await task2\n    await say_after(2, f&quot;&#123;time.strftime(&#39;%X&#39;)&#125;&quot;) # 延迟两秒运行，task1与2并行执行，总用时2s，故有2s\n    await say_after(2, f&quot;&#123;time.strftime(&#39;%X&#39;)&#125;&quot;)\n\t# “coroutines”互相被等待，同时其并不会加入并行的对列，会等到其上方所有任务完成再开始执行\n    \n    print(f&quot;finished at &#123;time.strftime(&#39;%X&#39;)&#125;&quot;)\n\nasyncio.run(main())</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"Link：\"><a href=\"#Link：\" class=\"headerlink\" title=\"Link：\"></a>Link：</h2><ol>\n<li><a href=\"https://docs.python.org/3/library/asyncio.html\">asyncio — Asynchronous I/O — Python 3.10.7 documentation</a></li>\n</ol>\n","text":"Python Asynchronous I/O - Asynciointro： asyncio is a library to write concurrent code using the async/await syntax. Detail：example01: import...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Python-Asynchronous-I-O-Asyncio\"><span class=\"toc-text\">Python Asynchronous I&#x2F;O - Asyncio</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#intro%EF%BC%9A\"><span class=\"toc-text\">intro：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Detail%EF%BC%9A\"><span class=\"toc-text\">Detail：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Link%EF%BC%9A\"><span class=\"toc-text\">Link：</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Python/install certain python version in Linux","date":"2023-03-07T16:14:45.587Z","updated":"2022-01-08T15:15:13.000Z","comments":true,"path":"api/articles/Language Learning/Python/install certain python version in Linux.json","keywords":null,"cover":null,"text":"install certain python version in Linux-1: for Ubuntu:just: apt install python3.8 Zero, try to download python3.8 through yumyum list | grep...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/MARK LANGUAGE/XML","date":"2023-03-07T16:14:45.575Z","updated":"2022-02-12T05:48:09.000Z","comments":true,"path":"api/articles/Language Learning/MARK LANGUAGE/XML.json","keywords":null,"cover":null,"text":"XML 简介 – 什么是 XML？ | 菜鸟教程 (runoob.com) ","link":"","photos":[],"count_time":{"symbolsCount":38,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
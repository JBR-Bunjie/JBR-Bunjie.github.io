{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/yeild","date":"2023-03-07T16:14:45.230Z","updated":"2023-01-31T13:44:00.227Z","comments":true,"path":"api/articles/Language Learning/yeild.json","keywords":null,"cover":null,"content":"<p>关键词：<code>yeild关键字</code>，<code>yeild return</code>，<code>生成器函数</code>，<code>协程</code></p>\n<h2 id=\"Yeild-in-JS\"><a href=\"#Yeild-in-JS\" class=\"headerlink\" title=\"Yeild in JS\"></a>Yeild in JS</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/yield\">yield - JavaScript | MDN (mozilla.org)</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*\">function* - JavaScript | MDN (mozilla.org)</a></p>\n<p>简单地说，Yeild可以在JS中暂停一个生成器函数，当我们再次呼叫这个生成器函数示例时，我们就可以该示例相关的一次结果</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">function* foo(index) &#123;\n  while (index &lt; 5) &#123;\n    yield index;\n    index++;\n  &#125;\n&#125;\n\nconst iterator &#x3D; foo(0);\n\nconsole.log(iterator.next().value);\n&#x2F;&#x2F; Expected output: 0\n\nconsole.log(iterator.next().value);\n&#x2F;&#x2F; Expected output: 1\n\nconsole.log(iterator.next().value); &#x2F;&#x2F; 2\nconsole.log(iterator.next().value); &#x2F;&#x2F; 3\nconsole.log(iterator.next().value); &#x2F;&#x2F; 4\nconsole.log(iterator.next().value); &#x2F;&#x2F; undefined</code></pre>\n\n<h2 id=\"Yeild-in-Python\"><a href=\"#Yeild-in-Python\" class=\"headerlink\" title=\"Yeild in Python\"></a>Yeild in Python</h2><p><a href=\"https://zhuanlan.zhihu.com/p/268605982\">如何理解Python中的yield用法? - 知乎 (zhihu.com)</a></p>\n<p>事实上，Python中的yield与JS中的yield十分相近：同样是对规则的定义、会暂停执行函数，返回generator对象等等。</p>\n<p>不同的是，Python不需要使用类似<code>function*</code>这样的单独的定义字符。</p>\n<p>不过，在Python中我们可以直接使用for等方法来直接遍历整个生成器对象来快速获得全部的结果。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def fab(max): \n    n, a, b &#x3D; 0, 0, 1 \n    while n &lt; max: \n        yield b      # 使用 yield\n        # print b \n        a, b &#x3D; b, a + b \n        n &#x3D; n + 1\n \nfor n in fab(5): \n    print n</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>生成器就是一个使用了yield关键字的函数，此函数可返回生成器对象</p></blockquote>\n<p>对了，我们在Python中还可以使用send方法来在实时调用中给生成器函数传入我们需要的值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import time\n\ndef fib(n):\n    index &#x3D; 0\n    a &#x3D; 0\n    b &#x3D; 1\n\n    while index &lt; n:\n        sleep &#x3D; yield b\n        print(&#39;等待%s秒&#39; %sleep)\n        time.sleep(sleep)\n        a,b &#x3D; b, a+b\n        index +&#x3D; 1\n\nfib &#x3D; fib(20)\nprint(fib.send(None))   # 效果等同于print(next(fib))\nprint(fib.send(2))\nprint(fib.send(3))\nprint(fib.send(4))\n\n# -----output:-----\n# </code></pre>\n\n\n\n<p>~更多示例：<a href=\"https://blog.csdn.net/Z2572862506/article/details/128766574\">Python 中 yield 的用法理解 与 send() 函数对生成器赋值_怎样才能回到过去的博客-CSDN博客</a> ~</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def test():\n    print(&quot;--------Test starting------&quot;)\n    while True:\n        print(&quot;Stop here, position NO.0&quot;)\n        a &#x3D; &quot;a is unassigned!!!&quot;\n        print(a)\n        print(&quot;Stop here, position NO.1&quot;)\n        a &#x3D; yield &quot;--------Test over----------\\n&quot;\n        print(a)\n        print(&quot;Stop here, position NO.2&quot;)\n\n\nt &#x3D; test()\nprint(&quot;*&quot; * 20 + &quot;Next 1 Start&quot; + &quot;*&quot; * 20 + &quot;\\n&quot;)\nprint(next(t))\nprint(&quot;*&quot; * 20 + &quot;Next 2 Start&quot; + &quot;*&quot; * 20 + &quot;\\n&quot;)\nprint(next(t))\nprint(&quot;*&quot; * 20 + &quot;Next 3 Start&quot; + &quot;*&quot; * 20 + &quot;\\n&quot;)\nprint(t.send(&quot;a is assigned!&quot;))\n\n# ********************Next 1 Start********************\n# \n# --------Test starting------\n# Stop here, position NO.0\n# a is unassigned!!!\n# Stop here, position NO.1\n# --------Test over----------\n# \n# ********************Next 2 Start********************\n# \n# None\n# Stop here, position NO.2\n# Stop here, position NO.0\n# a is unassigned!!!\n# Stop here, position NO.1\n# --------Test over----------\n# \n# ********************Next 3 Start********************\n#\n# a is assigned!\n# Stop here, position NO.2\n# Stop here, position NO.0\n# a is unassigned!!!\n# Stop here, position NO.1\n# --------Test over----------\n#\n\n\n# 规律总结：\n# 1. 生成器函数实例化时，是不会执行的\n# 2. 当调用next函数时，我们的函数才会开始执行，每次执行时只会执行到yeild处一次\n# \t2.1. 初次执行时，函数是从头开始执行，执行到第一个yeild的地方放回yeild后面的值，如果没有外部传值，则yeild本身返回None\n#\t2.2. 后续执行时，函数从上一次yeild中断的地方重新开始执行直到下一个yeild出现（然后在那个地方再次中断）\n# 3. 我们可以通过send向生成器传值，这是JS所没有的</code></pre>\n\n\n\n<h3 id=\"小拓展\"><a href=\"#小拓展\" class=\"headerlink\" title=\"小拓展\"></a>小拓展</h3><p><a href=\"https://zhuanlan.zhihu.com/p/267966140\">深入理解Python 中的 yield from语法 - 知乎 (zhihu.com)</a></p>\n<p>就Python而言，它还有更多的语法糖：<code>yeild from</code>:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;使用yield\n\n&gt;# 字符串\n&gt;astr&#x3D;&#39;ABC&#39;\n&gt;# 列表\n&gt;alist&#x3D;[1,2,3]\n&gt;# 字典\n&gt;adict&#x3D;&#123;&quot;name&quot;:&quot;wangbm&quot;,&quot;age&quot;:18&#125;\n&gt;# 生成器\n&gt;agen&#x3D;(i for i in range(4,8))\n\n&gt;def gen(*args, **kw):\n   for item in args:\n       for i in item:\n           yield i\n\n&gt;new_list&#x3D;gen(astr, alist, adict, agen)\n&gt;print(list(new_list))\n&gt;# [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, 1, 2, 3, &#39;name&#39;, &#39;age&#39;, 4, 5, 6, 7]\n&gt;使用yield from\n\n&gt;# 字符串\n&gt;astr&#x3D;&#39;ABC&#39;\n&gt;# 列表\n&gt;alist&#x3D;[1,2,3]\n&gt;# 字典\n&gt;adict&#x3D;&#123;&quot;name&quot;:&quot;wangbm&quot;,&quot;age&quot;:18&#125;\n&gt;# 生成器\n&gt;agen&#x3D;(i for i in range(4,8))\n\n&gt;def gen(*args, **kw):\n   for item in args:\n       yield from item\n\n&gt;new_list&#x3D;gen(astr, alist, adict, agen)\n&gt;print(list(new_list))\n&gt;# [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, 1, 2, 3, &#39;name&#39;, &#39;age&#39;, 4, 5, 6, 7]</code></pre></blockquote>\n<h2 id=\"Yeild-in-C-and-Unity\"><a href=\"#Yeild-in-C-and-Unity\" class=\"headerlink\" title=\"Yeild in C# and Unity\"></a>Yeild in C# and Unity</h2>","text":"关键词：yeild关键字，yeild return，生成器函数，协程 Yeild in JSyield - JavaScript | MDN (mozilla.org) function* - JavaScript | MDN (mozilla.org) 简单地说，Yeild可以...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Yeild-in-JS\"><span class=\"toc-text\">Yeild in JS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Yeild-in-Python\"><span class=\"toc-text\">Yeild in Python</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E6%8B%93%E5%B1%95\"><span class=\"toc-text\">小拓展</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Yeild-in-C-and-Unity\"><span class=\"toc-text\">Yeild in C# and Unity</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/伪代码","date":"2023-03-07T16:14:45.236Z","updated":"2021-09-16T15:58:35.000Z","comments":true,"path":"api/articles/Language Learning/伪代码.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/regex","date":"2023-03-07T16:14:45.228Z","updated":"2022-02-19T13:53:31.000Z","comments":true,"path":"api/articles/Language Learning/regex.json","keywords":null,"cover":null,"text":"当你使用多个捕获组时，请务必小心NULL！这是某个捕获组未能捕获任何内容的结果！ 验证：是否有bug 在线正则表达式测试 中文 (oschina.net) 在线正则验证 英文 regex101: build, test, and debug regex 在线验证正则表达式结构：R...","link":"","photos":[],"count_time":{"symbolsCount":372,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/CPP/Stdout与Stderr","date":"2023-03-07T16:14:45.251Z","updated":"2022-01-30T14:27:34.000Z","comments":true,"path":"api/articles/Language Learning/CPP/Stdout与Stderr.json","keywords":null,"cover":null,"content":"<h1 id=\"stderr和stdout详细解说\"><a href=\"#stderr和stdout详细解说\" class=\"headerlink\" title=\"stderr和stdout详细解说\"></a><a href=\"https://www.cnblogs.com/zhangyabin---acm/p/3203745.html\">stderr和stdout详细解说</a></h1><p>今天又查了一下fprintf，其中对第一个参数stderr特别感兴趣。</p>\n<p>int fprintf(FILE *stream,char *format,[argument])；</p>\n<p>在此之前先区分一下：printf，sprintf，fprintf。</p>\n<p>1，printf就是标准输出，在屏幕上打印出一段字符串来。</p>\n<p>2，sprintf就是把格式化的数据写入到某个字符串中。返回值字符串的长度。</p>\n<p>3，fprintf是用于文件操作。</p>\n<p>   原型：int fprintf(FILE *stream,char *format,[argument])；    </p>\n<p>   功能：fprintf()函数根据指定的format(格式)发送信息(参数)到由stream(流)指定的文件.因此fprintf()可以使得信息输出到指 定的文件。</p>\n<p>   例子:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">char name[20] &#x3D; &quot;lucy&quot;; \n    FILE *out;\n    out &#x3D; fopen( &quot;output.txt&quot;, &quot;w&quot; );\n    if( out !&#x3D; NULL )\n    fprintf( out, &quot;Hello %s\\n&quot;, name );</code></pre>\n\n<p>  返回值：若成功则返回输出字符数，若输出出错则返回负值。</p>\n<p>好了，以上到此为止。</p>\n<p>然后深挖stdout，stderr。</p>\n<p>stdout, stdin, stderr的中文名字分别是标准输出，标准输入和标准错误。</p>\n<p>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////今天时间仓促，以下摘自</p>\n<p><a href=\"http://blog.sina.com.cn/s/blog_912673ce01013qq9.html%EF%BC%88%E5%8D%81%E5%88%86%E6%84%9F%E8%B0%A2%EF%BC%89\">http://blog.sina.com.cn/s/blog_912673ce01013qq9.html（十分感谢）</a></p>\n<p>1，我们知道，标准输出和标准错误默认都是将信息输出到终端上，那么他们有什么区别呢？让我们来看个题目：</p>\n<p>问题：下面程序的输出是什么？（intel笔试2011）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int main() &#123;\n    fprintf(stdout,&quot;Hello &quot;);\n    fprintf(stderr,&quot;World!&quot;);\n    return0;\n&#125;</code></pre>\n\n<p>解答：这段代码的输出是什么呢？你可以快速的将代码敲入你电脑上（当然，拷贝更快），然后发现输出是</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>World!Hello</p></blockquote>\n<p>这是为什么呢？在默认情况下，stdout是行缓冲的，他的输出会放在一个buffer里面，只有到换行的时候，才会输出到屏幕。而stderr是无缓冲的，会直接输出，举例来说就是printf(stdout, “xxxx”) 和 printf(stdout, “xxxx\\n”)，前者会憋住，直到遇到新行才会一起输出。而printf(stderr, “xxxxx”)，不管有么有\\n，都输出。</p>\n<p>2，</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">fprintf(stderr, &quot;Can&#39;t open it!\\n&quot;);\nfprintf(stdout, &quot;Can&#39;t open it!\\n&quot;);\nprintf(&quot;Can&#39;t open it!\\n&quot;);</code></pre>\n\n<p>这3句效果不是一样啊，有什么区别吗？</p>\n<p>有区别。<br>stdout – 标准输出设备 (printf(“..”)) 同 stdout。<br>stderr – 标准错误输出设备<br>两者默认向屏幕输出。<br>但如果用转向标准输出到磁盘文件，则可看出两者区别。stdout输出到磁盘文件，stderr在屏幕。</p>\n<p>例如：<br>my.exe<br>Can’t open it!<br>Can’t open it!<br>Can’t open it!</p>\n<p>转向标准输出到磁盘文件tmp.txt<br>my.exe &gt; tmp.txt<br>Can’t open it!</p>\n<p>用TYPE 看 tmp.txt的内容：<br>TYPE tmp.txt<br>Can’t open it!<br>Can’t open it!</p>\n<p>总结：注意1，点，2点即可！</p>\n","text":"stderr和stdout详细解说今天又查了一下fprintf，其中对第一个参数stderr特别感兴趣。 int fprintf(FILE *stream,char *format,[argument])； 在此之前先区分一下：printf，sprintf，fprintf。 1，...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#stderr%E5%92%8Cstdout%E8%AF%A6%E7%BB%86%E8%A7%A3%E8%AF%B4\"><span class=\"toc-text\">stderr和stdout详细解说</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/CPP/[C]Cpp Class Source and Header","date":"2023-03-07T16:14:45.254Z","updated":"2021-10-03T06:05:05.000Z","comments":true,"path":"api/articles/Language Learning/CPP/[C]Cpp Class Source and Header.json","keywords":null,"cover":null,"text":"the difference among cpp class, cpp header and cpp source其实不该立这个标题的 现在看到了clion中的class就是默认同时创建同名的cpp source和header file各一个，大概就是在header中定义，然后再...","link":"","photos":[],"count_time":{"symbolsCount":156,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/CPP/Cpp字符串处理与正则表达式","date":"2023-03-07T16:14:45.247Z","updated":"2021-10-06T09:00:35.000Z","comments":true,"path":"api/articles/Language Learning/CPP/Cpp字符串处理与正则表达式.json","keywords":null,"cover":[],"text":"part0:默认初始化 string s; &#x2F;&#x2F;s是一个空串 part1在C语言中，string 是定义一个字符串，存储的是一段如“abcd”的数据，而且最后还有一个结束符’\\0’;char 是定义一个字符，存储一个字符，占一个字节。 在C++中，string...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
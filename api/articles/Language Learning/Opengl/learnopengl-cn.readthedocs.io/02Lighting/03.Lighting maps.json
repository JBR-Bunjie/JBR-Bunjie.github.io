{"title":"learningOpenGl Chapter 2.4","uid":"ad9f08ec3444afaa1c2eddcf989f6462","slug":"Language Learning/Opengl/learnopengl-cn.readthedocs.io/02Lighting/03.Lighting maps","date":"2023-03-08T02:31:08.000Z","updated":"2023-10-27T19:53:14.000Z","comments":true,"path":"api/articles/Language Learning/Opengl/learnopengl-cn.readthedocs.io/02Lighting/03.Lighting maps.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<p>使用：“<strong>光照贴图</strong>”</p>\r\n<h2 id=\"problem-4\">Problem 4:</h2>\r\n<blockquote>\r\n<p>Also add something they call an emission map which is a texture that\r\nstores emission values per fragment. Emission values are colors an\r\nobject may <em>emit</em> as if it contains a light source itself; this\r\nway an object can glow regardless of the light conditions. Emission maps\r\nare often what you see when objects in a game glow (like <a\r\nhref=\"https://learnopengl.com/img/lighting/lighting_maps_eyes_robot.jpg\">eyes\r\nof a robot</a>, or <a\r\nhref=\"https://learnopengl.com/img/lighting/lighting_maps_strips_container.png\">light\r\nstrips on a container</a>). Add the <a\r\nhref=\"https://learnopengl.com/img/textures/matrix.jpg\">following</a>\r\ntexture (by creativesam) as an emission map onto the container as if the\r\nletters emit light: <a\r\nhref=\"https://learnopengl.com/code_viewer_gh.php?code=src/2.lighting/4.4.lighting_maps_exercise4/lighting_maps_exercise4.cpp\">solution</a>;\r\n<a\r\nhref=\"https://learnopengl.com/img/lighting/lighting_maps_exercise4.png\">result</a>:</p>\r\n<figure>\r\n<img\r\nsrc=\"https://learnopengl.com/img/lighting/lighting_maps_exercise4.png\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n</blockquote>\r\n<p><strong>重点：Matrix贴图并没有出现在铁边上！</strong>也就是说，这并不是直接读入并应用一个贴图那么简单。</p>\r\n<p>为了实现这点，我们需要做“判断”。但是！在glsl中使用分支会直接导致极低的运行效率，而且if语句在早期GPU上是不受支持的——我们应当尽量避免使用if语句，此处我们将这个if语句变成了三个step和一次计算：</p>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> emission = <span class=\"built_in\">texture</span>(material.emission, Texcoord).rgb * diff * <span class=\"built_in\">max</span>(light.diffuse, <span class=\"type\">vec3</span>(<span class=\"number\">0.7</span>f));</span><br><span class=\"line\"><span class=\"type\">float</span> temp = <span class=\"built_in\">step</span>(spec_tex.r, <span class=\"number\">0.0</span>f);  <span class=\"comment\">// if spec_tex.r &gt; 0.0f, then return 0 else 1</span></span><br><span class=\"line\">temp = <span class=\"built_in\">min</span>(<span class=\"built_in\">step</span>(spec_tex.g, <span class=\"number\">0.0</span>f), temp);</span><br><span class=\"line\">temp = <span class=\"built_in\">min</span>(<span class=\"built_in\">step</span>(spec_tex.b, <span class=\"number\">0.0</span>f), temp); <span class=\"comment\">// temp == 0: spec_tex is not black; 1: black;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// we complete the problem four without using if sentence.</span></span><br><span class=\"line\">emission = emission * temp;</span><br></pre></td></tr></table></figure>\r\n<p><a\r\nhref=\"https://registry.khronos.org/OpenGL-Refpages/gl4/html/step.xhtml\">step\r\n- OpenGL 4 Reference Pages (khronos.org)</a></p>\r\n<p><a href=\"https://cloud.tencent.com/developer/article/1370101\">OpenGL\r\nshader性能优化策略（一）：减少分支语句 - 腾讯云开发者社区-腾讯云\r\n(tencent.com)</a></p>\r\n","text":"使用：“光照贴图” Problem 4: Also add something they call an emission map which is a texture that stores emission values per fragment. Emission valu...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"Opengl","slug":"Opengl","count":16,"path":"api/categories/Opengl.json"},{"name":"Shader","slug":"Opengl/Shader","count":16,"path":"api/categories/Opengl/Shader.json"}],"tags":[{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"},{"name":"Opengl","slug":"Opengl","count":16,"path":"api/tags/Opengl.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#problem-4\"><span class=\"toc-text\">Problem 4:</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"learningOpenGl Chapter 2.5","uid":"38c975c13d700e0f4a358527ea875949","slug":"Language Learning/Opengl/learnopengl-cn.readthedocs.io/02Lighting/04.Light casters","date":"2023-03-08T02:32:08.000Z","updated":"2023-10-27T19:53:24.000Z","comments":true,"path":"api/articles/Language Learning/Opengl/learnopengl-cn.readthedocs.io/02Lighting/04.Light casters.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Light Casters - 投光物 All the lighting we've used so far came from a single source that is a single point in space. It gives good results, but...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Opengl","slug":"Opengl","count":16,"path":"api/categories/Opengl.json"},{"name":"Shader","slug":"Opengl/Shader","count":16,"path":"api/categories/Opengl/Shader.json"}],"tags":[{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"},{"name":"Opengl","slug":"Opengl","count":16,"path":"api/tags/Opengl.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"learningOpenGl Chapter 2.3","uid":"77ec7ccacfb72fa4bd2436c5873c81ff","slug":"Language Learning/Opengl/learnopengl-cn.readthedocs.io/02Lighting/02.Materials","date":"2023-03-08T02:30:08.000Z","updated":"2023-10-27T19:53:10.000Z","comments":true,"path":"api/articles/Language Learning/Opengl/learnopengl-cn.readthedocs.io/02Lighting/02.Materials.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"一个场景中，我们可能同时使用多个物体，而这些物体对光的特性各不相同——我们需要建立“材质”属性，统一地管理物体的三种光照关系 构建思路： 我们利用struct来管理物体的对应情况下的“颜色“来代替笼统的”objectColor“ 1234567struct Material&#1...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"Opengl","slug":"Opengl","count":16,"path":"api/categories/Opengl.json"},{"name":"Shader","slug":"Opengl/Shader","count":16,"path":"api/categories/Opengl/Shader.json"}],"tags":[{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"},{"name":"Opengl","slug":"Opengl","count":16,"path":"api/tags/Opengl.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"LUA急速入门","uid":"c501575a20c82b47e7d6e471fd5a77bc","slug":"Language Learning/LUA/急速入门","date":"2023-06-01T12:22:22.000Z","updated":"2023-10-27T19:51:18.000Z","comments":true,"path":"api/articles/Language Learning/LUA/急速入门.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"lua急速入门\">LUA急速入门</h1>\r\n<h2 id=\"安装\">安装</h2>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"keyword\">for</span> ubuntu</span></span><br><span class=\"line\">apt install lua5.4</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"keyword\">for</span> windows</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Go to github to install lua_for_windows</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"代码执行\">代码执行</h3>\r\n<h4 id=\"交互式编程\">交互式编程</h4>\r\n<p>lua5.4已经支持了交互式编程，这样我们可以直接在命令行中输入程序语句并立即查看执行结果</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~#: lua</span><br><span class=\"line\">Lua <span class=\"number\">5.4</span><span class=\"number\">.4</span>  Copyright (C) <span class=\"number\">1994</span><span class=\"number\">-2022</span> Lua.org, PUC-Rio</span><br><span class=\"line\">&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">Hello World</span><br><span class=\"line\">&gt; </span><br><span class=\"line\"><span class=\"comment\">-- 退出交互式编程状态：Ctrl+D(发送退出信号)、Ctrl+C(强制中断)、os.exit()</span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"脚本式编程\">脚本式编程</h4>\r\n<p>传统的lua编写过程，和别的语言并无二致</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/someDir/bin/lua <span class=\"comment\">--我们指定了 Lua 的解释器 /someDir/bin directory，加上 # 号标记后，解释器会忽略它。当我们为脚本添加可执行权限后，就可以通过输入 ./hello.lua 来快速执行该脚本了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World！&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;www.runoob.com&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 完成编写后，我们通过 lua hello.lua 的方式来执行该脚本</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"变量\">变量：</h2>\r\n<h3 id=\"作用域\">作用域</h3>\r\n<p>Lua中，所有创建的变量，默认为全局变量\r\n而对于删除一个全局变量，我们只需将变量赋为nil</p>\r\n<p>当然，你也可以用 <code>local</code> 来设置局部变量</p>\r\n<blockquote>\r\n<p>应尽可能多地使用局部变量：</p>\r\n<ul>\r\n<li>避免命名冲突与逻辑错误</li>\r\n<li>访问局部变量的速度比全局变量更快</li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"数据类型\">数据类型</h3>\r\n<p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。\r\n值可以存储在变量中，作为参数传递或结果返回。</p>\r\n<p>你总是可以通过 <code>type(x)</code> 来检查数据类型</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">type</span>(<span class=\"literal\">nil</span>) == <span class=\"literal\">nil</span>; <span class=\"comment\">-- false</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(<span class=\"literal\">nil</span>) == <span class=\"string\">&quot;nil&quot;</span> <span class=\"comment\">-- true</span></span><br></pre></td></tr></table></figure>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 11%\" />\r\n<col style=\"width: 88%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">数据类型</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">nil</td>\r\n<td\r\nstyle=\"text-align: left;\">只有值nil属于该类，代表被删除、不存在等，是表示一个无效值（在条件表达式中相当于false）</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">boolean</td>\r\n<td style=\"text-align: left;\">包含两个值：false和true。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">number</td>\r\n<td\r\nstyle=\"text-align: left;\">表示<strong>双精度</strong>类型的实浮点数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">string</td>\r\n<td\r\nstyle=\"text-align: left;\">字符串由一对<strong>双引号或单引号</strong>来表示</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">function</td>\r\n<td style=\"text-align: left;\">由 <strong>C </strong>或\r\n<strong>Lua</strong> 编写的函数</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">userdata</td>\r\n<td\r\nstyle=\"text-align: left;\">表示任意<strong>存储在变量中的C数据结构</strong>**</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">thread</td>\r\n<td style=\"text-align: left;\">表示执行的独立线路，用于执行协同程序</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">table</td>\r\n<td\r\nstyle=\"text-align: left;\">字典或者\"关联数组\"。其索引可以是数字、字符串或表类型。我们用\"构造表达式\"来创建表</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 id=\"table\">table</h4>\r\n<h5 id=\"实例\">实例：</h5>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- table_test.lua 脚本文件</span></span><br><span class=\"line\">a = &#123;&#125; <span class=\"comment\">-- 创建空表</span></span><br><span class=\"line\">a[<span class=\"string\">&quot;key&quot;</span>] = <span class=\"string\">&quot;value&quot;</span> <span class=\"comment\">-- 添加键值对</span></span><br><span class=\"line\">key = <span class=\"number\">10</span></span><br><span class=\"line\">a[key] = <span class=\"number\">22</span></span><br><span class=\"line\">a[key] = a[key] + <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(a) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k .. <span class=\"string\">&quot; : &quot;</span> .. v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">-- 结果：</span></span><br><span class=\"line\"><span class=\"comment\">-- key : value</span></span><br><span class=\"line\"><span class=\"comment\">-- 10 : 33</span></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"索引\">索引：</h5>\r\n<p>不同于其他语言的数组把 0 作为数组的初始索引，在 Lua\r\n里表的默认初始索引一般以 1 开始。</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- table_test2.lua 脚本文件</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> tbl = &#123;<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;pear&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>, <span class=\"string\">&quot;grape&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tbl) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Key&quot;</span>, key)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Key    1</span></span><br><span class=\"line\"><span class=\"comment\">-- Key    2</span></span><br><span class=\"line\"><span class=\"comment\">-- ..</span></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"无序\">无序：</h5>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tab = &#123;<span class=\"string\">&quot;Hello&quot;</span>,<span class=\"string\">&quot;World&quot;</span>,a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,z=<span class=\"number\">3</span>,x=<span class=\"number\">10</span>,y=<span class=\"number\">20</span>,<span class=\"string\">&quot;Good&quot;</span>,<span class=\"string\">&quot;Bye&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tab) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(k..<span class=\"string\">&quot;  &quot;</span>..v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\r\n<p>如上代码输出结果存在一定规律，\"Hello\"、\"World\"、\"Good\"、\"Bye\"是表中的值，在存储时是按照顺序存储的，并且不同于其他脚本语言，Lua是从1开始排序的，因此，使用pairs遍历打印输出时，会先按照顺序输出表的值，然后再按照键值对的键的哈希值打印。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  Hello</span><br><span class=\"line\">2  World</span><br><span class=\"line\">3  Good</span><br><span class=\"line\">4  Bye</span><br><span class=\"line\">y  20</span><br><span class=\"line\">x  10</span><br><span class=\"line\">z  3</span><br><span class=\"line\">b  2</span><br><span class=\"line\">a  1 </span><br></pre></td></tr></table></figure>\r\n<h5 id=\"构建数组\">构建数组</h5>\r\n<p>我们可以使用整数索引来访问数组元素，如果指定的索引没有值则返回\r\n<strong>nil</strong></p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = &#123;<span class=\"string\">&quot;Lua&quot;</span>, <span class=\"string\">&quot;Tutorial&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i= <span class=\"number\">0</span>, <span class=\"number\">2</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(array[i])</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- nil</span></span><br><span class=\"line\"><span class=\"comment\">-- Lua</span></span><br><span class=\"line\"><span class=\"comment\">-- Tutorial</span></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"指针\">\"指针\"</h5>\r\n<p>当我们为 table a 并设置元素，然后将 a 赋值给 b，则 a 与 b\r\n都会指向同一个内存。而当 a 设置为 nil 时，Lua只会回收变量 a 本身，而 b\r\n仍然能访问原 table 的元素。这种规则同样适用于传参数的情况</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mytable[<span class=\"string\">&quot;wow&quot;</span>] = <span class=\"string\">&quot;修改前&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;mytable 索引为 wow 的元素是 &quot;</span>, mytable[<span class=\"string\">&quot;wow&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- alternatetable和mytable的是指同一个 table</span></span><br><span class=\"line\">alternatetable = mytable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;mytable 索引为 wow 的元素是 &quot;</span>, alternatetable[<span class=\"string\">&quot;wow&quot;</span>])</span><br><span class=\"line\">alternatetable[<span class=\"string\">&quot;wow&quot;</span>] = <span class=\"string\">&quot;修改后&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;mytable 索引为 wow 的元素是 &quot;</span>, mytable[<span class=\"string\">&quot;wow&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 释放变量</span></span><br><span class=\"line\">alternatetable = <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;alternatetable 是 &quot;</span>, alternatetable)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- mytable 仍然可以访问</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;mytable 索引为 wow 的元素是 &quot;</span>, mytable[<span class=\"string\">&quot;wow&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- mytable 索引为 wow 的元素是     修改前</span></span><br><span class=\"line\"><span class=\"comment\">-- mytable 索引为 wow 的元素是     修改前</span></span><br><span class=\"line\"><span class=\"comment\">-- mytable 索引为 wow 的元素是     修改后</span></span><br><span class=\"line\"><span class=\"comment\">-- alternatetable 是     nil</span></span><br><span class=\"line\"><span class=\"comment\">-- mytable 索引为 wow 的元素是     修改后</span></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"插入删除\">插入删除</h5>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 6%\" />\r\n<col style=\"width: 93%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>方法</th>\r\n<th>用途</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><strong>table.insert (table, [pos,] value):</strong></td>\r\n<td>在table的数组部分指定位置(pos)插入值为value的一个元素.\r\n<br />pos参数可选, 默认为数组部分末尾.</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><strong>table.remove (table [, pos])</strong></td>\r\n<td>返回table数组部分位于pos位置的元素. 其后的元素会被前移.\r\n<br />pos参数可选, 默认为table长度, 即从最后一个元素删起。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h5 id=\"sort\">Sort</h5>\r\n<blockquote>\r\n<p><code>table.sort (list [, comp])</code></p>\r\n<p>Sorts the list elements in a given order, <em>in-place</em>, from\r\n<code>list[1]</code> to <code>list[#list]</code>. If <code>comp</code>\r\nis given, then it must be a function that receives two list elements and\r\nreturns true when the first element must come before the second in the\r\nfinal order, so that, after the sort, <code>i &lt;= j</code> implies\r\n<code>not comp(list[j],list[i])</code>. If <code>comp</code> is not\r\ngiven, then the standard Lua operator <code>&lt;</code> is used\r\ninstead.</p>\r\n</blockquote>\r\n<h4 id=\"function\">function</h4>\r\n<p>在 Lua 中，函数是被看作是\"第一类值（First-Class Value）\"</p>\r\n<p>值得注意的是，我们可以临时创建一个匿名函数来进行参数传递：</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testFun(tab,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(key, val)</span></span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> key - val;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"thread\">thread</h4>\r\n<blockquote>\r\n<p>在 Lua\r\n里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西。</p>\r\n<p>线程跟协程的区别：线程可以同时多个运行，而协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起（suspend）时才会暂停。</p>\r\n</blockquote>\r\n<h4 id=\"字符串\">字符串</h4>\r\n<h5 id=\"定义\">定义</h5>\r\n<p>Lua 语言中字符串可以使用以下三种方式来表示：</p>\r\n<ul>\r\n<li>单引号间的一串字符。</li>\r\n<li>双引号间的一串字符。</li>\r\n<li><strong>[[** 与 **]]</strong> 间的一串字符。</li>\r\n</ul>\r\n<p>特别的，我们可以通过嵌套来给字符串中加入引号：</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&quot;&#x27;test&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a) <span class=\"comment\">-- &#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"字符串格式化\">字符串格式化</h5>\r\n<p>Lua 提供了 <strong>string.format()</strong>\r\n函数来生成具有特定格式的字符串，这个函数的格式很像 C 语言中的\r\nprintf()。同时由于格式字符串的存在,\r\n使得产生的长字符串可读性大大提高了。</p>\r\n<p>格式字符串可能包含以下的转义码:</p>\r\n<ul>\r\n<li>%c - 接受一个数字, 并将其转化为ASCII码表中对应的字符</li>\r\n<li>%d, %i - 接受一个数字并将其转化为有符号的整数格式</li>\r\n<li>%o - 接受一个数字并将其转化为八进制数格式</li>\r\n<li>%u - 接受一个数字并将其转化为无符号整数格式</li>\r\n<li>%x - 接受一个数字并将其转化为十六进制数格式, 使用小写字母</li>\r\n<li>%X - 接受一个数字并将其转化为十六进制数格式, 使用大写字母</li>\r\n<li>%e - 接受一个数字并将其转化为科学记数法格式, 使用小写字母e</li>\r\n<li>%E - 接受一个数字并将其转化为科学记数法格式, 使用大写字母E</li>\r\n<li>%f - 接受一个数字并将其转化为浮点数格式</li>\r\n<li>%g(%G) - 接受一个数字并将其转化为%e(%E,\r\n对应%G)及%f中较短的一种格式</li>\r\n<li>%q - 接受一个字符串并将其转化为可安全被Lua编译器读入的格式</li>\r\n<li>%s - 接受一个字符串并按照给定的参数格式化该字符串</li>\r\n</ul>\r\n<p>为进一步细化格式, 可以在%号后添加参数. 参数将以如下的顺序读入:</p>\r\n<ul>\r\n<li><ol type=\"1\">\r\n<li>符号: 一个+号表示其后的数字转义符将让正数显示正号.\r\n默认情况下只有负数显示符号.</li>\r\n</ol></li>\r\n<li><ol start=\"2\" type=\"1\">\r\n<li>占位符: 一个0, 在后面指定了字串宽度时占位用.\r\n不填时的默认占位符是空格.</li>\r\n</ol></li>\r\n<li><ol start=\"3\" type=\"1\">\r\n<li>对齐标识: 在指定了字串宽度时, 默认为右对齐,\r\n增加-号可以改为左对齐.</li>\r\n</ol></li>\r\n<li><ol start=\"4\" type=\"1\">\r\n<li>宽度数值</li>\r\n</ol></li>\r\n<li><ol start=\"5\" type=\"1\">\r\n<li>小数位数/字串裁切: 在宽度数值后增加的小数部分n,\r\n若后接f(浮点数转义符, 如%6.3f)则设定该浮点数的小数只保留n位,\r\n若后接s(字符串转义符, 如%5.3s)则设定该字符串只显示前n位.</li>\r\n</ol></li>\r\n</ul>\r\n<h5 id=\"匹配\">匹配</h5>\r\n<p>Lua 中的匹配模式直接用常规的字符串来描述。 它用于模式匹配函数\r\n<strong>string.find, string.gmatch, string.gsub,\r\nstring.match</strong>。</p>\r\n<p>字符类指可以匹配一个特定字符集合内任何字符的模式项。比如，字符类\r\n<strong>%d</strong> 匹配任意数字。所以你可以使用模式串\r\n<strong>%d%d/%d%d/%d%d%d%d</strong> 搜索 <strong>dd/mm/yyyy</strong>\r\n格式的日期：</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"string\">&quot;Deadline is 30/05/1999, firm&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> = <span class=\"string\">&quot;%d%d/%d%d/%d%d%d%d&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(s, <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(s, <span class=\"built_in\">date</span>)))    <span class=\"comment\">--&gt; 30/05/1999</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"赋值语句\">赋值语句：</h3>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- Lua 可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量</span></span><br><span class=\"line\">a, b = <span class=\"number\">10</span>, <span class=\"number\">2</span>*x           <span class=\"comment\">-- a=10; b=2*x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 遇到赋值语句Lua会先计算右边所有的值然后再执行赋值操作，所以我们可以这样进行交换变量的值：</span></span><br><span class=\"line\">x, y = y, x              <span class=\"comment\">-- swap &#x27;x&#x27; for &#x27;y&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：</span></span><br><span class=\"line\">a. 变量个数 &gt; 值的个数      <span class=\"comment\">-- 按变量个数补足nil</span></span><br><span class=\"line\">b. 变量个数 &lt; 值的个数      <span class=\"comment\">-- 多余的值会被忽略</span></span><br><span class=\"line\"><span class=\"comment\">--&gt; 常见的错误情况:</span></span><br><span class=\"line\">a, b, c = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a,b,c)             <span class=\"comment\">--&gt; 0   nil   nil</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"循环\">循环</h2>\r\n<p>相对于其它语言来说，Lua的循环结构是特殊而合理的：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 50%\" />\r\n<col style=\"width: 50%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>方法名称</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><a href=\"https://www.runoob.com/lua/lua-while-loop.html\">while\r\n循环</a></td>\r\n<td>在条件为 true\r\n时，让程序重复地执行某些语句。执行语句前会先检查条件是否为 true。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><a href=\"https://www.runoob.com/lua/lua-for-loop.html\">for\r\n循环</a></td>\r\n<td>重复执行指定语句，重复次数可在 for 语句中控制。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><a\r\nhref=\"https://www.runoob.com/lua/lua-repeat-until-loop.html\">repeat...until</a></td>\r\n<td>重复执行循环，直到 指定的条件为真时为止</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 55%\" />\r\n<col style=\"width: 44%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">控制语句</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\"><a\r\nhref=\"https://www.runoob.com/lua/lua-break-statement.html\">break\r\n语句</a></td>\r\n<td\r\nstyle=\"text-align: left;\">退出当前循环或语句，并开始脚本执行紧接着的语句。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\"><a\r\nhref=\"https://www.runoob.com/lua/lua-goto.html\">goto 语句</a></td>\r\n<td style=\"text-align: left;\">将程序的控制点转移到一个标签处。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>值得注意的是，lua中并不包含 <code>continue</code> 控制语句，要想实现\r\n<code>continue</code> 的功能，我们可以利用 <code>goto</code> 语句：</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span>, <span class=\"number\">10</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> i % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">then</span> <span class=\"keyword\">goto</span> continue <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">    ::continue::</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><a\r\nhref=\"https://stackoverflow.com/questions/3524970/why-does-lua-have-no-continue-statement\">loops\r\n- Why does Lua have no \"continue\" statement? - Stack Overflow</a></p>\r\n</blockquote>\r\n<h2 id=\"流程控制\">流程控制</h2>\r\n<p>我们利用 <code>if...elseif...else</code> 语句来完成流程控制</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( 布尔表达式 <span class=\"number\">1</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"comment\">--[ 在布尔表达式 1 为 true 时执行该语句块 --]</span></span><br><span class=\"line\"><span class=\"keyword\">elseif</span>( 布尔表达式 <span class=\"number\">2</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"comment\">--[ 在布尔表达式 2 为 true 时执行该语句块 --]</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">   <span class=\"comment\">--[ 如果以上布尔表达式都不为 true 则执行该语句块 --]</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"函数\">函数</h2>\r\n<blockquote>\r\n<p>在Lua中，函数是对语句和表达式进行抽象的主要方法。</p>\r\n</blockquote>\r\n<p>Lua 函数主要有两种用途：</p>\r\n<ul>\r\n<li>1.完成指定的任务，这种情况下函数作为调用语句使用；</li>\r\n<li>2.计算并返回值，这种情况下函数作为赋值语句的表达式使用。</li>\r\n</ul>\r\n<h3 id=\"函数定义\">函数定义</h3>\r\n<p>Lua 编程语言函数定义格式如下：</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optional_function_scope <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">function_name</span><span class=\"params\">( argument1, argument2, argument3..., argumentn)</span></span></span><br><span class=\"line\">    function_body</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result_params_comma_separated</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li><strong>optional_function_scope:</strong>\r\n该参数是可选的指定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字\r\n<strong>local</strong>。</li>\r\n<li><strong>function_name:</strong> 指定函数名称。</li>\r\n<li><strong>argument1, argument2, argument3..., argumentn:</strong>\r\n函数参数，多个参数以逗号隔开，函数也可以不带参数。</li>\r\n<li><strong>function_body:</strong>\r\n函数体，函数中需要执行的代码语句块。</li>\r\n<li><strong>result_params_comma_separated:</strong>\r\n函数返回值，<strong>Lua语言函数可以返回多个值</strong>，每个值以逗号隔开。</li>\r\n</ul>\r\n<h3 id=\"重载\">\"重载\"</h3>\r\n<p>关于函数的\"重载\"能力：Lua能自动去适应传入的参数，如果传入的参数个数多于定义的个数，则会自动忽略后面多于的参数，如果传入的参数个数少于定义的个数，则会将不足的参数用nil补齐。如：</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Add</span><span class=\"params\">(a,b,c)</span></span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> c == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">     <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可变参数\">可变参数：</h3>\r\n<blockquote>\r\n<p>Lua 函数可以接受可变数目的参数，和 C\r\n语言类似，在函数参数列表中使用三点 <strong>...</strong>\r\n表示函数有可变的参数。</p>\r\n</blockquote>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">average</span><span class=\"params\">(...)</span></span></span><br><span class=\"line\">   result = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">local</span> <span class=\"built_in\">arg</span>=&#123;...&#125;    <span class=\"comment\">--&gt; arg 为一个表，局部变量</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> i,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(<span class=\"built_in\">arg</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">      result = result + v</span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(<span class=\"string\">&quot;总共传入 &quot;</span> .. #<span class=\"built_in\">arg</span> .. <span class=\"string\">&quot; 个数&quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> result/#<span class=\"built_in\">arg</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;平均值为&quot;</span>,average(<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\r\n<p>我们常将可变参数通过 <code>&#123;...&#125;</code>\r\n来组合为table，此时，我们可以通过select方法来访问可变参数的信息：</p>\r\n<ul>\r\n<li><strong>select('#', …)</strong> 返回可变参数的长度。</li>\r\n<li><strong>select(n, …)</strong> 用于返回从起点 <strong>n</strong>\r\n开始到结束位置的所有参数列表。</li>\r\n</ul>\r\n<p>请注意，select方法中的参数并非是table，这当然意味着select只适用于可变参数，不适合table</p>\r\n<blockquote>\r\n<p><strong>select (index, ···)</strong></p>\r\n<p>If index is a number, returns all arguments after argument number\r\nindex; a negative number indexes from the end (-1 is the last argument).\r\nOtherwise, index must be the string \"#\", and select returns the total\r\nnumber of extra arguments it received.</p>\r\n</blockquote>\r\n<h2 id=\"运算符\">运算符</h2>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 22%\" />\r\n<col style=\"width: 14%\" />\r\n<col style=\"width: 62%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">操作符</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n<th style=\"text-align: left;\">实例</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">^</td>\r\n<td style=\"text-align: left;\">乘幂</td>\r\n<td style=\"text-align: left;\">10^2 输出结果 100</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">//</td>\r\n<td style=\"text-align: left;\">整除(&gt;=lua5.3)</td>\r\n<td style=\"text-align: left;\">5//2 输出结果 2</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">~=</td>\r\n<td style=\"text-align: left;\">不等于</td>\r\n<td style=\"text-align: left;\">(1 ~= 2) 为 true。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">and</td>\r\n<td style=\"text-align: left;\">逻辑与</td>\r\n<td style=\"text-align: left;\">(true and false) 为 false。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">or</td>\r\n<td style=\"text-align: left;\">逻辑或</td>\r\n<td style=\"text-align: left;\">(false or false) 为 true。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">not</td>\r\n<td style=\"text-align: left;\">逻辑非</td>\r\n<td style=\"text-align: left;\">not(true and false) 为 true。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">.</td>\r\n<td style=\"text-align: left;\">连接两个字符串</td>\r\n<td style=\"text-align: left;\">a..b，若a为 \"Hello \" ，b为 \"World\",\r\n输出结果为 \"Hello World\"</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">#</td>\r\n<td\r\nstyle=\"text-align: left;\">一元运算符，返回<strong>字符串</strong>或<strong>表</strong>的长度。</td>\r\n<td style=\"text-align: left;\">#\"Hello\" 返回 5</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"特别的当对-table-使用-运算时会遇到的问题\">特别的，当对\r\n<code>table</code> 使用 <code>#</code> 运算时会遇到的问题</h3>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; a = &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"literal\">nil</span>, <span class=\"string\">&quot;3&quot;</span>&#125;</span><br><span class=\"line\">&gt; #a</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\">&gt; b = &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;3&quot;</span>, <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">&gt; #b</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\r\n<p>其获取长度时，依靠的其实是最大索引值：</p>\r\n<p>在获取表的长度时，根据的是表的最大索引的值:</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tab1 = &#123;<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;2&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;tab1长度&quot;</span>..#tab1)</span><br><span class=\"line\"></span><br><span class=\"line\">tab2 = &#123;key1=<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;2&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;tab2长度&quot;</span>..#tab2)</span><br><span class=\"line\"></span><br><span class=\"line\">tab3 = &#123;&#125;</span><br><span class=\"line\">tab3[<span class=\"number\">1</span>]=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">tab3[<span class=\"number\">2</span>]=<span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">tab3[<span class=\"number\">4</span>]=<span class=\"string\">&quot;4&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;tab3长度&quot;</span>..#tab3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- tab1长度2</span></span><br><span class=\"line\"><span class=\"comment\">-- tab2长度1</span></span><br><span class=\"line\"><span class=\"comment\">-- tab3长度4</span></span><br></pre></td></tr></table></figure>\r\n<p>而当下标越位超过 <code>1</code> 时：</p>\r\n<p>下标越过 1 位以上，长度还是为 2：</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tab3=&#123;&#125;</span><br><span class=\"line\">tab3[<span class=\"number\">1</span>]=<span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">tab3[<span class=\"number\">2</span>]=<span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">tab3[<span class=\"number\">5</span>]=<span class=\"string\">&quot;5&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;tab3的长度&quot;</span>,#tab3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- tab3的长度    2</span></span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p>当我们获取 table 的长度的时候无论是使用 <strong>#</strong> 还是\r\n<strong>table.getn</strong>\r\n其都会在索引中断的地方停止计数，而导致无法正确取得 table 的长度。</p>\r\n<p>可以使用以下方法来代替：</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">table_leng</span><span class=\"params\">(t)</span></span></span><br><span class=\"line\"> <span class=\"keyword\">local</span> leng=<span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(t) <span class=\"keyword\">do</span></span><br><span class=\"line\">   leng=leng+<span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"keyword\">end</span></span><br><span class=\"line\"> <span class=\"keyword\">return</span> leng;</span><br><span class=\"line\">&gt;<span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\r\n</blockquote>\r\n<h3 id=\"实现三目运算\">实现三目运算</h3>\r\n<p>使用 Lua 的逻辑运算符实现就需要一些小技巧，写法如下（具体可查看<a\r\nhref=\"https://www.runoob.com/w3cnote/trinocular-operators-in-lua.html\">Lua\r\n中的三目运算符</a>）</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(condition <span class=\"keyword\">and</span> &#123;result1&#125; <span class=\"keyword\">or</span> &#123;result2&#125;)[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\r\n<p>例：</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> isAppel = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(isAppel <span class=\"keyword\">and</span> <span class=\"string\">&quot;苹果&quot;</span> <span class=\"keyword\">or</span> <span class=\"string\">&quot;梨&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<p>原理：</p>\r\n<blockquote>\r\n<ul>\r\n<li><p>(A and B), 若 A 为 false 返回 A(返回false) ;</p></li>\r\n<li><p>(A or B), 若 A 为 false 返回 B ;</p></li>\r\n<li><p>除 nil 外其他数据类型被当做 true</p></li>\r\n</ul>\r\n</blockquote>\r\n<h2 id=\"元表\">元表</h2>\r\n<p>Lua中我们使用元表来增强Table的表现：通过为table赋予元表，我们可以改变对table进行操作时的默认行为，以达到更多的效果。</p>\r\n<p>当我们为一个 table 指定好对应的 metatable\r\n后，我们就可以为元表增添即时字段来修改上层 table 行为了</p>\r\n<h3 id=\"为指定的表设定元表\">为指定的表设定元表</h3>\r\n<p>两个主要方法：</p>\r\n<ul>\r\n<li><strong>setmetatable(table, metatable):</strong> 对指定 table\r\n设置元表(metatable)，如果元表(metatable)中存在 __metatable\r\n键值，setmetatable 会失败。</li>\r\n<li><strong>getmetatable(table):</strong>\r\n返回对象的元表(metatable)。</li>\r\n</ul>\r\n<h3 id=\"为元表增添元方法\">为元表增添元方法</h3>\r\n<p><sub>仅列出部分主要方法</sub></p>\r\n<h4 id=\"index-元方法\">__index 元方法</h4>\r\n<p>生效情况：当你通过键来访问 table 的时候，如果这个键没有值，那么 Lua\r\n就会寻找该 table 的 metatable 中的__index 键。当 __index生效时：</p>\r\n<h5 id=\"index包含表格\">__index包含表格</h5>\r\n<p>若__index包含一个表格，Lua 会在表格中查找相应的键。</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">other = &#123; foo = <span class=\"number\">3</span> &#125;</span><br><span class=\"line\">t = <span class=\"built_in\">setmetatable</span>(&#123;&#125;, &#123; <span class=\"built_in\">__index</span> = other &#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(t.foo) <span class=\"comment\">-- 3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(t.bar) <span class=\"comment\">-- nil</span></span><br></pre></td></tr></table></figure>\r\n<h5 id=\"若__index包含函数\">若__index包含函数</h5>\r\n<p>若__index包含一个函数的话，Lua就会调用那个函数，table和键会作为参数传递给函数。</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mytable = <span class=\"built_in\">setmetatable</span>(&#123;key1 = <span class=\"string\">&quot;value1&quot;</span>&#125;, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">__index</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(mytable, key)</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(mytable, key)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.key1, mytable.key2)</span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<h3 id=\"总结\">总结</h3>\r\n<p>Lua 查找一个表元素时的规则，其实就是如下 3 个步骤:</p>\r\n<ul>\r\n<li>1.在表中查找，如果找到，返回该元素，找不到则继续</li>\r\n<li>2.判断该表是否有元表，如果没有元表，返回 nil，有元表则继续。</li>\r\n<li>3.判断元表有没有 __index 方法，如果 __index 方法为 nil，则返回\r\nnil；如果 __index 方法是一个表，则重复 1、2、3；如果 __index\r\n方法是一个函数，则返回该函数的返回值。</li>\r\n</ul>\r\n<p>该部分内容来自作者寰子：https://blog.csdn.net/xocoder/article/details/9028347</p>\r\n</blockquote>\r\n<h4 id=\"newindex-元方法\">__newindex 元方法</h4>\r\n<p>生效情况：当你给表的一个缺少的索引赋值，解释器就会查找__newindex\r\n元方法。如果存在则调用该方法而不进行赋值操作。</p>\r\n<blockquote>\r\n<p>__newindex 元方法用来对表更新，__index则用来对表访问 。</p>\r\n</blockquote>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mymetatable = &#123;&#125;</span><br><span class=\"line\">mytable = <span class=\"built_in\">setmetatable</span>(&#123;key1 = <span class=\"string\">&quot;value1&quot;</span>&#125;, &#123; <span class=\"built_in\">__newindex</span> = mymetatable &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.key1)</span><br><span class=\"line\"></span><br><span class=\"line\">mytable.newkey = <span class=\"string\">&quot;新值2&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.newkey,mymetatable.newkey)</span><br><span class=\"line\"></span><br><span class=\"line\">mytable.key1 = <span class=\"string\">&quot;新值1&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.key1,mymetatable.key1)</span><br></pre></td></tr></table></figure>\r\n<h4\r\nid=\"重载操作符__add__sub等元方法\">重载操作符：__add、__sub等元方法：</h4>\r\n<blockquote>\r\n<p>以下实例演示了两表相加操作：</p>\r\n<h2 id=\"实例-1\">实例</h2>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"comment\">-- 自定义计算表中最大键值函数 table_maxn，即计算表的元素个数</span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">table_maxn</span><span class=\"params\">(t)</span></span></span><br><span class=\"line\">   <span class=\"keyword\">local</span> mn = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(t) <span class=\"keyword\">do</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> mn &lt; k <span class=\"keyword\">then</span></span><br><span class=\"line\">           mn = k</span><br><span class=\"line\">       <span class=\"keyword\">end</span></span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> mn</span><br><span class=\"line\">&gt;<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;<span class=\"comment\">-- 两表相加操作</span></span><br><span class=\"line\">&gt;mytable = <span class=\"built_in\">setmetatable</span>(&#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;, &#123;</span><br><span class=\"line\"> <span class=\"built_in\">__add</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(mytable, newtable)</span></span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, table_maxn(newtable) <span class=\"keyword\">do</span></span><br><span class=\"line\">     <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(mytable, table_maxn(mytable)+<span class=\"number\">1</span>,newtable[i])</span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> mytable</span><br><span class=\"line\"> <span class=\"keyword\">end</span></span><br><span class=\"line\">&gt;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;secondtable = &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;mytable = mytable + secondtable</span><br><span class=\"line\">&gt;<span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(mytable) <span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(k,v)</span><br><span class=\"line\">&gt;<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;<span class=\"comment\">-- 以上实例执行输出结果为：</span></span><br><span class=\"line\">&gt;<span class=\"comment\">-- 1    1</span></span><br><span class=\"line\">&gt;<span class=\"comment\">-- 2    2</span></span><br><span class=\"line\">&gt;<span class=\"comment\">-- 3    3</span></span><br><span class=\"line\">&gt;<span class=\"comment\">-- 4    4</span></span><br><span class=\"line\">&gt;<span class=\"comment\">-- 5    5</span></span><br><span class=\"line\">&gt;<span class=\"comment\">-- 6    6</span></span><br></pre></td></tr></table></figure>\r\n</blockquote>\r\n<p>全部的操作符元方法如下：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">模式</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">__add</td>\r\n<td style=\"text-align: left;\">对应的运算符 '+'.</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">__sub</td>\r\n<td style=\"text-align: left;\">对应的运算符 '-'.</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">__mul</td>\r\n<td style=\"text-align: left;\">对应的运算符 '*'.</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">__div</td>\r\n<td style=\"text-align: left;\">对应的运算符 '/'.</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">__mod</td>\r\n<td style=\"text-align: left;\">对应的运算符 '%'.</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">__unm</td>\r\n<td style=\"text-align: left;\">对应的运算符 '-'.</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">__concat</td>\r\n<td style=\"text-align: left;\">对应的运算符 '..'.</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">__eq</td>\r\n<td style=\"text-align: left;\">对应的运算符 '=='.</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">__lt</td>\r\n<td style=\"text-align: left;\">对应的运算符 '&lt;'.</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">__le</td>\r\n<td style=\"text-align: left;\">对应的运算符 '&lt;='.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 id=\"call-元方法\">__call 元方法</h4>\r\n<blockquote>\r\n<p><strong><code>__call</code>: The call operation\r\n<code>func(args)</code>.</strong></p>\r\n<p><strong>This event happens when Lua tries to call a non-function\r\nvalue</strong> (that is, <code>func</code> is not a function). The\r\nmetamethod is looked up in <code>func</code>. If present, the metamethod\r\nis called with <code>func</code> as its first argument, followed by the\r\narguments of the original call (<code>args</code>). All results of the\r\ncall are the results of the operation. This is the only metamethod that\r\nallows multiple results.</p>\r\n</blockquote>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 自定义计算表中最大键值函数 table_maxn，即计算表的元素个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">table_maxn</span><span class=\"params\">(t)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> mn = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(t) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> mn &lt; k <span class=\"keyword\">then</span></span><br><span class=\"line\">            mn = k</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mn</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 定义元方法__call</span></span><br><span class=\"line\">mytable = <span class=\"built_in\">setmetatable</span>(&#123;<span class=\"number\">10</span>&#125;, &#123;</span><br><span class=\"line\">  <span class=\"built_in\">__call</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(mytable, newtable)</span></span></span><br><span class=\"line\">        sum = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, table_maxn(mytable) <span class=\"keyword\">do</span></span><br><span class=\"line\">                sum = sum + mytable[i]</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, table_maxn(newtable) <span class=\"keyword\">do</span></span><br><span class=\"line\">                sum = sum + newtable[i]</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">newtable = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable(newtable)) <span class=\"comment\">-- 70</span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"tostring-元方法\">__tostring 元方法</h4>\r\n<p>__tostring 元方法用于修改表的输出行为。</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mytable = <span class=\"built_in\">setmetatable</span>(&#123; <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span> &#125;, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">__tostring</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(mytable)</span></span></span><br><span class=\"line\">        sum = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(mytable) <span class=\"keyword\">do</span></span><br><span class=\"line\">            \tsum = sum + v</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;表所有元素的和为 &quot;</span> .. sum</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable) <span class=\"comment\">-- 表所有元素的和为 60</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"绕开元方法\">绕开元方法</h3>\r\n<p>以__newindex为例：设置了元方法 __newindex\r\n后，在对新索引键(newkey)赋值时，会调用元方法，而自身不再主动进行赋值。而对于已存在的索引键(oldkey)，则会进行赋值，而不调用元方法\r\nnewindex。为了保证我们仍然能实现赋值语句本身的功能，我们在__newindex调用的方法中，会需要绕开该元方法本身直接进行赋值，这时我们需要用到\r\n<code>rawser</code>、<code>rawget</code>\r\n两个函数，它们能在完成本身功能时避免激活元方法</p>\r\n<blockquote>\r\n<p><code>rawset (table, index, value)</code></p>\r\n<p>Sets the real value of <code>table[index]</code> to\r\n<code>value</code>, without using the <code>__newindex</code> metavalue.\r\n<code>table</code> must be a table, <code>index</code> any value\r\ndifferent from <strong>nil</strong> and NaN, and <code>value</code> any\r\nLua value.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><code>rawget (table, index)</code></p>\r\n<p>Gets the real value of <code>table[index]</code>, without using the\r\n<code>__index</code> metavalue. <code>table</code> must be a table;\r\n<code>index</code> may be any value.</p>\r\n</blockquote>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mytable = <span class=\"built_in\">setmetatable</span>(&#123;key1 = <span class=\"string\">&quot;value1&quot;</span>&#125;, &#123;</span><br><span class=\"line\">    <span class=\"built_in\">__newindex</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(mytable, key, value)</span></span></span><br><span class=\"line\">        <span class=\"built_in\">rawset</span>(mytable, key, <span class=\"string\">&quot;\\&quot;&quot;</span>..value..<span class=\"string\">&quot;\\&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">mytable.key1 = <span class=\"string\">&quot;new value&quot;</span></span><br><span class=\"line\">mytable.key2 = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(mytable.key1, mytable.key2) <span class=\"comment\">-- new value    &quot;4&quot;</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"协程---coroutine\">协程 - coroutine：</h2>\r\n<p>Lua\r\n协同程序(coroutine)与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协同程序共享全局变量和其它大部分东西。</p>\r\n<h3 id=\"线程和协同程序区别\">线程和协同程序区别</h3>\r\n<p>线程与协同程序的主要区别在于：一个具有多个线程的程序可以同时运行几个线程，而在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起。</p>\r\n<h3 id=\"基本语法\">基本语法</h3>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 24%\" />\r\n<col style=\"width: 75%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">方法</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">coroutine.create()</td>\r\n<td style=\"text-align: left;\">创建 coroutine，返回 coroutine\r\n(<strong>thread</strong>)， 参数是一个函数<br />当和 resume\r\n配合使用的时候就唤醒函数调用</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">coroutine.resume()</td>\r\n<td style=\"text-align: left;\">重启 coroutine，和 create 配合使用</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">coroutine.yield()</td>\r\n<td style=\"text-align: left;\">挂起 coroutine，将 coroutine\r\n设置为挂起状态<br />这个和 resume 配合使用能有很多有用的效果</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">coroutine.status()</td>\r\n<td style=\"text-align: left;\">查看 coroutine 的状态<br />※: coroutine\r\n的状态共三种：dead，suspended，running</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">coroutine.wrap（）</td>\r\n<td style=\"text-align: left;\">创建 coroutine\r\n并返回一个<strong>函数</strong>，如调用该函数就进入 coroutine<br />和\r\ncreate 功能重复</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">coroutine.running()</td>\r\n<td style=\"text-align: left;\">返回正在跑的 coroutine，一个 coroutine\r\n就是一个线程<br />当使用running的时候，就是返回一个 corouting\r\n的线程号</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- coroutine_test.lua 文件</span></span><br><span class=\"line\">co = <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">create</span>(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i)</span></span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">end</span>) </span><br><span class=\"line\"><span class=\"comment\">-- 刚创建时并未执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">coroutine</span>.<span class=\"built_in\">resume</span>(co, <span class=\"number\">1</span>)   <span class=\"comment\">-- 1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">coroutine</span>.<span class=\"built_in\">status</span>(co))  <span class=\"comment\">-- dead -- 执行完毕</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;----------&quot;</span>)  <span class=\"comment\">-- ----------</span></span><br><span class=\"line\"> </span><br><span class=\"line\">co = <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">wrap</span>(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i)</span></span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">)</span><br><span class=\"line\"> </span><br><span class=\"line\">co(<span class=\"number\">10</span>)  <span class=\"comment\">-- 10 -- warp创建和create创建的调用方式是不一样的，因为create返回的是thread对象，而wrap返回的是function</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;----------&quot;</span>)  <span class=\"comment\">-- ----------</span></span><br><span class=\"line\"> </span><br><span class=\"line\">co2 = <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,<span class=\"number\">10</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"number\">3</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"built_in\">coroutine</span>.<span class=\"built_in\">status</span>(co2))  <span class=\"comment\">-- running</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"built_in\">coroutine</span>.<span class=\"built_in\">running</span>())  <span class=\"comment\">-- thread:XXXXXX</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">yield</span>()</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">coroutine</span>.<span class=\"built_in\">resume</span>(co2) <span class=\"comment\">--1</span></span><br><span class=\"line\"><span class=\"built_in\">coroutine</span>.<span class=\"built_in\">resume</span>(co2) <span class=\"comment\">--2</span></span><br><span class=\"line\"><span class=\"built_in\">coroutine</span>.<span class=\"built_in\">resume</span>(co2) <span class=\"comment\">--3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">coroutine</span>.<span class=\"built_in\">status</span>(co2))   <span class=\"comment\">-- suspended</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">coroutine</span>.<span class=\"built_in\">running</span>())  <span class=\"comment\">-- thread: 0x7fb801c04c88    true</span></span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<ul>\r\n<li><p>coroutine.creat方法只要建立了一个协程\r\n，那么这个协程的状态默认就是suspend。使用resume方法启动后，会变成running状态；遇到yield时将状态设为suspend；如果遇到return，那么将协程的状态改为dead。</p></li>\r\n<li><p>coroutine.resume方法需要特别注意的一点是，这个方法只要调用就会返回一个boolean值。</p></li>\r\n<li><p>coroutine.resume方法如果调用成功，那么返回true；如果有yield方法，同时返回yield括号里的参数；如果没有yield，那么继续运行直到协程结束；直到遇到return，将协程的状态改为dead，并同时返回return的值。</p></li>\r\n<li><p>coroutine.resume方法如果调用失败(调用状态为dead的协程会导致失败)，那么返回false，并且带上一句\"cannot\r\nresume dead coroutine\"</p></li>\r\n<li><p>wrap不会返回boolean值，但是当coroutine执行完dead后，如继续执行该coroutine则会导致程序报错。</p></li>\r\n<li><p>coroutine.yield 除了挂起协程外，还可以同时返回数据给 resume\r\n,并且还可以同时定义下一次唤醒时需要传递的参数。</p></li>\r\n</ul>\r\n<p><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cor = <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">create</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(a)</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;参数 a 值为：&quot;</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">local</span> b, c = <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">yield</span>(a + <span class=\"number\">1</span>); <span class=\"comment\">--这里表示挂起协程，并且将a+1的值进行返回，并且指定下一次唤醒需要 b,c 两个参数。</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;参数 b, c 值分别为：&quot;</span>, b, c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b * c; <span class=\"comment\">--协程结束，并且返回 b*c 的值。</span></span><br><span class=\"line\"><span class=\"keyword\">end</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;第一次调用：&quot;</span>, <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">resume</span>(cor, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;第二次调用：&quot;</span>, <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">resume</span>(cor, <span class=\"number\">2</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;第三次调用：&quot;</span>, <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">resume</span>(cor));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">参数 a 值为：    1</span></span><br><span class=\"line\"><span class=\"comment\">第一次调用：    true    2</span></span><br><span class=\"line\"><span class=\"comment\">参数 b, c 值分别为：    2    2</span></span><br><span class=\"line\"><span class=\"comment\">第二次调用：    true    4</span></span><br><span class=\"line\"><span class=\"comment\">第三次调用：    false    cannot resume dead coroutine ]]</span></span><br></pre></td></tr></table></figure></p>\r\n<p><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cor = <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">wrap</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(a)</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;参数 a 值为：&quot;</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">local</span> b, c = <span class=\"built_in\">coroutine</span>.<span class=\"built_in\">yield</span>(a + <span class=\"number\">1</span>); <span class=\"comment\">--这里表示挂起协程，并且将a+1的值进行返回，并且指定下一次唤醒需要 b,c 两个参数。</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;参数 b, c 值分别为：&quot;</span>, b, c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b * c; <span class=\"comment\">--协程结束，并且返回 b*c 的值。</span></span><br><span class=\"line\"><span class=\"keyword\">end</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;第一次调用：&quot;</span>, cor(<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;第二次调用：&quot;</span>, cor(<span class=\"number\">2</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;第三次调用：&quot;</span>, cor());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">参数 a 值为：   1</span></span><br><span class=\"line\"><span class=\"comment\">第一次调用：    2</span></span><br><span class=\"line\"><span class=\"comment\">参数 b, c 值分别为：    2       2</span></span><br><span class=\"line\"><span class=\"comment\">第二次调用：    4</span></span><br><span class=\"line\"><span class=\"comment\">lua: test.lua:18: cannot resume dead coroutine</span></span><br><span class=\"line\"><span class=\"comment\">stack traceback:</span></span><br><span class=\"line\"><span class=\"comment\">        [C]: in function &#x27;cor&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">        test.lua:18: in main chunk</span></span><br><span class=\"line\"><span class=\"comment\">        [C]: in ?  ]]</span></span><br></pre></td></tr></table></figure></p>\r\n</blockquote>\r\n<h2 id=\"迭代器\">迭代器</h2>\r\n<p>迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。</p>\r\n<p>Lua 的迭代器（迭代函数）包含以下两种类型：</p>\r\n<ul>\r\n<li>无状态的迭代器</li>\r\n<li>多状态的迭代器</li>\r\n</ul>\r\n<h3 id=\"泛型-for-调用迭代器\">泛型 for 调用迭代器</h3>\r\n<p>泛型 for 的执行过程：</p>\r\n<ul>\r\n<li>首先，初始化，计算 in 后面表达式的值，表达式应该返回泛型 for\r\n需要的三个值：迭代函数、状态常量、控制变量；与多值赋值一样，如果表达式返回的结果个数不足三个会自动用\r\nnil 补足，多出部分会被忽略。</li>\r\n<li>第二，将状态常量和控制变量作为参数调用迭代函数（注意：对于 for\r\n结构来说，状态常量没有用处，仅仅在初始化时获取他的值并传递给迭代函数）。</li>\r\n<li>第三，将迭代函数返回的值赋给变量列表。</li>\r\n<li>第四，如果返回的第一个值为nil循环结束，否则执行循环体。</li>\r\n<li>第五，回到第二步再次调用迭代函数</li>\r\n</ul>\r\n<p>如：</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = &#123;<span class=\"string\">&quot;Google&quot;</span>, <span class=\"string\">&quot;Runoob&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> key,value <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(array)</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(key, value)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"无状态的迭代器\">无状态的迭代器</h3>\r\n<p>类似pairs, ipairs的，没有更多信息(状态)的迭代器</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span><span class=\"params\">(iteratorMaxCount, currentNumber)</span></span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> currentNumber &lt; iteratorMaxCount</span><br><span class=\"line\">   <span class=\"keyword\">then</span></span><br><span class=\"line\">      currentNumber = currentNumber+<span class=\"number\">1</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> currentNumber, currentNumber*currentNumber</span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,n <span class=\"keyword\">in</span> square(<span class=\"number\">3</span>,<span class=\"number\">0</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(i,n)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"多状态的迭代器\">多状态的迭代器</h3>\r\n<p>为了保存更多信息，使用闭包来构造迭代器</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array = &#123;<span class=\"string\">&quot;Google&quot;</span>, <span class=\"string\">&quot;Runoob&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">elementIterator</span> <span class=\"params\">(collection)</span></span></span><br><span class=\"line\">   <span class=\"keyword\">local</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">local</span> count = #collection</span><br><span class=\"line\">   <span class=\"comment\">-- 闭包函数</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br><span class=\"line\">      index = index + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> index &lt;= count</span><br><span class=\"line\">      <span class=\"keyword\">then</span></span><br><span class=\"line\">         <span class=\"comment\">--  返回迭代器的当前元素</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> collection[index]</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> elementIterator(array)</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">print</span>(element)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"模块化\">模块化</h2>\r\n<p>从 Lua 5.1 开始，Lua\r\n加入了标准的模块管理机制，可以把一些公用的代码放在一个文件里，以 API\r\n接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度。</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 文件名为 Test1.lua</span></span><br><span class=\"line\"><span class=\"comment\">-- 定义一个名为 module 的模块(Table)</span></span><br><span class=\"line\"><span class=\"built_in\">module</span> = &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">-- 定义一个常量</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.constant = <span class=\"string\">&quot;这是一个常量&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">-- 定义一个函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">module.func1</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"built_in\">io</span>.<span class=\"built_in\">write</span>(<span class=\"string\">&quot;这是一个公有函数！\\n&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这是一个私有函数！&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">module.func3</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    func2()</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">module</span></span><br></pre></td></tr></table></figure>\r\n<p>由上可知，<strong>模块的结构就是一个 table\r\n的结构</strong>，因此可以像操作调用 table\r\n里的元素那样来操作调用模块里的常量或函数。其中：</p>\r\n<ul>\r\n<li>func1 声明为程序块的全局变量，我们以这样的方式实现了\r\n<strong>public</strong> 属性，可以在引入后随意调用.</li>\r\n<li>func2 则声明为程序块的局部变量，即表示一个 <strong>private</strong>\r\n函数，因此是不能从外部访问模块里的这个私有函数，必须通过模块里的函数来调用.</li>\r\n</ul>\r\n<h2 id=\"面向对象\">面向对象</h2>\r\n<h3 id=\"利用function实现面向对象\">利用function实现面向对象</h3>\r\n<h4 id=\"闭包\">闭包</h4>\r\n<p>一句话说就是，在函数中引用外部函数来进行嵌套的函数。</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outer</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">inner</span>(<span class=\"params\">y</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inner</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(outer(<span class=\"number\">6</span>)(<span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\r\n<p>如代码所示，在outer函数内，又定义了一个inner函数，并且inner函数又引用了外部函数outer的变量x，这就是一个闭包了。在输出时，outer(6)(5),第一个括号传进去的值返回inner函数，其实就是返回6\r\n+ y，所以再传第二个参数进去，就可以得到返回值，6 + 5。</p>\r\n<h4 id=\"实现\">实现</h4>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 元类</span></span><br><span class=\"line\">Rectangle = &#123;area = <span class=\"number\">0</span>, length = <span class=\"number\">0</span>, breadth = <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 派生类的方法 new</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rectangle:new</span> <span class=\"params\">(o,length,breadth)</span></span></span><br><span class=\"line\">  o = o <span class=\"keyword\">or</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">setmetatable</span>(o, <span class=\"built_in\">self</span>)</span><br><span class=\"line\">  <span class=\"built_in\">self</span>.<span class=\"built_in\">__index</span> = <span class=\"built_in\">self</span>  <span class=\"comment\">-- 子类没设置area这三个属性时，会导回Rectangle</span></span><br><span class=\"line\">  <span class=\"built_in\">self</span>.length = length <span class=\"keyword\">or</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">self</span>.breadth = breadth <span class=\"keyword\">or</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">self</span>.area = length*breadth;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 派生类的方法 printArea</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rectangle:printArea</span> <span class=\"params\">()</span></span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;矩形面积为 &quot;</span>,<span class=\"built_in\">self</span>.area)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\r\n<blockquote>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/115159195\">Lua中的self - 知乎\r\n(zhihu.com)</a></p>\r\n</blockquote>\r\n<h3 id=\"利用table实现\">利用table实现</h3>\r\n<ul>\r\n<li>封装：指能够把一个实体的信息、功能、响应都装入一个单独的对象中的特性\r\n<ul>\r\n<li>table已经完备</li>\r\n</ul></li>\r\n<li>继承：继承的方法允许在不改动原程序的基础上对其进行扩充，这样使得原功能得以保存，而新功能也得以扩展。这有利于减少重复编码，提高软件的开发效率。\r\n<ul>\r\n<li>我们需要自己实现clone/copy函数</li>\r\n</ul></li>\r\n<li>多态：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。\r\n<ul>\r\n<li>Lua function已完备</li>\r\n</ul></li>\r\n</ul>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- clone function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span><span class=\"params\">(tb)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> ins = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, var <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tb) <span class=\"keyword\">do</span></span><br><span class=\"line\">        ins[key] = var</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ins</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">-- copy function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span><span class=\"params\">(dist, tb)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, var <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tb) <span class=\"keyword\">do</span></span><br><span class=\"line\">        dist[key] = var</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- define original table</span></span><br><span class=\"line\"><span class=\"built_in\">table</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">table</span>.funHello = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(tb)</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello &quot;</span>..tb.name)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">table</span>.new = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">self</span> = clone(<span class=\"built_in\">table</span>);</span><br><span class=\"line\">    <span class=\"built_in\">self</span>.name = name</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">self</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 实例化</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> tb1 = <span class=\"built_in\">table</span>.new(<span class=\"string\">&quot;World&quot;</span>)</span><br><span class=\"line\">tb1:funHello(tb1)  <span class=\"comment\">-- 事实上，常规地使用 . 或者 : 来引用funHello是几乎完全一样的，但是为了提升可读性，我们需要做出区分</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 继承</span></span><br><span class=\"line\">tb2 = &#123;&#125;</span><br><span class=\"line\">tb2.new = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(name)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">self</span> = <span class=\"built_in\">table</span>.new(name)</span><br><span class=\"line\">    copy(<span class=\"built_in\">self</span>, tb2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">self</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">tb2.tb2Hello = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;tb2 Hello&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">tb2.funHello = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;tb2 fun Hello&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> m = tb2.new(<span class=\"string\">&quot;Lili&quot;</span>)</span><br><span class=\"line\">m:funHello()</span><br><span class=\"line\">m:tb2Hello()</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"错误处理\">错误处理</h2>\r\n<p>程序运行中错误处理是必要的，在我们进行文件操作，数据转移及web service\r\n调用过程中都会出现不可预期的错误。如果不注重错误信息的处理，就会造成信息泄露，程序无法运行等情况。</p>\r\n<p>这里我们主要着眼运行时错误。</p>\r\n<h3 id=\"raise-error\">Raise Error</h3>\r\n<p>Lua主要使用两个函数：<code>assert</code> 和 <code>error</code>\r\n来错误。</p>\r\n<blockquote>\r\n<p><code>assert (v [, message])</code></p>\r\n<ul>\r\n<li>Raises an error if the value of its argument <code>v</code> is false\r\n(i.e., <strong>nil</strong> or <strong>false</strong>);\r\n<ul>\r\n<li>In case of error, <code>message</code> is the error object; when\r\nabsent, it defaults to \"<code>assertion failed!</code>\"</li>\r\n</ul></li>\r\n<li>otherwise, returns all its arguments.</li>\r\n</ul>\r\n<blockquote>\r\n<p>assert首先检查第一个参数，若没问题，assert不做任何事情；否则，assert以第二个参数作为错误信息抛出。</p>\r\n</blockquote>\r\n</blockquote>\r\n<blockquote>\r\n<p><code>error (message [, level])</code></p>\r\n<p>Raises an error (see <a\r\nhref=\"http://www.lua.org/manual/5.4/manual.html#2.3\">§2.3</a>) with\r\n<code>message</code> as the error object. This function never\r\nreturns.</p>\r\n<p>Usually, <code>error</code> adds some information about the error\r\nposition at the beginning of the message, if the message is a string.\r\nThe <code>level</code> argument specifies how to get the error position.\r\nWith level 1 (the default), the error position is where the\r\n<code>error</code> function was called. Level 2 points the error to\r\nwhere the function that called <code>error</code> was called; and so on.\r\nPassing a level 0 avoids the addition of error position information to\r\nthe message.</p>\r\n<blockquote>\r\n<p>功能：终止正在执行的函数，并返回message的内容作为错误信息(error函数永远都不会返回)</p>\r\n<p>通常情况下，error会附加一些错误位置的信息到message头部。</p>\r\n<p>Level参数指示获得错误的位置:</p>\r\n<ul>\r\n<li>Level=1[默认]：为调用error位置(文件+行号)</li>\r\n<li>Level=2：指出哪个调用error的函数的函数</li>\r\n<li>Level=0:不添加错误位置信息</li>\r\n</ul>\r\n</blockquote>\r\n</blockquote>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span><span class=\"params\">(a,b)</span></span></span><br><span class=\"line\">   <span class=\"built_in\">assert</span>(<span class=\"built_in\">type</span>(a) == <span class=\"string\">&quot;number&quot;</span>, <span class=\"string\">&quot;a 不是一个数字&quot;</span>)</span><br><span class=\"line\">   <span class=\"built_in\">assert</span>(<span class=\"built_in\">type</span>(b) == <span class=\"string\">&quot;number&quot;</span>, <span class=\"string\">&quot;b 不是一个数字&quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">add(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"process-error\">Process Error</h3>\r\n<h4 id=\"pcall\">pcall</h4>\r\n<p>pcall接收一个函数和要传递给后者的参数，并执行。最后根据执行结果是否有错误返回true或者或false及errorinfo</p>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">if</span> <span class=\"built_in\">pcall</span>(function_name, ….) <span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\">-- 没有错误</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"comment\">-- 存在错误</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">pcall</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i)</span></span> <span class=\"built_in\">print</span>(i) <span class=\"keyword\">end</span>, <span class=\"number\">33</span>)</span><br><span class=\"line\"><span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">pcall</span>(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i)</span></span> <span class=\"built_in\">print</span>(i) <span class=\"built_in\">error</span>(<span class=\"string\">&#x27;error..&#x27;</span>) <span class=\"keyword\">end</span>, <span class=\"number\">33</span>)</span><br><span class=\"line\"><span class=\"number\">33</span></span><br><span class=\"line\"><span class=\"literal\">false</span>   <span class=\"built_in\">stdin</span>:<span class=\"number\">1</span>: <span class=\"built_in\">error</span>..</span><br></pre></td></tr></table></figure>\r\n<p>pcall会以一种\"保护模式\"来调用第一个参数，因此pcall可以捕获函数执行中的任何错误。</p>\r\n<p>不过，通常在错误发生时，我们往往希望落得更多的调试信息，而不只是发生错误的位置。但pcall返回时，它已经销毁了调用桟的部分内容。为了获取更多信息，我们可以直接使用的办法：xpcall</p>\r\n<h4 id=\"xpcall\">xpcall</h4>\r\n<blockquote>\r\n<p><code>xpcall (f, msgh [, arg1, ···])</code></p>\r\n<p>This function is similar to <a\r\nhref=\"http://www.lua.org/manual/5.4/manual.html#pdf-pcall\"><code>pcall</code></a>,\r\nexcept that it sets a new message handler <code>msgh</code>.</p>\r\n</blockquote>\r\n<p>xpcall接收第二个参数——一个错误处理函数，当错误发生时，Lua会在调用桟展开（unwind）前调用错误处理函数，于是就可以在这个函数中使用\r\n<strong><code>debug</code></strong> 库来获取关于错误的额外信息了。</p>\r\n<p>debug库提供了两个通用的错误处理函数:</p>\r\n<ul>\r\n<li>debug.debug：提供一个Lua提示符，让用户来检查错误的原因</li>\r\n<li>debug.traceback：根据调用桟来构建一个扩展的错误消息</li>\r\n</ul>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunction</span> <span class=\"params\">()</span></span></span><br><span class=\"line\">   n = n/<span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myerrorhandler</span><span class=\"params\">( err )</span></span></span><br><span class=\"line\">   <span class=\"built_in\">print</span>( <span class=\"string\">&quot;ERROR:&quot;</span>, err )</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">status</span> = <span class=\"built_in\">xpcall</span>( myfunction, myerrorhandler )</span><br><span class=\"line\"><span class=\"built_in\">print</span>( <span class=\"built_in\">status</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ERROR:  test.lua:10: attempt to perform arithmetic on a nil value (global &#x27;n&#x27;)     \t\t -- from xpcall(..)</span></span><br><span class=\"line\"><span class=\"comment\">-- false \t\t-- from print( status )</span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"debug\">debug</h4>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 42%\" />\r\n<col style=\"width: 57%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>方法</th>\r\n<th>用途</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td><strong>traceback ([thread,] [message [, level]])</strong></td>\r\n<td>如果 message 存在且不是字符串或 nil，那么函数不做任何处理直接返回\r\nmessage。<br /> 否则，traceback将返回调用栈的栈回溯信息。\r\n<br />字符串可选项 message 被添加在栈回溯信息的开头。 <br />数字可选项\r\nlevel 指明从栈的哪一层开始回溯 （默认为 1 ，即调用 traceback\r\n的那里）。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><strong>getinfo ([thread,] f [, what]):</strong></td>\r\n<td>返回关于一个函数信息的<strong>表</strong>。\r\n<br />你可以直接提供该函数，也可以用一个<strong>数字</strong> f\r\n表示该函数——它表示运行在指定线程的调用栈对应层次上的函数： <br />0\r\n层表示当前函数（getinfo 自身）； <br />1 层表示调用 getinfo 的函数\r\n（除非是尾调用，这种情况不计入栈）等等。<br /> 如果 f\r\n是一个比活动函数数量还大的数字， getinfo 返回 nil。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td><strong>getupvalue (f, up)</strong></td>\r\n<td>此函数返回函数 f 的第 up 个上值的名字和值。\r\n如果该函数没有那个上值，返回 nil 。<br/>以 '('\r\n（开括号）打头的变量名表示没有名字的变量 （去除了调试信息的代码块）</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td><strong>setupvalue (f, up, value):</strong></td>\r\n<td>这个函数将 value 设为函数 f 的第 up 个上值。\r\n如果函数没有那个上值，返回 nil 否则，返回该上值的名字。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newCounter</span> <span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> n = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> k = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span></span></span><br><span class=\"line\">        k = n</span><br><span class=\"line\">        n = n + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">  </span><br><span class=\"line\">counter = newCounter()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(counter())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(counter())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> i = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">repeat</span></span><br><span class=\"line\">    name, val = <span class=\"built_in\">debug</span>.<span class=\"built_in\">getupvalue</span>(counter, i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> name <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&quot;index&quot;</span>, i, name, <span class=\"string\">&quot;=&quot;</span>, val)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(name == <span class=\"string\">&quot;n&quot;</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">debug</span>.<span class=\"built_in\">setupvalue</span> (counter,<span class=\"number\">2</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">        i = i + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span> <span class=\"comment\">-- if</span></span><br><span class=\"line\"><span class=\"keyword\">until</span> <span class=\"keyword\">not</span> name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(counter())</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"垃圾回收\">垃圾回收</h2>\r\n<h3 id=\"概述\">概述</h3>\r\n<p>Lua 采用了自动内存管理。\r\n这意味着你不用操心新创建的对象需要的内存如何分配出来，\r\n也不用考虑在对象不再被使用后怎样释放它们所占用的内存。</p>\r\n<p>Lua\r\n运行了一个<strong>垃圾收集器</strong>来收集所有<strong>死对象</strong>\r\n（即在 Lua 中不可能再访问到的对象）来完成自动内存管理的工作。 Lua\r\n中所有用到的内存，如：字符串、表、用户数据、函数、线程、\r\n内部结构等，都服从自动管理。</p>\r\n<p>Lua 实现了一个增量标记-扫描收集器。\r\n它使用这两个数字来控制垃圾收集循环：\r\n<strong>垃圾收集器间歇率</strong>和<strong>垃圾收集器步进倍率</strong>。\r\n这两个数字都使用百分数为单位(例如：值 100 在内部表示 1)：</p>\r\n<ul>\r\n<li><strong>垃圾收集器间歇率</strong>控制着收集器需要在开启新的循环前要等待多久。\r\n增大这个值会减少收集器的积极性。 当这个值比 100\r\n小的时候，收集器在开启新的循环前不会有等待。 设置这个值为 200\r\n就会让收集器等到总内存使用量达到之前的两倍时才开始新的循环。</li>\r\n<li><strong>垃圾收集器步进倍率</strong>控制着收集器运作速度相对于内存分配速度的倍率。增大这个值不仅会让收集器更加积极，还会增加每个增量步骤的长度。\r\n不要把这个值设得小于\r\n100，那样的话收集器就工作的太慢了以至于永远都干不完一个循环。默认值是\r\n200，这表示收集器以内存分配的\"两倍\"速工作。如果你把步进倍率设为一个非常大的数字(比你的程序可能用到的字节数还大\r\n10%)，收集器的行为就像一个 stop-the-world 收集器。接着你若把间歇率设为\r\n200，收集器的行为就和过去的 Lua 版本一样了：每次 Lua\r\n使用的内存翻倍时，就做一次完整的收集。</li>\r\n</ul>\r\n<h3 id=\"运用\">运用</h3>\r\n<p>我们可以通过函数<strong><code>collectgarbage ([opt [, arg]])</code></strong>来控制垃圾收集器：</p>\r\n<ul>\r\n<li><p><strong>collectgarbage(\"setpause\", 200)</strong>： 内存增大 2\r\n倍（200/100）时自动释放一次内存 （200 是默认值）。</p>\r\n<p><strong>collectgarbage(\"setstepmul\",\r\n200)</strong>：收集器单步收集的速度相对于内存分配速度的倍率，设置 200\r\n的倍率等于 2 倍（200/100）。（200 是默认值）</p></li>\r\n<li><p><strong>collectgarbage(\"collect\"):</strong>\r\n做一次完整的垃圾收集循环。通过参数 opt 它提供了一组不同的功能：</p></li>\r\n<li><p><strong>collectgarbage(\"count\"):</strong> 以 K 字节数为单位返回\r\nLua 使用的总内存数。 这个值有小数部分，所以只需要乘上 1024 就能得到 Lua\r\n使用的准确字节数（除非溢出）。</p></li>\r\n<li><p><strong>collectgarbage(\"restart\"):</strong>\r\n重启垃圾收集器的自动运行。</p></li>\r\n<li><p><strong>collectgarbage(\"setpause\"):</strong> 将 arg 设为收集器的\r\n间歇率。 返回 间歇率 的前一个值。</p></li>\r\n<li><p><strong>collectgarbage(\"setstepmul\"):</strong> 返回 步进倍率\r\n的前一个值。</p></li>\r\n<li><p><strong>collectgarbage(\"step\"):</strong> 单步运行垃圾收集器。\r\n步长\"大小\"由 arg 控制。 传入 0 时，收集器步进（不可分割的）一步。 传入非\r\n0 值， 收集器收集相当于 Lua 分配这些多（K 字节）内存的工作。\r\n如果收集器结束一个循环将返回 true 。</p></li>\r\n<li><p><strong>collectgarbage(\"stop\"):</strong> 停止垃圾收集器的运行。\r\n在调用重启前，收集器只会因显式的调用运行。</p></li>\r\n</ul>\r\n<h4 id=\"实例-2\">实例</h4>\r\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mytable = &#123;<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">collectgarbage</span>(<span class=\"string\">&quot;count&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">mytable = <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">collectgarbage</span>(<span class=\"string\">&quot;count&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">collectgarbage</span>(<span class=\"string\">&quot;collect&quot;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">collectgarbage</span>(<span class=\"string\">&quot;count&quot;</span>))</span><br></pre></td></tr></table></figure>\r\n<p>执行以上程序，输出结果如下(注意内存使用的变化)：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20.9560546875</span><br><span class=\"line\">20.9853515625</span><br><span class=\"line\">0</span><br><span class=\"line\">19.4111328125</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"main-origin\">Main Origin</h2>\r\n<ul>\r\n<li>Lua Official Site：<a href=\"http://www.lua.org/\">The Programming\r\nLanguage Lua</a></li>\r\n<li><a href=\"https://www.runoob.com/lua/lua-tutorial.html\">Lua 教程 |\r\n菜鸟教程 (runoob.com)</a></li>\r\n</ul>\r\n","text":"LUA急速入门 安装 12345# for ubuntuapt install lua5.4# for windows# Go to github to install lua_for_windows 代码执行 交互式编程 lua5.4已经支持了交互式编程，这样我们可以直接在命令...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"Language Learning","slug":"Language-Learning","count":6,"path":"api/categories/Language-Learning.json"},{"name":"LUA","slug":"Language-Learning/LUA","count":1,"path":"api/categories/Language-Learning/LUA.json"}],"tags":[{"name":"Language Learning","slug":"Language-Learning","count":16,"path":"api/tags/Language-Learning.json"},{"name":"LUA","slug":"LUA","count":1,"path":"api/tags/LUA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#lua%E6%80%A5%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">LUA急速入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">代码执行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">交互式编程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E5%BC%8F%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">脚本式编程</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">作用域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#table\"><span class=\"toc-text\">table</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">实例：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">索引：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%97%A0%E5%BA%8F\"><span class=\"toc-text\">无序：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">构建数组</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88\"><span class=\"toc-text\">&quot;指针&quot;</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">插入删除</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#sort\"><span class=\"toc-text\">Sort</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#function\"><span class=\"toc-text\">function</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#thread\"><span class=\"toc-text\">thread</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">字符串格式化</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">匹配</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">赋值语句：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">流程控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">&quot;重载&quot;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">可变参数：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%88%AB%E7%9A%84%E5%BD%93%E5%AF%B9-table-%E4%BD%BF%E7%94%A8-%E8%BF%90%E7%AE%97%E6%97%B6%E4%BC%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">特别的，当对\r\ntable 使用 # 运算时会遇到的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">实现三目运算</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E8%A1%A8\"><span class=\"toc-text\">元表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E6%8C%87%E5%AE%9A%E7%9A%84%E8%A1%A8%E8%AE%BE%E5%AE%9A%E5%85%83%E8%A1%A8\"><span class=\"toc-text\">为指定的表设定元表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E5%85%83%E8%A1%A8%E5%A2%9E%E6%B7%BB%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">为元表增添元方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#index-%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">__index 元方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#index%E5%8C%85%E5%90%AB%E8%A1%A8%E6%A0%BC\"><span class=\"toc-text\">__index包含表格</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%8B%A5__index%E5%8C%85%E5%90%AB%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">若__index包含函数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#newindex-%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">__newindex 元方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%BD%BD%E6%93%8D%E4%BD%9C%E7%AC%A6__add__sub%E7%AD%89%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">重载操作符：__add、__sub等元方法：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B-1\"><span class=\"toc-text\">实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#call-%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">__call 元方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#tostring-%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">__tostring 元方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%95%E5%BC%80%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">绕开元方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B---coroutine\"><span class=\"toc-text\">协程 - coroutine：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E5%90%8C%E7%A8%8B%E5%BA%8F%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">线程和协同程序区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">基本语法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">迭代器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B-for-%E8%B0%83%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">泛型 for 调用迭代器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">无状态的迭代器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%8A%B6%E6%80%81%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">多状态的迭代器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96\"><span class=\"toc-text\">模块化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8function%E5%AE%9E%E7%8E%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">利用function实现面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">闭包</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8table%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">利用table实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">错误处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#raise-error\"><span class=\"toc-text\">Raise Error</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#process-error\"><span class=\"toc-text\">Process Error</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pcall\"><span class=\"toc-text\">pcall</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#xpcall\"><span class=\"toc-text\">xpcall</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#debug\"><span class=\"toc-text\">debug</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\"><span class=\"toc-text\">垃圾回收</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%94%A8\"><span class=\"toc-text\">运用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B-2\"><span class=\"toc-text\">实例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#main-origin\"><span class=\"toc-text\">Main Origin</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Install certain python version in Linux","uid":"83fc4bf0106b2e566bb88fa07ace1ff9","slug":"Deploy/Linux/install certain python version in Linux","date":"2023-10-25T17:22:23.000Z","updated":"2023-10-27T18:39:57.000Z","comments":true,"path":"api/articles/Deploy/Linux/install certain python version in Linux.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Install certain python version in Linux -1: for Ubuntu: just: apt install python3.8 Zero, try to download python3.8 through yum 1yum list | ...","link":"","photos":[],"count_time":{"symbolsCount":966,"symbolsTime":"1 mins."},"categories":[{"name":"Linux","slug":"Linux","count":5,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":12,"path":"api/tags/Linux.json"},{"name":"Python","slug":"Python","count":10,"path":"api/tags/Python.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"计算机编码梳理","uid":"5b286fb1e51c3a9c0edf1921a9c938c7","slug":"Language Learning/GC","date":"2023-05-05T18:52:23.000Z","updated":"2023-10-27T20:05:44.000Z","comments":true,"path":"api/articles/Language Learning/GC.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"垃圾回收 - Garbage Collection 为什么需要GC 方便 为何主流游戏引擎的对象需要有GC机制？ - 霍姚远的回答 - 知乎 https://www.zhihu.com/question/518026433/answer/2488730232 为何主流游戏引擎的对...","link":"","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"C#","slug":"C","count":2,"path":"api/categories/C.json"},{"name":"Language Learning","slug":"C/Language-Learning","count":2,"path":"api/categories/C/Language-Learning.json"}],"tags":[{"name":"C#","slug":"C","count":2,"path":"api/tags/C.json"},{"name":"Language Learning","slug":"Language-Learning","count":16,"path":"api/tags/Language-Learning.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"LUA急速入门","uid":"c501575a20c82b47e7d6e471fd5a77bc","slug":"Language Learning/LUA/急速入门","date":"2022-12-23T04:23:23.000Z","updated":"2023-03-08T02:08:45.000Z","comments":true,"path":"api/articles/Language Learning/LUA/急速入门.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># for ubuntu\napt install lua5.4\n\n# for windows\n# Go to github to install lua_for_windows</code></pre>\n\n<h3 id=\"代码执行\"><a href=\"#代码执行\" class=\"headerlink\" title=\"代码执行\"></a>代码执行</h3><h4 id=\"交互式编程\"><a href=\"#交互式编程\" class=\"headerlink\" title=\"交互式编程\"></a>交互式编程</h4><p>lua5.4已经支持了交互式编程，这样我们可以直接在命令行中输入程序语句并立即查看执行结果</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">~#: lua\nLua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio\n&gt; print(&quot;Hello World&quot;)\nHello World\n&gt; \n-- 退出交互式编程状态：Ctrl+D(发送退出信号)、Ctrl+C(强制中断)、os.exit()</code></pre>\n\n<h4 id=\"脚本式编程\"><a href=\"#脚本式编程\" class=\"headerlink\" title=\"脚本式编程\"></a>脚本式编程</h4><p>传统的lua编写过程，和别的语言并无二致</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">#!&#x2F;someDir&#x2F;bin&#x2F;lua --我们指定了 Lua 的解释器 &#x2F;someDir&#x2F;bin directory，加上 # 号标记后，解释器会忽略它。当我们为脚本添加可执行权限后，就可以通过输入 .&#x2F;hello.lua 来快速执行该脚本了\n\nprint(&quot;Hello World！&quot;)\nprint(&quot;www.runoob.com&quot;)\n\n-- 完成编写后，我们通过 lua hello.lua 的方式来执行该脚本</code></pre>\n\n<h2 id=\"变量：\"><a href=\"#变量：\" class=\"headerlink\" title=\"变量：\"></a>变量：</h2><h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>Lua中，所有创建的变量，默认为全局变量<br>而对于删除一个全局变量，我们只需将变量赋为nil</p>\n<p>当然，你也可以用 <code>local</code> 来设置局部变量</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>应尽可能多地使用局部变量：</p>\n<ul>\n<li>避免命名冲突与逻辑错误</li>\n<li>访问局部变量的速度比全局变量更快</li>\n</ul></blockquote>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p>\n<p>你总是可以通过 <code>type(x)</code> 来检查数据类型</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">type(nil) &#x3D;&#x3D; nil; -- false\ntype(nil) &#x3D;&#x3D; &quot;nil&quot; -- true</code></pre>\n\n\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">nil</td>\n<td align=\"left\">只有值nil属于该类，代表被删除、不存在等，是表示一个无效值（在条件表达式中相当于false）</td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"left\">包含两个值：false和true。</td>\n</tr>\n<tr>\n<td align=\"center\">number</td>\n<td align=\"left\">表示<strong>双精度</strong>类型的实浮点数</td>\n</tr>\n<tr>\n<td align=\"center\">string</td>\n<td align=\"left\">字符串由一对<strong>双引号或单引号</strong>来表示</td>\n</tr>\n<tr>\n<td align=\"center\">function</td>\n<td align=\"left\">由 **C **或 <strong>Lua</strong> 编写的函数</td>\n</tr>\n<tr>\n<td align=\"center\">userdata</td>\n<td align=\"left\">表示任意<strong>存储在变量中的C数据结构</strong>**</td>\n</tr>\n<tr>\n<td align=\"center\">thread</td>\n<td align=\"left\">表示执行的独立线路，用于执行协同程序</td>\n</tr>\n<tr>\n<td align=\"center\">table</td>\n<td align=\"left\">字典或者”关联数组”。其索引可以是数字、字符串或表类型。我们用”构造表达式”来创建表</td>\n</tr>\n</tbody></table>\n<h4 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h4><h5 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h5><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">-- table_test.lua 脚本文件\na &#x3D; &#123;&#125; -- 创建空表\na[&quot;key&quot;] &#x3D; &quot;value&quot; -- 添加键值对\nkey &#x3D; 10\na[key] &#x3D; 22\na[key] &#x3D; a[key] + 11\nfor k, v in pairs(a) do\n    print(k .. &quot; : &quot; .. v)\nend\n-- 结果：\n-- key : value\n-- 10 : 33</code></pre>\n\n<h5 id=\"索引：\"><a href=\"#索引：\" class=\"headerlink\" title=\"索引：\"></a>索引：</h5><p>不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">-- table_test2.lua 脚本文件\nlocal tbl &#x3D; &#123;&quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;, &quot;grape&quot;&#125;\nfor key, val in pairs(tbl) do\n    print(&quot;Key&quot;, key)\nend\n\n-- Key    1\n-- Key    2\n-- ..</code></pre>\n\n<h5 id=\"无序：\"><a href=\"#无序：\" class=\"headerlink\" title=\"无序：\"></a>无序：</h5><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">tab &#x3D; &#123;&quot;Hello&quot;,&quot;World&quot;,a&#x3D;1,b&#x3D;2,z&#x3D;3,x&#x3D;10,y&#x3D;20,&quot;Good&quot;,&quot;Bye&quot;&#125;\nfor k,v in pairs(tab) do\n    print(k..&quot;  &quot;..v)\nend</code></pre>\n\n<p>如上代码输出结果存在一定规律，”Hello”、”World”、”Good”、”Bye”是表中的值，在存储时是按照顺序存储的，并且不同于其他脚本语言，Lua是从1开始排序的，因此，使用pairs遍历打印输出时，会先按照顺序输出表的值，然后再按照键值对的键的哈希值打印。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1  Hello\n2  World\n3  Good\n4  Bye\ny  20\nx  10\nz  3\nb  2\na  1 </code></pre>\n\n<h5 id=\"构建数组\"><a href=\"#构建数组\" class=\"headerlink\" title=\"构建数组\"></a>构建数组</h5><p>我们可以使用整数索引来访问数组元素，如果指定的索引没有值则返回 <strong>nil</strong></p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">array &#x3D; &#123;&quot;Lua&quot;, &quot;Tutorial&quot;&#125;\n\nfor i&#x3D; 0, 2 do\n   print(array[i])\nend\n\n-- nil\n-- Lua\n-- Tutorial</code></pre>\n\n<h5 id=\"“指针”\"><a href=\"#“指针”\" class=\"headerlink\" title=\"“指针”\"></a>“指针”</h5><p>当我们为 table a 并设置元素，然后将 a 赋值给 b，则 a 与 b 都会指向同一个内存。而当 a 设置为 nil 时，Lua只会回收变量 a 本身，而 b 仍然能访问原 table 的元素。这种规则同样适用于传参数的情况</p>\n<pre class=\"line-numbers language-Lua\" data-language=\"Lua\"><code class=\"language-Lua\">mytable[&quot;wow&quot;] &#x3D; &quot;修改前&quot;\nprint(&quot;mytable 索引为 wow 的元素是 &quot;, mytable[&quot;wow&quot;])\n\n-- alternatetable和mytable的是指同一个 table\nalternatetable &#x3D; mytable\n\nprint(&quot;mytable 索引为 wow 的元素是 &quot;, alternatetable[&quot;wow&quot;])\nalternatetable[&quot;wow&quot;] &#x3D; &quot;修改后&quot;\nprint(&quot;mytable 索引为 wow 的元素是 &quot;, mytable[&quot;wow&quot;])\n\n-- 释放变量\nalternatetable &#x3D; nil\nprint(&quot;alternatetable 是 &quot;, alternatetable)\n\n-- mytable 仍然可以访问\nprint(&quot;mytable 索引为 wow 的元素是 &quot;, mytable[&quot;wow&quot;])\n\n-- mytable 索引为 wow 的元素是     修改前\n-- mytable 索引为 wow 的元素是     修改前\n-- mytable 索引为 wow 的元素是     修改后\n-- alternatetable 是     nil\n-- mytable 索引为 wow 的元素是     修改后</code></pre>\n\n<h5 id=\"插入删除\"><a href=\"#插入删除\" class=\"headerlink\" title=\"插入删除\"></a>插入删除</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>table.insert (table, [pos,] value):</strong></td>\n<td>在table的数组部分指定位置(pos)插入值为value的一个元素. <br />pos参数可选, 默认为数组部分末尾.</td>\n</tr>\n<tr>\n<td><strong>table.remove (table [, pos])</strong></td>\n<td>返回table数组部分位于pos位置的元素. 其后的元素会被前移. <br />pos参数可选, 默认为table长度, 即从最后一个元素删起。</td>\n</tr>\n</tbody></table>\n<h5 id=\"Sort\"><a href=\"#Sort\" class=\"headerlink\" title=\"Sort\"></a>Sort</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>table.sort (list [, comp])</code></p>\n<p>Sorts the list elements in a given order, <em>in-place</em>, from <code>list[1]</code> to <code>list[#list]</code>. If <code>comp</code> is given, then it must be a function that receives two list elements and returns true when the first element must come before the second in the final order, so that, after the sort, <code>i &lt;= j</code> implies <code>not comp(list[j],list[i])</code>. If <code>comp</code> is not given, then the standard Lua operator <code>&lt;</code> is used instead.</p></blockquote>\n<h4 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"function\"></a>function</h4><p>在 Lua 中，函数是被看作是”第一类值（First-Class Value）”</p>\n<p>值得注意的是，我们可以临时创建一个匿名函数来进行参数传递：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">testFun(tab,\n    function(key, val)\n        return key - val;\n    end\n);</code></pre>\n\n<h4 id=\"thread\"><a href=\"#thread\" class=\"headerlink\" title=\"thread\"></a>thread</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 Lua 里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西。</p>\n<p>线程跟协程的区别：线程可以同时多个运行，而协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起（suspend）时才会暂停。</p></blockquote>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>Lua 语言中字符串可以使用以下三种方式来表示：</p>\n<ul>\n<li>单引号间的一串字符。</li>\n<li>双引号间的一串字符。</li>\n<li><strong>[[</strong> 与 <strong>]]</strong> 间的一串字符。</li>\n</ul>\n<p>特别的，我们可以通过嵌套来给字符串中加入引号：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">a &#x3D; &quot;&#39;test&#39;&quot;\nprint(a) -- &#39;a&#39;</code></pre>\n\n<h5 id=\"字符串格式化\"><a href=\"#字符串格式化\" class=\"headerlink\" title=\"字符串格式化\"></a>字符串格式化</h5><p>Lua 提供了 <strong>string.format()</strong> 函数来生成具有特定格式的字符串，这个函数的格式很像 C 语言中的 printf()。同时由于格式字符串的存在, 使得产生的长字符串可读性大大提高了。</p>\n<p>格式字符串可能包含以下的转义码:</p>\n<ul>\n<li>%c - 接受一个数字, 并将其转化为ASCII码表中对应的字符</li>\n<li>%d, %i - 接受一个数字并将其转化为有符号的整数格式</li>\n<li>%o - 接受一个数字并将其转化为八进制数格式</li>\n<li>%u - 接受一个数字并将其转化为无符号整数格式</li>\n<li>%x - 接受一个数字并将其转化为十六进制数格式, 使用小写字母</li>\n<li>%X - 接受一个数字并将其转化为十六进制数格式, 使用大写字母</li>\n<li>%e - 接受一个数字并将其转化为科学记数法格式, 使用小写字母e</li>\n<li>%E - 接受一个数字并将其转化为科学记数法格式, 使用大写字母E</li>\n<li>%f - 接受一个数字并将其转化为浮点数格式</li>\n<li>%g(%G) - 接受一个数字并将其转化为%e(%E, 对应%G)及%f中较短的一种格式</li>\n<li>%q - 接受一个字符串并将其转化为可安全被Lua编译器读入的格式</li>\n<li>%s - 接受一个字符串并按照给定的参数格式化该字符串</li>\n</ul>\n<p>为进一步细化格式, 可以在%号后添加参数. 参数将以如下的顺序读入:</p>\n<ul>\n<li>(1) 符号: 一个+号表示其后的数字转义符将让正数显示正号. 默认情况下只有负数显示符号.</li>\n<li>(2) 占位符: 一个0, 在后面指定了字串宽度时占位用. 不填时的默认占位符是空格.</li>\n<li>(3) 对齐标识: 在指定了字串宽度时, 默认为右对齐, 增加-号可以改为左对齐.</li>\n<li>(4) 宽度数值</li>\n<li>(5) 小数位数/字串裁切: 在宽度数值后增加的小数部分n, 若后接f(浮点数转义符, 如%6.3f)则设定该浮点数的小数只保留n位, 若后接s(字符串转义符, 如%5.3s)则设定该字符串只显示前n位.</li>\n</ul>\n<h5 id=\"匹配\"><a href=\"#匹配\" class=\"headerlink\" title=\"匹配\"></a>匹配</h5><p>Lua 中的匹配模式直接用常规的字符串来描述。 它用于模式匹配函数 <strong>string.find, string.gmatch, string.gsub, string.match</strong>。</p>\n<p>字符类指可以匹配一个特定字符集合内任何字符的模式项。比如，字符类 <strong>%d</strong> 匹配任意数字。所以你可以使用模式串 <strong>%d%d/%d%d/%d%d%d%d</strong> 搜索 <strong>dd/mm/yyyy</strong> 格式的日期：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">s &#x3D; &quot;Deadline is 30&#x2F;05&#x2F;1999, firm&quot;\ndate &#x3D; &quot;%d%d&#x2F;%d%d&#x2F;%d%d%d%d&quot;\nprint(string.sub(s, string.find(s, date)))    --&gt; 30&#x2F;05&#x2F;1999</code></pre>\n\n\n\n\n\n<h3 id=\"赋值语句：\"><a href=\"#赋值语句：\" class=\"headerlink\" title=\"赋值语句：\"></a>赋值语句：</h3><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">-- Lua 可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量\na, b &#x3D; 10, 2*x           -- a&#x3D;10; b&#x3D;2*x\n\n-- 遇到赋值语句Lua会先计算右边所有的值然后再执行赋值操作，所以我们可以这样进行交换变量的值：\nx, y &#x3D; y, x              -- swap &#39;x&#39; for &#39;y&#39;\n\n-- 当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：\na. 变量个数 &gt; 值的个数      -- 按变量个数补足nil\nb. 变量个数 &lt; 值的个数      -- 多余的值会被忽略\n--&gt; 常见的错误情况:\na, b, c &#x3D; 0\nprint(a,b,c)             --&gt; 0   nil   nil</code></pre>\n\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>相对于其它语言来说，Lua的循环结构是特殊而合理的：</p>\n<table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/lua/lua-while-loop.html\">while 循环</a></td>\n<td>在条件为 true 时，让程序重复地执行某些语句。执行语句前会先检查条件是否为 true。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/lua/lua-for-loop.html\">for 循环</a></td>\n<td>重复执行指定语句，重复次数可在 for 语句中控制。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/lua/lua-repeat-until-loop.html\">repeat…until</a></td>\n<td>重复执行循环，直到 指定的条件为真时为止</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">控制语句</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/lua/lua-break-statement.html\">break 语句</a></td>\n<td align=\"left\">退出当前循环或语句，并开始脚本执行紧接着的语句。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/lua/lua-goto.html\">goto 语句</a></td>\n<td align=\"left\">将程序的控制点转移到一个标签处。</td>\n</tr>\n</tbody></table>\n<p>值得注意的是，lua中并不包含 <code>continue</code> 控制语句，要想实现 <code>continue</code> 的功能，我们可以利用 <code>goto</code> 语句：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">for i&#x3D;1, 10 do\n\tif i % 2 &#x3D;&#x3D; 0 then goto continue end\n    print(i)\n    ::continue::\nend</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://stackoverflow.com/questions/3524970/why-does-lua-have-no-continue-statement\">loops - Why does Lua have no “continue” statement? - Stack Overflow</a></p></blockquote>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><p>我们利用 <code>if...elseif...else</code> 语句来完成流程控制</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">if( 布尔表达式 1) then\n   --[ 在布尔表达式 1 为 true 时执行该语句块 --]\nelseif( 布尔表达式 2) then\n   --[ 在布尔表达式 2 为 true 时执行该语句块 --]\nelse \n   --[ 如果以上布尔表达式都不为 true 则执行该语句块 --]\nend</code></pre>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在Lua中，函数是对语句和表达式进行抽象的主要方法。</p></blockquote>\n<p>Lua 函数主要有两种用途：</p>\n<ul>\n<li>1.完成指定的任务，这种情况下函数作为调用语句使用；</li>\n<li>2.计算并返回值，这种情况下函数作为赋值语句的表达式使用。</li>\n</ul>\n<h3 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h3><p>Lua 编程语言函数定义格式如下：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">optional_function_scope function function_name( argument1, argument2, argument3..., argumentn)\n    function_body\n    return result_params_comma_separated\nend</code></pre>\n\n<ul>\n<li><strong>optional_function_scope:</strong> 该参数是可选的指定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 <strong>local</strong>。</li>\n<li><strong>function_name:</strong> 指定函数名称。</li>\n<li><strong>argument1, argument2, argument3…, argumentn:</strong> 函数参数，多个参数以逗号隔开，函数也可以不带参数。</li>\n<li><strong>function_body:</strong> 函数体，函数中需要执行的代码语句块。</li>\n<li><strong>result_params_comma_separated:</strong> 函数返回值，<strong>Lua语言函数可以返回多个值</strong>，每个值以逗号隔开。</li>\n</ul>\n<h3 id=\"“重载”\"><a href=\"#“重载”\" class=\"headerlink\" title=\"“重载”\"></a>“重载”</h3><p>关于函数的”重载”能力：Lua能自动去适应传入的参数，如果传入的参数个数多于定义的个数，则会自动忽略后面多于的参数，如果传入的参数个数少于定义的个数，则会将不足的参数用nil补齐。如：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function Add(a,b,c)\n     if c &#x3D;&#x3D; nil then\n         return a + b\n     else\n         return a + b + c\n     end\nend</code></pre>\n\n<h3 id=\"可变参数：\"><a href=\"#可变参数：\" class=\"headerlink\" title=\"可变参数：\"></a>可变参数：</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Lua 函数可以接受可变数目的参数，和 C 语言类似，在函数参数列表中使用三点 <strong>…</strong> 表示函数有可变的参数。</p></blockquote>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function average(...)\n   result &#x3D; 0\n   local arg&#x3D;&#123;...&#125;    --&gt; arg 为一个表，局部变量\n   for i,v in ipairs(arg) do\n      result &#x3D; result + v\n   end\n   print(&quot;总共传入 &quot; .. #arg .. &quot; 个数&quot;)\n   return result&#x2F;#arg\nend\n\nprint(&quot;平均值为&quot;,average(10,5,3,4,5,6))</code></pre>\n\n<p>我们常将可变参数通过 <code>&#123;...&#125;</code> 来组合为table，此时，我们可以通过select方法来访问可变参数的信息：</p>\n<ul>\n<li><strong>select(‘#’, …)</strong> 返回可变参数的长度。</li>\n<li><strong>select(n, …)</strong> 用于返回从起点 <strong>n</strong> 开始到结束位置的所有参数列表。</li>\n</ul>\n<p>请注意，select方法中的参数并非是table，这当然意味着select只适用于可变参数，不适合table</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>select (index, ···)</strong></p>\n<p>If index is a number, returns all arguments after argument number index;<br>a negative number indexes from the end (-1 is the last argument).<br>Otherwise, index must be the string “#”, and select returns the total number of extra arguments it received.</p></blockquote>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">^</td>\n<td align=\"left\">乘幂</td>\n<td align=\"left\">10^2 输出结果 100</td>\n</tr>\n<tr>\n<td align=\"left\">//</td>\n<td align=\"left\">整除(&gt;=lua5.3)</td>\n<td align=\"left\">5//2 输出结果 2</td>\n</tr>\n<tr>\n<td align=\"left\">~=</td>\n<td align=\"left\">不等于</td>\n<td align=\"left\">(1 ~= 2) 为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">and</td>\n<td align=\"left\">逻辑与</td>\n<td align=\"left\">(true and false) 为 false。</td>\n</tr>\n<tr>\n<td align=\"left\">or</td>\n<td align=\"left\">逻辑或</td>\n<td align=\"left\">(false or false) 为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">not</td>\n<td align=\"left\">逻辑非</td>\n<td align=\"left\">not(true and false) 为 true。</td>\n</tr>\n<tr>\n<td align=\"left\">.</td>\n<td align=\"left\">连接两个字符串</td>\n<td align=\"left\">a..b，若a为 “Hello “ ，b为 “World”, 输出结果为 “Hello World”</td>\n</tr>\n<tr>\n<td align=\"left\">#</td>\n<td align=\"left\">一元运算符，返回<strong>字符串</strong>或<strong>表</strong>的长度。</td>\n<td align=\"left\">#”Hello” 返回 5</td>\n</tr>\n</tbody></table>\n<h3 id=\"特别的，当对-table-使用-运算时会遇到的问题\"><a href=\"#特别的，当对-table-使用-运算时会遇到的问题\" class=\"headerlink\" title=\"特别的，当对 table 使用 # 运算时会遇到的问题\"></a>特别的，当对 <code>table</code> 使用 <code>#</code> 运算时会遇到的问题</h3><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">&gt; a &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, nil, &quot;3&quot;&#125;\n&gt; #a\n4\n&gt; b &#x3D; &#123;&quot;1&quot;, &quot;2&quot;,&quot;3&quot;, nil&#125;\n&gt; #b\n3</code></pre>\n\n<p>其获取长度时，依靠的其实是最大索引值：</p>\n<p>在获取表的长度时，根据的是表的最大索引的值:</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">tab1 &#x3D; &#123;&quot;1&quot;,&quot;2&quot;&#125;\nprint(&quot;tab1长度&quot;..#tab1)\n\ntab2 &#x3D; &#123;key1&#x3D;&quot;1&quot;,&quot;2&quot;&#125;\nprint(&quot;tab2长度&quot;..#tab2)\n\ntab3 &#x3D; &#123;&#125;\ntab3[1]&#x3D;&quot;1&quot;\ntab3[2]&#x3D;&quot;2&quot;\ntab3[4]&#x3D;&quot;4&quot;\nprint(&quot;tab3长度&quot;..#tab3)\n\n-- tab1长度2\n-- tab2长度1\n-- tab3长度4</code></pre>\n\n<p>而当下标越位超过 <code>1</code> 时：</p>\n<p>下标越过 1 位以上，长度还是为 2：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">tab3&#x3D;&#123;&#125;\ntab3[1]&#x3D;&quot;1&quot;\ntab3[2]&#x3D;&quot;2&quot;\ntab3[5]&#x3D;&quot;5&quot;\nprint(&quot;tab3的长度&quot;,#tab3)\n\n-- tab3的长度    2</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当我们获取 table 的长度的时候无论是使用 <strong>#</strong> 还是 <strong>table.getn</strong> 其都会在索引中断的地方停止计数，而导致无法正确取得 table 的长度。</p>\n<p>可以使用以下方法来代替：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">&gt;function table_leng(t)\n local leng&#x3D;0\n for k, v in pairs(t) do\n   leng&#x3D;leng+1\n end\n return leng;\n&gt;end</code></pre></blockquote>\n<h3 id=\"实现三目运算\"><a href=\"#实现三目运算\" class=\"headerlink\" title=\"实现三目运算\"></a>实现三目运算</h3><p>使用 Lua 的逻辑运算符实现就需要一些小技巧，写法如下（具体可查看<a href=\"https://www.runoob.com/w3cnote/trinocular-operators-in-lua.html\">Lua 中的三目运算符</a>）</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">(condition and &#123;result1&#125; or &#123;result2&#125;)[1]</code></pre>\n\n<p>例：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local isAppel &#x3D; false\nprint(isAppel and &quot;苹果&quot; or &quot;梨&quot;)</code></pre>\n\n<p>原理：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><p>(A and B), 若 A 为 false 返回 A(返回false) ;</p>\n</li>\n<li><p>(A or B), 若 A 为 false 返回 B ;</p>\n</li>\n<li><p>除 nil 外其他数据类型被当做 true</p>\n</li>\n</ul></blockquote>\n<h2 id=\"元表\"><a href=\"#元表\" class=\"headerlink\" title=\"元表\"></a>元表</h2><p>Lua中我们使用元表来增强Table的表现：通过为table赋予元表，我们可以改变对table进行操作时的默认行为，以达到更多的效果。</p>\n<p>当我们为一个 table 指定好对应的 metatable 后，我们就可以为元表增添即时字段来修改上层 table 行为了</p>\n<h3 id=\"为指定的表设定元表\"><a href=\"#为指定的表设定元表\" class=\"headerlink\" title=\"为指定的表设定元表\"></a>为指定的表设定元表</h3><p>两个主要方法：</p>\n<ul>\n<li><strong>setmetatable(table, metatable):</strong> 对指定 table 设置元表(metatable)，如果元表(metatable)中存在 __metatable 键值，setmetatable 会失败。</li>\n<li><strong>getmetatable(table):</strong> 返回对象的元表(metatable)。</li>\n</ul>\n<h3 id=\"为元表增添元方法\"><a href=\"#为元表增添元方法\" class=\"headerlink\" title=\"为元表增添元方法\"></a>为元表增添元方法</h3><p><del>仅列出部分主要方法</del></p>\n<h4 id=\"index-元方法\"><a href=\"#index-元方法\" class=\"headerlink\" title=\"__index 元方法\"></a>__index 元方法</h4><p>生效情况：当你通过键来访问 table 的时候，如果这个键没有值，那么 Lua 就会寻找该 table 的 metatable 中的__index 键。当 __index生效时：</p>\n<h5 id=\"index包含表格\"><a href=\"#index包含表格\" class=\"headerlink\" title=\"__index包含表格\"></a>__index包含表格</h5><p>若__index包含一个表格，Lua 会在表格中查找相应的键。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">other &#x3D; &#123; foo &#x3D; 3 &#125;\nt &#x3D; setmetatable(&#123;&#125;, &#123; __index &#x3D; other &#125;)\nprint(t.foo) -- 3\nprint(t.bar) -- nil</code></pre>\n\n<h5 id=\"若-index包含函数\"><a href=\"#若-index包含函数\" class=\"headerlink\" title=\"若__index包含函数\"></a>若__index包含函数</h5><p>若__index包含一个函数的话，Lua就会调用那个函数，table和键会作为参数传递给函数。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable &#x3D; setmetatable(&#123;key1 &#x3D; &quot;value1&quot;&#125;, &#123;\n  __index &#x3D; function(mytable, key)\n    print(mytable, key)\n  end\n&#125;)\nprint(mytable.key1, mytable.key2)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Lua 查找一个表元素时的规则，其实就是如下 3 个步骤:</p>\n<ul>\n<li>1.在表中查找，如果找到，返回该元素，找不到则继续</li>\n<li>2.判断该表是否有元表，如果没有元表，返回 nil，有元表则继续。</li>\n<li>3.判断元表有没有 __index 方法，如果 __index 方法为 nil，则返回 nil；如果 __index 方法是一个表，则重复 1、2、3；如果 __index 方法是一个函数，则返回该函数的返回值。</li>\n</ul>\n<p>该部分内容来自作者寰子：<a href=\"https://blog.csdn.net/xocoder/article/details/9028347\">https://blog.csdn.net/xocoder/article/details/9028347</a></p></blockquote>\n<h4 id=\"newindex-元方法\"><a href=\"#newindex-元方法\" class=\"headerlink\" title=\"__newindex 元方法\"></a>__newindex 元方法</h4><p>生效情况：当你给表的一个缺少的索引赋值，解释器就会查找__newindex 元方法。如果存在则调用该方法而不进行赋值操作。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>__newindex 元方法用来对表更新，__index则用来对表访问 。</p></blockquote>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">\nmymetatable &#x3D; &#123;&#125;\nmytable &#x3D; setmetatable(&#123;key1 &#x3D; &quot;value1&quot;&#125;, &#123; __newindex &#x3D; mymetatable &#125;)\n\nprint(mytable.key1)\n\nmytable.newkey &#x3D; &quot;新值2&quot;\nprint(mytable.newkey,mymetatable.newkey)\n\nmytable.key1 &#x3D; &quot;新值1&quot;\nprint(mytable.key1,mymetatable.key1)</code></pre>\n\n<h4 id=\"重载操作符：-add、-sub等元方法：\"><a href=\"#重载操作符：-add、-sub等元方法：\" class=\"headerlink\" title=\"重载操作符：__add、__sub等元方法：\"></a>重载操作符：__add、__sub等元方法：</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以下实例演示了两表相加操作：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">&gt;-- 自定义计算表中最大键值函数 table_maxn，即计算表的元素个数\n&gt;function table_maxn(t)\n   local mn &#x3D; 0\n   for k, v in pairs(t) do\n       if mn &lt; k then\n           mn &#x3D; k\n       end\n   end\n   return mn\n&gt;end\n\n&gt;-- 两表相加操作\n&gt;mytable &#x3D; setmetatable(&#123; 1, 2, 3 &#125;, &#123;\n __add &#x3D; function(mytable, newtable)\n   for i &#x3D; 1, table_maxn(newtable) do\n     table.insert(mytable, table_maxn(mytable)+1,newtable[i])\n   end\n   return mytable\n end\n&gt;&#125;)\n\n&gt;secondtable &#x3D; &#123;4,5,6&#125;\n\n&gt;mytable &#x3D; mytable + secondtable\n&gt;for k,v in ipairs(mytable) do\nprint(k,v)\n&gt;end\n\n&gt;-- 以上实例执行输出结果为：\n&gt;-- 1    1\n&gt;-- 2    2\n&gt;-- 3    3\n&gt;-- 4    4\n&gt;-- 5    5\n&gt;-- 6    6</code></pre></blockquote>\n<p>全部的操作符元方法如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">模式</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">__add</td>\n<td align=\"left\">对应的运算符 ‘+’.</td>\n</tr>\n<tr>\n<td align=\"left\">__sub</td>\n<td align=\"left\">对应的运算符 ‘-‘.</td>\n</tr>\n<tr>\n<td align=\"left\">__mul</td>\n<td align=\"left\">对应的运算符 ‘*’.</td>\n</tr>\n<tr>\n<td align=\"left\">__div</td>\n<td align=\"left\">对应的运算符 ‘/‘.</td>\n</tr>\n<tr>\n<td align=\"left\">__mod</td>\n<td align=\"left\">对应的运算符 ‘%’.</td>\n</tr>\n<tr>\n<td align=\"left\">__unm</td>\n<td align=\"left\">对应的运算符 ‘-‘.</td>\n</tr>\n<tr>\n<td align=\"left\">__concat</td>\n<td align=\"left\">对应的运算符 ‘..’.</td>\n</tr>\n<tr>\n<td align=\"left\">__eq</td>\n<td align=\"left\">对应的运算符 ‘==’.</td>\n</tr>\n<tr>\n<td align=\"left\">__lt</td>\n<td align=\"left\">对应的运算符 ‘&lt;’.</td>\n</tr>\n<tr>\n<td align=\"left\">__le</td>\n<td align=\"left\">对应的运算符 ‘&lt;=’.</td>\n</tr>\n</tbody></table>\n<h4 id=\"call-元方法\"><a href=\"#call-元方法\" class=\"headerlink\" title=\"__call 元方法\"></a>__call 元方法</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong><code>__call</code>: The call operation <code>func(args)</code>.</strong> </p>\n<p><strong>This event happens when Lua tries to call a non-function value</strong> (that is, <code>func</code> is not a function). The metamethod is looked up in <code>func</code>. If present, the metamethod is called with <code>func</code> as its first argument, followed by the arguments of the original call (<code>args</code>). All results of the call are the results of the operation. This is the only metamethod that allows multiple results.</p></blockquote>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">-- 自定义计算表中最大键值函数 table_maxn，即计算表的元素个数\nfunction table_maxn(t)\n    local mn &#x3D; 0\n    for k, v in pairs(t) do\n        if mn &lt; k then\n            mn &#x3D; k\n        end\n    end\n    return mn\nend\n\n-- 定义元方法__call\nmytable &#x3D; setmetatable(&#123;10&#125;, &#123;\n  __call &#x3D; function(mytable, newtable)\n        sum &#x3D; 0\n        for i &#x3D; 1, table_maxn(mytable) do\n                sum &#x3D; sum + mytable[i]\n        end\n    for i &#x3D; 1, table_maxn(newtable) do\n                sum &#x3D; sum + newtable[i]\n        end\n        return sum\n  end\n&#125;)\nnewtable &#x3D; &#123;10,20,30&#125;\nprint(mytable(newtable)) -- 70</code></pre>\n\n<h4 id=\"tostring-元方法\"><a href=\"#tostring-元方法\" class=\"headerlink\" title=\"__tostring 元方法\"></a>__tostring 元方法</h4><p>__tostring 元方法用于修改表的输出行为。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable &#x3D; setmetatable(&#123; 10, 20, 30 &#125;, &#123;\n    __tostring &#x3D; function(mytable)\n        sum &#x3D; 0\n        for k, v in pairs(mytable) do\n            \tsum &#x3D; sum + v\n            end\n        return &quot;表所有元素的和为 &quot; .. sum\n    end\n&#125;)\nprint(mytable) -- 表所有元素的和为 60</code></pre>\n\n<h3 id=\"绕开元方法\"><a href=\"#绕开元方法\" class=\"headerlink\" title=\"绕开元方法\"></a>绕开元方法</h3><p>以__newindex为例：设置了元方法 __newindex 后，在对新索引键(newkey)赋值时，会调用元方法，而自身不再主动进行赋值。而对于已存在的索引键(oldkey)，则会进行赋值，而不调用元方法 newindex。为了保证我们仍然能实现赋值语句本身的功能，我们在__newindex调用的方法中，会需要绕开该元方法本身直接进行赋值，这时我们需要用到 <code>rawser</code>、<code>rawget</code> 两个函数，它们能在完成本身功能时避免激活元方法</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>rawset (table, index, value)</code></p>\n<p>Sets the real value of <code>table[index]</code> to <code>value</code>, without using the <code>__newindex</code> metavalue. <code>table</code> must be a table, <code>index</code> any value different from <strong>nil</strong> and NaN, and <code>value</code> any Lua value.</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>rawget (table, index)</code></p>\n<p>Gets the real value of <code>table[index]</code>, without using the <code>__index</code> metavalue. <code>table</code> must be a table; <code>index</code> may be any value.</p></blockquote>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable &#x3D; setmetatable(&#123;key1 &#x3D; &quot;value1&quot;&#125;, &#123;\n    __newindex &#x3D; function(mytable, key, value)\n        rawset(mytable, key, &quot;\\&quot;&quot;..value..&quot;\\&quot;&quot;)\n    end\n&#125;)\n\nmytable.key1 &#x3D; &quot;new value&quot;\nmytable.key2 &#x3D; 4\n\nprint(mytable.key1, mytable.key2) -- new value    &quot;4&quot;</code></pre>\n\n<h2 id=\"协程-coroutine：\"><a href=\"#协程-coroutine：\" class=\"headerlink\" title=\"协程 - coroutine：\"></a>协程 - coroutine：</h2><p>Lua 协同程序(coroutine)与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协同程序共享全局变量和其它大部分东西。</p>\n<h3 id=\"线程和协同程序区别\"><a href=\"#线程和协同程序区别\" class=\"headerlink\" title=\"线程和协同程序区别\"></a>线程和协同程序区别</h3><p>线程与协同程序的主要区别在于：一个具有多个线程的程序可以同时运行几个线程，而在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起。</p>\n<h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">coroutine.create()</td>\n<td align=\"left\">创建 coroutine，返回 coroutine (<strong>thread</strong>)， 参数是一个函数<br />当和 resume 配合使用的时候就唤醒函数调用</td>\n</tr>\n<tr>\n<td align=\"left\">coroutine.resume()</td>\n<td align=\"left\">重启 coroutine，和 create 配合使用</td>\n</tr>\n<tr>\n<td align=\"left\">coroutine.yield()</td>\n<td align=\"left\">挂起 coroutine，将 coroutine 设置为挂起状态<br />这个和 resume 配合使用能有很多有用的效果</td>\n</tr>\n<tr>\n<td align=\"left\">coroutine.status()</td>\n<td align=\"left\">查看 coroutine 的状态<br />※: coroutine 的状态共三种：dead，suspended，running</td>\n</tr>\n<tr>\n<td align=\"left\">coroutine.wrap（）</td>\n<td align=\"left\">创建 coroutine 并返回一个<strong>函数</strong>，如调用该函数就进入 coroutine<br />和 create 功能重复</td>\n</tr>\n<tr>\n<td align=\"left\">coroutine.running()</td>\n<td align=\"left\">返回正在跑的 coroutine，一个 coroutine 就是一个线程<br />当使用running的时候，就是返回一个 corouting 的线程号</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">-- coroutine_test.lua 文件\nco &#x3D; coroutine.create(\n    function(i)\n        print(i);\n    end) \n-- 刚创建时并未执行\n\ncoroutine.resume(co, 1)   -- 1\nprint(coroutine.status(co))  -- dead -- 执行完毕\n\nprint(&quot;----------&quot;)  -- ----------\n \nco &#x3D; coroutine.wrap(\n    function(i)\n        print(i);\n    end\n)\n \nco(10)  -- 10 -- warp创建和create创建的调用方式是不一样的，因为create返回的是thread对象，而wrap返回的是function\nprint(&quot;----------&quot;)  -- ----------\n \nco2 &#x3D; coroutine.create(function()\n    for i&#x3D;1,10 do\n        print(i)\n        if i &#x3D;&#x3D; 3 then\n            print(coroutine.status(co2))  -- running\n            print(coroutine.running())  -- thread:XXXXXX\n        end\n        coroutine.yield()\n    end\nend)\n\ncoroutine.resume(co2) --1\ncoroutine.resume(co2) --2\ncoroutine.resume(co2) --3\n \nprint(coroutine.status(co2))   -- suspended\nprint(coroutine.running())  -- thread: 0x7fb801c04c88    true</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><p>coroutine.creat方法只要建立了一个协程 ，那么这个协程的状态默认就是suspend。使用resume方法启动后，会变成running状态；遇到yield时将状态设为suspend；如果遇到return，那么将协程的状态改为dead。</p>\n</li>\n<li><p>coroutine.resume方法需要特别注意的一点是，这个方法只要调用就会返回一个boolean值。</p>\n</li>\n<li><p>coroutine.resume方法如果调用成功，那么返回true；如果有yield方法，同时返回yield括号里的参数；如果没有yield，那么继续运行直到协程结束；直到遇到return，将协程的状态改为dead，并同时返回return的值。</p>\n</li>\n<li><p>coroutine.resume方法如果调用失败(调用状态为dead的协程会导致失败)，那么返回false，并且带上一句”cannot resume dead coroutine”</p>\n</li>\n<li><p>wrap不会返回boolean值，但是当coroutine执行完dead后，如继续执行该coroutine则会导致程序报错。</p>\n</li>\n<li><p>coroutine.yield 除了挂起协程外，还可以同时返回数据给 resume ,并且还可以同时定义下一次唤醒时需要传递的参数。</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">cor &#x3D; coroutine.create(function(a)\n    print(&quot;参数 a 值为：&quot;, a);\n    local b, c &#x3D; coroutine.yield(a + 1); --这里表示挂起协程，并且将a+1的值进行返回，并且指定下一次唤醒需要 b,c 两个参数。\n    print(&quot;参数 b, c 值分别为：&quot;, b, c);\n    return b * c; --协程结束，并且返回 b*c 的值。\nend);\n\nprint(&quot;第一次调用：&quot;, coroutine.resume(cor, 1));\nprint(&quot;第二次调用：&quot;, coroutine.resume(cor, 2, 2));\nprint(&quot;第三次调用：&quot;, coroutine.resume(cor));\n\n--[[\n参数 a 值为：    1\n第一次调用：    true    2\n参数 b, c 值分别为：    2    2\n第二次调用：    true    4\n第三次调用：    false    cannot resume dead coroutine ]]</code></pre>\n\n <pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">cor &#x3D; coroutine.wrap(function(a)\n    print(&quot;参数 a 值为：&quot;, a);\n    local b, c &#x3D; coroutine.yield(a + 1); --这里表示挂起协程，并且将a+1的值进行返回，并且指定下一次唤醒需要 b,c 两个参数。\n    print(&quot;参数 b, c 值分别为：&quot;, b, c);\n    return b * c; --协程结束，并且返回 b*c 的值。\nend);\n\nprint(&quot;第一次调用：&quot;, cor(1));\nprint(&quot;第二次调用：&quot;, cor(2, 2));\nprint(&quot;第三次调用：&quot;, cor());\n\n--[[\n参数 a 值为：   1\n第一次调用：    2\n参数 b, c 值分别为：    2       2\n第二次调用：    4\nlua: test.lua:18: cannot resume dead coroutine\nstack traceback:\n        [C]: in function &#39;cor&#39;\n        test.lua:18: in main chunk\n        [C]: in ?  ]]</code></pre>\n</blockquote>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p>迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。</p>\n<p>Lua 的迭代器（迭代函数）包含以下两种类型：</p>\n<ul>\n<li>无状态的迭代器</li>\n<li>多状态的迭代器</li>\n</ul>\n<h3 id=\"泛型-for-调用迭代器\"><a href=\"#泛型-for-调用迭代器\" class=\"headerlink\" title=\"泛型 for 调用迭代器\"></a>泛型 for 调用迭代器</h3><p>泛型 for 的执行过程：</p>\n<ul>\n<li>首先，初始化，计算 in 后面表达式的值，表达式应该返回泛型 for 需要的三个值：迭代函数、状态常量、控制变量；与多值赋值一样，如果表达式返回的结果个数不足三个会自动用 nil 补足，多出部分会被忽略。</li>\n<li>第二，将状态常量和控制变量作为参数调用迭代函数（注意：对于 for 结构来说，状态常量没有用处，仅仅在初始化时获取他的值并传递给迭代函数）。</li>\n<li>第三，将迭代函数返回的值赋给变量列表。</li>\n<li>第四，如果返回的第一个值为nil循环结束，否则执行循环体。</li>\n<li>第五，回到第二步再次调用迭代函数</li>\n</ul>\n<p>如：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">array &#x3D; &#123;&quot;Google&quot;, &quot;Runoob&quot;&#125;\n\nfor key,value in ipairs(array)\ndo\n   print(key, value)\nend</code></pre>\n\n<h3 id=\"无状态的迭代器\"><a href=\"#无状态的迭代器\" class=\"headerlink\" title=\"无状态的迭代器\"></a>无状态的迭代器</h3><p>类似pairs, ipairs的，没有更多信息(状态)的迭代器</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function square(iteratorMaxCount, currentNumber)\n   if currentNumber &lt; iteratorMaxCount\n   then\n      currentNumber &#x3D; currentNumber+1\n   return currentNumber, currentNumber*currentNumber\n   end\nend\n\nfor i,n in square(3,0) do\n   print(i,n)\nend</code></pre>\n\n<h3 id=\"多状态的迭代器\"><a href=\"#多状态的迭代器\" class=\"headerlink\" title=\"多状态的迭代器\"></a>多状态的迭代器</h3><p>为了保存更多信息，使用闭包来构造迭代器</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">array &#x3D; &#123;&quot;Google&quot;, &quot;Runoob&quot;&#125;\n\nfunction elementIterator (collection)\n   local index &#x3D; 0\n   local count &#x3D; #collection\n   -- 闭包函数\n   return function ()\n      index &#x3D; index + 1\n      if index &lt;&#x3D; count\n      then\n         --  返回迭代器的当前元素\n         return collection[index]\n      end\n   end\nend\n\nfor element in elementIterator(array)\ndo\n   print(element)\nend</code></pre>\n\n\n\n\n\n\n\n<h2 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2><p>从 Lua 5.1 开始，Lua 加入了标准的模块管理机制，可以把一些公用的代码放在一个文件里，以 API 接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度。</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">-- 文件名为 Test1.lua\n-- 定义一个名为 module 的模块(Table)\nmodule &#x3D; &#123;&#125;\n \n-- 定义一个常量\nmodule.constant &#x3D; &quot;这是一个常量&quot;\n \n-- 定义一个函数\nfunction module.func1()\n    io.write(&quot;这是一个公有函数！\\n&quot;)\nend\n \nlocal function func2()\n    print(&quot;这是一个私有函数！&quot;)\nend\n \nfunction module.func3()\n    func2()\nend\n \nreturn module</code></pre>\n\n<p>由上可知，<strong>模块的结构就是一个 table 的结构</strong>，因此可以像操作调用 table 里的元素那样来操作调用模块里的常量或函数。其中：</p>\n<ul>\n<li>func1 声明为程序块的全局变量，我们以这样的方式实现了 <strong>public</strong> 属性，可以在引入后随意调用.</li>\n<li>func2 则声明为程序块的局部变量，即表示一个 <strong>private</strong> 函数，因此是不能从外部访问模块里的这个私有函数，必须通过模块里的函数来调用.</li>\n</ul>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><h3 id=\"利用function实现面向对象\"><a href=\"#利用function实现面向对象\" class=\"headerlink\" title=\"利用function实现面向对象\"></a>利用function实现面向对象</h3><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>一句话说就是，在函数中引用外部函数来进行嵌套的函数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def outer(x):\n    def inner(y):\n        return x + y\n    return inner\n\nprint(outer(6)(5))\n\n&gt;&gt;&gt; 11</code></pre>\n\n<p>如代码所示，在outer函数内，又定义了一个inner函数，并且inner函数又引用了外部函数outer的变量x，这就是一个闭包了。在输出时，outer(6)(5),第一个括号传进去的值返回inner函数，其实就是返回6 + y，所以再传第二个参数进去，就可以得到返回值，6 + 5。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">-- 元类\nRectangle &#x3D; &#123;area &#x3D; 0, length &#x3D; 0, breadth &#x3D; 0&#125;\n\n-- 派生类的方法 new\nfunction Rectangle:new (o,length,breadth)\n  o &#x3D; o or &#123;&#125;\n  setmetatable(o, self)\n  self.__index &#x3D; self  -- 子类没设置area这三个属性时，会导回Rectangle\n  self.length &#x3D; length or 0\n  self.breadth &#x3D; breadth or 0\n  self.area &#x3D; length*breadth;\n  return o\nend\n\n-- 派生类的方法 printArea\nfunction Rectangle:printArea ()\n  print(&quot;矩形面积为 &quot;,self.area)\nend</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://zhuanlan.zhihu.com/p/115159195\">Lua中的self - 知乎 (zhihu.com)</a></p></blockquote>\n<h3 id=\"利用table实现\"><a href=\"#利用table实现\" class=\"headerlink\" title=\"利用table实现\"></a>利用table实现</h3><ul>\n<li>封装：指能够把一个实体的信息、功能、响应都装入一个单独的对象中的特性<ul>\n<li>table已经完备</li>\n</ul>\n</li>\n<li>继承：继承的方法允许在不改动原程序的基础上对其进行扩充，这样使得原功能得以保存，而新功能也得以扩展。这有利于减少重复编码，提高软件的开发效率。<ul>\n<li>我们需要自己实现clone/copy函数</li>\n</ul>\n</li>\n<li>多态：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。<ul>\n<li>Lua function已完备</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">-- clone function\nfunction clone(tb)\n    local ins &#x3D; &#123;&#125;\n    for key, var in pairs(tb) do\n        ins[key] &#x3D; var\n    end\n    return ins\nend\n-- copy function\nfunction copy(dist, tb)\n    for key, var in pairs(tb) do\n        dist[key] &#x3D; var\n    end\nend\n\n-- define original table\ntable &#x3D; &#123;&#125;\ntable.funHello &#x3D; function(tb)\n    print(&quot;Hello &quot;..tb.name)\nend\ntable.new &#x3D; function(name)\n    local self &#x3D; clone(table);\n    self.name &#x3D; name\n    return self\nend\n\n-- 实例化\nlocal tb1 &#x3D; table.new(&quot;World&quot;)\ntb1:funHello(tb1)  -- 事实上，常规地使用 . 或者 : 来引用funHello是几乎完全一样的，但是为了提升可读性，我们需要做出区分\n\n-- 继承\ntb2 &#x3D; &#123;&#125;\ntb2.new &#x3D; function(name)\n    local self &#x3D; table.new(name)\n    copy(self, tb2)\n    return self\nend\n\ntb2.tb2Hello &#x3D; function()\n    print(&quot;tb2 Hello&quot;)\nend\ntb2.funHello &#x3D; function()\n    print(&quot;tb2 fun Hello&quot;)\nend\n\nlocal m &#x3D; tb2.new(&quot;Lili&quot;)\nm:funHello()\nm:tb2Hello()</code></pre>\n\n\n\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>程序运行中错误处理是必要的，在我们进行文件操作，数据转移及web service 调用过程中都会出现不可预期的错误。如果不注重错误信息的处理，就会造成信息泄露，程序无法运行等情况。</p>\n<p>这里我们主要着眼运行时错误。</p>\n<h3 id=\"Raise-Error\"><a href=\"#Raise-Error\" class=\"headerlink\" title=\"Raise Error\"></a>Raise Error</h3><p>Lua主要使用两个函数：<code>assert</code> 和 <code>error</code> 来错误。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>assert (v [, message])</code></p>\n<ul>\n<li>Raises an error if the value of its argument <code>v</code> is false (i.e., <strong>nil</strong> or <strong>false</strong>); <ul>\n<li>In case of error, <code>message</code> is the error object; when absent, it defaults to “<code>assertion failed!</code>“</li>\n</ul>\n</li>\n<li>otherwise, returns all its arguments. </li>\n</ul>\n<blockquote>\n<p>assert首先检查第一个参数，若没问题，assert不做任何事情；否则，assert以第二个参数作为错误信息抛出。</p></blockquote>\n</blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>error (message [, level])</code></p>\n<p>Raises an error (see <a href=\"http://www.lua.org/manual/5.4/manual.html#2.3\">§2.3</a>) with <code>message</code> as the error object. This function never returns.</p>\n<p>Usually, <code>error</code> adds some information about the error position at the beginning of the message, if the message is a string. The <code>level</code> argument specifies how to get the error position. With level 1 (the default), the error position is where the <code>error</code> function was called. Level 2 points the error to where the function that called <code>error</code> was called; and so on. Passing a level 0 avoids the addition of error position information to the message.</p>\n<blockquote>\n<p>功能：终止正在执行的函数，并返回message的内容作为错误信息(error函数永远都不会返回)</p>\n<p>通常情况下，error会附加一些错误位置的信息到message头部。</p>\n<p>Level参数指示获得错误的位置:</p>\n<ul>\n<li>Level=1[默认]：为调用error位置(文件+行号)</li>\n<li>Level=2：指出哪个调用error的函数的函数</li>\n<li>Level=0:不添加错误位置信息</li>\n</ul></blockquote>\n</blockquote>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">local function add(a,b)\n   assert(type(a) &#x3D;&#x3D; &quot;number&quot;, &quot;a 不是一个数字&quot;)\n   assert(type(b) &#x3D;&#x3D; &quot;number&quot;, &quot;b 不是一个数字&quot;)\n   return a+b\nend\nadd(10)</code></pre>\n\n<h3 id=\"Process-Error\"><a href=\"#Process-Error\" class=\"headerlink\" title=\"Process Error\"></a>Process Error</h3><h4 id=\"pcall\"><a href=\"#pcall\" class=\"headerlink\" title=\"pcall\"></a>pcall</h4><p>pcall接收一个函数和要传递给后者的参数，并执行。最后根据执行结果是否有错误返回true或者或false及errorinfo</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">&gt; if pcall(function_name, ….) then\n-- 没有错误\nelse\n-- 存在错误\nend\n\n&gt; pcall(function(i) print(i) end, 33)\n33\ntrue\n\n&gt; pcall(function(i) print(i) error(&#39;error..&#39;) end, 33)\n33\nfalse   stdin:1: error..</code></pre>\n\n<p>pcall会以一种”保护模式”来调用第一个参数，因此pcall可以捕获函数执行中的任何错误。</p>\n<p>不过，通常在错误发生时，我们往往希望落得更多的调试信息，而不只是发生错误的位置。但pcall返回时，它已经销毁了调用桟的部分内容。为了获取更多信息，我们可以直接使用的办法：xpcall</p>\n<h4 id=\"xpcall\"><a href=\"#xpcall\" class=\"headerlink\" title=\"xpcall\"></a>xpcall</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>xpcall (f, msgh [, arg1, ···])</code></p>\n<p>This function is similar to <a href=\"http://www.lua.org/manual/5.4/manual.html#pdf-pcall\"><code>pcall</code></a>, except that it sets a new message handler <code>msgh</code>.</p></blockquote>\n<p>xpcall接收第二个参数——一个错误处理函数，当错误发生时，Lua会在调用桟展开（unwind）前调用错误处理函数，于是就可以在这个函数中使用 <strong><code>debug</code></strong> 库来获取关于错误的额外信息了。</p>\n<p>debug库提供了两个通用的错误处理函数:</p>\n<ul>\n<li>debug.debug：提供一个Lua提示符，让用户来检查错误的原因</li>\n<li>debug.traceback：根据调用桟来构建一个扩展的错误消息</li>\n</ul>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function myfunction ()\n   n &#x3D; n&#x2F;nil\nend\n\nfunction myerrorhandler( err )\n   print( &quot;ERROR:&quot;, err )\nend\n\nstatus &#x3D; xpcall( myfunction, myerrorhandler )\nprint( status )\n\n-- ERROR:  test.lua:10: attempt to perform arithmetic on a nil value (global &#39;n&#39;)     \t\t -- from xpcall(..)\n-- false \t\t-- from print( status )</code></pre>\n\n<h4 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>traceback ([thread,] [message [, level]])</strong></td>\n<td>如果 message 存在且不是字符串或 nil，那么函数不做任何处理直接返回 message。<br /> 否则，traceback将返回调用栈的栈回溯信息。 <br />字符串可选项 message 被添加在栈回溯信息的开头。 <br />数字可选项 level 指明从栈的哪一层开始回溯 （默认为 1 ，即调用 traceback 的那里）。</td>\n</tr>\n<tr>\n<td><strong>getinfo ([thread,] f [, what]):</strong></td>\n<td>返回关于一个函数信息的<strong>表</strong>。 <br />你可以直接提供该函数，也可以用一个<strong>数字</strong> f 表示该函数——它表示运行在指定线程的调用栈对应层次上的函数： <br />0 层表示当前函数（getinfo 自身）； <br />1 层表示调用 getinfo 的函数 （除非是尾调用，这种情况不计入栈）等等。<br /> 如果 f 是一个比活动函数数量还大的数字， getinfo 返回 nil。</td>\n</tr>\n<tr>\n<td><strong>getupvalue (f, up)</strong></td>\n<td>此函数返回函数 f 的第 up 个上值的名字和值。 如果该函数没有那个上值，返回 nil 。<br/>以 ‘(‘ （开括号）打头的变量名表示没有名字的变量 （去除了调试信息的代码块）</td>\n</tr>\n<tr>\n<td><strong>setupvalue (f, up, value):</strong></td>\n<td>这个函数将 value 设为函数 f 的第 up 个上值。 如果函数没有那个上值，返回 nil 否则，返回该上值的名字。</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">function newCounter ()\n    local n &#x3D; 0\n    local k &#x3D; 0\n    return function ()\n        k &#x3D; n\n        n &#x3D; n + 1\n        return n\n    end\nend\n  \ncounter &#x3D; newCounter()\nprint(counter())\nprint(counter())\n\nlocal i &#x3D; 1\nrepeat\n    name, val &#x3D; debug.getupvalue(counter, i)\n    if name then\n        print (&quot;index&quot;, i, name, &quot;&#x3D;&quot;, val)\n        \n        if(name &#x3D;&#x3D; &quot;n&quot;) then\n            debug.setupvalue (counter,2,10)\n        end\n        i &#x3D; i + 1\n    end -- if\nuntil not name\n\nprint(counter())</code></pre>\n\n<h2 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Lua 采用了自动内存管理。 这意味着你不用操心新创建的对象需要的内存如何分配出来， 也不用考虑在对象不再被使用后怎样释放它们所占用的内存。</p>\n<p>Lua 运行了一个<strong>垃圾收集器</strong>来收集所有<strong>死对象</strong> （即在 Lua 中不可能再访问到的对象）来完成自动内存管理的工作。 Lua 中所有用到的内存，如：字符串、表、用户数据、函数、线程、 内部结构等，都服从自动管理。</p>\n<p>Lua 实现了一个增量标记-扫描收集器。 它使用这两个数字来控制垃圾收集循环： <strong>垃圾收集器间歇率</strong>和<strong>垃圾收集器步进倍率</strong>。 这两个数字都使用百分数为单位(例如：值 100 在内部表示 1)：</p>\n<ul>\n<li><strong>垃圾收集器间歇率</strong>控制着收集器需要在开启新的循环前要等待多久。 增大这个值会减少收集器的积极性。 当这个值比 100 小的时候，收集器在开启新的循环前不会有等待。 设置这个值为 200 就会让收集器等到总内存使用量达到之前的两倍时才开始新的循环。</li>\n<li><strong>垃圾收集器步进倍率</strong>控制着收集器运作速度相对于内存分配速度的倍率。增大这个值不仅会让收集器更加积极，还会增加每个增量步骤的长度。 不要把这个值设得小于 100，那样的话收集器就工作的太慢了以至于永远都干不完一个循环。默认值是 200，这表示收集器以内存分配的”两倍”速工作。如果你把步进倍率设为一个非常大的数字(比你的程序可能用到的字节数还大 10%)，收集器的行为就像一个 stop-the-world 收集器。接着你若把间歇率设为 200，收集器的行为就和过去的 Lua 版本一样了：每次 Lua 使用的内存翻倍时，就做一次完整的收集。</li>\n</ul>\n<h3 id=\"运用\"><a href=\"#运用\" class=\"headerlink\" title=\"运用\"></a>运用</h3><p>我们可以通过函数**<code>collectgarbage ([opt [, arg]])</code>**来控制垃圾收集器：</p>\n<ul>\n<li><p>**collectgarbage(“setpause”, 200)**： 内存增大 2 倍（200/100）时自动释放一次内存 （200 是默认值）。</p>\n<p>**collectgarbage(“setstepmul”, 200)**：收集器单步收集的速度相对于内存分配速度的倍率，设置 200 的倍率等于 2 倍（200/100）。（200 是默认值）</p>\n</li>\n<li><p><strong>collectgarbage(“collect”):</strong> 做一次完整的垃圾收集循环。通过参数 opt 它提供了一组不同的功能：</p>\n</li>\n<li><p><strong>collectgarbage(“count”):</strong> 以 K 字节数为单位返回 Lua 使用的总内存数。 这个值有小数部分，所以只需要乘上 1024 就能得到 Lua 使用的准确字节数（除非溢出）。</p>\n</li>\n<li><p><strong>collectgarbage(“restart”):</strong> 重启垃圾收集器的自动运行。</p>\n</li>\n<li><p><strong>collectgarbage(“setpause”):</strong> 将 arg 设为收集器的 间歇率。 返回 间歇率 的前一个值。</p>\n</li>\n<li><p><strong>collectgarbage(“setstepmul”):</strong> 返回 步进倍率 的前一个值。</p>\n</li>\n<li><p><strong>collectgarbage(“step”):</strong> 单步运行垃圾收集器。 步长”大小”由 arg 控制。 传入 0 时，收集器步进（不可分割的）一步。 传入非 0 值， 收集器收集相当于 Lua 分配这些多（K 字节）内存的工作。 如果收集器结束一个循环将返回 true 。</p>\n</li>\n<li><p><strong>collectgarbage(“stop”):</strong> 停止垃圾收集器的运行。 在调用重启前，收集器只会因显式的调用运行。</p>\n</li>\n</ul>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">mytable &#x3D; &#123;&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;&#125;\nprint(collectgarbage(&quot;count&quot;))\n\nmytable &#x3D; nil\n\nprint(collectgarbage(&quot;count&quot;))\nprint(collectgarbage(&quot;collect&quot;))\nprint(collectgarbage(&quot;count&quot;))</code></pre>\n\n<p>执行以上程序，输出结果如下(注意内存使用的变化)：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">20.9560546875\n20.9853515625\n0\n19.4111328125</code></pre>\n\n<h2 id=\"Main-Origin\"><a href=\"#Main-Origin\" class=\"headerlink\" title=\"Main Origin\"></a>Main Origin</h2><ul>\n<li>Lua Official Site：<a href=\"http://www.lua.org/\">The Programming Language Lua</a></li>\n<li><a href=\"https://www.runoob.com/lua/lua-tutorial.html\">Lua 教程 | 菜鸟教程 (runoob.com)</a></li>\n</ul>\n","text":"安装# for ubuntu apt install lua5.4 # for windows # Go to github to install lua_for_windows 代码执行交互式编程lua5.4已经支持了交互式编程，这样我们可以直接在命令行中输入程序语句并立即查看...","link":"","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"25 mins."},"categories":[{"name":"Coding Language","slug":"Coding-Language","count":4,"path":"api/categories/Coding-Language.json"}],"tags":[{"name":"LUA","slug":"LUA","count":1,"path":"api/tags/LUA.json"},{"name":"Coding Language","slug":"Coding-Language","count":1,"path":"api/tags/Coding-Language.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">代码执行</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">交互式编程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E5%BC%8F%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">脚本式编程</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%EF%BC%9A\"><span class=\"toc-text\">变量：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">作用域</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#table\"><span class=\"toc-text\">table</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">实例：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%EF%BC%9A\"><span class=\"toc-text\">索引：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%97%A0%E5%BA%8F%EF%BC%9A\"><span class=\"toc-text\">无序：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">构建数组</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E2%80%9C%E6%8C%87%E9%92%88%E2%80%9D\"><span class=\"toc-text\">“指针”</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">插入删除</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Sort\"><span class=\"toc-text\">Sort</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#function\"><span class=\"toc-text\">function</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#thread\"><span class=\"toc-text\">thread</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">字符串格式化</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">匹配</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5%EF%BC%9A\"><span class=\"toc-text\">赋值语句：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">循环</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">流程控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%80%9C%E9%87%8D%E8%BD%BD%E2%80%9D\"><span class=\"toc-text\">“重载”</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">可变参数：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%88%AB%E7%9A%84%EF%BC%8C%E5%BD%93%E5%AF%B9-table-%E4%BD%BF%E7%94%A8-%E8%BF%90%E7%AE%97%E6%97%B6%E4%BC%9A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">特别的，当对 table 使用 # 运算时会遇到的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">实现三目运算</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E8%A1%A8\"><span class=\"toc-text\">元表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E6%8C%87%E5%AE%9A%E7%9A%84%E8%A1%A8%E8%AE%BE%E5%AE%9A%E5%85%83%E8%A1%A8\"><span class=\"toc-text\">为指定的表设定元表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E5%85%83%E8%A1%A8%E5%A2%9E%E6%B7%BB%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">为元表增添元方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#index-%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">__index 元方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#index%E5%8C%85%E5%90%AB%E8%A1%A8%E6%A0%BC\"><span class=\"toc-text\">__index包含表格</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%8B%A5-index%E5%8C%85%E5%90%AB%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">若__index包含函数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#newindex-%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">__newindex 元方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%BD%BD%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%9A-add%E3%80%81-sub%E7%AD%89%E5%85%83%E6%96%B9%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">重载操作符：__add、__sub等元方法：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#call-%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">__call 元方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#tostring-%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">__tostring 元方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%95%E5%BC%80%E5%85%83%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">绕开元方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E7%A8%8B-coroutine%EF%BC%9A\"><span class=\"toc-text\">协程 - coroutine：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E5%90%8C%E7%A8%8B%E5%BA%8F%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">线程和协同程序区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">基本语法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">迭代器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B-for-%E8%B0%83%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">泛型 for 调用迭代器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">无状态的迭代器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%8A%B6%E6%80%81%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">多状态的迭代器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96\"><span class=\"toc-text\">模块化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8function%E5%AE%9E%E7%8E%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">利用function实现面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">闭包</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8table%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">利用table实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">错误处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Raise-Error\"><span class=\"toc-text\">Raise Error</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Process-Error\"><span class=\"toc-text\">Process Error</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pcall\"><span class=\"toc-text\">pcall</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#xpcall\"><span class=\"toc-text\">xpcall</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#debug\"><span class=\"toc-text\">debug</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\"><span class=\"toc-text\">垃圾回收</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%94%A8\"><span class=\"toc-text\">运用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B-1\"><span class=\"toc-text\">实例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Main-Origin\"><span class=\"toc-text\">Main Origin</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"KMP","uid":"53896b079468d4c41963b2300dea196e","slug":"Algorithm/String Processing/KMP","date":"2022-12-23T04:23:23.000Z","updated":"2023-03-08T01:10:22.000Z","comments":true,"path":"api/articles/Algorithm/String Processing/KMP.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"KMP算法KMP算法作用简介：在计算机科学中，Knuth-Morris-Pratt字符串查找算法（简称为KMP算法）可在一个字符串S内查找一个词W的出现位置。一个词在不匹配时本身就包含足够的信息来确定下一个匹配可能的开始位置，此算法利用这一特性以避免重新检查先前配对的字符。 KM...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":26,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"String Processing","slug":"String-Processing","count":7,"path":"api/tags/String-Processing.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Encoding Methods","uid":"b7afcba22e06e2e680735e918e5fcad8","slug":"Language Learning/Encoding/Endcoding","date":"2022-12-23T04:23:23.000Z","updated":"2023-03-08T02:06:24.000Z","comments":true,"path":"api/articles/Language Learning/Encoding/Endcoding.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"计算机编码梳理ASCII码描述这是计算机编码发展历程里的第一阶段：ASCII码，即：American Standard Code for Information Interchange，美国信息交换标准代码 设计思路：在计算机内部存储单元的最小单位时Byte。不过Byte仍然可以...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"Coding Language","slug":"Coding-Language","count":4,"path":"api/categories/Coding-Language.json"}],"tags":[{"name":"ASCII","slug":"ASCII","count":1,"path":"api/tags/ASCII.json"},{"name":"U","slug":"U","count":1,"path":"api/tags/U.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
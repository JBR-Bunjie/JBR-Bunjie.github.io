{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/JavaScript/基本数据类型","date":"2023-03-07T16:14:45.545Z","updated":"2020-11-20T12:28:20.000Z","comments":true,"path":"api/articles/Language Learning/JavaScript/基本数据类型.json","keywords":null,"cover":null,"content":"<p>typeof——用于查看数据类型。console.log(tapeof x);</p>\n<pre><code class=\"javascript\">1.转义字符\n在字符串中我们可以使用`\\`作为转义字符，当表示一些特殊符号时可以使用`\\`进行转义。\n`\\&quot;` 表示 `&quot;` 双引号\n`\\&#39;` 表示 `&#39;` 单引号\n`\\\\` 表示`\\`\n`\\r` 表示回车\n`\\n` 表示换行。n 的意思是 newline。\n`\\t` 表示缩进。t 的意思是 tab。\n`\\b` 表示空格。b 的意思是 blank。\n</code></pre>\n<pre><code>1).获取字符串的长度\n通过字符串的 length 属性可以获取整个字符串的长度\nconsole.log(str1.length); // 4\n\n//一个空格算一个字符\n&quot;//一个中文算一个字符，一个英文算一个字符&quot;\n//一个标点符号（包括中文标点、英文标点）算一个字符\n\n2).字符串拼接\n多个字符串之间可以使用加号 `+` 进行拼接。\n\nvar str1 = &#39;千古壹号&#39; + &#39;永不止步&#39;;\n//千古壹号永不止步\n\nvar name = &#39;qianguyihao&#39;;\nvar age = &#39;26&#39;;\nconsole.log(&#39;我是&#39; + name + &#39;,age:&#39; + age); \n</code></pre>\n<p>2.布尔值：Boolean<br>布尔型有两个值：true 和 false。主要用来做逻辑判断： true 表示真，false 表示假。<br>布尔值直接使用就可以了，千万不要加上引号。</p>\n<p>代码：<br>var a = true;<br>console.log(typeof a);<br>控制台输出结果：<br>boolean</p>\n<p>布尔型和数字型相加时， true 按 1 来算 ，false 按 0 来算。</p>\n<p>3.数值型：Number<br>在JS中所有的数值都是 Number 类型，包括整数和浮点数（小数）。<br>    1).由于内存的限制，ECMAScript 并不能保存世界上所有的数值。<br>        最大值：<code>Number.MAX_VALUE</code>，这个值为： 1.7976931348623157e+308<br>        最小值：<code>Number.MIN_VALUE</code>，这个值为： 5e-324<br>        如果使用 Number 表示的变量超过了最大值，则会返回Infinity(<code>typeof Infinity</code>的返回结果是number)。<br>    2).NaN<br>        NaN是一个特殊的数字，表示Not a Number，非数值。<br>        console.log(“abc” * “abcd”); //按理说，字符串相乘是没有结果的，但如果你非要让JS去算，它就一定会给你一个结果。结果是NaN<br>    3).<br>        var a = “1”;<br>        var b = 2;<br>        console.log(a + b);//12<br>        如果加号两边<strong>都是</strong> Number 类型，此时是数字相加。否则，就是连字符（用来连接字符串）<br>    4).我们知道，<code>&quot;2&quot;+1</code>得到的结果其实是字符串，但是<code>&quot;2&quot;-1</code>得到的结果却是数值1，这是因为计算机自动帮我们进行了“<strong>隐式转换</strong>”<br>        也就是说，<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>这几个符号会自动进行隐式转换。例如：<br>        var a = “4” + 3 - 6;<br>        console.log(a);//37<br>        //虽然程序可以对<code>-</code>、<code>*</code>、<code>/</code>、`%``这几个符号自动进行“隐式转换”；但作为程序员，我们最好自己完成转换，方便程序的可读性。<br>    5).运算精度问题<br>        千万不要使用JS进行对精确度要求比较高的运算。<br>4.Null：空对象<br>    如果你想定义一个变量用来保存引用类型，但是还没想好放什么内容，这个时候，可以在初始化时将其设置为 null<br>5.undefined</p>\n<p>6.<br>| typeof 的代码写法 | 返回结果  |<br>| :—————- | :——-: |<br>| typeof 数字       |  number   |<br>| typeof 字符串     |  string   |<br>| typeof 布尔型     |  boolean  |<br>| typeof 对象       |  object   |<br>| typeof 方法       | function  |<br>| typeof null       |  object   |<br>| typeof undefined  | undefined |</p>\n<p>Array——数组</p>\n<p>instanceof和typeof\n </p>\n","text":"typeof——用于查看数据类型。console.log(tapeof x); 1.转义字符 在字符串中我们可以使用`\\`作为转义字符，当表示一些特殊符号时可以使用`\\`进行转义。 `\\&quot;` 表示 `&quot;` 双引号 `\\&#39;` 表示 `&#39;` 单引号...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/JavaScript/特殊运算符","date":"2023-03-07T16:14:45.550Z","updated":"2022-02-10T14:38:11.000Z","comments":true,"path":"api/articles/Language Learning/JavaScript/特殊运算符.json","keywords":null,"cover":null,"text":"条件运算符: ?条件运算符 - JavaScript | MDN (mozilla.org) 说明条件（三元）运算符是 JavaScript 仅有的使用三个操作数的运算符。 一个条件后面会跟一个问号（?），如果条件为 true，则问号后面的表达式A将会执行； 表达式A后面跟着一个...","link":"","photos":[],"count_time":{"symbolsCount":841,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/JavaScript/函数","date":"2023-03-07T16:14:45.542Z","updated":"2022-02-12T09:25:42.000Z","comments":true,"path":"api/articles/Language Learning/JavaScript/函数.json","keywords":null,"cover":null,"text":"箭头函数箭头函数 - JavaScript | MDN (mozilla.org) 说明箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或new.target。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
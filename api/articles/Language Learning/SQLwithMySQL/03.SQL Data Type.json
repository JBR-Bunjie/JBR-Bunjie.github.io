{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/SQLwithMySQL/03.SQL Data Type","date":"2023-03-07T16:14:45.755Z","updated":"2022-03-03T07:21:16.000Z","comments":true,"path":"api/articles/Language Learning/SQLwithMySQL/03.SQL Data Type.json","keywords":null,"cover":null,"content":"<h2 id=\"INT\"><a href=\"#INT\" class=\"headerlink\" title=\"INT\"></a>INT</h2><h3 id=\"INTEGER-Type\"><a href=\"#INTEGER-Type\" class=\"headerlink\" title=\"INTEGER Type\"></a>INTEGER Type</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>The keyword INT is a synonym for INTEGER.</p></blockquote>\n<p>Possible values: -2147483648 to 2147483647.</p>\n<p>Mapped to <code>java.lang.Integer</code>. The binary representation is a 4 byte integer with the sign bit flipped (so that negative values sorts before positive values).</p>\n<p>Example:</p>\n<p>INTEGER</p>\n<h3 id=\"UNSIGNED-INT-Type\"><a href=\"#UNSIGNED-INT-Type\" class=\"headerlink\" title=\"UNSIGNED_INT Type\"></a>UNSIGNED_INT Type</h3><p>Possible values: 0 to 2147483647. Mapped to <code>java.lang.Integer</code>. The binary representation is a 4 byte integer, matching the <code>HBase</code> Bytes.toBytes(int) method. The purpose of this type is to map to existing <code>HBase</code> data that was serialized using this <code>HBase</code> utility method. If that is not the case, use the regular signed type instead.</p>\n<p>Example:</p>\n<p>UNSIGNED_INT</p>\n<h3 id=\"BIGINT-Type\"><a href=\"#BIGINT-Type\" class=\"headerlink\" title=\"BIGINT Type\"></a>BIGINT Type</h3><p>Possible values: -9223372036854775807 to 9223372036854775807. Mapped to <code>java.lang.Long</code>. The binary representation is an 8 byte long with the sign bit flipped (so that negative values sorts before positive values).</p>\n<p>Example:</p>\n<p>BIGINT</p>\n<h3 id=\"UNSIGNED-LONG-Type\"><a href=\"#UNSIGNED-LONG-Type\" class=\"headerlink\" title=\"UNSIGNED_LONG Type\"></a>UNSIGNED_LONG Type</h3><p>Possible values: 0 to 9223372036854775807. Mapped to <code>java.lang.Long</code>. The binary representation is an 8 byte integer, matching the <code>HBase</code> Bytes.toBytes(long) method. The purpose of this type is to map to existing <code>HBase</code> data that was serialized using this <code>HBase</code> utility method. If that is not the case, use the regular signed type instead.</p>\n<p>Example:</p>\n<p>UNSIGNED_LONG</p>\n<h3 id=\"TINYINT-Type\"><a href=\"#TINYINT-Type\" class=\"headerlink\" title=\"TINYINT Type\"></a>TINYINT Type</h3><p>Possible values: -128 to 127. Mapped to <code>java.lang.Byte</code>. The binary representation is a single byte, with the sign bit flipped (so that negative values sorts before positive values).</p>\n<p>Example:</p>\n<p>TINYINT</p>\n<h3 id=\"UNSIGNED-TINYINT-Type\"><a href=\"#UNSIGNED-TINYINT-Type\" class=\"headerlink\" title=\"UNSIGNED_TINYINT Type\"></a>UNSIGNED_TINYINT Type</h3><p>Possible values: 0 to 127. Mapped to <code>java.lang.Byte</code>. The binary representation is a single byte, matching the <code>HBase</code> Bytes.toBytes(byte) method. The purpose of this type is to map to existing <code>HBase</code> data that was serialized using this <code>HBase</code> utility method. If that is not the case, use the regular signed type instead.</p>\n<p>Example:</p>\n<p>UNSIGNED_TINYINT</p>\n<h3 id=\"SMALLINT-Type\"><a href=\"#SMALLINT-Type\" class=\"headerlink\" title=\"SMALLINT Type\"></a>SMALLINT Type</h3><p>Possible values: -32768 to 32767. Mapped to <code>java.lang.Short</code>. The binary representation is a 2 byte short with the sign bit flipped (so that negative values sort before positive values).</p>\n<p>Example:</p>\n<p>SMALLINT</p>\n<h3 id=\"UNSIGNED-SMALLINT-Type\"><a href=\"#UNSIGNED-SMALLINT-Type\" class=\"headerlink\" title=\"UNSIGNED_SMALLINT Type\"></a>UNSIGNED_SMALLINT Type</h3><p>Possible values: 0 to 32767. Mapped to <code>java.lang.Short</code>. The binary representation is an 2 byte integer, matching the <code>HBase</code> Bytes.toBytes(short) method. The purpose of this type is to map to existing <code>HBase</code> data that was serialized using this <code>HBase</code> utility method. If that is not the case, use the regular signed type instead.</p>\n<p>Example:</p>\n<p>UNSIGNED_SMALLINT</p>\n<h2 id=\"FLOAT\"><a href=\"#FLOAT\" class=\"headerlink\" title=\"FLOAT\"></a>FLOAT</h2><h3 id=\"FLOAT-Type\"><a href=\"#FLOAT-Type\" class=\"headerlink\" title=\"FLOAT Type\"></a>FLOAT Type</h3><p>Possible values: -3.402823466 E + 38 to 3.402823466 E + 38. Mapped to <code>java.lang.Float</code>. The binary representation is an 4 byte float with the sign bit flipped (so that negative values sort before positive values).</p>\n<p>Example:</p>\n<p>FLOAT</p>\n<h3 id=\"UNSIGNED-FLOAT-Type\"><a href=\"#UNSIGNED-FLOAT-Type\" class=\"headerlink\" title=\"UNSIGNED_FLOAT Type\"></a>UNSIGNED_FLOAT Type</h3><p>Possible values: 0 to 3.402823466 E + 38. Mapped to <code>java.lang.Float</code>. The binary representation is an 4 byte float matching the <code>HBase</code> Bytes.toBytes(float) method. The purpose of this type is to map to existing <code>HBase</code> data that was serialized using this <code>HBase</code> utility method. If that is not the case, use the regular signed type instead.</p>\n<p>Example:</p>\n<p>UNSIGNED_FLOAT</p>\n<h3 id=\"DOUBLE-Type\"><a href=\"#DOUBLE-Type\" class=\"headerlink\" title=\"DOUBLE Type\"></a>DOUBLE Type</h3><p>Possible values: -1.7976931348623158 E + 308 to 1.7976931348623158 E + 308. Mapped to <code>java.lang.Double</code>. The binary representation is an 8 byte double with the sign bit flipped (so that negative values sort before positive value).</p>\n<p>Example:</p>\n<p>DOUBLE</p>\n<h3 id=\"UNSIGNED-DOUBLE-Type\"><a href=\"#UNSIGNED-DOUBLE-Type\" class=\"headerlink\" title=\"UNSIGNED_DOUBLE Type\"></a>UNSIGNED_DOUBLE Type</h3><p>Possible values: 0 to  1.7976931348623158 E + 308. Mapped to <code>java.lang.Double</code>. The binary representation is an 8 byte double matching the <code>HBase</code> Bytes.toBytes(double) method. The purpose of this type is to map to existing <code>HBase</code> data that was serialized using this <code>HBase</code> utility method. If that is not the case, use the regular signed type instead.</p>\n<p>Example:</p>\n<p>UNSIGNED_DOUBLE</p>\n<h3 id=\"DECIMAL-Type\"><a href=\"#DECIMAL-Type\" class=\"headerlink\" title=\"DECIMAL Type\"></a>DECIMAL Type</h3><p>Data type with fixed precision and scale. The maximum precision is 18 digits. Mapped to <code>java.math.BigDecimal</code>. The binary representation is binary comparable, variable length format. When used in a row key, it is terminated with a null byte unless it is the last column.</p>\n<p>Example:</p>\n<p>DECIMAL</p>\n<h2 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h2><h3 id=\"BOOLEAN-Type\"><a href=\"#BOOLEAN-Type\" class=\"headerlink\" title=\"BOOLEAN Type\"></a>BOOLEAN Type</h3><p>Possible values: <code>TRUE</code> and <code>FALSE</code>.</p>\n<p>Mapped to <code>java.lang.Boolean</code>. The binary representation is a single byte with 0 for false and 1 for true</p>\n<p>Example:</p>\n<p>BOOLEAN</p>\n<h3 id=\"TIME-Type\"><a href=\"#TIME-Type\" class=\"headerlink\" title=\"TIME Type\"></a>TIME Type</h3><p>The time data type. The format is yyyy-<code>MM</code>-dd hh:mm:ss, with both the date and time parts maintained. Mapped to <code>java.sql.Time</code>. The binary representation is an 8 byte long (the number of milliseconds from the epoch).</p>\n<p>Example:</p>\n<p>TIME</p>\n<h3 id=\"DATE-Type\"><a href=\"#DATE-Type\" class=\"headerlink\" title=\"DATE Type\"></a>DATE Type</h3><p>The date data type. The format is yyyy-<code>MM</code>-dd hh:mm:ss, with both the date and time parts maintained to a millisecond accuracy. Mapped to <code>java.sql.Date</code>. The binary representation is an 8 byte long (the number of milliseconds from the epoch).</p>\n<p>Example:</p>\n<p>DATE</p>\n<h3 id=\"TIMESTAMP-Type\"><a href=\"#TIMESTAMP-Type\" class=\"headerlink\" title=\"TIMESTAMP Type\"></a>TIMESTAMP Type</h3><p>The timestamp data type. The format is yyyy-<code>MM</code>-dd hh:mm:ss[.nnnnnnnnn]. Mapped to <code>java.sql.Timestamp</code> with an internal representation of the number of nanos from the epoch. The binary representation is 12 bytes: an 8 byte long for the epoch time plus a 4 byte integer for the nanos.</p>\n<p>Example:</p>\n<p>TIMESTAMP</p>\n<h3 id=\"VARCHAR-Type\"><a href=\"#VARCHAR-Type\" class=\"headerlink\" title=\"VARCHAR Type\"></a>VARCHAR Type</h3><p>A variable length String with an optional max byte length. The binary representation is <code>UTF8</code> matching the <code>HBase</code> Bytes.toBytes(String) method. When used in a row key, it is terminated with a null byte unless it is the last column.</p>\n<p>Mapped to <code>java.lang.String</code>.</p>\n<p>Example:</p>\n<p>VARCHAR<br>VARCHAR(255)</p>\n<h3 id=\"CHAR-Type\"><a href=\"#CHAR-Type\" class=\"headerlink\" title=\"CHAR Type\"></a>CHAR Type</h3><p>A fixed length String with single-byte characters. The binary representation is <code>UTF8</code> matching the <code>HBase</code> Bytes.toBytes(String) method.</p>\n<p>Mapped to <code>java.lang.String</code>.</p>\n<p>Example:</p>\n<p>CHAR(10)</p>\n<h3 id=\"BINARY-Type\"><a href=\"#BINARY-Type\" class=\"headerlink\" title=\"BINARY Type\"></a>BINARY Type</h3><p>Raw fixed length byte array.</p>\n<p>Mapped to <code>byte[]</code>.</p>\n<p>Example:</p>\n<p>BINARY</p>\n<h3 id=\"VARBINARY-Type\"><a href=\"#VARBINARY-Type\" class=\"headerlink\" title=\"VARBINARY Type\"></a>VARBINARY Type</h3><p>Raw variable length byte array.</p>\n<p>Mapped to <code>byte[]</code>.</p>\n<p>Example:</p>\n<p>VARBINARY</p>\n","text":"INTINTEGER Type The keyword INT is a synonym for INTEGER. Possible values: -2147483648 to 2147483647. Mapped to java.lang.Integer. The binar...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#INT\"><span class=\"toc-text\">INT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#INTEGER-Type\"><span class=\"toc-text\">INTEGER Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UNSIGNED-INT-Type\"><span class=\"toc-text\">UNSIGNED_INT Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BIGINT-Type\"><span class=\"toc-text\">BIGINT Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UNSIGNED-LONG-Type\"><span class=\"toc-text\">UNSIGNED_LONG Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TINYINT-Type\"><span class=\"toc-text\">TINYINT Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UNSIGNED-TINYINT-Type\"><span class=\"toc-text\">UNSIGNED_TINYINT Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SMALLINT-Type\"><span class=\"toc-text\">SMALLINT Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UNSIGNED-SMALLINT-Type\"><span class=\"toc-text\">UNSIGNED_SMALLINT Type</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#FLOAT\"><span class=\"toc-text\">FLOAT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FLOAT-Type\"><span class=\"toc-text\">FLOAT Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UNSIGNED-FLOAT-Type\"><span class=\"toc-text\">UNSIGNED_FLOAT Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DOUBLE-Type\"><span class=\"toc-text\">DOUBLE Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UNSIGNED-DOUBLE-Type\"><span class=\"toc-text\">UNSIGNED_DOUBLE Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DECIMAL-Type\"><span class=\"toc-text\">DECIMAL Type</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Other\"><span class=\"toc-text\">Other</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BOOLEAN-Type\"><span class=\"toc-text\">BOOLEAN Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TIME-Type\"><span class=\"toc-text\">TIME Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DATE-Type\"><span class=\"toc-text\">DATE Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TIMESTAMP-Type\"><span class=\"toc-text\">TIMESTAMP Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#VARCHAR-Type\"><span class=\"toc-text\">VARCHAR Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CHAR-Type\"><span class=\"toc-text\">CHAR Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BINARY-Type\"><span class=\"toc-text\">BINARY Type</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#VARBINARY-Type\"><span class=\"toc-text\">VARBINARY Type</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/SQLwithMySQL/04.MySQLCommands","date":"2023-03-07T16:14:45.757Z","updated":"2022-03-03T03:23:31.000Z","comments":true,"path":"api/articles/Language Learning/SQLwithMySQL/04.MySQLCommands.json","keywords":null,"cover":null,"text":"use &lt;database_name&gt; ","link":"","photos":[],"count_time":{"symbolsCount":27,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/SQLwithMySQL/03.Constraint","date":"2023-03-07T16:14:45.754Z","updated":"2022-03-03T06:55:39.000Z","comments":true,"path":"api/articles/Language Learning/SQLwithMySQL/03.Constraint.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
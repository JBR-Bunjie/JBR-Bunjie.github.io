{"title":"CatlikeCoding - Chapter01. Basics","uid":"b3bedba617b3d9cc8e9599d09276fd70","slug":"Rendering/CatLikePrograming/Chapter01","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T20:22:16.000Z","comments":true,"path":"api/articles/Rendering/CatLikePrograming/Chapter01.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"chapter01basics\">Chapter01：Basics</h1>\r\n<blockquote>\r\n<p>对于基础部分，除了这些内容外，仅记录了有用的 QA 内容：</p>\r\n</blockquote>\r\n<h2 id=\"game-objects-and-scripts\">Game Objects and Scripts</h2>\r\n<blockquote>\r\n<p><strong>1. Which Unity versions are appropriate?</strong></p>\r\n<p>...A further f1 suffix indicates an official final release...\r\n说明：因为 Unity 同时维护了多个版本，只有发行版会有 f1\r\n后缀，测试版分别为 b-beta、a-alpha，如：Beta 通道的 2023.1.0b20 和 Alpha\r\n通道的 2023.2.0a19</p>\r\n<p><strong>2. What is albedo?</strong></p>\r\n<p>Albedo is a Latin word which means whiteness. It's the color of\r\nsomething when illuminated by white light.</p>\r\n<p><strong>3. What is the default access modifier for\r\nclasses?</strong></p>\r\n<p>Without the access modifier, it would be as if we had written\r\n<strong>internal class Clock</strong>. That would restrict access to\r\ncode from the same assembly, which becomes relevant when you use code\r\npackaged in separate assemblies. To make sure it always works, make\r\nclasses public by default.</p>\r\n<p><strong>4. What does mono-behavior mean?</strong></p>\r\n<p><strong>The idea is that we can program our own components to add\r\ncustom behavior to game objects. That's what the behavior part refers\r\nto.</strong> It just happens to use the British spelling, which is an\r\noddity. <strong>The mono part refers to the way in which support for\r\ncustom code was added to Unity.</strong> It used the Mono project, which\r\nis a multi-platform implementation of the .NET framework. Hence,\r\n<code>MonoBehaviour</code>. It's an old name that we're stuck with due\r\nto backwards-compatibility.</p>\r\n<p><strong>5. Doesn't <code>Awake</code> have to be\r\n<code>public</code>?</strong></p>\r\n<p><code>Awake</code> and a collection of other methods are considered\r\nspecial Unity event methods. The Unity engine will find them and invoke\r\nthem when appropriate, no matter how we declare them. This happens from\r\noutside the managed .NET environment.</p>\r\n<p><strong>6. What's the difference between <code>localRotation</code>\r\nand <code>rotation</code>?</strong></p>\r\n<p>The <code>localRotation</code> property represents the rotation\r\ndescribed by the <code>Transform</code> component in isolation, thus it\r\nis a rotation relative to its parent. It's the rotation that you see in\r\nits inspector. In contrast, the <code>rotation</code> property\r\nrepresents the final rotation in world space, taking the entire object\r\nhierarchy into account. Setting that property would produce weird\r\nresults if we rotate the clock as a whole, because the arm would ignore\r\nthat as the property compensates for the rotation of the clock.</p>\r\n<p><strong>7. Shouldn't there be a warning that <code>hoursPivot</code>\r\nis never initialized?</strong></p>\r\n<p>The compiler can detect that no code assigns anything to the field\r\nand could indeed issue such a warning, because it is unaware that we set\r\nit up via Unity's inspector. However, this warning is suppressed by\r\ndefault. The suppression can be controlled via the project settings.\r\nThere's a <em>Suppress Common Warnings</em> toggle under <em>Player /\r\nOther Settings / Script Compilation</em>. It suppresses warnings about\r\nboth uninitialized and unused private fields.</p>\r\n<p><strong>8. What's special about <code>const</code>\r\nvalues?</strong></p>\r\n<p>The <strong><code>const</code></strong> keyword indicates that a\r\nvalue will never change and doesn't need to be a field. Instead, its\r\nvalue will be computed during compilation and is substituted for all\r\nusage of the constant. This is only possible for primitive types like\r\nnumbers.</p>\r\n<p><strong>9. What's a variable?</strong></p>\r\n<p>A variable acts like a field, except that it exists only while a\r\nmethod is being executed. It belongs to the method, not the class.\r\nFields、Properties、Variables</p>\r\n</blockquote>\r\n<h2 id=\"building-a-graph\">Building A Graph</h2>\r\n<blockquote>\r\n<p><strong>1. A good understanding of mathematics is essential when\r\nprogramming.</strong></p>\r\n<p><strong>2. It is a pre-fabricated game object that exists in the\r\nproject, not in a scene.</strong></p>\r\n<p><strong>3. Why is the background of the prefab scene uniform dark\r\nblue?</strong></p>\r\n<p>If you open a prefab instance that's part of a scene then the scene\r\nwindow will display its surroundings depending on the <em>Context</em>\r\nsettings shown at the top of the window. If you open the prefab asset\r\nthen there is no context. In the case of assets the skybox is disabled\r\nby default in the prefab scene, along with some other things. You can\r\nconfigure this via the scene window's toolbar, just like you can for the\r\nregular scene window. The skybox can be toggled via the dropdown menu\r\nthat looks like a stack with a star on top of it. Notice how the scene\r\ntoolbar settings change when you jump in and out of prefab asset\r\nmode.</p>\r\n<p><strong>4. What is the full inheritance chain of\r\n<code>MonoBehaviour</code>?</strong></p>\r\n<p><code>MonoBehaviour</code> extends <code>Behaviour</code>, which\r\nextends <code>Component</code>, which extends <code>Object</code>.</p>\r\n</blockquote>\r\n<h2 id=\"mathematical-surface\">Mathematical Surface</h2>\r\n<blockquote>\r\n<p>关于 Delegate，可用的拓展内容：<a\r\nhref=\"https://www.youtube.com/watch?v=3ZfwqWl-YI0\">(82) What are\r\nDelegates? (C# Basics, Lambda, Action, Func) - YouTube</a></p>\r\n</blockquote>\r\n<h2 id=\"measuring-performance\">Measuring Performance</h2>\r\n<blockquote>\r\n<p><strong>1. Whether a target frame rate can be achieved depends on how\r\nlong it takes to process individual frames. To reach 60FPS we must\r\nupdate and render each frame in less than 16.67 milliseconds. The time\r\nbudget for 30FPS is double that, thus 33.33ms per frame.</strong></p>\r\n<blockquote>\r\n<p>The statistics show a frame during which the CPU main thread took\r\n31.7ms and the render thread took 29.2ms. You'll likely get different\r\nresults, depending on your hardware and the game window screen size. In\r\nmy case it suggests that the entire frame took 60.9ms to render, but the\r\nstatistics panel reported 31.5FPS, matching the CPU time. <strong>The\r\nFPS indicator seems to takes the worst time and assumes that matches the\r\nframe rate. This is an oversimplification that only takes the CPU side\r\ninto account, ignoring the GPU and display. The real frame rate is\r\nlikely lower.</strong></p>\r\n</blockquote>\r\n<p><strong>2. </strong></p>\r\n<p>Part1:Text strings are objects. When we create a new one via SetText\r\nthis produces a new string object, which is responsible for the\r\nallocation of 106 bytes. Unity's UI refresh then increases this to 4.5\r\nkilobytes. While this isn't much it will accumulate,\r\n<u><strong>triggering a memory garbage collection process at some point\r\nwhich will result in an undesired frame duration spike.</strong></u></p>\r\n<p>Part2: <em>It is important to be aware of memory allocation for\r\ntemporary objects and eliminate recurring ones as much as possible.</em>\r\nFortunately SetText and Unity's UI update only perform these memory\r\nallocations in the editor, for various reasons, like updating the text\r\ninput field. If we profile a build then we will find some initial\r\nallocations but then no more. So <strong>it is essential to profile\r\nbuilds. Profiling editor play mode is only good for a first\r\nimpression.</strong></p>\r\n</blockquote>\r\n<h3 id=\"game-window-statistics\">Game Window Statistics</h3>\r\n<blockquote>\r\n<p><strong>GPU Instancing, SRP Batching and Dynamic\r\nBatching</strong></p>\r\n<p>Another way to improve rendering performance is by enabling GPU\r\ninstancing. This makes it possible to use a single draw command to tell\r\nthe GPU to draw many instances of one mesh with the same material,\r\nproviding an array of transformation matrices and optionally other\r\ninstance data. In this case we have to enable it per material. Ours have\r\nan <em>Enable GPU Instancing</em> toggle for it.</p>\r\n</blockquote>\r\n<h3 id=\"difference-between-lerp-and-smoothstep\">Difference between Lerp\r\nand SmoothStep</h3>\r\n<p><strong><em>Lerp</em> is shorthand for linear interpolation.</strong>\r\nIt will produce a straight constant-speed transition between the\r\nfunctions. We can make it look a bit smoother by slowing down the\r\nprogress near the start and end. This is done by replacing the raw\r\nprogress with an invocation of <code>Mathf.Smoothstep</code> with zero,\r\none, and the progress as arguments. <strong>It applies the\r\n3x<sup>2</sup>−2x<sup>3</sup> function, commonly known as\r\nsmoothstep.</strong> The first two parameter of <code>Smoothstep</code>\r\nare an offset and scale for this function, which we don't need so use 0\r\nand 1. <a\r\nhref=\"https://docs.unity3d.com/ScriptReference/Mathf.SmoothStep.html\">Unity\r\n- Scripting API: Mathf.SmoothStep (unity3d.com)</a></p>\r\n<p><img\r\nsrc=\"https://catlikecoding.com/unity/tutorials/basics/measuring-performance/automatic-function-switching/smoothstep.png\"\r\nalt=\"img\" /> 0–1 Smoothstep and linear.</p>\r\n<p><strong>More: </strong>The <code>Lerp</code> method clamps its third\r\nargument so it falls in the 0–1 range. The <code>Smoothstep</code>\r\nmethod does this as well. We configured the latter to output a 0–1\r\nvalue, so the extra clamp of <code>Lerp</code> is not needed. For cases\r\nlike this there is an alternative <code>LerpUnclamped</code> method, so\r\nlet's use that one instead.</p>\r\n<h2 id=\"compute-shaders\">Compute Shaders</h2>\r\n<blockquote>\r\n<p><strong>1. What's a MiB?</strong></p>\r\n<p>Because computer hardware uses binary numbers to address memory it's\r\npartitioned in powers of two, not powers of ten. MiB is the suffix for\r\nmebibyte, which is 2<sup>20</sup> = 1,024<sup>2</sup> = 1,048,576 bytes.\r\nThis was originally known as a megabyte—indicated with MB—but that's now\r\nsupposed to indicate 10<sup>6</sup> bytes, matching the official\r\ndefinition of a million. However, MB, GB, etc. are often still used\r\ninstead of MiB, GiB, etc. 关于 MiB 与 MB：<a\r\nhref=\"https://zh.wikipedia.org/wiki/Mebibyte\">Mebibyte -\r\n维基百科，自由的百科全书 (wikipedia.org)</a></p>\r\n</blockquote>\r\n<h2 id=\"references\">References</h2>\r\n<ul>\r\n<li>https://catlikecoding.com/unity/tutorials/basics/</li>\r\n<li></li>\r\n</ul>\r\n","text":"Chapter01：Basics 对于基础部分，除了这些内容外，仅记录了有用的 QA 内容： Game Objects and Scripts 1. Which Unity versions are appropriate? ...A further f1 suffix indi...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"CatlikeCoding","slug":"CatlikeCoding","count":1,"path":"api/categories/CatlikeCoding.json"},{"name":"Rendering","slug":"CatlikeCoding/Rendering","count":1,"path":"api/categories/CatlikeCoding/Rendering.json"}],"tags":[{"name":"Rendering","slug":"Rendering","count":3,"path":"api/tags/Rendering.json"},{"name":"CatlikeCoding","slug":"CatlikeCoding","count":1,"path":"api/tags/CatlikeCoding.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#chapter01basics\"><span class=\"toc-text\">Chapter01：Basics</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#game-objects-and-scripts\"><span class=\"toc-text\">Game Objects and Scripts</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#building-a-graph\"><span class=\"toc-text\">Building A Graph</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mathematical-surface\"><span class=\"toc-text\">Mathematical Surface</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#measuring-performance\"><span class=\"toc-text\">Measuring Performance</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#game-window-statistics\"><span class=\"toc-text\">Game Window Statistics</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#difference-between-lerp-and-smoothstep\"><span class=\"toc-text\">Difference between Lerp\r\nand SmoothStep</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#compute-shaders\"><span class=\"toc-text\">Compute Shaders</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#references\"><span class=\"toc-text\">References</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"全排列","uid":"4bbde60d3dafb255adad1c9293392efa","slug":"Rendering/NPR/General","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T20:06:49.000Z","comments":true,"path":"api/articles/Rendering/NPR/General.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"光照模型特点概括： 首先，分析一下所谓的 日式卡通渲染 都有些什么特点： 硬过渡亮暗面 描边 因此，其可采用的具体的表现形式有： 裁边漫反射 - StepDiffuse 裁边高光 裁边边缘光 裁边视角光 裁边光源光 裁边漫反射 卡通渲染里希望存在明快的色调对比，而不希望存在额外的...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"Rendering","slug":"Rendering","count":1,"path":"api/categories/Rendering.json"}],"tags":[{"name":"Rendering","slug":"Rendering","count":3,"path":"api/tags/Rendering.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"全排列","uid":"4bbde60d3dafb255adad1c9293392efa","slug":"Rendering/NPR/UST","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T15:41:24.000Z","comments":true,"path":"api/articles/Rendering/NPR/UST.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"什么是 UST？ UST，即 Unity Toon Shader，截至成文时，UST 的版本为 0.9.4-preivew。对应： Unity Toon Shader overview | Unity Toon Shader | 0.9.4-preview (unity3d.co...","link":"","photos":[],"count_time":{"symbolsCount":413,"symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
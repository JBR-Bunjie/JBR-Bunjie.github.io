{"title":"Unity Shader入门精要笔记 - Chapter9","uid":"56562ce640a8509a88d7ae0465a97a36","slug":"Rendering/UnityShaderBook/Chapter9","date":"2023-03-08T13:29:05.000Z","updated":"2023-03-10T13:10:17.000Z","comments":true,"path":"api/articles/Rendering/UnityShaderBook/Chapter9.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"chapter-9-更复杂的光照---more-complex-lights\">Chapter 9:\r\n更复杂的光照 - more complex lights</h1>\r\n<blockquote>\r\n<p>Last Changed: 3/10/2023</p>\r\n</blockquote>\r\n<h2 id=\"渲染路径\">1. 渲染路径</h2>\r\n<p>Unity渲染路径文档：</p>\r\n<blockquote>\r\n<p><a href=\"https://docs.unity3d.com/Manual/RenderingPaths.html\">Unity -\r\nManual: Rendering paths in the Built-in Render Pipeline\r\n(unity3d.com)</a></p>\r\n</blockquote>\r\n<p>关于书中提及的与编译指令 <code>pragma multi_compile_fwdbase</code>\r\n类似的官方文档：<a\r\nhref=\"https://docs.unity3d.com/Manual/SL-MultipleProgramVariants.html\">Unity\r\n- Manual: Declaring and using shader keywords in HLSL\r\n(unity3d.com)</a></p>\r\n<blockquote>\r\n<p>关于 <code>shader variant</code>，可以参考这篇文章：<a\r\nhref=\"https://zhuanlan.zhihu.com/p/369425274\">unity ShaderVariants处理 -\r\n知乎 (zhihu.com)</a></p>\r\n<blockquote>\r\n<p>You can write <strong>shader</strong> snippets that share common\r\ncode, but have different functionality when a given keyword is enabled\r\nor disabled.</p>\r\n<p>When Unity compiles these shader snippets, it creates separate shader\r\nprograms for the different combinations of enabled and disabled\r\nkeywords. These individual shader programs are called shader\r\nvariants.</p>\r\n</blockquote>\r\n</blockquote>\r\n<p>简单来说，这种操作类似于，我们通过在Shader运行时动态的改变宏(这里是\r\n<code>Keyword</code>)的方式来动态得到我们需要的结果。</p>\r\n<blockquote>\r\n<p>利用Inspector来快速检测以及debug：[<a\r\nhref=\"https://blog.csdn.net/qq_38642203/article/details/80151194\">Unity]各种Debug方法笔记_unity\r\ndebug_HytMiao的博客-CSDN博客</a></p>\r\n</blockquote>\r\n<h3 id=\"forward\">Forward</h3>\r\n<blockquote>\r\n<p><a\r\nhref=\"https://docs.unity3d.com/Manual/RenderTech-ForwardRendering.html\">Unity\r\n- Manual: Forward rendering path (unity3d.com)</a></p>\r\n<blockquote>\r\n\r\n</blockquote>\r\n</blockquote>\r\n<figure>\r\n<img\r\nsrc=\"http://static.zybuluo.com/candycat/575lq2zgnsaop3nw2miyobt3/forward_rendering.png\"\r\nalt=\"forward_rendering.png-175.5kB\" />\r\n<figcaption\r\naria-hidden=\"true\">forward_rendering.png-175.5kB</figcaption>\r\n</figure>\r\n<h3 id=\"deferred\">Deferred</h3>\r\n<blockquote>\r\n<p><a\r\nhref=\"https://docs.unity3d.com/Manual/RenderTech-DeferredShading.html\">Unity\r\n- Manual: Deferred Shading rendering path (unity3d.com)</a></p>\r\n<blockquote>\r\n<h2 id=\"overview\">Overview</h2>\r\n<p>When using deferred shading, there is no limit on the number of\r\nlights that can affect a <strong>GameObject</strong>. All lights are\r\nevaluated per-pixel, which means that they all interact correctly with\r\n<strong>normal maps</strong>, etc. Additionally, all lights can have\r\ncookies and shadows.</p>\r\n<p><em>Deferred shading has the advantage that the processing overhead\r\nof lighting is proportional to the number of <strong>pixels</strong> the\r\nlight shines on. This is determined by the size of the light volume in\r\nthe <strong>Scene</strong> regardless of how many GameObjects it\r\nilluminates.</em> Therefore, performance can be improved by keeping\r\nlights small. Deferred shading also has highly consistent and\r\npredictable behaviour. The effect of each light is computed per-pixel,\r\nso there are no lighting computations that break down on large\r\ntriangles.</p>\r\n<p>On the downside, deferred shading has no real support for\r\nanti-aliasing and can’t handle semi-transparent GameObjects (these are\r\nrendered using <a\r\nhref=\"https://docs.unity3d.com/Manual/RenderTech-ForwardRendering.html\">forward</a>\r\nrendering). There is also no support for the <strong>Mesh</strong>\r\nRenderer’s Receive Shadows flag and <strong>culling masks</strong> are\r\nonly supported in a limited way. You can only use up to four culling\r\nmasks. That is, your culling <strong>layer mask</strong> must at least\r\ncontain all layers minus four arbitrary layers, so 28 of the 32 layers\r\nmust be set. Otherwise you get graphical artifacts.</p>\r\n</blockquote>\r\n</blockquote>\r\n<h2 id=\"光源种类\">2. 光源种类</h2>\r\n<blockquote>\r\n<p>每一个光源有五个属性：</p>\r\n<ul>\r\n<li>位置</li>\r\n<li>方向</li>\r\n<li>颜色</li>\r\n<li>强度</li>\r\n<li>衰减</li>\r\n</ul>\r\n</blockquote>\r\n<h3 id=\"平行光\">平行光</h3>\r\n<ul>\r\n<li>最简单的光源：\r\n<ul>\r\n<li>影响范围无限大，因此，平行光光源的位置属性没有意义——它的几何属性只有方向</li>\r\n<li>光照强度没有衰减</li>\r\n</ul></li>\r\n</ul>\r\n<p>在场景中，一般只有太阳会作为平行光存在。Unity中默认场景中的初始光源即为Directional\r\nLight</p>\r\n<figure>\r\n<img\r\nsrc=\"http://static.zybuluo.com/candycat/uadla1q69533nc71z7g7ep0g/directional_ligth.png\"\r\nalt=\"directional_ligth.png-51.6kB\" />\r\n<figcaption aria-hidden=\"true\">directional_ligth.png-51.6kB</figcaption>\r\n</figure>\r\n<h3 id=\"点光源\">点光源</h3>\r\n<figure>\r\n<img\r\nsrc=\"http://static.zybuluo.com/candycat/tvbpd08wgc0s1o31v4nw20ad/point_ligtht.png\"\r\nalt=\"point_ligtht.png-89.4kB\" />\r\n<figcaption aria-hidden=\"true\">point_ligtht.png-89.4kB</figcaption>\r\n</figure>\r\n<blockquote>\r\n<p>可以注意到场景中的 <code>Sun</code> 变为了一个 <code>Lamp</code></p>\r\n</blockquote>\r\n<blockquote>\r\n<p>需要开启Scene视图中的光照才能看到效果</p>\r\n</blockquote>\r\n<h3 id=\"聚光灯\">聚光灯</h3>\r\n<figure>\r\n<img\r\nsrc=\"http://static.zybuluo.com/candycat/tx45g2n04xypq5cdlyblecrv/spot_light.png\"\r\nalt=\"spot_light.png-74.5kB\" />\r\n<figcaption aria-hidden=\"true\">spot_light.png-74.5kB</figcaption>\r\n</figure>\r\n<h3 id=\"面光源\">面光源</h3>\r\n<p>仅用于烘培，</p>\r\n<h2 id=\"光照衰减\">光照衰减</h2>\r\n<h2 id=\"阴影\">阴影</h2>\r\n<p>Unity采用\"Screenspace Shadow\r\nMap\"即\"屏幕空间的阴影映射技术\"来实现阴影采样——Unity先调用\r\n<code>LightMode</code> 为 <code>ShadowCaster</code>\r\n的Pass来得到可投射阴影的光源的<em>可投射阴影的光源</em>的\r\n<code>阴影映射纹理</code> 以及摄像机的 <code>深度纹理</code>，根据光源的\r\n<code>阴影映射纹理</code> 和摄像机的 <code>深度纹理</code>\r\n来得到屏幕空间的 <code>阴影图</code>——如摄像机的 <code>深度</code>\r\n图中记录的表面深度大于转换到 <code>阴影映射纹理</code>\r\n中的深度值，就说明该表面虽然是可见的，但是却处于该光源的阴影中。</p>\r\n<p>当开始涉及阴影的计算时，我们会同时涉及到两方面的处理：</p>\r\n<ul>\r\n<li>一个物体接收别人投射的阴影——我们在Shader中对阴影映射纹理进行采样，并把采样结果与最后的光照结果相乘来得到最终的阴影效果</li>\r\n<li>一个物体向别的物体投射阴影——将当前物体加入对应光源的生成阴影映射纹理的计算过程中，从而让其他物体在对阴影纹理采样时可以得到相关信息</li>\r\n</ul>\r\n<blockquote>\r\n<p>unity中的坐标系：</p>\r\n<p>unity在模型空间和世界空间中使用的是<strong>左手坐标系</strong>，但在观察空间当中，unity改用<strong>右手坐标系</strong>——此时摄像机的前向为-z方向，而之前则对应+z方向；当最后变化到屏幕空间时，unity采用NDC坐标系——重新使用左手坐标系</p>\r\n</blockquote>\r\n<h2 id=\"一个完整的foward路径shader\">一个完整的Foward路径Shader</h2>\r\n<pre class=\"line-numbers language-glsl\" data-language=\"glsl\"><code class=\"language-glsl\"></code></pre>\r\n<blockquote>\r\n<p>有参考：</p>\r\n<ul>\r\n<li><a href=\"https://www.cnblogs.com/xiaowangba/p/6314655.html\">【Unity\r\nShaders】Shader中的光照 - 王大王 - 博客园 (cnblogs.com)</a></li>\r\n<li></li>\r\n</ul>\r\n</blockquote>\r\n<blockquote>\r\n\r\n</blockquote>\r\n","text":"Chapter 9: 更复杂的光照 - more complex lights Last Changed: 3/10/2023 1. 渲染路径 Unity渲染路径文档： Unity - Manual: Rendering paths in the Built-in Render ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"Unity","slug":"Unity","count":18,"path":"api/categories/Unity.json"}],"tags":[{"name":"Unity","slug":"Unity","count":18,"path":"api/tags/Unity.json"},{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#chapter-9-%E6%9B%B4%E5%A4%8D%E6%9D%82%E7%9A%84%E5%85%89%E7%85%A7---more-complex-lights\"><span class=\"toc-text\">Chapter 9:\r\n更复杂的光照 - more complex lights</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">1. 渲染路径</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#forward\"><span class=\"toc-text\">Forward</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#deferred\"><span class=\"toc-text\">Deferred</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#overview\"><span class=\"toc-text\">Overview</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%89%E6%BA%90%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">2. 光源种类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B3%E8%A1%8C%E5%85%89\"><span class=\"toc-text\">平行光</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%82%B9%E5%85%89%E6%BA%90\"><span class=\"toc-text\">点光源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%9A%E5%85%89%E7%81%AF\"><span class=\"toc-text\">聚光灯</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%85%89%E6%BA%90\"><span class=\"toc-text\">面光源</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%89%E7%85%A7%E8%A1%B0%E5%87%8F\"><span class=\"toc-text\">光照衰减</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%B4%E5%BD%B1\"><span class=\"toc-text\">阴影</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84foward%E8%B7%AF%E5%BE%84shader\"><span class=\"toc-text\">一个完整的Foward路径Shader</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Unity Shader入门精要笔记 - Chapter12","uid":"2451d72464fab185c69a4d12737f61d9","slug":"Rendering/UnityShaderBook/Chapter12","date":"2023-03-08T13:29:25.000Z","updated":"2023-10-27T19:27:32.000Z","comments":true,"path":"api/articles/Rendering/UnityShaderBook/Chapter12.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Unity Shader入门精要笔记 - Chapter12 If you are doing a series of post-processing \"blits\", it's best for performance to get and release a temporar...","link":"","photos":[],"count_time":{"symbolsCount":473,"symbolsTime":"1 mins."},"categories":[{"name":"Unity","slug":"Unity","count":18,"path":"api/categories/Unity.json"}],"tags":[{"name":"Unity","slug":"Unity","count":18,"path":"api/tags/Unity.json"},{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Unity Shader入门精要笔记 - Chapter8","uid":"2bc7a87b3796f4bb992e3de5b4dfef67","slug":"Rendering/UnityShaderBook/Chapter8","date":"2023-03-08T13:28:45.000Z","updated":"2023-10-27T19:33:05.000Z","comments":true,"path":"api/articles/Rendering/UnityShaderBook/Chapter8.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Unity Shader入门精要笔记 - Chapter8 Alpha Test 只要没通过透明度测试，就舍弃该片元 Important HLSL Functions Clip Function https://learn.microsoft.com/en-us/windows/...","link":"","photos":[],"count_time":{"symbolsCount":628,"symbolsTime":"1 mins."},"categories":[{"name":"Unity","slug":"Unity","count":18,"path":"api/categories/Unity.json"}],"tags":[{"name":"Unity","slug":"Unity","count":18,"path":"api/tags/Unity.json"},{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
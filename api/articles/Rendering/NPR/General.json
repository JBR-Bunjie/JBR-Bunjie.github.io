{"title":"全排列","uid":"4bbde60d3dafb255adad1c9293392efa","slug":"Rendering/NPR/General","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T20:06:49.000Z","comments":true,"path":"api/articles/Rendering/NPR/General.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h2 id=\"光照模型特点概括：\"><a href=\"#光照模型特点概括：\" class=\"headerlink\" title=\"光照模型特点概括：\"></a>光照模型特点概括：</h2><p>首先，分析一下所谓的 <code>日式卡通渲染</code> 都有些什么特点：</p>\n<ul>\n<li>硬过渡亮暗面</li>\n<li>描边</li>\n<li></li>\n</ul>\n<p>因此，其可采用的具体的表现形式有：</p>\n<ul>\n<li>裁边漫反射 - StepDiffuse</li>\n<li>裁边高光</li>\n<li>裁边边缘光</li>\n<li>裁边视角光</li>\n<li>裁边光源光</li>\n</ul>\n<h3 id=\"裁边漫反射\"><a href=\"#裁边漫反射\" class=\"headerlink\" title=\"裁边漫反射\"></a>裁边漫反射</h3><p>卡通渲染里希望存在明快的色调对比，而不希望存在额外的过渡光照信息：</p>\n<p>在实际执行中，我们使用：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">float NL &#x3D; dot(N, L);\n\n&#x2F;&#x2F; 传统Lambert漫反射\n&#x2F;&#x2F; traditionalDiffuse &#x3D; _ObjectColor.rgb * _ColorTint_rgb * max(0, NL);\n\n&#x2F;&#x2F; 进行映射以增大光照区域，当然也会方便后续可能的RampTexture取样\nfloat NL01 &#x3D; NL * 0.5 + 0.5;\n\nfloat Threshold &#x3D; step(_LightThreshold, NL01);\ndiffuse &#x3D; lerp(DarkSide, BrightSide, Threshold);</code></pre>\n\n<p>来改写传统的漫反射光照，这样我们就能得到如下效果：</p>\n<p>![image-20230406155635370](........\\images\\Technical Artist\\Rendering\\NPR\\General\\StepDiffuse.png)<br>裁边漫反射结果示意</p>\n<p>当然，我们也可以尝试在明暗交界线上做出特殊效果：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">NL01 &#x3D; smoothstep(0, _Smooth, NL01 - _SmoothRange);\n&#x2F;&#x2F; 我们也可以用Step的结果加上traditional diffuse的结果来做出类似smooth step的效果，但是这样就达不到可控交界线位置的效果了\n&#x2F;&#x2F; https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;direct3dhlsl&#x2F;dx-graphics-hlsl-smoothstep\n\nfloat Threshold &#x3D; step(_LightThreshold, NL01);</code></pre>\n\n<h3 id=\"裁边高光\"><a href=\"#裁边高光\" class=\"headerlink\" title=\"裁边高光\"></a>裁边高光</h3><p>在传统的 BlinPhong 高光中，我们的光照计算公式为：<br /></p>\n<p>$$<br>result &#x3D; pow(NH, _Exp) * SpecularScale<br>$$</p>\n<p>而为了裁边，我们会改用这样的计算：<br /></p>\n<p>$$<br>NH &#x3D; pow(NH, _Exp)\\\\<br>result &#x3D; step(1 - _StepSpecularWidth * 0.01, NH)*SpecularIntensity;<br>$$</p>\n<p>改写的基本思路为：使用额外的宽度控制参数的情况下，利用 step 函数对整个结果进行裁剪。在完成裁剪后，最后使用一个 Intensity 参数来控制最终 specular 呈现的值，这个值不会改变高光的范围，只会改变高光的具体数值，这会对我们的后续处理(如果存在的话)产生影响。</p>\n<p>后面的大多数裁边算法的思路与裁剪高光的思路大体相同。</p>\n<h3 id=\"裁边边缘光\"><a href=\"#裁边边缘光\" class=\"headerlink\" title=\"裁边边缘光\"></a>裁边边缘光</h3><p>传统边缘光使用下方的计算方法，这会存在一个明显的明暗过渡：</p>\n<p>$$<br>float3\\space Rim &#x3D; pow(1-NV,RimExp)*RimIntensity;<br>$$</p>\n<p>因此我们使用一种和裁边高光相似的算法来改写这个过程：</p>\n<p>$$<br>Rim &#x3D; step(1 - _RimWidth * 0.01, 1 - NV) * RimIntensity;<br>$$</p>\n<p>当然，我们可能还会对边缘光做很多额外的处理，比如在某种情况下，我们只希望物体上存在亮部相关的边缘光，那么我们可以：</p>\n<p>$$<br>diffuse &#x3D; dot(N, L)\\\\<br>Rim &#x3D; step(1 - _RimWidth * 0.01, 1 - NV) * RimIntensity;\\\\<br>BrightSideRim &#x3D; lerp(0, Rim, diffuse)<br>$$</p>\n<p>这种实现所得到的结果类似于菲涅尔效果，这里也给出菲涅尔的实现（可参考入门精要 10.1.5 节）：</p>\n<p><strong>Schlick 菲涅尔近似等式</strong>：</p>\n<p>$$<br>F_{Schlick}(\\overrightarrow v,\\space \\overrightarrow n) &#x3D; F_0 + (1 - F_0)(1 - \\overrightarrow v \\cdot \\overrightarrow n)<br>$$</p>\n<p>其中，F<del>0</del>是一个反射系数，这回是一个常数，一般我们会将它暴露出来以方便调整；<strong>v</strong>是视角方向；<strong>n</strong>是表面法线</p>\n<p><strong>Empricial 菲涅尔近似等式</strong>：</p>\n<p>$$<br>F_{Empricial}(\\overrightarrow v,\\space \\overrightarrow n) &#x3D; max(0, min(1,\\space bias + scale \\times (1- \\overrightarrow v \\cdot \\overrightarrow n)^{power}))<br>$$</p>\n<p>bias，scale，power 都是控制项</p>\n<p>从以上不难看出，菲涅尔其实也可以被归为一种边缘光，而边缘光的核心就是：**<em>1 - NV</em>**</p>\n<h3 id=\"裁边视角光\"><a href=\"#裁边视角光\" class=\"headerlink\" title=\"裁边视角光\"></a>裁边视角光</h3><p>为了使眼睛看到的部分更亮而被运用的光。传统的视角光的计算是：</p>\n<p>$$<br>ViewLight &#x3D; pow(NV,\\space ViewLightExp)*ViewLightIntensity;<br>$$</p>\n<p>我们仍然采用雷同高光的做法：</p>\n<p>$$<br>ViewLight &#x3D; step(1 - _ViewLightWidth,\\space NV)*ViewLightIntensity;<br>$$</p>\n<h3 id=\"裁边光源光\"><a href=\"#裁边光源光\" class=\"headerlink\" title=\"裁边光源光\"></a>裁边光源光</h3><p>裁边光源光对 NL 做 Step，这意味着其结果与视角无关，仅与法线与光方向相关。这种 <code>光源光</code> 可以算作 <code>视角光</code> 的一种，只是光源方向和视角方向重合了</p>\n<p>$$<br>StepLight &#x3D; step(1-StepLightWidth,\\space NL);<br>$$</p>\n<p>关于裁光边缘的锯齿，我们也需要作出处理：<a href=\"http://tuyg.top/archives/850\">涂月观 (tuyg.top)</a></p>\n<h3 id=\"Outline\"><a href=\"#Outline\" class=\"headerlink\" title=\"Outline\"></a>Outline</h3><h4 id=\"Outline-的实现方式\"><a href=\"#Outline-的实现方式\" class=\"headerlink\" title=\"Outline 的实现方式\"></a>Outline 的实现方式</h4><p>Outline 有多种实现方式，入门精要中提到过这么几种：</p>\n<ol>\n<li>基于观察角度和表面法线的轮廓线渲染：使用视角方向和表面法线的点乘结果来得到轮廓信息</li>\n<li>过程式几何轮廓线渲染：使用两个 Pass 来进行构建：第一个 Pass 用来渲染背面的面片，并利用诸如顶点扩张等手法来使这些面片可见；第二个面片则用来渲染正面。这是大多数情况下的做法</li>\n<li>基于图像处理的轮廓线渲染：直接利用后处理来完成</li>\n<li>基于轮廓检测的轮廓线渲染：专用于需要精确检测出边缘并直接渲染它们以达到强烈的风格化效果的情况。利用一些特殊的判别式来确定轮廓线</li>\n</ol>\n<p>第二类中，我们一般采用背面法线外扩的方式，这是基于模型的：我们一般先沿法线方向挤出顶点。但是这个方法有较大的限制，如果盲目地进行，可能会出现各种问题，比如：转折处大的或者硬表面会经常发生断裂，内凹的模型在描边后正面的面片被背面的面片遮挡等问题。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>需要明确的是，平滑与平整是完全不同的</p></blockquote>\n<p>还是入门精要，书中共用到了两种描边方式：一种是后处理时，通过边缘检测来描边，另一种是背部法线扩张。事实上，单是这两种方法就能实现很不错的效果。我们逐个开始：</p>\n<h4 id=\"后处理边缘检测\"><a href=\"#后处理边缘检测\" class=\"headerlink\" title=\"后处理边缘检测\"></a>后处理边缘检测</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>核心内容基本对应入门精要 12.3 节</p></blockquote>\n<p>利用基于卷积的边缘检测，可以实现对剧烈变化的图像区块进行描边</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>“入门精要：…如果相邻像素之间存在差别明显的颜色、亮度、纹理等属性，我们就会认为他们之间应该有一条边界，这样的相邻像素之间的差值可以用梯度(Gradient)来表示…”</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>什么是卷积？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>3blue1brown: <a href=\"https://www.bilibili.com/video/BV1Vd4y1e7pj/?vd_source=c8eda79dd90c30ff02e09fb39906ac54\">【官方双语】那么……什么是卷积？_哔哩哔哩_bilibili</a></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>入门精要：</p>\n<p>卷积操作是指，使用一个卷积核，对一张图像中的每个像素进行一系列操作。卷积核通常是一个四方形网络结构，该区域对每个方格都有一个权重值，当对图像中的某个像素进行卷积时，我们会把卷积核的中心放置在像素上，并在翻转核之后再依次计算核中每个元素的每个元素和其覆盖的图像像素值的乘积并求和，得到的结果就是该位置的新像素值。</p></blockquote></blockquote>\n<p>边缘检测的卷积核被称为边缘检测算子，常用的边缘检测算子有：</p>\n<p>$$<br>Roberts:\\space<br>Gx &#x3D;<br>\\begin{bmatrix}<br> -1 &amp; 0\\<br> 0 &amp; 1<br>\\end{bmatrix};\\space<br>Gy&#x3D;<br>\\begin{bmatrix}<br> -1 &amp; 0\\<br> 0 &amp; 1<br>\\end{bmatrix} \\\\</p>\n<p>Prewitt:\\space<br>Gx &#x3D;<br>\\begin{bmatrix}<br> -1 &amp; 0 &amp; 1\\<br> -1 &amp; 0 &amp; 1\\<br> -1 &amp; 0 &amp; 1<br>\\end{bmatrix}</p>\n<p>\\begin{bmatrix}<br> -1 &amp; -1 &amp; -1\\<br> 0 &amp; 0 &amp; 0\\<br> 1 &amp; 1 &amp; 1<br>\\end{bmatrix} \\\\</p>\n<p>Sobel:\\space<br>Gx &#x3D;<br>\\begin{bmatrix}<br> -1 &amp; 0 &amp; 1\\<br> -2 &amp; 0 &amp; 2\\<br> -1 &amp; 0 &amp; 1<br>\\end{bmatrix}</p>\n<p>\\begin{bmatrix}<br> -1 &amp; -2 &amp; -1\\<br> 0 &amp; 0 &amp; 0\\<br> 1 &amp; 2 &amp; 1<br>\\end{bmatrix}<br>$$</p>\n<p>当我们进行卷积运算时，我们需要对每个像素分别使用 Gx 和 Gy 两个卷积核，进行两次卷积操作。之后我们会得到两个方向上的梯度值。再整合这两者就可以得到整体的梯度值：</p>\n<p>$$<br>G&#x3D;\\sqrt[2]{(G_x)^2+(G_y)^2}</p>\n<p>$$</p>\n<p>这个梯度值越大，说明当前位置像素周围的颜色变化越剧烈，就越有可能是图像的边缘。</p>\n<p>在 Built-in 管线中，我们可以直接通过向场景中的摄像机挂载脚本，通过调用<code>OnRenderImage</code>方法来实现后处理系统，但是 URP 中，我们则需要使用系统提供的 Render Feature 来完成这件事。具体实现可参考：<a href=\"https://zhuanlan.zhihu.com/p/526234665?utm_id=0\">unity urp 14 render feature 实现简单后处理系统 - 知乎 (zhihu.com)</a></p>\n<p>对新手而言，在 Render Feature 下有几个要点需要指明：</p>\n<h5 id=\"脚本结构：\"><a href=\"#脚本结构：\" class=\"headerlink\" title=\"脚本结构：\"></a>脚本结构：</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>快速创建 Render Feature 的脚本模板：Asserts-&gt;Create-&gt;Rendering-&gt;Universal Render Pipeline-&gt;Renderer Feature</p>\n<p><a href=\"https://068089dy.github.io/2021/06/14/2021-06-14-unity-urp-postprocessing/\">Unity 中 URP 管线实现后处理的几种方式 (068089dy.github.io)</a></p></blockquote>\n<p>具体流程为，构造一个继承<code>ScriptableRendererFeature</code>的主类，并在这之中或者引用别处的自定义<code>ScriptableRenderPass</code>，实现其中的部分方法。</p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">class custom : ScriptableRendererFeature &#123;\n    ...\n    public override void Create() &#123;\n        throw new System.NotImplementedException();\n    &#125;\n    ...\n    public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData) &#123;\n        throw new System.NotImplementedException();\n    &#125;\n\n    class RenderOutlinePass : ScriptableRenderPass &#123;\n    \tpublic override void Execute(ScriptableRenderContext context, ref RenderingData renderingData) &#123;\n            throw new System.NotImplementedException();\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h5 id=\"脚本一般流程：\"><a href=\"#脚本一般流程：\" class=\"headerlink\" title=\"脚本一般流程：\"></a>脚本一般流程：</h5><p>在当前的 Universal Renderer Data 下挂载好了对应的脚本后，我们的脚本就会开始生效。</p>\n<p>Create 函数会最先执行，我们在这里初始化我们会用到的全部数据及内容，包括<code>ScriptableRenderPass</code>的初始化等</p>\n<p>然后会转到 AddRenderPasses 的执行阶段，这里的标准流程是获取某个阶段的摄像机内容，传入<code>ScriptableRenderPass</code>实例中并将它重新压入这一帧的渲染队列</p>\n<p>等到了<code>ScriptableRenderPass</code>执行时，便会按照我们在<code>ScriptableRenderPass</code>类中定义的 Execute 方法执行，这一方法的具体内容和 OnRenderImage 函数很像</p>\n<h5 id=\"脚本核心内容：\"><a href=\"#脚本核心内容：\" class=\"headerlink\" title=\"脚本核心内容：\"></a>脚本核心内容：</h5><h6 id=\"外部参数\"><a href=\"#外部参数\" class=\"headerlink\" title=\"外部参数\"></a>外部参数</h6><p>对于一个后处理描边，我们会有如下的控制需求：</p>\n<ul>\n<li>实际使用的材质（也可以只汇入 Shader，然后再临时创建专用的 Material，但终究是需要一个所专用的 Material 用于最后的函数调用）</li>\n<li>描边的颜色、描边的程度等</li>\n<li>用于指定 Render Feature 生效阶段的<code>renderPassEvent</code></li>\n</ul>\n<h6 id=\"ScriptableRenderPass\"><a href=\"#ScriptableRenderPass\" class=\"headerlink\" title=\"ScriptableRenderPass\"></a>ScriptableRenderPass</h6><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><a href=\"https://docs.unity3d.com/Manual/render-pipelines-feature-comparison.html\">https://docs.unity3d.com/Manual/render-pipelines-feature-comparison.html</a><br>ScriptableRenderPass implements a logical rendering pass that can be used to extend Universal RP renderer.</li>\n</ul></blockquote>\n<p>在由 AddRenderPasses 压入栈之后，我们所定义的<code>ScriptableRenderPass</code>就会在对应的阶段被执行，为此，我们需要至少在<code>ScriptableRenderPass</code>中，实现这些内容：</p>\n<ul>\n<li><p>接收在 Create 函数中汇入的外部参数，包括指定 renderPassEvent、Material 等</p>\n</li>\n<li><p>编写实际执行调用 Material 去渲染的函数 Execute，这会包括：</p>\n<ul>\n<li>申请 Command Buffer</li>\n<li>获取当前阶段的摄像机内结果</li>\n<li>（如有多步的 Blit（如高斯模糊）调用）申请临时 RT 作缓冲区</li>\n<li>调用执行 Command Buffer</li>\n<li>释放所有资源</li>\n</ul>\n</li>\n<li><p>特别的，我们会遇到这些特殊内容：</p>\n<ul>\n<li><p>CommandBuffer: <a href=\"https://docs.unity3d.com/2021.3/Documentation/ScriptReference/Rendering.CommandBuffer.html\">https://docs.unity3d.com/2021.3/Documentation/ScriptReference/Rendering.CommandBuffer.html</a></p>\n<ul>\n<li>CommandBuffer.GetTemporaryRT: <a href=\"https://docs.unity3d.com/2021.3/Documentation/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html\">https://docs.unity3d.com/2021.3/Documentation/ScriptReference/Rendering.CommandBuffer.GetTemporaryRT.html</a></li>\n</ul>\n</li>\n<li><p>RenderTargetIdentifier: <a href=\"https://docs.unity3d.com/2021.3/Documentation/ScriptReference/Rendering.RenderTargetIdentifier.html%EF%BC%8C%E6%88%91%E4%BB%AC%E7%94%A8%E6%AD%A4%E5%AF%B9%E8%B1%A1%E6%9D%A5%E6%8E%A5%E6%94%B6%E4%BB%8ECamera%E4%BC%A0%E5%85%A5%E7%9A%84Src\">https://docs.unity3d.com/2021.3/Documentation/ScriptReference/Rendering.RenderTargetIdentifier.html，我们用此对象来接收从Camera传入的Src</a> RT</p>\n</li>\n<li><p>RenderTargetHandle: RenderTargetHandle.cs，于 namespace UnityEngine.Rendering.Universal 中</p>\n</li>\n<li><p>获取摄像机输入的 RT：</p>\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">&#x2F;&#x2F;&#x2F; &lt;summary&gt;\n&#x2F;&#x2F;&#x2F; Returns the camera color target for this renderer.\n&#x2F;&#x2F;&#x2F; It&#39;s only valid to call cameraColorTarget in the scope of &lt;c&gt;ScriptableRenderPass&lt;&#x2F;c&gt;.\n&#x2F;&#x2F;&#x2F; &lt;seealso cref&#x3D;&quot;ScriptableRenderPass&quot;&#x2F;&gt;.\n&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;\npublic RenderTargetIdentifier cameraColorTarget &#123;\n    get&#123;\n        if (!(m_IsPipelineExecuting || isCameraColorTargetValid)) &#123;\n            Debug.LogWarning(&quot;You can only call cameraColorTarget inside the scope of a ScriptableRenderPass. Otherwise the pipeline camera target texture might have not been created or might have already been disposed.&quot;);\n            &#x2F;&#x2F; TODO: Ideally we should return an error texture (BuiltinRenderTextureType.None?)\n            &#x2F;&#x2F; but this might break some existing content, so we return the pipeline texture in the hope it gives a &quot;soft&quot; upgrade to users.\n        &#125;\n        return m_CameraColorTarget;\n    &#125;\n&#125;</code></pre></li>\n</ul>\n</li>\n<li><p>RenderTextureDescriptor: <a href=\"https://docs.unity3d.com/2021.3/Documentation/ScriptReference/RenderTextureDescriptor.html\">https://docs.unity3d.com/2021.3/Documentation/ScriptReference/RenderTextureDescriptor.html</a></p>\n</li>\n</ul>\n<h4 id=\"更进一步：在后处理的边缘检测中加入深度与法线纹理\"><a href=\"#更进一步：在后处理的边缘检测中加入深度与法线纹理\" class=\"headerlink\" title=\"更进一步：在后处理的边缘检测中加入深度与法线纹理\"></a>更进一步：在后处理的边缘检测中加入深度与法线纹理</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>核心内容基本对应入门精要 13.4 节</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 urp 中快速获取深度图：<a href=\"https://juejin.cn/post/7239910114949152826\">【转载】Unity URP 获取深度图 - 掘金 (juejin.cn)</a></p>\n<p>在 urp 中自己生成特定情况下的深度图：<a href=\"https://zhuanlan.zhihu.com/p/351390737\">Unity3D:URP 下输出深度图以及自定义 ScriptableRenderer - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/575655530\">基于深度与法线贴图的屏幕后处理——Unity URP“_CameraDepthTexture”和“_CameraNormalsTexture”使用讲解 - 知乎 (zhihu.com)</a></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://codeantenna.com/a/ZS067JQogu\">练习项目(八)：在 URP 中显示法线图 - CodeAntenna</a></p></blockquote>\n<p>需要说明的是，我们使用了一种特殊的技巧：我们将 Shader 中的 Lightmode 的值，设为了 URP 中不存在的值，这样这个 Pass 一开始不会执行，而我们在 Render Feature 中捕获这个值，并去替换这个 Pass，就可以拿到深度与法线纹理。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@11.0/manual/urp-shaders/urp-shaderlab-pass-tags.html#urp-pass-tags-lightmode\">URP ShaderLab Pass tags | Universal RP | 11.0.0 (unity3d.com)</a></p>\n<p><a href=\"https://docs.unity3d.com/Manual/shader-predefined-pass-tags-built-in.html\">Unity - Manual: ShaderLab: Predefined Pass tags in the Built-in Render Pipeline (unity3d.com)</a></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://docs.unity3d.com/Manual/SL-PassTags.html\">Unity - Manual: ShaderLab: assigning tags to a Pass (unity3d.com)</a> “Using Pass tags with C# scripts” Part</p></blockquote>\n<h4 id=\"更多办法？\"><a href=\"#更多办法？\" class=\"headerlink\" title=\"更多办法？\"></a>更多办法？</h4><p>很显然，基于后处理的边缘检测所得到的结果不够精确：不只是人物，场景中的所有内容都被一视同仁地进行处理，使结果包含了大量的不必要的描边。</p>\n<p>而对于基于深度与法线后处理检测，虽然它能得到比较准确的效果，但是并非是完全适用于人物的描边.</p>\n<p>在入门精要中，对这种基于图像处理的轮廓线渲染的优缺点的描述为：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这种方法的优点在于，可以适用于任何种类的模型。但它也有自身的局限所在，一些深度和法线变化很小的轮廓无法被检测出来，例如桌子上的纸张。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在米哈游 2017 年的分享中，有这样两张 PPT：</p>\n<p>![image-20230729213125901](C:\\Users\\m1518\\OneDrive\\DOCUMENTS\\JBR-Bunjie.github.io\\source\\images\\Technical Artist\\Rendering\\NPR\\General\\007Outline.png)</p>\n<p>![image-20230729213257293](C:\\Users\\m1518\\OneDrive\\DOCUMENTS\\JBR-Bunjie.github.io\\source\\images\\Technical Artist\\Rendering\\NPR\\General\\008Outline.png)</p>\n<p>即，这种 Image Space 的 Outline 更加适用于对场景进行描边，而对于人物，我们会使用基于 Backface 的描边。这些内容与 2019 年的分享内容没有太大变化。</p></blockquote>\n<p>为了得到更加精确的描边，我们可以采用一种基于法线扩张的描边办法：</p>\n<h4 id=\"BackFacing-描边\"><a href=\"#BackFacing-描边\" class=\"headerlink\" title=\"BackFacing 描边\"></a>BackFacing 描边</h4><p>BackFacing 有很多优点，首先就是实现简单，特别是在 Unity Shader 中，我们只需要新开一个 Pass，然后沿法线方向延展顶点就可以了。</p>\n<p>另外，由于我们的描边是模型渲染的一个内容，我们可以很方便地控制很多细节，比如描边颜色与描边粗细等。</p>\n<p>在入门精要中，给出的描边 Pass 是在 View Space 中进行的，这样子有一个问题：描边的粗细是固定的，这意味着它会受透视效果而改变，即：当摄像机靠近角色时，描边会变得很粗。因此，我们应该在透视变换后再进行顶点扩张。我们需要将法线转换到 NDC Space，并在该空间下进行运算。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://zhuanlan.zhihu.com/p/109101851\">【01】从零开始的卡通渲染-描边篇 - 知乎 (zhihu.com)</a></p></blockquote>\n<p>在 NDC 下变换后，我们可以发现现在描边粗细已经是摄像机无关的了——无论摄像机远近，我们都能保证描边粗细一致。但是还有一个问题：描边会在某些边缘断裂，准确的说：当模型上出现弯折较大的部位的情况下，其对应位置的法线变化会过大，导致的结果就是最终的描边就会像这样裂开。</p>\n<p>为了解决这个问题，我们需要进行法线平滑。最简单的是平均法线，我们在脚本中检测每个顶点上的法线、相加，最后求平均。这样得到的结果基本上可以保证法线不会断裂，但是又另一个问题，就是如果直接使用平均法线，可能并不能完全保证法线的原始效果，我们可能需要对着个平滑过程进行加权：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://zhuanlan.zhihu.com/p/546554527\">Tech-Artist 学习笔记：Smooth Shade 平均法线与加权法线 - 知乎 (zhihu.com)</a></p></blockquote>\n<p>最后，当我们计算完平滑的法线后，我们需要将它存储到模型中，如果是使用模型的 Tangent 空间的话，我们可以直接将当前 Object Space 下的计算结果直接覆写 Tangent 中的数据，可是如果我们需要使用原始的 Tangent 数据，那我们就要考虑别的存储位置例如 UV，此时我们需要多做一件事：将法线转换到切线空间再存储：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://zhuanlan.zhihu.com/p/643206592\">Unity 平滑法线用于卡渲描边 - 知乎 (zhihu.com)</a></p></blockquote>\n<p>值得一提的是，这里的加权方式是角度变量加权。不同的平滑思路会造成不同的结果，这种不同甚至可能出现在模型的不同分件中，我们需要在不同的部位，采用不同的平滑方案。</p>\n<p>这样子，我们就基本上构建了一个完善的法线平滑脚本了。这是在模型导入后的二次处理，那么可不可以在模型导入时，就直接对其进行操作呢？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://zhuanlan.zhihu.com/p/107664564\">【Job&#x2F;Toon Shading Workflow】自动生成硬表面模型 Outline Normal - 知乎 (zhihu.com)</a></p></blockquote>\n<h4 id=\"一些补充\"><a href=\"#一些补充\" class=\"headerlink\" title=\"一些补充\"></a>一些补充</h4><p>至此，我们常用的描边办法就全部介绍完了，不过除此之外，还有几个可以补充的要点：</p>\n<ol>\n<li><p>入门精要中还提到过一种可用的轮廓线渲染办法：基于轮廓边检测的轮廓线渲染：Mesh 上的每一条边一定被两个三角形共用，检测 Mesh 上所有像这样相邻的三角面片是否符合：</p>\n<p>$$<br>(\\vec{n_0} * \\vec{v} &gt; 0) \\ne (\\vec{n_1} * \\vec{v} &gt; 0)\\\\<br>其中，n_0和n_1分别代表了两个相邻三角面片的法向，v是从视角到该边上任意顶点的方向<br>$$</p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/72734738\">渲染管线中的法线变换矩阵 - 知乎 (zhihu.com)</a></p>\n</li>\n</ol>\n<h3 id=\"高光形变\"><a href=\"#高光形变\" class=\"headerlink\" title=\"高光形变\"></a>高光形变</h3><p><a href=\"https://web.engr.oregonstate.edu/~mjb/cs519/Projects/Papers/HairRendering.pdf\">Hair Rendering and Shading (oregonstate.edu)</a></p>\n<p>我们并不希望高光总是⼀个圆形的光斑，因此我们需要对高光的形状也进行风格化处理：对高光点进行形变</p>\n<ol>\n<li><p>Kajiya Kay 模型：</p>\n<p>需要注意的是，这里的 T 并非是切线，它代表的是当前模型的副切线</p>\n</li>\n</ol>\n<p>$$<br>Specular &#x3D; L_i * k_s * \\sqrt{ \\overrightarrow T \\cdot \\overrightarrow H } ^ {strength}<br>$$</p>\n<p>![image-20230501160324069](........\\images\\Technical Artist\\Rendering\\NPR\\General\\004.png)<br>用 Kajiya Kay 模型实现的环形高光，Strength &#x3D;&#x3D; 64，没有使用 Shift Map，没有使用衰减。（计算 W 型高光需要使用 Shift Map，可用的处理办法可参考：<a href=\"https://zhuanlan.zhihu.com/p/135910659\">基于 Kajiya-Kay 模型的毛发渲染 - 知乎 (zhihu.com)</a>)</p>\n<ol start=\"2\">\n<li><p>Marschner 模型：<a href=\"http://graphics.stanford.edu/papers/hair/hair-sg03final.pdf\">hair-sg03final.pdf (stanford.edu)</a></p>\n<p>就 Marschner 模型本身而言，这是一个基于物理的模型。<a href=\"https://zhuanlan.zhihu.com/p/372590873\">Marschner Hair Model 论文细读与推导 - 知乎 (zhihu.com)</a></p>\n</li>\n</ol>\n<p>![img](........\\images\\Technical Artist\\Rendering\\NPR\\General\\005.png)</p>\n<p>R：反射光线，T：透射光线。R，TT 和 TRT 是三个对毛发反射率产生明显影响部分。<br>R： 从头发纤维表面向观察者反弹的光。TT： 折射到头发中并再次向观察者折射的光。TRT：光线折射到头发纤维中，从内表面反射，然后再次向观察者折射。</p>\n<p>$$<br>S&#x3D;S_R+S_{TT}+S_{TRT} \\<br>SP&#x3D;MP⋅NP\\<br>for \\space P &#x3D; R, TT, TRT\\<br>$$</p>\n<p><a href=\"https://www.cnblogs.com/timlly/p/11199385.html\">剖析 Unreal Engine 超真实人类的渲染技术 Part 3 - 毛发渲染及其它 - 0 向往 0 - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/372590873\">Marschner Hair Model 论文细读与推导 - 知乎 (zhihu.com)</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Kajiya-Kay 模型是一种基于经验的头发渲染模型，它使用头发的切线来模拟平面法线的效果，能够近似地表现出高光的效果，并使用漫反射项来近似头发间的相互散射情况。然而，Kajiya-Kay 模型不是基于物理的，它将头发建模成不透明的圆柱体，因此不能模拟光线可能穿过头发或者在头发中传播的情况，这就导致了其不能模拟出背光以及二次高光等效果</p>\n<p>Marschner 模型是一种基于物理的头发渲染模型，它在 Kajiya-Kay 模型的基础上对单根头发的散射情况进行了实验和理论分析，然后建立了一个实用且基于物理的着色模型。Marschner 模型将光照在毛发上的作用分为三个部分：R、TT 和 TRT。这三个部分对毛发反射率产生明显影响</p></blockquote>\n<ol start=\"3\">\n<li><p>近似的 Marschner Model？</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/434058280\">【UE4】材质藏宝阁 01_头发 Kajiya-Kay Shading - 知乎 (zhihu.com)</a>，即 Kajiya Kay + Shift Map + 第二层 Base Color 高光</p>\n</li>\n</ol>\n<p>可参考的各向异性高光示例：</p>\n<p><a href=\"https://www.cnblogs.com/2Yous/p/4234811.html\">Unity3D ShaderLab 各向异性高光 - 川北 - 博客园 (cnblogs.com)</a></p>\n<p>一个风格高光实现：</p>\n<p><a href=\"http://tuyg.top/archives/927\">涂月观 (tuyg.top)</a></p>\n<p>ATI 示例代码：</p>\n<p>![image-20230501191639629](........\\images\\Technical Artist\\Rendering\\NPR\\General\\006.png)</p>\n<h3 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h3><p>卡通渲染中，最重要的就是：使用 Step 的、强烈的明暗分割</p>\n<h2 id=\"PBR-下的材质表达\"><a href=\"#PBR-下的材质表达\" class=\"headerlink\" title=\"PBR 下的材质表达\"></a>PBR 下的材质表达</h2><h3 id=\"PBR-材质分析\"><a href=\"#PBR-材质分析\" class=\"headerlink\" title=\"PBR 材质分析\"></a>PBR 材质分析</h3><p>![image-20230407210359909](........\\images\\Technical Artist\\Rendering\\NPR\\General\\002_PBRInURP.png)<br>ASE 在 URP 管线下的默认 PBR 材质输出节点</p>\n<p>对于 PBR 预制节点所不能表达的效果，我们有两种解决思路：</p>\n<ol>\n<li><p>每种特性单独做一个 Shader。这种方案的优点是 Shader 功能相对确定，GPU 计算效率快，缺点是会增加 DrawCall</p>\n</li>\n<li><p>使用 UberShader 以包含所有特性，然后再通过 Mask 进行材质分层。这种方案的优点是 DrawCall 少，基本上⼀个通⽤的 Shader 可以满足大多数功能，同时可以减少贴图数量，缺点是会产生许多无用的 GPU 计算。</p>\n<p>产生无用计算的原因：</p>\n<p>![image-20230407212230706](........\\images\\Technical Artist\\Rendering\\NPR\\General\\003_UselessCalculations.png)<br>If 语句会先计算出括号里面的内容，再根据条件值判断是否接受这个值。这种运行方式与 CPU 不同，CPU 是先根据条件值是否为真，再去判断是否要执行括号内的内容。</p>\n</li>\n</ol>\n<p>和大多数最终的解决方案类似的——⼀种成熟的解决方案是 1 与 2 的结合，即在通用的 Shader 中做出通用特性，每个特性不能消耗太多的计算，而特殊的特性用单独的 Shader。</p>\n<h2 id=\"Texture-介绍\"><a href=\"#Texture-介绍\" class=\"headerlink\" title=\"Texture 介绍\"></a>Texture 介绍</h2><p>Base Map：基础色</p>\n<p>Shadow Map：暗部衰减色，我们</p>\n<h2 id=\"具体案例分析\"><a href=\"#具体案例分析\" class=\"headerlink\" title=\"具体案例分析\"></a>具体案例分析</h2><h3 id=\"罪恶装备-Strive-的渲染分析与复现\"><a href=\"#罪恶装备-Strive-的渲染分析与复现\" class=\"headerlink\" title=\"罪恶装备 Strive 的渲染分析与复现\"></a>罪恶装备 Strive 的渲染分析与复现</h3><h4 id=\"部分引用\"><a href=\"#部分引用\" class=\"headerlink\" title=\"部分引用\"></a>部分引用</h4><p><a href=\"https://www.cnblogs.com/TracePlus/p/4205798.html\">【翻译】西川善司「实验做出的游戏图形」「GUILTY GEAR Xrd -SIGN-」中实现的「纯卡通动画的实时 3D 图形」的秘密，前篇（1） - Trace0429 - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/TracePlus/p/4205834.html\">【翻译】西川善司「实验做出的游戏图形」「GUILTY GEAR Xrd -SIGN-」中实现的「纯卡通动画的实时 3D 图形」的秘密，前篇（2） - Trace0429 - 博客园 (cnblogs.com)</a></p>\n<h4 id=\"Shader-编写\"><a href=\"#Shader-编写\" class=\"headerlink\" title=\"Shader 编写\"></a>Shader 编写</h4><p>数据使用：</p>\n<ul>\n<li>BaseMap：基础⾊</li>\n<li>ShadowMap：暗部衰减色，与 BaseMap 相乘构成暗部</li>\n<li>DetailTex：磨损线条</li>\n<li>LightMap.r：高光类型</li>\n<li>LightMap.g：Ramp 偏移值</li>\n<li>LightMap.b：高光强度 mask</li>\n<li>LightMap.a：内勾线的 Mask</li>\n<li>VertexColor.r：AO，常暗部分</li>\n<li>VertexColor.g：用来区分身体的部位</li>\n<li>VertexColor.b：描边遮罩</li>\n<li>VertexColor.a：渲染无用</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"></code></pre>\n\n<h3 id=\"碧蓝幻想\"><a href=\"#碧蓝幻想\" class=\"headerlink\" title=\"碧蓝幻想\"></a>碧蓝幻想</h3><h3 id=\"原神\"><a href=\"#原神\" class=\"headerlink\" title=\"原神\"></a>原神</h3><h3 id=\"破晓传说\"><a href=\"#破晓传说\" class=\"headerlink\" title=\"破晓传说\"></a>破晓传说</h3><h3 id=\"战双\"><a href=\"#战双\" class=\"headerlink\" title=\"战双\"></a>战双</h3><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/109101851\">【01】从零开始的卡通渲染-描边篇 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/508319122\">Unity 描边法线平滑工具 x 踩坑记录 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/72734738\">渲染管线中的法线变换矩阵 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://forum.unity.com/threads/menuitem-is-not-working-properly.853822/\">MenuItem is not working properly - Unity Forum</a></li>\n<li><a href=\"https://docs.unity3d.com/cn/Packages/com.unity.render-pipelines.universal@12.1/manual/urp-shaders/urp-shaderlab-pass-tags.html\">URP ShaderLab Pass 标签 | Universal RP | 12.1.1 (unity3d.com)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/95986273\">【02】卡通渲染基本光照模型的实现 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://www.deviantart.com/o-dv89-o/art/Guilty-Gear-Strive-Sol-Badguy-pack-for-XPS-882551758\">Guilty Gear Strive - Sol Badguy XPS (Updated) by o-DV89-o on DeviantArt</a></li>\n<li><a href=\"https://github.com/ChiliMilk/URP_Toon\">ChiliMilk&#x2F;URP_Toon: A Toon Shader in Unity Universal Render Pipeline. (github.com)</a></li>\n<li>[<a href=\"https://zhuanlan.zhihu.com/p/546396053\">卡通渲染]一、罪恶装备角色渲染还原 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/135910659\">基于 Kajiya-Kay 模型的毛发渲染 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/434058280\">【UE4】材质藏宝阁 01_头发 Kajiya-Kay Shading - 知乎 (zhihu.com)</a></li>\n<li><a href=\"http://tuyg.top/\">涂月观-吹灯窗更明，月照一天雪 (tuyg.top)</a></li>\n<li><a href=\"https://web.engr.oregonstate.edu/~mjb/cs519/Projects/Papers/HairRendering.pdf\">Hair Rendering and Shading (oregonstate.edu)</a></li>\n<li><a href=\"https://twitter.com/Yoolies/status/1232345380991438855\">Yoolie on Twitter: “Tutorial on adjusting vertex normals for that 3D Anime look! since a couple of people were asking for it, I decided to make it! Hopefully it’s useful to someone! It’s the first tutorial I’ve ever made, so I apologize if it’s kind of unclear ;-; #blender #bnpr #3D #BlenderNPR https://t.co/3cctLK8tFD\" / Twitter</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/493802718\">TA 技术美术-罪恶装备角色还原 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/50943366\">灯光技法-伦勃朗光（2） - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/95986273\">【02】卡通渲染基本光照模型的实现 - 知乎 (zhihu.com)</a></li>\n</ul>\n<h2 id=\"既有渲染思路分析\"><a href=\"#既有渲染思路分析\" class=\"headerlink\" title=\"既有渲染思路分析\"></a>既有渲染思路分析</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://github.com/ChiliMilk/URP_Toon\">ChiliMilk&#x2F;URP_Toon: A Toon Shader in Unity Universal Render Pipeline. (github.com)</a></p></blockquote>\n<h3 id=\"项目结构分析\"><a href=\"#项目结构分析\" class=\"headerlink\" title=\"项目结构分析\"></a>项目结构分析</h3><p>该项目有三个</p>\n<p>共有</p>\n<h3 id=\"核心代码分析\"><a href=\"#核心代码分析\" class=\"headerlink\" title=\"核心代码分析\"></a>核心代码分析</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>分析的文件包括：</p>\n<ul>\n<li>ToonShaderGUI.cs</li>\n<li>Toon.shader</li>\n<li></li>\n</ul></blockquote>\n<p>Toon.shader 文件的布局仍然遵循我们所提到的 shaderlab 基本结构：</p>\n<ul>\n<li>Properties：作者在这里声明了所有可用的属性</li>\n<li>SubShader</li>\n<li>CustomEditor：作者的确在项目中定义一个简单的 GUI，虽然没有以窗口的形式呈现，但是材质的面板上确实变得不同了</li>\n<li>FallBack：FallBack 到 Error</li>\n</ul>\n<h4 id=\"Properties-部分\"><a href=\"#Properties-部分\" class=\"headerlink\" title=\"Properties 部分\"></a>Properties 部分</h4><p>Properties 部分存在于 3 ~ 101 行.</p>\n<p>其中定义的大部分属性都直接用</p>\n<h4 id=\"定义输入结构\"><a href=\"#定义输入结构\" class=\"headerlink\" title=\"定义输入结构\"></a>定义输入结构</h4><p>第一个 Pass 位于 109 ~ 130 行。它通过引入了两个外部文件来实现主要功能，它们分别是：<code>ToonInput.hlsl</code>，<code>ToonHairShadowMaskPass.hlsl</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">Pass\n&#123;\n    Name &quot;HairShadowMask&quot; &#x2F;&#x2F;\n    ZTest Less\n    Tags&#123;&quot;LightMode&quot;&#x3D;&quot;HairShadowMask&quot;&#125;\n    ZWrite Off\n    Cull Back\n\n    HLSLPROGRAM\n    #pragma exclude_renderers gles gles3 glcore\n    #pragma target 4.5\n\n    #pragma multi_compile_instancing\n    #pragma multi_compile_fog\n\n    #pragma vertex Vertex\n    #pragma fragment Fragment\n\n    #include &quot;..&#x2F;Include&#x2F;ToonInput.hlsl&quot;\n    #include &quot;..&#x2F;Include&#x2F;ToonHairShadowMaskPass.hlsl&quot;\n    ENDHLSL\n&#125;</code></pre>\n\n<p>显而易见的，这两个引入文件分别实现了输入结构的定义与 ShadowMap 的计算</p>\n<p>我们先从 <code>ToonInput.hlsl</code> 开始：</p>\n","text":"光照模型特点概括：首先，分析一下所谓的 日式卡通渲染 都有些什么特点： 硬过渡亮暗面 描边 因此，其可采用的具体的表现形式有： 裁边漫反射 - StepDiffuse 裁边高光 裁边边缘光 裁边视角光 裁边光源光 裁边漫反射卡通渲染里希望存在明快的色调对比，而不希望存在额外的过渡...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Rendering","slug":"Rendering","count":1,"path":"api/categories/Rendering.json"}],"tags":[{"name":"Rendering","slug":"Rendering","count":3,"path":"api/tags/Rendering.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B%E7%89%B9%E7%82%B9%E6%A6%82%E6%8B%AC%EF%BC%9A\"><span class=\"toc-text\">光照模型特点概括：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A3%81%E8%BE%B9%E6%BC%AB%E5%8F%8D%E5%B0%84\"><span class=\"toc-text\">裁边漫反射</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A3%81%E8%BE%B9%E9%AB%98%E5%85%89\"><span class=\"toc-text\">裁边高光</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A3%81%E8%BE%B9%E8%BE%B9%E7%BC%98%E5%85%89\"><span class=\"toc-text\">裁边边缘光</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A3%81%E8%BE%B9%E8%A7%86%E8%A7%92%E5%85%89\"><span class=\"toc-text\">裁边视角光</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A3%81%E8%BE%B9%E5%85%89%E6%BA%90%E5%85%89\"><span class=\"toc-text\">裁边光源光</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Outline\"><span class=\"toc-text\">Outline</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Outline-%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">Outline 的实现方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%8E%E5%A4%84%E7%90%86%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">后处理边缘检测</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BB%93%E6%9E%84%EF%BC%9A\"><span class=\"toc-text\">脚本结构：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E4%B8%80%E8%88%AC%E6%B5%81%E7%A8%8B%EF%BC%9A\"><span class=\"toc-text\">脚本一般流程：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E6%A0%B8%E5%BF%83%E5%86%85%E5%AE%B9%EF%BC%9A\"><span class=\"toc-text\">脚本核心内容：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">外部参数</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#ScriptableRenderPass\"><span class=\"toc-text\">ScriptableRenderPass</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E8%BF%9B%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%9C%A8%E5%90%8E%E5%A4%84%E7%90%86%E7%9A%84%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E4%B8%AD%E5%8A%A0%E5%85%A5%E6%B7%B1%E5%BA%A6%E4%B8%8E%E6%B3%95%E7%BA%BF%E7%BA%B9%E7%90%86\"><span class=\"toc-text\">更进一步：在后处理的边缘检测中加入深度与法线纹理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E5%A4%9A%E5%8A%9E%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">更多办法？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#BackFacing-%E6%8F%8F%E8%BE%B9\"><span class=\"toc-text\">BackFacing 描边</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">一些补充</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E5%85%89%E5%BD%A2%E5%8F%98\"><span class=\"toc-text\">高光形变</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">小结：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PBR-%E4%B8%8B%E7%9A%84%E6%9D%90%E8%B4%A8%E8%A1%A8%E8%BE%BE\"><span class=\"toc-text\">PBR 下的材质表达</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PBR-%E6%9D%90%E8%B4%A8%E5%88%86%E6%9E%90\"><span class=\"toc-text\">PBR 材质分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Texture-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">Texture 介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">具体案例分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%AA%E6%81%B6%E8%A3%85%E5%A4%87-Strive-%E7%9A%84%E6%B8%B2%E6%9F%93%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0\"><span class=\"toc-text\">罪恶装备 Strive 的渲染分析与复现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E5%88%86%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">部分引用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Shader-%E7%BC%96%E5%86%99\"><span class=\"toc-text\">Shader 编写</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A2%A7%E8%93%9D%E5%B9%BB%E6%83%B3\"><span class=\"toc-text\">碧蓝幻想</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A5%9E\"><span class=\"toc-text\">原神</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A0%B4%E6%99%93%E4%BC%A0%E8%AF%B4\"><span class=\"toc-text\">破晓传说</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%98%E5%8F%8C\"><span class=\"toc-text\">战双</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Reference\"><span class=\"toc-text\">Reference</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A2%E6%9C%89%E6%B8%B2%E6%9F%93%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">既有渲染思路分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90\"><span class=\"toc-text\">项目结构分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">核心代码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Properties-%E9%83%A8%E5%88%86\"><span class=\"toc-text\">Properties 部分</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">定义输入结构</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"一些PowerShell, CMD命令","uid":"708e72f78c0920c292ea7dfe7d2abfd7","slug":"Deploy/Windows/一些PowerShell·CMD命令","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T19:03:35.000Z","comments":true,"path":"api/articles/Deploy/Windows/一些PowerShell·CMD命令.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"一些PowerShell, CMD命令Windows 命令 | Microsoft Docs 搜索文件中文本的模式 | findstr # https:&#x2F;&#x2F;docs.microsoft.com&#x2F;zh-cn&#x2F;windows-server&#x...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"Windows","slug":"Windows","count":1,"path":"api/categories/Windows.json"}],"tags":[{"name":"Windows","slug":"Windows","count":2,"path":"api/tags/Windows.json"},{"name":"Powershell","slug":"Powershell","count":1,"path":"api/tags/Powershell.json"},{"name":"CMD","slug":"CMD","count":1,"path":"api/tags/CMD.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"全排列","uid":"4bbde60d3dafb255adad1c9293392efa","slug":"Rendering/NPR/UST","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T15:41:24.000Z","comments":true,"path":"api/articles/Rendering/NPR/UST.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"什么是 UST？UST，即 Unity Toon Shader，截至成文时，UST 的版本为 0.9.4-preivew。对应： Unity Toon Shader overview | Unity Toon Shader | 0.9.4-preview (unity3d.com...","link":"","photos":[],"count_time":{"symbolsCount":413,"symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
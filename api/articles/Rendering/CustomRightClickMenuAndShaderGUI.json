{"title":"Custom Right-Click Menu And Shader GUI排列","uid":"a21e0605e124236f924885120b82421a","slug":"Rendering/CustomRightClickMenuAndShaderGUI","date":"2023-04-10T08:32:30.000Z","updated":"2023-10-27T20:19:38.000Z","comments":true,"path":"api/articles/Rendering/CustomRightClickMenuAndShaderGUI.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"custom-right-click-menu-and-shader-gui\">Custom Right-Click Menu\r\nAnd Shader GUI</h1>\r\n<blockquote>\r\n<p>All the operations in this project should be done in a folder named\r\n\"Editor\", no matter where this folder is though.</p>\r\n</blockquote>\r\n<h2 id=\"what-do-we-want-to-do\">What do we want to do?</h2>\r\n<p>we want to set up a custom file template in the right-click menu, so\r\nwe can quickly create the files that we need.</p>\r\n<p>To archive this, we need to:</p>\r\n<ul>\r\n<li>Set up the file template</li>\r\n<li>Create C# Scripts which could be embedded into the editor to archive\r\nthe file creating logic</li>\r\n</ul>\r\n<p>In this project, I will take the \"URP Unlit Shader\" as an example.\r\nAnd we will learn how to custom the shader ui later, too.</p>\r\n<h2 id=\"set-up-a-template-for-shader\">Set up a template for shader</h2>\r\n<p>I will put a simple example to explain:</p>\r\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">Shader &quot;Custom URP Shader&#x2F;#NAME#&quot; &#123;\n    Properties &#123;&#125;\n    SubShader &#123;\n        Tags &#123;&quot;RenderType&quot; &#x3D; &quot;Opaque&quot; &quot;RenderPipeline&quot; &#x3D; &quot;UniversalPipeline&quot; &quot;Queue&quot; &#x3D; &quot;Geometry&quot;&#125;\n        Pass &#123;\n            Name &quot;ForwardLit&quot;\n            Tags &#123;&quot;LightMode&quot; &#x3D; &quot;UniversalForward&quot;&#125;\n\n            HLSLPROGRAM\n        \t#include &quot;Packages&#x2F;com.unity.render-pipelines.universal&#x2F;ShaderLibrary&#x2F;Core.hlsl&quot;\n            #pragma vertex vert\n            #pragma fragment frag\n\n            struct appdata &#123;...&#125;;\n            struct v2f &#123;...&#125;;\n\n            v2f vert(appdata v) &#123;...&#125;\n\n            half4 frag(v2f i): SV_Target &#123;...&#125;\n            ENDHLSL\n        &#125;\n    &#125;\n    CustomEditor &quot;ReArchiving.Editor.CreateURPShader&quot;\n&#125;</code></pre>\r\n<p>There are three important parts:</p>\r\n<ul>\r\n<li><code>Shader \"Custom URP Shader/#NAME#\"</code> in the first line,\r\nthe <code>#NAME#</code> part will be replaced by the script with the\r\nfile's name.</li>\r\n<li><code>CustomEditor \"ReArchiving.Editor.CreateURPShader\"</code>, we\r\nuse the <code>CustomEditor</code> command to archive the Custom UI of a\r\nsingle shader in the Inspector Tab. See: <a\r\nhref=\"https://docs.unity3d.com/Manual/SL-CustomEditor.html\">Unity -\r\nManual: ShaderLab: assigning a custom editor (unity3d.com)</a></li>\r\n<li>And the rest part is the entity, we can leave the template code\r\nhere.</li>\r\n</ul>\r\n<h2 id=\"custom-shader-and-its-tab\">Custom Shader And its Tab</h2>\r\n<p>After defining the template, we need to define the control\r\nscript!</p>\r\n<p>Here is the code:</p>\r\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">&#x2F;&#x2F; -----------------------------------------\n&#x2F;&#x2F; Base class named &#96;CreateCustomItemInMenu&#96;\n&#x2F;&#x2F; -----------------------------------------\nusing UnityEngine;\nusing UnityEditor;\nusing System.IO;\nusing System.Text;\nusing UnityEditor.ProjectWindowCallback;\nusing System.Text.RegularExpressions;\n\npublic class CreateCustomItemInMenu &#123;\n    public static string GetSelectedPathOrFallback() &#123;\n        string path &#x3D; &quot;Assets&quot;;\n\n        foreach (Object obj in Selection.GetFiltered(typeof(Object), SelectionMode.Assets)) &#123;\n            path &#x3D; AssetDatabase.GetAssetPath(obj);\n            if (!string.IsNullOrEmpty(path) &amp;&amp; File.Exists(path)) &#123;\n                path &#x3D; Path.GetDirectoryName(path);\n                break;\n            &#125;\n        &#125;\n\n        return path;\n    &#125;\n&#125;\n\n\nclass EndAction : EndNameEditAction &#123;\n    public override void Action(int instanceId, string pathName, string resourceFile) &#123;\n        Object o &#x3D; CreateScriptAssetFromTemplate(pathName, resourceFile);\n        ProjectWindowUtil.ShowCreatedAsset(o);\n    &#125;\n\n    private static Object CreateScriptAssetFromTemplate(string pathName, string resourceFile) &#123;\n        string fullPath &#x3D; Path.GetFullPath(pathName);\n        StreamReader streamReader &#x3D; new StreamReader(resourceFile);\n        string text &#x3D; streamReader.ReadToEnd(); &#x2F;&#x2F; read the template info\n        streamReader.Close();\n\n        string fileNameWithoutExtension &#x3D; Path.GetFileNameWithoutExtension(pathName);\n        text &#x3D; Regex.Replace(text, &quot;#NAME#&quot;, fileNameWithoutExtension); &#x2F;&#x2F; replace &#96;#NAME#&#96; in template and replace to filename\n\n        &#x2F;&#x2F; write the changed resources into the original file\n        bool encoderShouldEmitUTF8Identifier &#x3D; true;\n        bool throwOnInvalidBytes &#x3D; false;\n        UTF8Encoding encoding &#x3D; new UTF8Encoding(encoderShouldEmitUTF8Identifier, throwOnInvalidBytes);\n\n        bool append &#x3D; false;\n        StreamWriter streamWriter &#x3D; new StreamWriter(fullPath, append, encoding);\n\n        streamWriter.Write(text);\n        streamWriter.Close();\n        AssetDatabase.ImportAsset(pathName);\n\n        return AssetDatabase.LoadAssetAtPath(pathName, typeof(Object));\n    &#125;\n&#125;\n\n&#x2F;&#x2F; -----------------------------------------\n&#x2F;&#x2F; Base class named &#96;CreateURPShader&#96;\n&#x2F;&#x2F; -----------------------------------------\nusing UnityEditor;\nusing UnityEngine;\n\npublic class CreateURPShader : CreateCustomItemInMenu &#123;\n    private const string TemplatePath &#x3D; &quot;Assets&#x2F;CustomShaderGUI&#x2F;Editor&#x2F;Template&#x2F;URPShader.shader&quot;;\n\n    [MenuItem(&quot;Assets&#x2F;Create&#x2F;Shader&#x2F;URP Shader&quot;)]\n    public static void CreateFileFromTemplate() &#123;\n        ProjectWindowUtil.StartNameEditingIfProjectWindowExists(\n            0,\n            ScriptableObject.CreateInstance&lt;EndAction&gt;(),\n            GetSelectedPathOrFallback() + &quot;&#x2F;URPShader.shader&quot;,\n            null,\n            TemplatePath\n        );\n    &#125;\n&#125;</code></pre>\r\n<p>It's important to divide the function into parts so that we can reuse\r\nand debug easier.</p>\r\n<p>And now you can see the template in the right-click menu:</p>\r\n<figure>\r\n<img\r\nsrc=\"....\\images\\Dev\\Unity\\Archives\\CustomRightClickMenuAndShaderGUI\\001.png\"\r\nalt=\"image-20230409172030993\" />\r\n<figcaption aria-hidden=\"true\">image-20230409172030993</figcaption>\r\n</figure>\r\n<h2 id=\"define-the-shader-gui\">Define the Shader GUI</h2>\r\n<p>We can directly use the built-in properties of unity to custom the\r\nGUI, see:</p>\r\n<blockquote>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/93194054\">Shader\r\n面板上常用的一些内置枚举 UI - 知乎 (zhihu.com)</a> &gt; <a\r\nhref=\"https://blog.csdn.net/candycat1992/article/details/51417965\">【Unity\r\nShader】自定义材质面板的小技巧<em>unity shader\r\nbool</em>妈妈说女孩子要自立自强的博客-CSDN 博客</a></p>\r\n</blockquote>\r\n<p>But here we choose to use scripts to custom the shader UI which is\r\nmore powerful and flexible.</p>\r\n<p>Here is the basic framework I suggested:</p>\r\n<h3 id=\"custom-shader-gui-though-scripts\">Custom Shader GUI Though\r\nScripts</h3>\r\n<h4 id=\"setup-namespace\">Setup namespace:</h4>\r\n<p>As for the start, we need to derive from an abstract class\r\n<code>ShaderGUI</code>. <a\r\nhref=\"https://docs.unity3d.com/ScriptReference/ShaderGUI.html\">Unity -\r\nScripting API: ShaderGUI (unity3d.com)</a></p>\r\n<blockquote>\r\n<p>Derive from this class for controlling how shader properties should\r\nbe presented.</p>\r\n<p>For a shader to use this custom GUI, use the\r\n<code>CustomEditor</code> property in the shader. Note that\r\n<code>CustomEditor</code> can also be used for classes deriving from\r\n<code>MaterialEditor</code> (search for:\r\n<code>Custom Material Editors</code>). Note: Only the ShaderGUI approach\r\nworks with Substance materials this is therefore the recommended\r\napproach to custom gui for shaders.</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">namespace ReArchiving.Editor &#123;\n    public class SimpleShaderGUI : ShaderGUI &#123;\n        ...\n    &#125;\n&#125;</code></pre>\r\n<h4 id=\"declare-variables\">Declare variables</h4>\r\n<p>In this section, we have three things to do:</p>\r\n<ul>\r\n<li>declare all the GUIContent which we want to show aside. Suggest\r\ndefining this section with the name <code>GUIDescriptions</code>.</li>\r\n<li>declare all the strings which we have defined inside the target\r\nshader. We can define more strings than properties in the target shader\r\nitself because we have to do more operations before using these\r\nvariables and we can exclude the properties that do not exist in the\r\nshader easily at that time. Suggest defining this section with the name\r\n<code>InsideMaterialProperties</code>.</li>\r\n<li>declare all the status variables. We use them to decide should\r\ncorresponding variables be displayed.</li>\r\n</ul>\r\n<p>Here is the example code of this section:</p>\r\n<pre class=\"line-numbers language-c#\" data-language=\"c#\"><code class=\"language-c#\">      #region DataArea\n      private struct GUIDescriptions &#123;\n          &#x2F;&#x2F; Folder\n          public static readonly GUIContent SurfaceOptionFold &#x3D; new GUIContent(&quot;Surface Option Fold&quot;);\n\n          &#x2F;&#x2F; Material Properties\n          public static readonly GUIContent Test &#x3D; new GUIContent(&quot;Test&quot;);\n          public static readonly GUIContent MainTex &#x3D; new GUIContent(&quot;Main Texture&quot;);\n          public static readonly GUIContent MainColor &#x3D; new GUIContent(&quot;Main Color&quot;);\n      &#125;\n\n      private struct InsideMaterialProperties &#123;\n          public static readonly string Test &#x3D; &quot;_Test&quot;;\n          public static readonly string MainTex &#x3D; &quot;_MainTex&quot;;\n          public static readonly string MainColor &#x3D; &quot;_MainColor&quot;;\n      &#125;\n\n      &#x2F;&#x2F; After &#96;Styles&#96; and &#96;MporpertyNames&#96; were defined, we can then announce the variables for checking:\n      &#x2F;&#x2F; As you can see, we will use two data types here: one is the &#96;bool&#96; and another one is the &#96;MaterialProperty&#96;\n&#x2F;&#x2F; This is because we use the &#96;bool&#96; type to store the Foldout UI which is independent of Properties that are defined in Material\n&#x2F;&#x2F; And relatively, the &#96;MaterialProperties&#96; will store the Material related to Properties.\n      &#x2F;&#x2F; There is an exception though, that is the &#96;EditorPreKey&#96;, we use that to\n\n      &#x2F;&#x2F; &#96;EditorPreKey&#96;, we use this to store the foldout status(is this foldout opened or not)\n      private const string EditorPreKey &#x3D; &quot;ReArchiving:ShaderGUI:&quot;;\n\n      &#x2F;&#x2F; Foldout status\n      private bool m_SurfaceOptionsFoldout;\n\n      &#x2F;&#x2F; Properties\n      private MaterialProperty m_WorkflowModeProp;\n      private MaterialProperty m_Test;\n      private MaterialProperty m_MainTex;\n      private MaterialProperty m_MainColor;\n      #endregion</code></pre>\r\n<h4 id=\"override-the-ongui-function\">Override the <code>OnGUI</code>\r\nfunction:</h4>\r\n<p>Although we haven't defined the other functions we need to use, we\r\ndefine the override <code>OnGUI</code> function here to help us clear\r\nthe things we need to do. <a\r\nhref=\"https://docs.unity3d.com/ScriptReference/ShaderGUI.OnGUI.html\">Unity\r\n- Scripting API: ShaderGUI.OnGUI (unity3d.com)</a></p>\r\n<p>So, what should we do here?</p>\r\n<p>We need to decide which property, GUIConent and type we want to show\r\nup in the Inspector tab. So we need to <strong>check the Usability of\r\nthe properties</strong> and <strong>set them up</strong>. And that's\r\nwhat we want to do.</p>\r\n<p>And, before we start coding, we'd better understand the\r\n<code>OnGUI</code> function. This function has two parameters:\r\n<code>MaterialEditor</code> and <code>MaterialProperty</code></p>\r\n<ul>\r\n<li><code>MaterialEditor</code>: The MaterialEditor that is calling this\r\nOnGUI (the 'owner'). <a\r\nhref=\"https://docs.unity3d.com/ScriptReference/MaterialEditor.html\">Unity\r\n- Scripting API: MaterialEditor (unity3d.com)</a></li>\r\n<li><code>MaterialProperty</code>: Material properties of the currently\r\nselected shader. <a\r\nhref=\"https://docs.unity3d.com/ScriptReference/MaterialProperty.html\">Unity\r\n- Scripting API: MaterialProperty (unity3d.com)</a></li>\r\n</ul>\r\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">#region GUI\n&#x2F;&#x2F; To define a custom shader GUI use the methods of materialEditor to render controls for the properties array.\npublic override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] properties) &#123;\n    &#x2F;&#x2F; Check the usability. Well, we will define the &#96;GetFoldoutState&#96; function later\n    m_SurfaceOptionsFoldout &#x3D; GetFoldoutState(&quot;SurfaceOptions&quot;);\n\n    &#x2F;&#x2F; https:&#x2F;&#x2F;docs.unity.cn&#x2F;cn&#x2F;2021.3&#x2F;ScriptReference&#x2F;ShaderGUI.FindProperty.html\n    &#x2F;&#x2F; Returns MaterialProperty if the material property was found, otherwise null.\n    m_Test &#x3D; FindProperty(MPropertyNames.Test, properties, false);\n    m_MainTex &#x3D; FindProperty(MPropertyNames.MainTex, properties, false);\n    m_MainColor &#x3D; FindProperty(MPropertyNames.MainColor, properties, false);\n\n    &#x2F;&#x2F; Modify and apply the custom GUI\n    EditorGUI.BeginChangeCheck(); &#x2F;&#x2F; https:&#x2F;&#x2F;docs.unity3d.com&#x2F;ScriptReference&#x2F;EditorGUI.BeginChangeCheck.html\n    DrawProperties(materialEditor);\n    &#x2F;&#x2F; if (EditorGUI.EndChangeCheck()) SetMaterialKeywords(materialEditor.target as Material);\n&#125;\n\n#endregion</code></pre>\r\n<p>As we have archived the usability check in the <code>OnGUI</code>\r\nfunction, we just need to archive the <code>DrawProperties()</code>\r\nfunction and <code>GetFoldoutState()</code> function later.</p>\r\n<h4 id=\"archive-the-getfoldoutstate-function\">Archive the\r\n<code>GetFoldoutState</code> function</h4>\r\n<p>To archive the folder effects, we need to use the\r\n<code>EditorPrefs</code> Property to make the target variables a folder\r\nfirst. <a\r\nhref=\"https://docs.unity3d.com/ScriptReference/EditorPrefs.html\">Unity -\r\nScripting API: EditorPrefs (unity3d.com)</a></p>\r\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">#region EditorPrefs\n\n&#x2F;&#x2F; Because we\nprivate bool GetFoldoutState(string name) &#123;\n    return EditorPrefs.GetBool($&quot;&#123;EditorPreKey&#125;.&#123;name&#125;&quot;);\n&#125;\n\nprivate void SetFoldoutState(string name, bool field, bool value) &#123;\n    if (field &#x3D;&#x3D; value) return;\n    EditorPrefs.SetBool($&quot;&#123;EditorPreKey&#125;.&#123;name&#125;&quot;, value);\n&#125;\n\n#endregion</code></pre>\r\n<h4 id=\"setup-the-foldout-render-function\">Setup the foldout render\r\nfunction</h4>\r\n<p>Finally, we will archive the function that can truly make effects in\r\nthe Inspector tab.</p>\r\n<p>Here, we need to define a startup function that controls all the\r\nfoldouts and then build different functions for every folder. It sounds\r\nlike a big project. But it is a simple job actually. <a\r\nhref=\"https://docs.unity3d.com/ScriptReference/EditorGUILayout.html\">Unity\r\n- Scripting API: EditorGUILayout (unity3d.com)</a> <a\r\nhref=\"https://docs.unity3d.com/ScriptReference/EditorGUILayout.BeginFoldoutHeaderGroup.html\">Unity\r\n- Scripting API: EditorGUILayout.BeginFoldoutHeaderGroup\r\n(unity3d.com)</a> <a\r\nhref=\"https://docs.unity3d.com/ScriptReference/EditorGUILayout.EndFoldoutHeaderGroup.html\">Unity\r\n- Scripting API: EditorGUILayout.EndFoldoutHeaderGroup\r\n(unity3d.com)</a></p>\r\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">#region Properties\n\nprivate void DrawProperties(MaterialEditor materialEditor) &#123;\n    &#x2F;&#x2F; the foldout setup here:\n    var surfaceOptionsFold &#x3D;\n        EditorGUILayout.BeginFoldoutHeaderGroup(m_SurfaceOptionsFoldout, Styles.SurfaceOptionFold);\n    if (surfaceOptionsFold) &#123;\n        EditorGUILayout.Space();\n        DrawSurfaceOption(materialEditor);\n        EditorGUILayout.Space();\n    &#125;\n\n    SetFoldoutState(&quot;SurfaceOptions&quot;, m_SurfaceOptionsFoldout, surfaceOptionsFold);\n    EditorGUILayout.EndFoldoutHeaderGroup();\n&#125;\n\nprivate void DrawSurfaceOption(MaterialEditor materialEditor) &#123;\n    materialEditor.TexturePropertySingleLine(Styles.MainColor, m_MainTex, m_MainColor);\n\n    materialEditor.FloatProperty(m_Test, MPropertyNames.Test);\n&#125;\n\n#endregion</code></pre>\r\n<h4 id=\"optional-setup-keywords\">[Optional] Setup keywords</h4>\r\n<p>Once we change the properties in the custom shader UI, we need to\r\nregenerate the corresponding shader variants. Here's an example.</p>\r\n<pre class=\"line-numbers language-C#\" data-language=\"C#\"><code class=\"language-C#\">#region Keywords\n\nprivate void SetKeyword(Material material, string keyword, bool value) &#123;\n    if (value) material.EnableKeyword(keyword);\n    else material.DisableKeyword(keyword);\n&#125;\n\nprivate void SetMaterialKeywords(Material material) &#123;\n    &#x2F;&#x2F; https:&#x2F;&#x2F;docs.unity3d.com&#x2F;ScriptReference&#x2F;Material-shaderKeywords.html\n    material.shaderKeywords &#x3D; null;\n\n    SetKeyword(material, &quot;_SPECULAR_SETUP&quot;, material.GetFloat(MPropertyNames.Test) &#x3D;&#x3D; 0);\n&#125;\n\n#endregion</code></pre>\r\n<h3 id=\"a-complete-example-script\">A Complete Example Script</h3>\r\n<p>Find it on: <a\r\nhref=\"https://github.com/ChiliMilk/URP_Toon/blob/master/Assets/ChiliMilkToonShader/Editor/ToonShaderGUI.cs\">URP_Toon/ToonShaderGUI.cs\r\nat master · ChiliMilk/URP_Toon (github.com)</a></p>\r\n<h2 id=\"reference\">Reference</h2>\r\n<ul>\r\n<li><p>Blog:</p>\r\n<ul>\r\n<li><a\r\nhref=\"https://github.com/Straw1997/UnityCustomShaderGUI\">Straw1997/UnityCustomShaderGUI:\r\n自定义 Unity Shader GUI (github.com)</a></li>\r\n<li><a\r\nhref=\"https://forum.unity.com/threads/simplest-way-to-add-an-option-to-right-click-menu.424987/\">simplest\r\nway to add an option to right click menu - Unity Forum</a></li>\r\n<li><a href=\"https://www.runoob.com/csharp/csharp-enum.html\">C#\r\n枚举（Enum） | 菜鸟教程 (runoob.com)</a></li>\r\n<li><a\r\nhref=\"https://blog.csdn.net/candycat1992/article/details/51417965\">【Unity\r\nShader】自定义材质面板的小技巧<em>unity shader\r\nbool</em>妈妈说女孩子要自立自强的博客-CSDN 博客</a></li>\r\n<li><a href=\"https://zhuanlan.zhihu.com/p/93194054\">Shader\r\n面板上常用的一些内置枚举 UI - 知乎 (zhihu.com)</a></li>\r\n</ul></li>\r\n<li><p>Unity Manual</p>\r\n<ul>\r\n<li><a\r\nhref=\"https://docs.unity3d.com/Manual/shader-keywords-material-inspector.html\">Unity\r\n- Manual: Using shader keywords with the material Inspector\r\n(unity3d.com)</a></li>\r\n<li><a href=\"https://docs.unity3d.com/Manual/SL-CustomEditor.html\">Unity\r\n- Manual: ShaderLab: assigning a custom editor (unity3d.com)</a></li>\r\n<li><a\r\nhref=\"https://docs.unity3d.com/ScriptReference/ShaderGUI.OnGUI.html\">Unity\r\n- Scripting API: ShaderGUI.OnGUI (unity3d.com)</a></li>\r\n<li><a\r\nhref=\"https://docs.unity3d.com/ScriptReference/MaterialEditor.html\">Unity\r\n- Scripting API: MaterialEditor (unity3d.com)</a></li>\r\n<li><a\r\nhref=\"https://docs.unity3d.com/ScriptReference/MaterialProperty.html\">Unity\r\n- Scripting API: MaterialProperty (unity3d.com)</a></li>\r\n<li><a\r\nhref=\"https://docs.unity3d.com/ScriptReference/EditorGUI.html\">Unity -\r\nScripting API: EditorGUI (unity3d.com)</a></li>\r\n<li><a\r\nhref=\"https://docs.unity3d.com/ScriptReference/EditorGUI.BeginChangeCheck.html\">Unity\r\n- Scripting API: EditorGUI.BeginChangeCheck (unity3d.com)</a></li>\r\n<li><a\r\nhref=\"https://docs.unity3d.com/ScriptReference/EditorPrefs.html\">Unity -\r\nScripting API: EditorPrefs (unity3d.com)</a></li>\r\n<li><a\r\nhref=\"https://docs.unity3d.com/ScriptReference/EditorGUILayout.html\">Unity\r\n- Scripting API: EditorGUILayout (unity3d.com)</a></li>\r\n<li><a\r\nhref=\"https://docs.unity3d.com/ScriptReference/EditorGUILayout.BeginFoldoutHeaderGroup.html\">Unity\r\n- Scripting API: EditorGUILayout.BeginFoldoutHeaderGroup\r\n(unity3d.com)</a></li>\r\n<li><a\r\nhref=\"https://docs.unity3d.com/ScriptReference/EditorGUILayout.EndFoldoutHeaderGroup.html\">Unity\r\n- Scripting API: EditorGUILayout.EndFoldoutHeaderGroup\r\n(unity3d.com)</a></li>\r\n</ul></li>\r\n<li><p><a\r\nhref=\"https://github.com/ChiliMilk/URP_Toon/blob/master/Assets/ChiliMilkToonShader/Editor/ToonShaderGUI.cs\">URP_Toon/ToonShaderGUI.cs\r\nat master · ChiliMilk/URP_Toon (github.com)</a></p></li>\r\n</ul>\r\n","text":"Custom Right-Click Menu And Shader GUI All the operations in this project should be done in a folder named \"Editor\", no matter where this fo...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"Unity","slug":"Unity","count":17,"path":"api/categories/Unity.json"},{"name":"Shader","slug":"Unity/Shader","count":7,"path":"api/categories/Unity/Shader.json"}],"tags":[{"name":"Unity","slug":"Unity","count":17,"path":"api/tags/Unity.json"},{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#custom-right-click-menu-and-shader-gui\"><span class=\"toc-text\">Custom Right-Click Menu\r\nAnd Shader GUI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#what-do-we-want-to-do\"><span class=\"toc-text\">What do we want to do?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#set-up-a-template-for-shader\"><span class=\"toc-text\">Set up a template for shader</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#custom-shader-and-its-tab\"><span class=\"toc-text\">Custom Shader And its Tab</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#define-the-shader-gui\"><span class=\"toc-text\">Define the Shader GUI</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#custom-shader-gui-though-scripts\"><span class=\"toc-text\">Custom Shader GUI Though\r\nScripts</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#setup-namespace\"><span class=\"toc-text\">Setup namespace:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#declare-variables\"><span class=\"toc-text\">Declare variables</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#override-the-ongui-function\"><span class=\"toc-text\">Override the OnGUI\r\nfunction:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#archive-the-getfoldoutstate-function\"><span class=\"toc-text\">Archive the\r\nGetFoldoutState function</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#setup-the-foldout-render-function\"><span class=\"toc-text\">Setup the foldout render\r\nfunction</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#optional-setup-keywords\"><span class=\"toc-text\">[Optional] Setup keywords</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#a-complete-example-script\"><span class=\"toc-text\">A Complete Example Script</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#reference\"><span class=\"toc-text\">Reference</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Mapcap","uid":"e381c275e6062a6db30ed6f89e560299","slug":"Rendering/Mapcap","date":"2023-04-29T04:23:23.000Z","updated":"2023-10-27T20:19:51.000Z","comments":true,"path":"api/articles/Rendering/Mapcap.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"What is Mapcap? MatCap is a method of light expression using pre-rendered images. This technique uses a picture of a sphere that represents ...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"Unity","slug":"Unity","count":17,"path":"api/categories/Unity.json"},{"name":"Shader","slug":"Unity/Shader","count":7,"path":"api/categories/Unity/Shader.json"}],"tags":[{"name":"Unity","slug":"Unity","count":17,"path":"api/tags/Unity.json"},{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"URP源码分析","uid":"23661fa8ae25c981d575d8f076eed3e1","slug":"Rendering/UpdateToURPPipeline/URPSourceCode","date":"2023-04-08T13:32:05.000Z","updated":"2023-10-27T20:19:19.000Z","comments":true,"path":"api/articles/Rendering/UpdateToURPPipeline/URPSourceCode.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"URP源码分析 依赖信息： Editor版本：2021.21f1 LTS Shader版本：URP 12.1.10 URP Package总览 首先，当我们下载URP资源时，我们的项目的Package中会出现这些内容： URP资源结构 - com.unity.render-pip...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"Unity","slug":"Unity","count":17,"path":"api/categories/Unity.json"}],"tags":[{"name":"Unity","slug":"Unity","count":17,"path":"api/tags/Unity.json"},{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"},{"name":"URP","slug":"URP","count":1,"path":"api/tags/URP.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
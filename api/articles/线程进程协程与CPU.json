{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"线程进程协程与CPU","date":"2023-03-07T16:14:44.712Z","updated":"2022-02-12T06:43:26.000Z","comments":true,"path":"api/articles/线程进程协程与CPU.json","keywords":null,"cover":null,"content":"<h1 id=\"线程、进程、协程、与CPU多核\"><a href=\"#线程、进程、协程、与CPU多核\" class=\"headerlink\" title=\"线程、进程、协程、与CPU多核\"></a>线程、进程、协程、与CPU多核</h1><h2 id=\"一、进程、线程、协程的概念\"><a href=\"#一、进程、线程、协程的概念\" class=\"headerlink\" title=\"一、进程、线程、协程的概念\"></a>一、进程、线程、协程的概念</h2><p><strong>进程</strong>：</p>\n<p>是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。</p>\n<p><strong>线程</strong>：</p>\n<p>是进程的一个执行单元，是进程内科调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。</p>\n<p><strong>协程</strong>：</p>\n<p>是一种比线程更加轻量级的存在。一个线程也可以拥有多个协程。其执行过程更类似于子例程，或者说不带返回值的函数调用。</p>\n<h2 id=\"二、进程和线程的区别\"><a href=\"#二、进程和线程的区别\" class=\"headerlink\" title=\"二、进程和线程的区别\"></a>二、进程和线程的区别</h2><p><strong>地址空间</strong>：</p>\n<p>线程共享本进程的地址空间，而进程之间是独立的地址空间。</p>\n<p><strong>资源</strong>：</p>\n<p>线程共享本进程的资源如内存、I/O、cpu等，不利于资源的管理和保护，而进程之间的资源是独立的，能很好的进行资源管理和保护。</p>\n<p><strong>健壮性</strong>：</p>\n<p>多进程要比多线程健壮，一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。</p>\n<p><strong>执行过程</strong>：</p>\n<p>每个独立的进程有一个程序运行的入口、顺序执行序列和程序入口，执行开销大。</p>\n<p>但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，执行开销小。</p>\n<p><strong>可并发性</strong>：</p>\n<p>两者均可并发执行。</p>\n<p><strong>切换时</strong>：</p>\n<p>进程切换时，消耗的资源大，效率高。所以涉及到频繁的切换时，使用线程要好于进程。同样如果要求同时进行并且又要共享某些变量的并发操作，只能用线程不能用进程。</p>\n<p><strong>其他</strong>：</p>\n<p>线程是处理器调度的基本单位，但是进程不是。</p>\n<h2 id=\"三、协程和线程的区别\"><a href=\"#三、协程和线程的区别\" class=\"headerlink\" title=\"三、协程和线程的区别\"></a>三、协程和线程的区别</h2><p>协程避免了无意义的调度，由此可以提高性能，但程序员必须自己承担调度的责任。同时，协程也失去了标准线程使用多CPU的能力。</p>\n<p><strong>线程</strong></p>\n<p>相对独立</p>\n<p>有自己的上下文</p>\n<p>切换受系统控制；</p>\n<p><strong>协程</strong></p>\n<p>相对独立</p>\n<p>有自己的上下文</p>\n<p>切换由自己控制，由当前协程切换到其他协程由当前协程来控制。</p>\n<h2 id=\"四、何时使用多进程，何时使用多线程？\"><a href=\"#四、何时使用多进程，何时使用多线程？\" class=\"headerlink\" title=\"四、何时使用多进程，何时使用多线程？\"></a>四、何时使用多进程，何时使用多线程？</h2><p>对资源的管理和保护要求高，不限制开销和效率时，使用多进程。</p>\n<p>要求效率高，频繁切换时，资源的保护管理要求不是很高时，使用多线程。</p>\n<h2 id=\"五、为什么会有线程？\"><a href=\"#五、为什么会有线程？\" class=\"headerlink\" title=\"五、为什么会有线程？\"></a>五、为什么会有线程？</h2><p>每个进程都有自己的地址空间，即进程空间，在网络或多用户换机下，一个服务器通常需要接收大量不确定数量用户的并发请求，为每一个请求都创建一个进程显然行不通（系统开销大响应用户请求效率低），因此操作系统中线程概念被引进。</p>\n<h2 id=\"六、-python多线程的问题（面试问题）\"><a href=\"#六、-python多线程的问题（面试问题）\" class=\"headerlink\" title=\"六、*python多线程的问题（面试问题）\"></a>六、*python多线程的问题（面试问题）</h2><p><strong>存在问题</strong>：</p>\n<p>python由于历史遗留的问题，严格说多个线程并不会同时执行（没法有效利用多核处理器，python的并发只是在交替执行不同的代码）。</p>\n<p>多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。所以python的多线程并发并不能充分利用多核，并发没有java的并发严格。</p>\n<p><strong>原因</strong>：</p>\n<p>原因就在于GIL ，在Cpython 解释器（Python语言的主流解释器）中，有一把全局解释锁（GIL, Global Interpreter Lock），在解释器解释执行Python 代码时，任何Python线程执行前，都先要得到这把GIL锁。</p>\n<p>这个GIL全局锁实际上把所有线程的执行代码都给上了锁。</p>\n<p>这意味着，python在任何时候，只可能有一个线程在执行代码。</p>\n<p>其它线程要想获得CPU执行代码指令，就必须先获得这把锁，如果锁被其它线程占用了，那么该线程就只能等待，直到占有该锁的线程释放锁才有执行代码指令的可能。</p>\n<p><strong>多个线程一起执行反而更加慢的原因</strong>：</p>\n<p>同一时刻，只有一个线程在运行，其它线程只能等待，即使是多核CPU，也没办法让多个线程「并行」地同时执行代码，只能是交替执行，因为多线程涉及到上线文切换、锁机制处理（获取锁，释放锁等），所以，多线程执行不快反慢。</p>\n<p><strong>什么时候GIL 被释放？</strong></p>\n<p>当一个线程遇到I/O 任务时，将释放GIL。</p>\n<p>计算密集型（CPU-bound）线程执行100次解释器的计步（ticks）时（计步可粗略看作Python 虚拟机的指令），也会释放GIL。</p>\n<p>即，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。</p>\n<p>不过，Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。</p>\n<p><em>本条参考博客</em>：</p>\n<p><a href=\"http://www.sohu.com/a/230407177_99992472\">http://www.sohu.com/a/230407177_99992472</a></p>\n<h2 id=\"七、-进程通信方式（选读）\"><a href=\"#七、-进程通信方式（选读）\" class=\"headerlink\" title=\"七、*进程通信方式（选读）\"></a>七、*进程通信方式（选读）</h2><p><strong>管道</strong>：</p>\n<p>速度慢，容量有限，只有父子进程能通讯</p>\n<p><strong>FIFO</strong>：</p>\n<p>任何进程间都能通讯，但速度慢</p>\n<p><strong>消息队列</strong>：</p>\n<p>容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题</p>\n<p><strong>信号量</strong>：</p>\n<p>不能传递复杂消息，只能用来同步</p>\n<p><strong>共享内存区</strong>：</p>\n<p>能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存</p>\n<p><em>本条参考博客</em>：</p>\n<p><a href=\"https://blog.csdn.net/weixin_40283480/article/details/82155704\">https://blog.csdn.net/weixin_40283480/article/details/82155704</a></p>\n<h2 id=\"CPU线程-和-Java线程\"><a href=\"#CPU线程-和-Java线程\" class=\"headerlink\" title=\"CPU线程 和 Java线程\"></a>CPU线程 和 Java线程</h2><p>​    </p>\n<p><a href=\"https://www.cnblogs.com/webglcn/p/10639065.html\">CPU线程 和 Java线程 - webglcn - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/nandao158/article/details/105896980\">进程、线程和CPU 之间的关系（一）_nandao158的博客-CSDN博客_线程和cpu</a></p>\n<pre><code>   进程是程序运行资源分配的最小单位 。进程是操作系统进行资源分配的最小单位,其中资源包括:CPU、内存空间、 磁盘 IO 等,同一进程中的多条线程共享该进程中的全部系统资源,而进程和进程 之间是相互独立的。进程是具有一定独立功能的程序关于某个数据集合上的一次 运行活动,进程是系统进行资源分配和调度的一个独立单位。 进程是程序在计算机上的一次执行活动。当你运行一个程序,你就启动了一 个进程。显然,程序是死的、静态的,进程是活的、动态的。进程可以分为系统进 程和用户进程。凡是用于完成操作系统的各种功能的进程就是系统进程,它们就 是处于运行状态下的操作系统本身,用户进程就是所有由你启动的进程。\n\n   线程是 CPU 调度的最小单位,必须依赖于进程而存在 线程是进程的一个实体,是 CPU 调度和分派的基本单位,它是比进程更小的、 能独立运行的基本单位。线程自己基本上不拥有系统资源,只拥有一点在运行中 必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其 他的线程共享进程所拥有的全部资源。 线程无处不在 任何一个程序都必须要创建线程,特别是 Java 不管任何程序都必须启动一个 main 函数的主线程; Java Web 开发里面的定时任务、定时器、JSP 和 Servlet、异 步消息处理机制,远程访问接口RM等,任何一个监听事件, onclick的触发事件等都 离不开线程和并发的知识。\n</code></pre>\n<p>(2) Java多线程并不是由于cpu线程数为多个才称为多线程，当Java线程数大于cpu线程数，操作系统使用时间片机制，采用线程调度算法，频繁的进行线程切换。</p>\n<p><a href=\"https://www.zhihu.com/question/27406575\">(10 封私信 / 81 条消息) CPU 的线程与操作系统的线程有何关系？ - 知乎 (zhihu.com)</a></p>\n","text":"线程、进程、协程、与CPU多核一、进程、线程、协程的概念进程： 是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。 线程： 是进程的一个执行单元，是进程内科调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。 协程：...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E3%80%81%E8%BF%9B%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B%E3%80%81%E4%B8%8ECPU%E5%A4%9A%E6%A0%B8\"><span class=\"toc-text\">线程、进程、协程、与CPU多核</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E5%8D%8F%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">一、进程、线程、协程的概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">二、进程和线程的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%8D%8F%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">三、协程和线程的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%EF%BC%8C%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">四、何时使用多进程，何时使用多线程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E7%BA%BF%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">五、为什么会有线程？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81-python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%89\"><span class=\"toc-text\">六、*python多线程的问题（面试问题）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%EF%BC%88%E9%80%89%E8%AF%BB%EF%BC%89\"><span class=\"toc-text\">七、*进程通信方式（选读）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CPU%E7%BA%BF%E7%A8%8B-%E5%92%8C-Java%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">CPU线程 和 Java线程</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"网络攻击","date":"2023-03-07T16:14:44.714Z","updated":"2022-04-06T03:52:40.000Z","comments":true,"path":"api/articles/网络攻击.json","keywords":null,"cover":null,"text":"拒绝服务攻击拒绝服务（DoS）：DoS是 Denial of service的简称，即拒绝服务，任何对服务的干涉，使得其可用性降低或者失去可用性均称为拒绝服务。例如一个计算机系统崩溃或其带宽耗尽或其硬盘被填满，导致其 DDoSCross—Site Request Forgery ...","link":"","photos":[],"count_time":{"symbolsCount":748,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"密码学初步","date":"2023-03-07T16:14:44.707Z","updated":"2022-04-06T16:34:06.000Z","comments":true,"path":"api/articles/密码学初步.json","keywords":null,"cover":null,"text":"加密方法分类加密方法可以分为两大类。一类是单钥加密（private key cryptography），还有一类叫做双钥加密（public key cryptography）。前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是两套密码。 历史上，人类传统的加密方法都是...","link":"","photos":[],"count_time":{"symbolsCount":774,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
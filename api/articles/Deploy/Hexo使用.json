{"title":"Hello World, Hello Hexo","uid":"6adf345a8e80c4aa1ee89482b75933eb","slug":"Deploy/Hexo使用","date":"2021-09-07T14:09:05.000Z","updated":"2023-10-27T19:03:57.000Z","comments":true,"path":"api/articles/Deploy/Hexo使用.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"hello-world-hello-hexo\">Hello World, Hello Hexo</h1>\r\n<h2 id=\"hexo-的基础配置\">Hexo 的基础配置</h2>\r\n<h3 id=\"安装-hexo-cli\">安装 hexo-cli</h3>\r\n<pre class=\"line-numbers language-powshell\" data-language=\"powshell\"><code class=\"language-powshell\">npm install hexo-cli -g</code></pre>\r\n<h3 id=\"完成-hexo-的部署\">完成 hexo 的部署：</h3>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">npm install hexo-cli -g\nhexo init &lt;name&gt; # 注意：hexo必须要在空文件夹下完成初始化，如果没有&lt;name&gt;，则在当前目录下完成初始化，否则新建一个&lt;name&gt;文件夹初始化\ncd &lt;name&gt; # 根据上个命令初始化的文件夹使用\nnpm install # 安装依赖\nhexo server # 启动hexo服务器，这时候便可以访问所有 source&#x2F; 下的所有文章页面了</code></pre>\r\n<h3 id=\"创建新的页面\">创建新的页面：</h3>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">hexo new [layout] &lt;name&gt; # 创建一个新的post页面，会出现在source文件夹下，内涵一个index.md\n# 我们可以直接对这个md文件进行编辑，hexo会自动将这个文件渲染为一个html页面</code></pre>\r\n<div class=\"warning\">\r\n<p>创建新文件夹或者页面时请注意 <code>\\_config.yml</code> 中\r\n<code># Directory</code> 下项目的配置</p>\r\n</div>\r\n<h3 id=\"再次运行-hexo\">再次运行 hexo：</h3>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">hexo clean # 清除之前hexo的缓存\nhexo g # g或generate 根据md文件生成html等文件\nhexo s # s或server 启动hexo服务器</code></pre>\r\n<h3 id=\"配置-hexo-快速部署\">配置 Hexo 快速部署：</h3>\r\n<p><a href=\"https://hexo.io/docs/one-command-deployment\">One-Command\r\nDeployment | Hexo</a></p>\r\n<p>以 git 为例：</p>\r\n<h4 id=\"安装-hexo-的-git-插件\">安装 hexo 的 git 插件：</h4>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">npm install hexo-deployer-git --save</code></pre>\r\n<h4 id=\"修改-hexo-中的_config.yml文件\">修改 Hexo\r\n中的<code>\\_config.yml</code>文件：</h4>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">deploy:\n  type: git\n  repo: &lt;repository url&gt; # https:&#x2F;&#x2F;bitbucket.org&#x2F;JohnSmith&#x2F;johnsmith.bitbucket.io\n  branch: [branch]\n  message: [message]\n\n# 例如，我自己的仓库配置如下：\ndeploy:\n  type: git\n  repo: git@github.com:JBR-Bunjie&#x2F;JBR-Bunjie.github.io.git\n  branch: master</code></pre>\r\n<p>配置完成之后，我们便可以使用命令：</p>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">hexo deploy</code></pre>\r\n<p>来直接将我们编写的 Hexo 文档推送到所有远端托管地址上了</p>\r\n<blockquote>\r\n<p>在使用 git 来推送之前，你需要先完成本地 git\r\n工具对远程仓库的权限等配置</p>\r\n</blockquote>\r\n<h2 id=\"安装别的博客框架\">安装别的博客框架</h2>\r\n<p>当然，你需要先选定一个博客框架才行</p>\r\n<p>比如如果想要安装<a href=\"#AuroraOfficialSite\">aurora</a>，我会选择直接去查阅<a href=\"#AuroraOfficialSite\">aurora</a>的官方文档来了解<a\r\nhref=\"#AuroraOfficialSite\">aurora</a>的具体配置项</p>\r\n<p><span id=\"AuroraOfficialSite\"><a\r\nhref=\"https://aurora.tridiamond.tech/\">Home | Hexo Aurora\r\n(tridiamond.tech)</a></span></p>\r\n<p>但是当我们想要更替当前 Hexo 框架时，我们需要同时修改 Hexo\r\n项目的<code>\\_config.yml</code>和 Hexo\r\n框架的的<code>\\_config.xxx.yml</code>，例如：Aurora\r\n的<code>\\_config.aurora.yml</code></p>\r\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"># 修改项：\n\ntheme: &lt;yourThemeName&gt;</code></pre>\r\n<h2 id=\"让-hexo-支持-latex-表达式\">让 Hexo 支持 Latex 表达式</h2>\r\n<p>即便是 aurora 这种并非原生支持 Latex 的 theme，也可以通过直接改变\r\nhexo 的</p>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">npm uninstall hexo-renderer-marked --save\n\n# 注意，pandoc并非渲染引擎本身，我们需要先下载并安装pandoc.exe，之后hexo-renderer-pandoc才能通过调用pandoc.exe来生成页面\n# https:&#x2F;&#x2F;pandoc.org&#x2F;installing.html\n# 如果pandoc不是默认路径的话，是需要在config里写明\nnpm install hexo-renderer-pandoc --save\nnpm install hexo-filter-mathjex --save</code></pre>\r\n<p>当安装完成后，并且我们在对应页面的 head 中插入：</p>\r\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">mathjex: true</code></pre>\r\n<p>后，我们便可以通过正常的生成语句来得到正确显示的 Latex 公式了！</p>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"># 以上所有步骤完成后。\nhexo cl\nhexo g\nhexo s</code></pre>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=673965978&amp;bvid=BV1xU4y1V7WU&amp;cid=363620657&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\">\r\n</iframe>\r\n","text":"Hello World, Hello Hexo Hexo 的基础配置 安装 hexo-cli npm install hexo-cli -g 完成 hexo 的部署： npm install hexo-cli -g hexo init &lt;name&gt; # 注意：hexo...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Hexo","slug":"Hexo","count":1,"path":"api/categories/Hexo.json"}],"tags":[{"name":"Hexo","slug":"Hexo","count":1,"path":"api/tags/Hexo.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#hello-world-hello-hexo\"><span class=\"toc-text\">Hello World, Hello Hexo</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hexo-%E7%9A%84%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Hexo 的基础配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-hexo-cli\"><span class=\"toc-text\">安装 hexo-cli</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%88%90-hexo-%E7%9A%84%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">完成 hexo 的部署：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">创建新的页面：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%8D%E6%AC%A1%E8%BF%90%E8%A1%8C-hexo\"><span class=\"toc-text\">再次运行 hexo：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-hexo-%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">配置 Hexo 快速部署：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-hexo-%E7%9A%84-git-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">安装 hexo 的 git 插件：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9-hexo-%E4%B8%AD%E7%9A%84_config.yml%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">修改 Hexo\r\n中的\\_config.yml文件：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E5%88%AB%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">安装别的博客框架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A9-hexo-%E6%94%AF%E6%8C%81-latex-%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">让 Hexo 支持 Latex 表达式</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"美化你的GitHub主页！","uid":"cadb81dd6adf93defe9d2e5bccb01250","slug":"Deploy/GitAndGithub/beautifyGithubHome","date":"2021-09-07T15:58:53.000Z","updated":"2023-10-27T18:39:35.000Z","comments":true,"path":"api/articles/Deploy/GitAndGithub/beautifyGithubHome.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"一般来说，GitHub主页是很简陋枯燥又单调的： image-20210907192522519 但是也许你也见过别人的完全不同的主页： img 欸？他的主页怎么有一个markdown文件作为公示栏来展示？怎么做到的？ 答案是GitHub的官方彩蛋（后门）： 当↗当↗当↗当↘ i...","link":"","photos":[],"count_time":{"symbolsCount":503,"symbolsTime":"1 mins."},"categories":[{"name":"Git","slug":"Git","count":3,"path":"api/categories/Git.json"}],"tags":[{"name":"Git","slug":"Git","count":3,"path":"api/tags/Git.json"},{"name":"GitHub","slug":"GitHub","count":1,"path":"api/tags/GitHub.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"RESTful规范 - 如何写API","uid":"a92e2fc05670d2982e0ff2c87e209a38","slug":"Dev/Theory/RESTful规范 - 如何写API","date":"2021-07-23T04:23:23.000Z","updated":"2023-10-27T19:44:56.000Z","comments":true,"path":"api/articles/Dev/Theory/RESTful规范 - 如何写API.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"RESTful规范 - 如何写API 如果是对同一个表进行数据操作，应该使用同一条 API，然后根据 method 的不同，进行不同的操作 GET&#x2F;POST&#x2F;PUT&#x2F;DELETE&#x2F;PATCH 面向资源编程，通过 API 提交的参数最好是名词...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"Theroy","slug":"Theroy","count":5,"path":"api/categories/Theroy.json"}],"tags":[{"name":"Theroy","slug":"Theroy","count":5,"path":"api/tags/Theroy.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
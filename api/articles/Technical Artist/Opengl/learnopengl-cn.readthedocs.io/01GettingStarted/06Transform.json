{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/06Transform","date":"2023-03-07T16:14:46.118Z","updated":"2023-03-04T17:49:21.501Z","comments":true,"path":"api/articles/Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/06Transform.json","keywords":null,"cover":null,"content":"<h1 id=\"1-7-Transform\"><a href=\"#1-7-Transform\" class=\"headerlink\" title=\"1.7 Transform\"></a>1.7 Transform</h1><p>欢迎！</p>\n<p>欢迎来到这里，有关数学的一节。</p>\n<p>这里会结合<code>Games 101</code>与<code>Unity Shader入门精要</code>的相关内容进行。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Games 101：<a href=\"https://www.bilibili.com/video/BV1X7411F744?p=3&vd_source=c8eda79dd90c30ff02e09fb39906ac54\">Lecture 03 Transformation</a></p></blockquote>\n<h2 id=\"1-7-1-GAMES-101\"><a href=\"#1-7-1-GAMES-101\" class=\"headerlink\" title=\"1.7.1 GAMES 101\"></a>1.7.1 GAMES 101</h2><h3 id=\"1-7-1-1-GAMES-101-Lecture-03-Transformation\"><a href=\"#1-7-1-1-GAMES-101-Lecture-03-Transformation\" class=\"headerlink\" title=\"1.7.1.1 GAMES 101 Lecture 03 Transformation\"></a>1.7.1.1 GAMES 101 Lecture 03 Transformation</h3><p>线性变换适用范围：缩放、旋转<br>$$<br>\\begin{bmatrix}<br> x’\\<br> y’<br>\\end{bmatrix}=<br>\\begin{bmatrix}<br> a &amp; b\\<br> c &amp; d<br>\\end{bmatrix}<br>\\begin{bmatrix}<br> x \\<br> y<br>\\end{bmatrix}<br>$$<br>但当加入平移变换时，线性变换就无能为力：<br>$$<br>\\begin{bmatrix}<br> x’\\<br> y’<br>\\end{bmatrix}<br>=<br>\\begin{bmatrix}<br> a &amp; b\\<br> c &amp; d<br>\\end{bmatrix}<br>\\begin{bmatrix}<br> x \\<br> y<br>\\end{bmatrix}<br>+<br>\\begin{bmatrix}<br>t_x\\<br>t_y<br>\\end{bmatrix}<br>$$<br>为了能在一个矩阵中表示这些变换，我们选择引入齐次坐标(<code>Homogeneous Coordinates</code>)：<br>$$<br>\\begin{bmatrix}<br> x’\\<br> y’\\<br> w’<br>\\end{bmatrix}<br>=<br>\\begin{bmatrix}<br> a &amp; b &amp; t_x\\<br> c &amp; d &amp; t_y\\<br> 0 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br> x \\<br> y \\<br> 1<br>\\end{bmatrix}<br>=<br>\\begin{bmatrix}<br>ax+by+t_x\\<br>cx+dy+t_y\\<br>1<br>\\end{bmatrix}<br>$$</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>此时：<br>$$<br>\\displaylines{2D \\ Point: <br>=<br>\\left(<br>x, \\ y, \\ 1<br>\\right)^T\\<br>2D \\ Vector: \\ =\\left(<br>x, \\ y, \\ 0<br>\\right)^T<br>}<br>$$</p>\n<p>为什么向量添置的是0而点是1？</p>\n<ul>\n<li>通过简单的运算我们可以发现，如果w分量是0，则平移变换对该对象不造成任何影响——我们对向量的w分量置0是为了保护向量的“不随“平移变换”的这种性质，而Point的w为1则正是为了采用这种性质</li>\n</ul>\n<p>基于w分量的原理，我们可以得到：<br>$$<br>\\displaylines{Vector \\ + \\ Vector = Vector\\<br>Point \\ - \\  Point = Vector\\<br>Point \\ + \\ Vector = Point\\<br>Point \\ + \\  Point = \\ ?(此时w分量为2了，这是什么？——人为进一步定义：均分点：)\\\\<br>\\begin{pmatrix}<br>x\\<br>y\\<br>w<br>\\end{pmatrix}<br>=<br>\\begin{pmatrix}<br>x/w \\<br>y/w \\<br>1<br>\\end{pmatrix}(w \\ne 0)<br>}<br>$$</p></blockquote>\n<p>我们把形如上方的运算方式称为<code>仿射变换</code>，<code>Affine Transformations</code>，它采用齐次坐标</p>\n<p>此时，缩放、旋转和平移三种操作会变为：<br>$$<br>\\displaylines{<br>Scale(s_x, \\ s_y) =<br>\\begin{pmatrix}<br>s_x &amp; 0 &amp; 0\\<br>0 &amp; x_y &amp; 0\\<br>0 &amp; 0 &amp; 1<br>\\end{pmatrix}\\hfill\\<br>Rotation(\\alpha) =<br>\\begin{pmatrix}<br>\\cos\\alpha &amp; -\\sin\\alpha &amp; 0\\<br>\\sin\\alpha &amp; \\cos\\alpha &amp; 0\\<br>0 &amp; 0 &amp; 1<br>\\end{pmatrix}\\hfill\\<br>T(t_x, \\ t_y)=<br>\\begin{pmatrix}<br>1 &amp; 0 &amp; t_x\\<br>0 &amp; 1 &amp; t_y\\<br>0 &amp; 0 &amp; 1<br>\\end{pmatrix}\\hfill<br>}<br>$$<br>但是，矩阵乘法中虽然没有交换律但是有结合律</p>\n<p>我们按照顺序：<br>$$<br>平移矩阵 \\ * \\ 旋转矩阵 \\ * \\ 缩放矩阵 \\ * \\ (x, y, z)^T<br>$$<br>进行运算时，我们是可以将前三个矩阵先计算然后集结合为一个矩阵再与目标左乘的</p>\n<p>当然，这个顺序并不是定死的，需要注意，我们只会关于原点的操作：关于原点的平移、旋转与缩放，如需必要，我们得把目标“<strong>先平移到原点上</strong>”</p>\n<h3 id=\"1-7-1-2-GAMES-101-Lecture-04-Transformation-Count\"><a href=\"#1-7-1-2-GAMES-101-Lecture-04-Transformation-Count\" class=\"headerlink\" title=\"1.7.1.2 GAMES 101 Lecture 04 Transformation Count.\"></a>1.7.1.2 GAMES 101 Lecture 04 Transformation Count.</h3><p>对于原Rotation矩阵：<br>$$<br>Rotation(\\theta) =<br>\\begin{pmatrix}<br>\\cos\\theta &amp; -\\sin\\theta\\<br>\\sin\\theta &amp; \\cos\\theta<br>\\end{pmatrix}\\hfill\\<br>Rotation(-\\theta) =<br>\\begin{pmatrix}<br>\\cos\\theta &amp; \\sin\\theta\\<br>-\\sin\\theta &amp; \\cos\\theta<br>\\end{pmatrix} =<br>Rotation(\\theta) ^ T\\hfill\\<br>$$<br>即对于旋转矩阵，有逆矩阵等于转置矩阵——这是一个<code>正交矩阵</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>正交矩阵定义：</p>\n<p>若一个矩阵满足：A^T^A = AA^T^ = E，则A矩阵是正交矩阵</p>\n<p>此时A有如下性质：<br>$$<br>A^TA = E \\Rightarrow A^T = A^{-1} \\hfill\\<br>A^TA = E \\Rightarrow \\begin{vmatrix} A \\end{vmatrix} = 1 \\hfill\\<br>$$<br><a href=\"https://www.zhihu.com/question/62155511\">正交矩阵有哪些性质？ - 知乎 (zhihu.com)</a></p></blockquote>\n<h4 id=\"1-7-1-2-1-3D-transformations\"><a href=\"#1-7-1-2-1-3D-transformations\" class=\"headerlink\" title=\"1.7.1.2.1 3D transformations\"></a>1.7.1.2.1 3D transformations</h4><p>类同1.7.1.1中的二维变换，只是我们需要将2D变换所用的三维齐次坐标改为四维齐次坐标：<br>$$<br>3D \\ Point: = (x, \\ y, \\ z, \\ 1)^T\\<br>3D \\ Vector: = (x, \\ y, \\ z, \\ 0)^T<br>$$<br>此时的三种变换的矩阵会变为：<br>$$<br>Scale(s_x,\\ s_y,\\ s_z) =<br>\\begin{pmatrix}<br>s_x &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; s_y &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; s_z &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix} \\hfill \\\\<br>Translation(t_x,\\ t_y,\\ t_z) =<br>\\begin{pmatrix}<br>1 &amp; 0 &amp; 0 &amp; t_x\\<br>0 &amp; 1 &amp; 0 &amp; t_y\\<br>0 &amp; 0 &amp; 1 &amp; t_z\\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix} \\hfill \\<br>$$<br>而旋转则分为三种，分别应用于绕x, y, z三轴旋转的情况：<br>$$<br>Rotation_x(\\theta) =<br>\\begin{pmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; \\cos\\theta &amp; -\\sin\\theta &amp; 0\\<br>0 &amp; \\sin\\theta &amp; \\cos\\theta &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix} \\Longleftarrow y \\times z \\hfill \\\\<br>Rotation_y(\\theta) =<br>\\begin{pmatrix}<br>\\cos\\theta &amp; 0 &amp; \\sin\\theta &amp; 0\\<br>0 &amp; 1 &amp; 0 &amp; 0\\<br>-\\sin\\theta &amp; 0 &amp; \\cos\\theta &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix} \\Longleftarrow z \\times x \\hfill \\\\<br>Rotation_z(\\theta) =<br>\\begin{pmatrix}<br>\\cos\\theta &amp; -\\sin\\theta &amp; 0 &amp; 0\\<br>\\sin\\theta &amp; \\cos\\theta &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; 1 &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix} \\Longleftarrow x \\times y \\hfill \\\\<br>$$<br>有了基础的绕三轴的旋转，我们可以通过组合，将物体旋转到任意方向上去：<br>$$<br>R_{xyz}(\\alpha,\\ \\beta,\\ \\gamma) = R_x(\\alpha)R_y(\\beta)R_z(\\gamma)<br>$$<br>例：飞机的运动：roll, yaw, pitch</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在三维空间中任意的旋转，我们都可以通过将它分解到三个轴上</p>\n<ul>\n<li>将旋转轴平移到经过原点</li>\n<li>分解该旋转过程</li>\n</ul>\n<p>公式：Rodrigues’ Rotation Formula: </p>\n<p>Rotation by angle α around axis n<br>$$<br>R(\\vec{n}, \\alpha) = \\cos(\\alpha)\\vec{I} + (1 - \\cos(\\alpha))\\vec{n}\\vec{n}^T + \\sin(\\alpha)<br>\\begin{pmatrix}<br>0 &amp; -n_z &amp; n_y\\<br>n_z &amp; 0 &amp; -n_x\\<br>-n_y &amp; n_x &amp; 0<br>\\end{pmatrix}<br>$$</p>\n<blockquote>\n<p>简明推导过程：</p></blockquote>\n<p><del>罗德里格斯公式，给个轴和角度就能转</del></p>\n<p>[向量叉乘与叉乘矩阵 - neu博 - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/monoSLAM/p/5349497.html#:~:text=%E7%94%B1%E5%8F%89%E4%B9%98%E7%9A%84%E8%A7%84%E5%88%99%EF%BC%8Ca%E5%8F%89%E4%B9%98a%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%BA0%EF%BC%9A\">https://www.cnblogs.com/monoSLAM/p/5349497.html#:~:text=由叉乘的规则，a叉乘a的结果为0：</a> 通过对比，可以发现 aH,就是a向量的叉乘矩阵 ，当a为列向量时 为a向量的叉乘矩阵。)</p>\n</blockquote>\n<h4 id=\"1-7-1-2-2-Viewing-transformation\"><a href=\"#1-7-1-2-2-Viewing-transformation\" class=\"headerlink\" title=\"1.7.1.2.2 Viewing transformation\"></a>1.7.1.2.2 Viewing transformation</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以拍照片为例：</p>\n<ul>\n<li>Find a good place and arrange people (Model transformation)</li>\n<li>Find a good “angle” to put the camera (View transformation)</li>\n<li>Cheese! (Projection transformation)</li>\n</ul>\n<p>即MVP变换——模型-视图-投影变换</p>\n<p>相应的，我们也有MVP矩阵。当然，这里是View transformation</p></blockquote>\n<h5 id=\"1-7-1-2-2-1-View-Camera-transformation\"><a href=\"#1-7-1-2-2-1-View-Camera-transformation\" class=\"headerlink\" title=\"1.7.1.2.2.1 View/Camera transformation\"></a>1.7.1.2.2.1 View/Camera transformation</h5><p>目的：将摄像头移动至世界中心<br>过程：做“将原点移动至当前摄像头位置的“的<strong>逆变换</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>利用R_view.rotate，我们将世界空间变换到摄像机空间</p>\n<p>同时我们也可以相反地利用R^-1^_view.rotate矩阵实现从摄像机空间到世界空间的逆变换</p></blockquote>\n<p>$$<br>R_{view.rotate}^{-1} = \\begin{pmatrix}<br>x_{\\hat{g}\\times\\hat{t}} &amp; x_t &amp; x_{-g}\\<br>y_{\\hat{g}\\times\\hat{t}} &amp; y_t &amp; y_{-g}\\<br>z_{\\hat{g}\\times\\hat{t}} &amp; z_t &amp; z_{-g}<br>\\end{pmatrix}^{-1} = R_{view.rotate}^T\\\\Downarrow\\<br>R_{view.rotate} = \\begin{pmatrix}<br>x_{\\hat{g}\\times\\hat{t}} &amp; y_{\\hat{g}\\times\\hat{t}} &amp; z_{\\hat{g}\\times\\hat{t}} \\<br>x_t &amp; y_t &amp; z_t \\<br>x_{-g} &amp; y_{-g} &amp; z_{-g}<br>\\end{pmatrix}\\\\\\Downarrow\\\\<br>R_{view} =<br>\\begin{pmatrix}<br>x_{\\hat{g}\\times\\hat{t}} &amp; y_{\\hat{g}\\times\\hat{t}} &amp; z_{\\hat{g}\\times\\hat{t}} &amp; 0\\<br>x_t &amp; y_t &amp; z_t &amp; 0\\<br>x_{-g} &amp; y_{-g} &amp; z_{-g} &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>\\begin{pmatrix}<br>1 &amp; 0 &amp; 0 &amp; -P_{camera_x}\\<br>0 &amp; 1 &amp; 0 &amp; -P_{camera_y}\\<br>0 &amp; 0 &amp; 1 &amp; -P_{camera_z}\\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{pmatrix}<br>$$</p>\n<h5 id=\"1-7-1-2-2-2-Projection-transformation-投影变换\"><a href=\"#1-7-1-2-2-2-Projection-transformation-投影变换\" class=\"headerlink\" title=\"1.7.1.2.2.2 Projection transformation - 投影变换\"></a>1.7.1.2.2.2 Projection transformation - 投影变换</h5><h6 id=\"1-7-1-2-2-2-1-Orthographic-projection-正交变换\"><a href=\"#1-7-1-2-2-2-1-Orthographic-projection-正交变换\" class=\"headerlink\" title=\"1.7.1.2.2.2.1 Orthographic projection - 正交变换\"></a>1.7.1.2.2.2.1 Orthographic projection - 正交变换</h6><p>map a cuboid: [l, r], [b, t], [<strong>f</strong>, <strong>n</strong>] to the “canonical” cube [-1, 1]^3^</p>\n<p>使用的手段包括：位移、缩放等<br>$$<br>M_{ortho} =<br>\\begin{bmatrix}<br>\\frac{2}{r-l} &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; \\frac{2}{t-b} &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; \\frac{2}{n-f} &amp; 0 \\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; -\\frac{r+l}{2}\\<br>0 &amp; 1 &amp; 0 &amp; -\\frac{t+b}{2}\\<br>0 &amp; 0 &amp; 1 &amp; -\\frac{n+f}{2}\\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>$$</p>\n<h6 id=\"1-7-1-2-2-2-2-Perspective-projection-透视变换\"><a href=\"#1-7-1-2-2-2-2-Perspective-projection-透视变换\" class=\"headerlink\" title=\"1.7.1.2.2.2.2 Perspective projection - 透视变换\"></a>1.7.1.2.2.2.2 Perspective projection - 透视变换</h6><p>GAMES101：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>将Perspective projection先挤压为Orthographic projection，然后再依照正交变换的思路做projection</p></blockquote>\n<p>$$<br>M_{persp} =<br>\\begin{pmatrix}<br>n &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; n &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; n+f &amp; -nf\\<br>0 &amp; 0 &amp; 1 &amp; 0<br>\\end{pmatrix}<br>$$</p>\n<h2 id=\"1-7-2-利用GLM变换\"><a href=\"#1-7-2-利用GLM变换\" class=\"headerlink\" title=\"1.7.2 利用GLM变换\"></a>1.7.2 利用GLM变换</h2><p>GLM版本：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>从0.9.9版本开始，GLM创建矩阵的默认值为零矩阵；在此之前的版本则是单位矩阵。使用语句初始化：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">glm::mat4 mat &#x3D; glm::mat4(1.0f);</code></pre></blockquote>\n<p>现在的情况：</p>\n<p>在CPU侧提前完成变换矩阵的计算，然后将该结果传递到shader处用于position的计算</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">&#x2F;&#x2F; main.cpp处\n&#x2F;&#x2F; 1. 计算好变换矩阵\nglm::mat4 trans &#x3D; glm::mat4(1.0f);\ntrans &#x3D; glm::rorate(trans, glm::radians(90.0f), glm::vec3(0.0f, 0.0f, 1.0f));\ntrans &#x3D; glm::scale(trans, glm::vec3(0.5f, 0.5f, 0.5f));\n\n&#x2F;&#x2F; 2. 传递值 - uniform手段\nGluint transformLoc &#x3D; glGetUniformLocation(...);\nglUniformMatrix4fv(transformLoc, 1, GL_FALSE, trans);</code></pre>\n\n<pre class=\"line-numbers language-glsl\" data-language=\"glsl\"><code class=\"language-glsl\">&#x2F;&#x2F; vertex shader处\n&#x2F;&#x2F; 3. 实际使用\nuniform mat4 transform;\n...\ngl_Position &#x3D; transform * vec4(position, 1.0f);</code></pre>\n","text":"1.7 Transform欢迎！ 欢迎来到这里，有关数学的一节。 这里会结合Games 101与Unity Shader入门精要的相关内容进行。 Games 101：Lecture 03 Transformation 1.7.1 GAMES 1011.7.1.1 GAMES 10...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-7-Transform\"><span class=\"toc-text\">1.7 Transform</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-7-1-GAMES-101\"><span class=\"toc-text\">1.7.1 GAMES 101</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7-1-1-GAMES-101-Lecture-03-Transformation\"><span class=\"toc-text\">1.7.1.1 GAMES 101 Lecture 03 Transformation</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-7-1-2-GAMES-101-Lecture-04-Transformation-Count\"><span class=\"toc-text\">1.7.1.2 GAMES 101 Lecture 04 Transformation Count.</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-7-1-2-1-3D-transformations\"><span class=\"toc-text\">1.7.1.2.1 3D transformations</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-7-1-2-2-Viewing-transformation\"><span class=\"toc-text\">1.7.1.2.2 Viewing transformation</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-7-1-2-2-1-View-Camera-transformation\"><span class=\"toc-text\">1.7.1.2.2.1 View&#x2F;Camera transformation</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-7-1-2-2-2-Projection-transformation-%E6%8A%95%E5%BD%B1%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">1.7.1.2.2.2 Projection transformation - 投影变换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-7-1-2-2-2-1-Orthographic-projection-%E6%AD%A3%E4%BA%A4%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">1.7.1.2.2.2.1 Orthographic projection - 正交变换</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-7-1-2-2-2-2-Perspective-projection-%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">1.7.1.2.2.2.2 Perspective projection - 透视变换</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-7-2-%E5%88%A9%E7%94%A8GLM%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">1.7.2 利用GLM变换</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/07Coordinate Systems","date":"2023-03-07T16:14:46.121Z","updated":"2023-01-14T14:48:32.393Z","comments":true,"path":"api/articles/Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/07Coordinate Systems.json","keywords":null,"cover":[],"text":"Coordinate Systemscategories请主要注意这中间的MVP变换与最后的视口变换 &#x2F;&#x2F; final tranformation looks like: layout (location &#x3D; 0) in vec3 Position;...","link":"","photos":[],"count_time":{"symbolsCount":241,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/05Texture","date":"2023-03-07T16:14:46.114Z","updated":"2022-12-22T09:48:45.892Z","comments":true,"path":"api/articles/Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/05Texture.json","keywords":null,"cover":[],"text":"1.6 Texture1.6.1 纹理坐标与纹理的应用1.6.1.1 定义纹理坐标 我们已经了解到，我们可以为每个顶点添加颜色来增加图形的细节，从而创建出有趣的图像。但是，如果想让图形看起来更真实，我们就必须有足够多的顶点，从而指定足够多的颜色。这将会产生很多额外开销，因为每个模...","link":"","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"learningOpenGl Chapter 2.1","uid":"a30ae670e7580d885c145007ff8514b4","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/00.Colors","date":"2023-03-08T02:21:08.000Z","updated":"2023-03-08T02:27:40.474Z","comments":true,"path":"api/articles/Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/00.Colors.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h2 id=\"Define-a-rule\"><a href=\"#Define-a-rule\" class=\"headerlink\" title=\"Define a rule\"></a>Define a rule</h2><p>如果我要使用向量A(1.0, 0.8, 0.6)来乘以B(0.8, 0.6, 0.4)，我定义：<br>$$<br>vector A = &lt;1.0, 0.8, 0.6&gt;\\<br>vector B = &lt;0.8, 0.6, 0.4&gt;\\\\<br>A * B = &lt;1.0 * 0.8, 0.8 * 0.6, 0.6 * 0.4&gt; = &lt;0.8, 0.48, 0.24&gt;<br>$$<br>这与点积的区别在于：该运算的结果是向量，而点积的结果是一个具体数据。</p>\n<p>利用这个关系，我们可以计算光照关系：<br>$$<br>RealTimeColor = RealColor * AmbientColor<br>$$</p>\n<h2 id=\"What-we-need-to-do-in-this-section\"><a href=\"#What-we-need-to-do-in-this-section\" class=\"headerlink\" title=\"What we need to do in this section\"></a>What we need to do in this section</h2><p>在本节中，我们要实现一个光照场景来为后续步骤提供便利。这会用到我们定义的规则。</p>\n<p>此时，我们需要做的包括：</p>\n<ul>\n<li>制作一个light source(LS)</li>\n<li>制作一个object(OB)</li>\n</ul>\n<p>此时，为了方便以后的更多操作，我们需要区别LS和OB的Shader：</p>\n<p>分别为LS和OB搭起一套Shader程序，依次调用他们的shader.use并且投入相应的数据，最终确保：</p>\n<ul>\n<li>Color of LS hardly change</li>\n<li>Color of OB will changed because of our rules</li>\n</ul>\n<p>Finally, we can get a pic like:</p>\n<img src=\"https://learnopengl.com/img/lighting/colors_scene.png\">","text":"Define a rule如果我要使用向量A(1.0, 0.8, 0.6)来乘以B(0.8, 0.6, 0.4)，我定义：$$vector A = &lt;1.0, 0.8, 0.6&gt;\\vector B = &lt;0.8, 0.6, 0.4&gt;\\\\A * B = &l...","link":"","photos":[],"count_time":{"symbolsCount":623,"symbolsTime":"1 mins."},"categories":[{"name":"TA","slug":"TA","count":14,"path":"api/categories/TA.json"}],"tags":[{"name":"Opengl","slug":"Opengl","count":14,"path":"api/tags/Opengl.json"},{"name":"Shader","slug":"Shader","count":14,"path":"api/tags/Shader.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Define-a-rule\"><span class=\"toc-text\">Define a rule</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#What-we-need-to-do-in-this-section\"><span class=\"toc-text\">What we need to do in this section</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"learningOpenGl Chapter 2.2","uid":"e4e32fc3ec80a57afe53517f515d2f2d","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/01.Basic Lighting","date":"2023-03-08T02:21:08.000Z","updated":"2023-03-08T02:27:47.165Z","comments":true,"path":"api/articles/Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/01.Basic Lighting.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Phong lighting model裴祥风提出的标准光照模型背后的理念。 把进入到摄像机内的光线分为4个部分： emissive - 自发光部分，用于描述当给定一个方向时，一个表面本身回向该方向发射多少辐射量。 specular - 高光反射部分，用于描述当光线从光源照射到模...","link":"","photos":[],"count_time":{"symbolsCount":887,"symbolsTime":"1 mins."},"categories":[{"name":"TA","slug":"TA","count":14,"path":"api/categories/TA.json"}],"tags":[{"name":"Opengl","slug":"Opengl","count":14,"path":"api/tags/Opengl.json"},{"name":"Shader","slug":"Shader","count":14,"path":"api/tags/Shader.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"learningOpenGl Chapter 2.3","uid":"77ec7ccacfb72fa4bd2436c5873c81ff","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/02.Materials","date":"2023-03-08T02:21:08.000Z","updated":"2023-03-08T02:27:55.947Z","comments":true,"path":"api/articles/Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/02.Materials.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"一个场景中，我们可能同时使用多个物体，而这些物体对光的特性各不相同——我们需要建立“材质”属性，统一地管理物体的三种光照关系 构建思路：我们利用struct来管理物体的对应情况下的“颜色“来代替笼统的”objectColor“ struct Material&#123; vec3...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"TA","slug":"TA","count":14,"path":"api/categories/TA.json"}],"tags":[{"name":"Opengl","slug":"Opengl","count":14,"path":"api/tags/Opengl.json"},{"name":"Shader","slug":"Shader","count":14,"path":"api/tags/Shader.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"Merge Sort - 归并排序","uid":"f8c8a85b34fcac6d0fefec2d2d2d9cd5","slug":"Algorithm/SORT/Merge Sort","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-01T04:25:45.712Z","comments":true,"path":"api/articles/Algorithm/SORT/Merge Sort.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h2 id=\"merge-sort-归并排序\">Merge Sort 归并排序</h2>\r\n<h3 id=\"reference\">Reference：</h3>\r\n<p><a href=\"https://www.runoob.com/w3cnote/merge-sort.html\">1.5 归并排序\r\n| 菜鸟教程 (runoob.com)</a></p>\r\n<h3 id=\"算法步骤\">算法步骤：</h3>\r\n<ul>\r\n<li>概述：</li>\r\n</ul>\r\n<blockquote>\r\n<ol type=\"1\">\r\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\r\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\r\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\r\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\r\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li>\r\n</ol>\r\n</blockquote>\r\n<ul>\r\n<li><p>图示：</p>\r\n<blockquote>\r\n<p>1:</p>\r\n<figure>\r\n<img src=\"......\\images\\Algorithm\\mergeSort.gif\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n</blockquote>\r\n<blockquote>\r\n<p>2:</p>\r\n<figure>\r\n<img\r\nsrc=\"......\\images\\Algorithm\\1024555-20161218163120151-452283750.png\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"实现-迭代法\">实现-迭代法：</h3>\r\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function mergeSort(arr) &#123;  &#x2F;&#x2F; 采用自上而下的递归方法\n    var len &#x3D; arr.length;\n    if(len &lt; 2) &#123;\n        return arr;\n    &#125;\n    var middle &#x3D; Math.floor(len &#x2F; 2),\n        left &#x3D; arr.slice(0, middle),\n        right &#x3D; arr.slice(middle);\n    return merge(mergeSort(left), mergeSort(right));\n&#125;\n\nfunction merge(left, right)\n&#123;\n    var result &#x3D; [];\n\n    while (left.length &amp;&amp; right.length) &#123;\n        if (left[0] &lt;&#x3D; right[0]) &#123;\n            result.push(left.shift());\n        &#125; else &#123;\n            result.push(right.shift());\n        &#125;\n    &#125;\n\n    while (left.length)\n        result.push(left.shift());\n\n    while (right.length)\n        result.push(right.shift());\n\n    return result;\n&#125;</code></pre>\r\n<h3 id=\"实现-递归法\">实现-递归法：</h3>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Arrays;\n\n&#x2F;**\n * Created by chengxiao on 2016&#x2F;12&#x2F;8.\n *&#x2F;\npublic class MergeSort &#123;\n    public static void main(String []args)&#123;\n        int []arr &#x3D; &#123;9,8,7,6,5,4,3,2,1&#125;;\n        sort(arr);\n        System.out.println(Arrays.toString(arr));\n    &#125;\n    public static void sort(int []arr)&#123;\n        int []temp &#x3D; new int[arr.length];&#x2F;&#x2F;在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间\n        sort(arr,0,arr.length-1,temp);\n    &#125;\n    private static void sort(int[] arr,int left,int right,int []temp)&#123;\n        if(left&lt;right)&#123;\n            int mid &#x3D; (left+right)&#x2F;2;\n            sort(arr,left,mid,temp);&#x2F;&#x2F;左边归并排序，使得左子序列有序\n            sort(arr,mid+1,right,temp);&#x2F;&#x2F;右边归并排序，使得右子序列有序\n            merge(arr,left,mid,right,temp);&#x2F;&#x2F;将两个有序子数组合并操作\n        &#125;\n    &#125;\n    private static void merge(int[] arr,int left,int mid,int right,int[] temp)&#123;\n        int i &#x3D; left;&#x2F;&#x2F;左序列指针\n        int j &#x3D; mid+1;&#x2F;&#x2F;右序列指针\n        int t &#x3D; 0;&#x2F;&#x2F;临时数组指针\n        while (i&lt;&#x3D;mid &amp;&amp; j&lt;&#x3D;right)&#123;\n            if(arr[i]&lt;&#x3D;arr[j])&#123;\n                temp[t++] &#x3D; arr[i++];\n            &#125;else &#123;\n                temp[t++] &#x3D; arr[j++];\n            &#125;\n        &#125;\n        while(i&lt;&#x3D;mid)&#123;&#x2F;&#x2F;将左边剩余元素填充进temp中\n            temp[t++] &#x3D; arr[i++];\n        &#125;\n        while(j&lt;&#x3D;right)&#123;&#x2F;&#x2F;将右序列剩余元素填充进temp中\n            temp[t++] &#x3D; arr[j++];\n        &#125;\n        t &#x3D; 0;\n        &#x2F;&#x2F;将temp中的元素全部拷贝到原数组中\n        while(left &lt;&#x3D; right)&#123;\n            arr[left++] &#x3D; temp[t++];\n        &#125;\n    &#125;\n&#125;</code></pre>\r\n<h2 id=\"用例1\">用例1：</h2>\r\n<p><a\r\nhref=\"https://blog.csdn.net/imred/article/details/82875443\">计算二分图（bipartite\r\ngraph）交叉点（crossing）的数量_imred的博客-CSDN博客_bipartite\r\ngraph</a></p>\r\n","text":"Merge Sort 归并排序 Reference： 1.5 归并排序 | 菜鸟教程 (runoob.com) 算法步骤： 概述： 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列； 设定两个指针，最初位置分别为两个已经排序序列的起始位置； 比较两个指针所指向...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Sort","slug":"Sort","count":2,"path":"api/tags/Sort.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#merge-sort-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">Merge Sort 归并排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#reference\"><span class=\"toc-text\">Reference：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">算法步骤：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-%E8%BF%AD%E4%BB%A3%E6%B3%95\"><span class=\"toc-text\">实现-迭代法：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-%E9%80%92%E5%BD%92%E6%B3%95\"><span class=\"toc-text\">实现-递归法：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E4%BE%8B1\"><span class=\"toc-text\">用例1：</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"KMP","uid":"53896b079468d4c41963b2300dea196e","slug":"Algorithm/String Processing/KMP","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-01T04:22:30.582Z","comments":true,"path":"api/articles/Algorithm/String Processing/KMP.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"KMP算法 KMP算法作用简介： 在计算机科学中，Knuth-Morris-Pratt字符串查找算法（简称为KMP算法）可在一个字符串S内查找一个词W的出现位置。一个词在不匹配时本身就包含足够的信息来确定下一个匹配可能的开始位置，此算法利用这一特性以避免重新检查先前配对的字符。 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"String Processing","slug":"String-Processing","count":5,"path":"api/tags/String-Processing.json"},{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"R&K Algorithm","uid":"3300e6e8edea21eb33ad89b2150bf9cc","slug":"Algorithm/String Processing/KR&RK","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:29:56.000Z","comments":true,"path":"api/articles/Algorithm/String Processing/KR&RK.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Rabin–Karp algorithm - 拉宾-卡普算法 拉宾-卡普算法（英語：Rabin–Karp algorithm）或卡普-拉宾算法（Karp–Rabin algorithm） General Rabin-Karp 算法是由 Richard M. Karp和 Micha...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"String Processing","slug":"String-Processing","count":5,"path":"api/tags/String-Processing.json"},{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"Merge Sort - 归并排序","uid":"f8c8a85b34fcac6d0fefec2d2d2d9cd5","slug":"Algorithm/SORT/MergeSort/Merge Sort","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:29:33.000Z","comments":true,"path":"api/articles/Algorithm/SORT/MergeSort/Merge Sort.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h2 id=\"merge-sort-归并排序\">Merge Sort 归并排序</h2>\r\n<h3 id=\"reference\">Reference：</h3>\r\n<p><a href=\"https://www.runoob.com/w3cnote/merge-sort.html\">1.5 归并排序\r\n| 菜鸟教程 (runoob.com)</a></p>\r\n<h3 id=\"算法步骤\">算法步骤：</h3>\r\n<ul>\r\n<li>概述：</li>\r\n</ul>\r\n<blockquote>\r\n<ol type=\"1\">\r\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\r\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\r\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\r\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\r\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li>\r\n</ol>\r\n</blockquote>\r\n<ul>\r\n<li><p>图示：</p>\r\n<blockquote>\r\n<p>1:</p>\r\n<figure>\r\n<img src=\"mergeSort.gif\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n</blockquote>\r\n<blockquote>\r\n<p>2:</p>\r\n<figure>\r\n<img src=\"1024555-20161218163120151-452283750.png\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n</blockquote></li>\r\n</ul>\r\n<h3 id=\"实现-迭代法\">实现-迭代法：</h3>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mergeSort</span>(<span class=\"params\">arr</span>) &#123;  <span class=\"comment\">// 采用自上而下的递归方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> middle = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(len / <span class=\"number\">2</span>),</span><br><span class=\"line\">        left = arr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, middle),</span><br><span class=\"line\">        right = arr.<span class=\"title function_\">slice</span>(middle);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(<span class=\"title function_\">mergeSort</span>(left), <span class=\"title function_\">mergeSort</span>(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">left, right</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.<span class=\"property\">length</span> &amp;&amp; right.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            result.<span class=\"title function_\">push</span>(left.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.<span class=\"title function_\">push</span>(right.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.<span class=\"property\">length</span>)</span><br><span class=\"line\">        result.<span class=\"title function_\">push</span>(left.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right.<span class=\"property\">length</span>)</span><br><span class=\"line\">        result.<span class=\"title function_\">push</span>(right.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"实现-递归法\">实现-递归法：</h3>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by chengxiao on 2016/12/8.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MergeSort</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> []arr = &#123;<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span> []arr)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> []temp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[arr.length];<span class=\"comment\">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class=\"line\">        sort(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>,temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span>[] arr,<span class=\"type\">int</span> left,<span class=\"type\">int</span> right,<span class=\"type\">int</span> []temp)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&lt;right)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left+right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            sort(arr,left,mid,temp);<span class=\"comment\">//左边归并排序，使得左子序列有序</span></span><br><span class=\"line\">            sort(arr,mid+<span class=\"number\">1</span>,right,temp);<span class=\"comment\">//右边归并排序，使得右子序列有序</span></span><br><span class=\"line\">            merge(arr,left,mid,right,temp);<span class=\"comment\">//将两个有序子数组合并操作</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] arr,<span class=\"type\">int</span> left,<span class=\"type\">int</span> mid,<span class=\"type\">int</span> right,<span class=\"type\">int</span>[] temp)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> left;<span class=\"comment\">//左序列指针</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> mid+<span class=\"number\">1</span>;<span class=\"comment\">//右序列指针</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//临时数组指针</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid &amp;&amp; j&lt;=right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i]&lt;=arr[j])&#123;</span><br><span class=\"line\">                temp[t++] = arr[i++];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp[t++] = arr[j++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;=mid)&#123;<span class=\"comment\">//将左边剩余元素填充进temp中</span></span><br><span class=\"line\">            temp[t++] = arr[i++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&lt;=right)&#123;<span class=\"comment\">//将右序列剩余元素填充进temp中</span></span><br><span class=\"line\">            temp[t++] = arr[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//将temp中的元素全部拷贝到原数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right)&#123;</span><br><span class=\"line\">            arr[left++] = temp[t++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"用例1\">用例1：</h2>\r\n<p><a\r\nhref=\"https://blog.csdn.net/imred/article/details/82875443\">计算二分图（bipartite\r\ngraph）交叉点（crossing）的数量_imred的博客-CSDN博客_bipartite\r\ngraph</a></p>\r\n","text":"Merge Sort 归并排序 Reference： 1.5 归并排序 | 菜鸟教程 (runoob.com) 算法步骤： 概述： 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列； 设定两个指针，最初位置分别为两个已经排序序列的起始位置； 比较两个指针所指向...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Sort","slug":"Sort","count":2,"path":"api/tags/Sort.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#merge-sort-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">Merge Sort 归并排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#reference\"><span class=\"toc-text\">Reference：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">算法步骤：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-%E8%BF%AD%E4%BB%A3%E6%B3%95\"><span class=\"toc-text\">实现-迭代法：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-%E9%80%92%E5%BD%92%E6%B3%95\"><span class=\"toc-text\">实现-递归法：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E4%BE%8B1\"><span class=\"toc-text\">用例1：</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"全排列","uid":"4bbde60d3dafb255adad1c9293392efa","slug":"Rendering/NPR/UST","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T15:41:24.000Z","comments":true,"path":"api/articles/Rendering/NPR/UST.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"什么是 UST？ UST，即 Unity Toon Shader，截至成文时，UST 的版本为 0.9.4-preivew。对应： Unity Toon Shader overview | Unity Toon Shader | 0.9.4-preview (unity3d.co...","link":"","photos":[],"count_time":{"symbolsCount":413,"symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Prim’s Minimum Spanning Tree","uid":"b14408b92d0c8809e1d3bbbaabf2879c","slug":"Algorithm/Prim/Prim","date":"2022-12-22T04:23:23.000Z","updated":"2023-10-27T14:29:39.000Z","comments":true,"path":"api/articles/Algorithm/Prim/Prim.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":" Prim 算法(Python 实现)_JohnJim 的博客-CSDN 博客_prim 算法 python ","link":"","photos":[],"count_time":{"symbolsCount":58,"symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"MST","slug":"MST","count":1,"path":"api/tags/MST.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
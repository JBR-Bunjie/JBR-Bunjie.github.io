{"title":"Heap Sort - 堆排序","uid":"120c49bf67650504f15740668777cd42","slug":"Algorithm/SORT/Heap Sort","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T16:10:23.000Z","comments":true,"path":"api/articles/Algorithm/SORT/Heap Sort.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"heap-sort---堆排序\">Heap Sort - 堆排序</h1>\r\n<h2 id=\"reference\">Reference：</h2>\r\n<ul>\r\n<li><strong><em><a\r\nhref=\"https://blog.csdn.net/qq_16403141/article/details/80526313\">Recommend：堆排序之JAVA实现月光下一只赏月的猪的博客-CSDN博客java\r\n堆排序</a></em></strong></li>\r\n<li><a\r\nhref=\"https://blog.csdn.net/h348592532/article/details/45508715\">（高效率排序算法三）堆排序_送人玫瑰手留余香的博客-CSDN博客_堆排序效率</a></li>\r\n<li><a href=\"https://www.runoob.com/w3cnote/heap-sort.html\">1.7 堆排序 |\r\n菜鸟教程 (runoob.com)</a></li>\r\n</ul>\r\n<h2 id=\"detail\">Detail：</h2>\r\n<ol type=\"1\">\r\n<li>两个定义：</li>\r\n</ol>\r\n<blockquote>\r\n<p>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</p>\r\n<p>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</p>\r\n</blockquote>\r\n<ol start=\"2\" type=\"1\">\r\n<li>步骤描述：</li>\r\n</ol>\r\n<blockquote>\r\n<ol type=\"1\">\r\n<li>创建一个堆 H[0……n-1]；</li>\r\n<li>把堆首（最大值）和堆尾互换；</li>\r\n<li>把堆的尺寸缩小 1，并调用\r\nshift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li>\r\n<li>重复步骤 2，直到堆的尺寸为 1。</li>\r\n</ol>\r\n</blockquote>\r\n<ol start=\"3\" type=\"1\">\r\n<li>分析：</li>\r\n</ol>\r\n<p>堆排序的平均时间复杂度为 Ο(nlogn)。</p>\r\n<h2 id=\"code\">Code：</h2>\r\n<h3 id=\"code---javascript\">Code - JavaScript</h3>\r\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var len;    &#x2F;&#x2F; 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量\n\nfunction buildMaxHeap(arr) &#123;   &#x2F;&#x2F; 建立大顶堆\n    len &#x3D; arr.length;\n    for (var i &#x3D; Math.floor(len&#x2F;2); i &gt;&#x3D; 0; i--) &#123;\n        heapify(arr, i);\n    &#125;\n&#125;\n\nfunction heapify(arr, i) &#123;     &#x2F;&#x2F; 堆调整\n    var left &#x3D; 2 * i + 1,\n        right &#x3D; 2 * i + 2,\n        largest &#x3D; i;\n\n    if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;\n        largest &#x3D; left;\n    &#125;\n\n    if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;\n        largest &#x3D; right;\n    &#125;\n\n    if (largest !&#x3D; i) &#123;\n        swap(arr, i, largest);\n        heapify(arr, largest);\n    &#125;\n&#125;\n\nfunction swap(arr, i, j) &#123;\n    var temp &#x3D; arr[i];\n    arr[i] &#x3D; arr[j];\n    arr[j] &#x3D; temp;\n&#125;\n\nfunction heapSort(arr) &#123;\n    buildMaxHeap(arr);\n\n    for (var i &#x3D; arr.length-1; i &gt; 0; i--) &#123;\n        swap(arr, 0, i);\n        len--;\n        heapify(arr, 0);\n    &#125;\n    return arr;\n&#125;</code></pre>\r\n<h3 id=\"code---python\">Code - Python</h3>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def buildMaxHeap(arr):\n    import math\n    for i in range(math.floor(len(arr)&#x2F;2),-1,-1):\n        heapify(arr,i)\n\ndef heapify(arr, i):\n    left &#x3D; 2*i+1\n    right &#x3D; 2*i+2\n    largest &#x3D; i\n    if left &lt; arrLen and arr[left] &gt; arr[largest]:\n        largest &#x3D; left\n    if right &lt; arrLen and arr[right] &gt; arr[largest]:\n        largest &#x3D; right\n\n    if largest !&#x3D; i:\n        swap(arr, i, largest)\n        heapify(arr, largest)\n\ndef swap(arr, i, j):\n    arr[i], arr[j] &#x3D; arr[j], arr[i]\n\ndef heapSort(arr):\n    global arrLen\n    arrLen &#x3D; len(arr)\n    buildMaxHeap(arr)\n    for i in range(len(arr)-1,0,-1):\n        swap(arr,0,i)\n        arrLen -&#x3D;1\n        heapify(arr, 0)\n    return arr</code></pre>\r\n","text":"Heap Sort - 堆排序 Reference： Recommend：堆排序之JAVA实现月光下一只赏月的猪的博客-CSDN博客java 堆排序 （高效率排序算法三）堆排序_送人玫瑰手留余香的博客-CSDN博客_堆排序效率 1.7 堆排序 | 菜鸟教程 (runoob.com...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Sort","slug":"Sort","count":2,"path":"api/tags/Sort.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#heap-sort---%E5%A0%86%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">Heap Sort - 堆排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#reference\"><span class=\"toc-text\">Reference：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#detail\"><span class=\"toc-text\">Detail：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#code\"><span class=\"toc-text\">Code：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#code---javascript\"><span class=\"toc-text\">Code - JavaScript</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#code---python\"><span class=\"toc-text\">Code - Python</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Boyer Moore Algorithm","uid":"0d08c32366a524bf34b2dc2c2fb0333a","slug":"Algorithm/String Processing/Boyer Moore Algorithm","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:29:30.000Z","comments":true,"path":"api/articles/Algorithm/String Processing/Boyer Moore Algorithm.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Boyer Moore Algorithm General 高效，可靠，应用广泛：各种文本编辑器的\"查找\"功能（Ctrl+F），大多采用Boyer-Moore算法 1977年，德克萨斯大学的Robert S. Boyer教授和J Strother Moore教授发明了这种算法。 ...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"String Processing","slug":"String-Processing","count":5,"path":"api/tags/String-Processing.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Merge Sort - 归并排序","uid":"f8c8a85b34fcac6d0fefec2d2d2d9cd5","slug":"Algorithm/SORT/Merge Sort","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-01T04:25:45.712Z","comments":true,"path":"api/articles/Algorithm/SORT/Merge Sort.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Merge Sort 归并排序 Reference： 1.5 归并排序 | 菜鸟教程 (runoob.com) 算法步骤： 概述： 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列； 设定两个指针，最初位置分别为两个已经排序序列的起始位置； 比较两个指针所指向...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Sort","slug":"Sort","count":2,"path":"api/tags/Sort.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"Heap Sort - 堆排序","uid":"120c49bf67650504f15740668777cd42","slug":"Algorithm/SORT/Heap Sort","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T16:10:23.000Z","comments":true,"path":"api/articles/Algorithm/SORT/Heap Sort.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"Heap-Sort-堆排序\"><a href=\"#Heap-Sort-堆排序\" class=\"headerlink\" title=\"Heap Sort - 堆排序\"></a>Heap Sort - 堆排序</h1><h2 id=\"Reference：\"><a href=\"#Reference：\" class=\"headerlink\" title=\"Reference：\"></a>Reference：</h2><ul>\n<li><em><strong><a href=\"https://blog.csdn.net/qq_16403141/article/details/80526313\">Recommend：堆排序之JAVA实现月光下一只赏月的猪的博客-CSDN博客java 堆排序</a></strong></em></li>\n<li><a href=\"https://blog.csdn.net/h348592532/article/details/45508715\">（高效率排序算法三）堆排序_送人玫瑰手留余香的博客-CSDN博客_堆排序效率</a></li>\n<li><a href=\"https://www.runoob.com/w3cnote/heap-sort.html\">1.7 堆排序 | 菜鸟教程 (runoob.com)</a></li>\n</ul>\n<h2 id=\"Detail：\"><a href=\"#Detail：\" class=\"headerlink\" title=\"Detail：\"></a>Detail：</h2><ol>\n<li>两个定义：</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</p>\n<p>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</p></blockquote>\n<ol start=\"2\">\n<li>步骤描述：</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>创建一个堆 H[0……n-1]；</li>\n<li>把堆首（最大值）和堆尾互换；</li>\n<li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li>\n<li>重复步骤 2，直到堆的尺寸为 1。</li>\n</ol></blockquote>\n<ol start=\"3\">\n<li>分析：</li>\n</ol>\n<p>堆排序的平均时间复杂度为 Ο(nlogn)。</p>\n<h2 id=\"Code：\"><a href=\"#Code：\" class=\"headerlink\" title=\"Code：\"></a>Code：</h2><h3 id=\"Code-JavaScript\"><a href=\"#Code-JavaScript\" class=\"headerlink\" title=\"Code - JavaScript\"></a>Code - JavaScript</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">var len;    &#x2F;&#x2F; 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量\n\nfunction buildMaxHeap(arr) &#123;   &#x2F;&#x2F; 建立大顶堆\n    len &#x3D; arr.length;\n    for (var i &#x3D; Math.floor(len&#x2F;2); i &gt;&#x3D; 0; i--) &#123;\n        heapify(arr, i);\n    &#125;\n&#125;\n\nfunction heapify(arr, i) &#123;     &#x2F;&#x2F; 堆调整\n    var left &#x3D; 2 * i + 1,\n        right &#x3D; 2 * i + 2,\n        largest &#x3D; i;\n\n    if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;\n        largest &#x3D; left;\n    &#125;\n\n    if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;\n        largest &#x3D; right;\n    &#125;\n\n    if (largest !&#x3D; i) &#123;\n        swap(arr, i, largest);\n        heapify(arr, largest);\n    &#125;\n&#125;\n\nfunction swap(arr, i, j) &#123;\n    var temp &#x3D; arr[i];\n    arr[i] &#x3D; arr[j];\n    arr[j] &#x3D; temp;\n&#125;\n\nfunction heapSort(arr) &#123;\n    buildMaxHeap(arr);\n\n    for (var i &#x3D; arr.length-1; i &gt; 0; i--) &#123;\n        swap(arr, 0, i);\n        len--;\n        heapify(arr, 0);\n    &#125;\n    return arr;\n&#125;</code></pre>\n\n<h3 id=\"Code-Python\"><a href=\"#Code-Python\" class=\"headerlink\" title=\"Code - Python\"></a>Code - Python</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def buildMaxHeap(arr):\n    import math\n    for i in range(math.floor(len(arr)&#x2F;2),-1,-1):\n        heapify(arr,i)\n\ndef heapify(arr, i):\n    left &#x3D; 2*i+1\n    right &#x3D; 2*i+2\n    largest &#x3D; i\n    if left &lt; arrLen and arr[left] &gt; arr[largest]:\n        largest &#x3D; left\n    if right &lt; arrLen and arr[right] &gt; arr[largest]:\n        largest &#x3D; right\n\n    if largest !&#x3D; i:\n        swap(arr, i, largest)\n        heapify(arr, largest)\n\ndef swap(arr, i, j):\n    arr[i], arr[j] &#x3D; arr[j], arr[i]\n\ndef heapSort(arr):\n    global arrLen\n    arrLen &#x3D; len(arr)\n    buildMaxHeap(arr)\n    for i in range(len(arr)-1,0,-1):\n        swap(arr,0,i)\n        arrLen -&#x3D;1\n        heapify(arr, 0)\n    return arr</code></pre>\n\n","text":"Heap Sort - 堆排序Reference： Recommend：堆排序之JAVA实现月光下一只赏月的猪的博客-CSDN博客java 堆排序 （高效率排序算法三）堆排序_送人玫瑰手留余香的博客-CSDN博客_堆排序效率 1.7 堆排序 | 菜鸟教程 (runoob.com)...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Sort","slug":"Sort","count":2,"path":"api/tags/Sort.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Heap-Sort-%E5%A0%86%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">Heap Sort - 堆排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Reference%EF%BC%9A\"><span class=\"toc-text\">Reference：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Detail%EF%BC%9A\"><span class=\"toc-text\">Detail：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code%EF%BC%9A\"><span class=\"toc-text\">Code：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Code-JavaScript\"><span class=\"toc-text\">Code - JavaScript</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Code-Python\"><span class=\"toc-text\">Code - Python</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"requirements.txt in Python project","uid":"9f9ee0afa6efd648aa340428f380e2d6","slug":"Language Learning/Python/Requirements.txt","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T20:03:30.000Z","comments":true,"path":"api/articles/Language Learning/Python/Requirements.txt.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"requirements.txt in Python project写 python 程序的时候，我们经常的会下载很多外部模块，当我们编写完成后，准备在其他设备上部署的时候，那么新设备上需要安装我当前环境下的所有包——非常麻烦 我们可以利用 pip 来生成一个 requireme...","link":"","photos":[],"count_time":{"symbolsCount":909,"symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":9,"path":"api/categories/Python.json"},{"name":"Language Learning","slug":"Python/Language-Learning","count":8,"path":"api/categories/Python/Language-Learning.json"}],"tags":[{"name":"Language Learning","slug":"Language-Learning","count":16,"path":"api/tags/Language-Learning.json"},{"name":"Python","slug":"Python","count":10,"path":"api/tags/Python.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Merge Sort - 归并排序","uid":"f8c8a85b34fcac6d0fefec2d2d2d9cd5","slug":"Algorithm/SORT/Merge Sort","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-01T04:25:45.712Z","comments":true,"path":"api/articles/Algorithm/SORT/Merge Sort.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Merge Sort 归并排序Reference：1.5 归并排序 | 菜鸟教程 (runoob.com) 算法步骤： 概述： 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列； 设定两个指针，最初位置分别为两个已经排序序列的起始位置； 比较两个指针所指向的元...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Sort","slug":"Sort","count":2,"path":"api/tags/Sort.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
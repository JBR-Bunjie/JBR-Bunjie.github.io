{"title":"字符画","uid":"88fe004551a3de4348d535f91c34c293","slug":"Algorithm/字符画","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:33:09.000Z","comments":true,"path":"api/articles/Algorithm/字符画.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"字符画\">字符画</h1>\r\n<h2 id=\"另类应用\">另类应用</h2>\r\n<p>当你需要在shell里查看图片时</p>\r\n<h2 id=\"现有框架\">现有框架</h2>\r\n<p>ascii-image-converter <a\r\nhref=\"https://github.com/TheZoraiz/ascii-image-converter\">TheZoraiz/ascii-image-converter:\r\nA cross-platform command-line tool to convert images into ascii art and\r\nprint them on the console. Now supports braille art!\r\n(github.com)</a></p>\r\n<h2 id=\"原理\">原理</h2>\r\n<p>字符画是一系列字符的组合，我们可以把字符看作是比较大块的像素，一个字符能表现一种颜色，字符的种类越多，可以表现的颜色也越多，图片也会更有层次感。</p>\r\n<p>最终显示的是黑白色的字符画，那么彩色的图\r\n片怎么转换成黑白的呢？这里就需要了解灰度值的概念了。</p>\r\n<p><span\r\nstyle=\"font-size:16px;\">灰度值：指黑白图像中点的颜色深度，范围一般从0到255，白色为255，黑色为0，故黑白图片也称灰度图像。</span>\r\n我们利用下面的公式将像素的RGB值转换成灰度值：</p>\r\n<p><span style=\"color:#ff0000;\">gray ＝ 0.2126 * r + 0.7152 * g + 0.0722\r\n* b</span></p>\r\n<p>用不同的字符代表不同的灰度值，字符的种类和数量可以根据自己需要的效果进行调整，最好从前往后可以看到明显的变化，最后一个字符为空格符最佳：</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ascii_char &#x3D; list(&quot;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft&#x2F;\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\\&quot;^&#96;&#39;. &quot;)</code></pre>\r\n<p>图片转字符画的关键思想是将图片的灰度值与你自己设定的字符集之间建立映射关系，不同区间的灰度值对应不同的字符，之后将图片每一个像素对应的字符打印出来就是我们要的字符画啦~\r\n这里提供两种方法：</p>\r\n<ol type=\"1\">\r\n<li>获取图片的RGB值，利用公式： Gray = R0.299 + G0.587 + B*0.114\r\n计算可得每个像素点的灰度值，之后再建立映射即可。</li>\r\n<li>先将彩色图片转换为黑白图片，然后直接将每个像素点的灰度值与字符集建立映射。</li>\r\n</ol>\r\n<h2 id=\"实现思路\">实现思路？</h2>\r\n<p>思路也很简单，通过像素的<strong>灰度</strong>来映射出ASCII字符。灰度值越大，所映射的ASCII字符占的单位面积越大，也就是看起来越黑。</p>\r\n<p>（例如某点的灰度是0，那么对应的字符就是空格；类似的，灰度为255时，对应的字符就是“$”）</p>\r\n<p>实际操作起来会遇到的问题就是：</p>\r\n<p>图片太大，输出后的文本即使使用最小字体也看不全</p>\r\n<p>ASCII字符不是方形像素（长宽比不是1:1）</p>\r\n<p>处理方法就是对图片的大小数据进行处理（而不是原图修改）然后映射。</p>\r\n<p>总体上来说制作字符画还是比较简单的，需要处理的情况没有那么多。</p>\r\n<h3 id=\"黑白字符画\">黑白字符画</h3>\r\n<p>黑白字符画应该是难度最低的了。大致思路是这样的：</p>\r\n<ul>\r\n<li>设计一个从深到浅（0~255，黑~白）的字符列表；</li>\r\n<li>将原图转为黑白，并量化（quantization，如从 0~255 量化为\r\n0~16）从而匹配字符列表的长度；</li>\r\n<li>将图片缩放为一个很小的图（如宽度 100）；</li>\r\n<li>将每一个像素点的亮度转为对应字符；</li>\r\n<li>输出为 .txt 文件。</li>\r\n</ul>\r\n<h3 id=\"彩色字符画\">彩色字符画</h3>\r\n<ol type=\"1\">\r\n<li>将原图缩放为一个很小的缩略图（如宽度 100）；</li>\r\n<li>新建一个大的白色或黑色画布；</li>\r\n<li>计算好每个字符在画布上的位置，将缩略图中每一个像素点转为颜色相同的字符，并打印在画布指定位置上；</li>\r\n<li>将画布输出为图像（如 .png）文件。</li>\r\n</ol>\r\n<h3 id=\"reference\">Reference：</h3>\r\n<p><em><u><strong><a\r\nhref=\"https://zhuanlan.zhihu.com/p/48941293\">字符画——从入门到不屑 - 知乎\r\n(zhihu.com)</a></strong></u></em></p>\r\n","text":"字符画 另类应用 当你需要在shell里查看图片时 现有框架 ascii-image-converter TheZoraiz/ascii-image-converter: A cross-platform command-line tool to convert images i...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E7%94%BB\"><span class=\"toc-text\">字符画</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%A6%E7%B1%BB%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">另类应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E6%9C%89%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">现有框架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">实现思路？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BB%91%E7%99%BD%E5%AD%97%E7%AC%A6%E7%94%BB\"><span class=\"toc-text\">黑白字符画</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BD%A9%E8%89%B2%E5%AD%97%E7%AC%A6%E7%94%BB\"><span class=\"toc-text\">彩色字符画</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#reference\"><span class=\"toc-text\">Reference：</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"大数运算","uid":"c7cd6315021c2b49c9efb80c79e420a8","slug":"Algorithm/大数四则运算","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:33:00.000Z","comments":true,"path":"api/articles/Algorithm/大数四则运算.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"前言： 在计算机中数字表示的范围是有限制的，比如我们熟知的 int、float、double 等数据类型所能表示的范围都是有限的，如果我们要对位数达到几十位、几百位、上千位的大整数进行计算，这些数据类型显然不能满足我们的要求，因此我们需要通过算法来实现这些功能。 1、大数加法 两...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Hash Function","uid":"991c84bc86acdc32c9243fba302e2655","slug":"Algorithm/Serialization、Persistence and Marshalling","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-07T12:41:57.730Z","comments":true,"path":"api/articles/Algorithm/Serialization、Persistence and Marshalling.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":" 序列化及其逆过程要解决的核心问题是 实现相同的数据在不同格式间的转化； 持久化要解决的则是内存中数据结构到硬盘上数据的转化 ，比如比特流或者xml格式的文件；分布式系统数据层都需要做持久化的工作，要么存到数据库中、要么直接以文件形式保存到硬盘上； marshalling要解决的...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Serialization","slug":"Serialization","count":1,"path":"api/tags/Serialization.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
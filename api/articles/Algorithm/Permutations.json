{"title":"全排列","uid":"4bbde60d3dafb255adad1c9293392efa","slug":"Algorithm/Permutations","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:30:18.000Z","comments":true,"path":"api/articles/Algorithm/Permutations.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"Permutations-全排列\"><a href=\"#Permutations-全排列\" class=\"headerlink\" title=\"Permutations - 全排列\"></a>Permutations - 全排列</h1><p>顾名思义，就是找出当前元素所有可行的序列</p>\n<p>一个朴素的思想是递归，这种方式简单但并不高效快捷</p>\n<p>以两个示例来进行算法说明：</p>\n<p>Example1: </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实验五     数据输出</p>\n<p>实验准备<br>理解数据输入、输出的技巧。</p>\n<p>实验目的<br>理解算法设计的数学基本思想，理解算法程序化实现的技巧。</p>\n<p>实验过程<br>输出1,2,3,4,5,6这六个元素的所有全排列。</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def permutations(arr: list, position: int, end: int):\n    if position &#x3D;&#x3D; end:\n        # 完成一次排列，输出结果，返回上层\n        print(arr)\n    else:\n        # 采用递归解决问题\n        for index in range(position, end):\n            # 每进入一次函数，都会在当前位置山建立循环，这个循环会将所有的锁具都和当前数进行一次交换\n            # 由于每单次循环都会将数据列表重置还原，所以不会对下一次交换产生影响导致重复\n            # 故从当前的position开始，与end之前的所有数据交换次序，就可以得到所有内容\n            arr[index], arr[position] &#x3D; arr[position], arr[index]\n            permutations(arr, position + 1, end)\n            arr[index], arr[position] &#x3D; arr[position], arr[index]  # 还原到交换前的状态，为了进行下一次交换\n\npermutations(arr, 0, len(arr))\nprint(&quot;共720条数据&quot;)  # 6*5*4*3*2*1 &#x3D;&#x3D; 720</code></pre>\n\n\n\n<p>Example2: <a href=\"https://leetcode-cn.com/problems/permutations/\">46. 全排列 - 力扣（LeetCode） (leetcode-cn.com)</a></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Solution:\n    def permute(self, nums: List[int]) -&gt; List[List[int]]:\n        self.result &#x3D; []\n        self.generatation(nums, 0, len(nums))\n        return self.result\n\n    def generatation(self,nums, start, end):\n        if start &#x3D;&#x3D; end:\n            # print(nums)\n            self.result.append([t for t in nums])\n            return\n        \n        for i in range(start, end):\n            nums[i], nums[start] &#x3D; nums[start], nums[i]\n            self.generatation(nums, start+1,end)\n            nums[start], nums[i] &#x3D; nums[i], nums[start]</code></pre>\n\n\n\n<p><a href=\"https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/01.06.html\">1.6 字符串的全排列 | 编程之法：面试和算法心得 (gitbooks.io)</a></p>\n","text":"Permutations - 全排列顾名思义，就是找出当前元素所有可行的序列 一个朴素的思想是递归，这种方式简单但并不高效快捷 以两个示例来进行算法说明： Example1: 实验五 数据输出 实验准备理解数据输入、输出的技巧。 实验目的理解算法设计的数学基本思想，理解算法程序化...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Permutations-%E5%85%A8%E6%8E%92%E5%88%97\"><span class=\"toc-text\">Permutations - 全排列</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Dijkstra Algorithm","uid":"d42b57b5bace0bb67392a01a7601ad24","slug":"Algorithm/Dijkstra","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-01T04:24:30.479Z","comments":true,"path":"api/articles/Algorithm/Dijkstra.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Dijkstra 算法详解概述Dijkstra 算法是求一个图中一个点到其他所有点的最短路径的算法 Dijkstra 算法是一个基于「贪心」、「广度优先搜索」、「动态规划」求一个图中一个点到其他所有点的最短路径的算法，时间复杂度 O(n2) 主要行为每次从「未求出最短路径的点」中...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Shortest Path Algorithm","slug":"Shortest-Path-Algorithm","count":1,"path":"api/tags/Shortest-Path-Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"利用递归、无循环地打印数组","uid":"7dbcf1e35df66bdccacdaed2ecd943d3","slug":"Algorithm/ReverseOutputWithoutCycle","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:30:50.000Z","comments":true,"path":"api/articles/Algorithm/ReverseOutputWithoutCycle.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Reverse Output Without Cycle描述：不用循环，不逐一赋值地把一个数组逆序输出 循环 -&gt; 递归；即用递归去承担原本循环的工作 即： void Print(int[] arr, int len) &#123; if (len &gt; 0) &#12...","link":"","photos":[],"count_time":{"symbolsCount":253,"symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"全排列","uid":"4bbde60d3dafb255adad1c9293392efa","slug":"Algorithm/Permutations","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:30:18.000Z","comments":true,"path":"api/articles/Algorithm/Permutations.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"permutations---全排列\">Permutations - 全排列</h1>\r\n<p>顾名思义，就是找出当前元素所有可行的序列</p>\r\n<p>一个朴素的思想是递归，这种方式简单但并不高效快捷</p>\r\n<p>以两个示例来进行算法说明：</p>\r\n<p>Example1:</p>\r\n<blockquote>\r\n<p>实验五 数据输出</p>\r\n<p>实验准备 理解数据输入、输出的技巧。</p>\r\n<p>实验目的 理解算法设计的数学基本思想，理解算法程序化实现的技巧。</p>\r\n<p>实验过程 输出1,2,3,4,5,6这六个元素的所有全排列。</p>\r\n</blockquote>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">permutations</span>(<span class=\"params\">arr: <span class=\"built_in\">list</span>, position: <span class=\"built_in\">int</span>, end: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> position == end:</span><br><span class=\"line\">        <span class=\"comment\"># 完成一次排列，输出结果，返回上层</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 采用递归解决问题</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(position, end):</span><br><span class=\"line\">            <span class=\"comment\"># 每进入一次函数，都会在当前位置山建立循环，这个循环会将所有的锁具都和当前数进行一次交换</span></span><br><span class=\"line\">            <span class=\"comment\"># 由于每单次循环都会将数据列表重置还原，所以不会对下一次交换产生影响导致重复</span></span><br><span class=\"line\">            <span class=\"comment\"># 故从当前的position开始，与end之前的所有数据交换次序，就可以得到所有内容</span></span><br><span class=\"line\">            arr[index], arr[position] = arr[position], arr[index]</span><br><span class=\"line\">            permutations(arr, position + <span class=\"number\">1</span>, end)</span><br><span class=\"line\">            arr[index], arr[position] = arr[position], arr[index]  <span class=\"comment\"># 还原到交换前的状态，为了进行下一次交换</span></span><br><span class=\"line\"></span><br><span class=\"line\">permutations(arr, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(arr))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;共720条数据&quot;</span>)  <span class=\"comment\"># 6*5*4*3*2*1 == 720</span></span><br></pre></td></tr></table></figure>\r\n<p>Example2: <a\r\nhref=\"https://leetcode-cn.com/problems/permutations/\">46. 全排列 -\r\n力扣（LeetCode） (leetcode-cn.com)</a></p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">permute</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        self.result = []</span><br><span class=\"line\">        self.generatation(nums, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(nums))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">generatation</span>(<span class=\"params\">self,nums, start, end</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> start == end:</span><br><span class=\"line\">            <span class=\"comment\"># print(nums)</span></span><br><span class=\"line\">            self.result.append([t <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> nums])</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(start, end):</span><br><span class=\"line\">            nums[i], nums[start] = nums[start], nums[i]</span><br><span class=\"line\">            self.generatation(nums, start+<span class=\"number\">1</span>,end)</span><br><span class=\"line\">            nums[start], nums[i] = nums[i], nums[start]</span><br></pre></td></tr></table></figure>\r\n<p><a\r\nhref=\"https://wizardforcel.gitbooks.io/the-art-of-programming-by-july/content/01.06.html\">1.6\r\n字符串的全排列 | 编程之法：面试和算法心得 (gitbooks.io)</a></p>\r\n","text":"Permutations - 全排列 顾名思义，就是找出当前元素所有可行的序列 一个朴素的思想是递归，这种方式简单但并不高效快捷 以两个示例来进行算法说明： Example1: 实验五 数据输出 实验准备 理解数据输入、输出的技巧。 实验目的 理解算法设计的数学基本思想，理解算法...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#permutations---%E5%85%A8%E6%8E%92%E5%88%97\"><span class=\"toc-text\">Permutations - 全排列</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Catalan Number","uid":"413173748dc9f0bf852352ce35bf92b1","slug":"Algorithm/Catalan number","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:30:02.000Z","comments":true,"path":"api/articles/Algorithm/Catalan number.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"wikipedia-en: Catalan number - Wikipedia wikipedia-cn:卡塔兰数 - 维基百科，自由的百科全书 (wikipedia.org) 强烈推荐这篇博客：卡特兰(Catalan)数入门详解 - Morning_Glory - 博客园 (...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"String Processing","slug":"String-Processing","count":5,"path":"api/tags/String-Processing.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"利用递归、无循环地打印数组","uid":"7dbcf1e35df66bdccacdaed2ecd943d3","slug":"Algorithm/ReverseOutputWithoutCycle","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:30:50.000Z","comments":true,"path":"api/articles/Algorithm/ReverseOutputWithoutCycle.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Reverse Output Without Cycle 描述：不用循环，不逐一赋值地把一个数组逆序输出 循环 -&gt; 递归；即用递归去承担原本循环的工作 即： 123456void Print(int[] arr, int len) &#123; if (len &gt; ...","link":"","photos":[],"count_time":{"symbolsCount":257,"symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"Dijkstra Algorithm","uid":"d42b57b5bace0bb67392a01a7601ad24","slug":"Algorithm/Dijkstra","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:30:08.000Z","comments":true,"path":"api/articles/Algorithm/Dijkstra.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"dijkstra-算法详解\">Dijkstra 算法详解</h1>\r\n<h2 id=\"概述\">概述</h2>\r\n<p>Dijkstra 算法是求一个图中一个点到其他所有点的最短路径的算法</p>\r\n<p>Dijkstra\r\n算法是一个基于「贪心」、「广度优先搜索」、「动态规划」求一个图中一个点到其他所有点的最短路径的算法，时间复杂度\r\nO(n2)</p>\r\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -7.778ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"28.11ex\" height=\"16.687ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -3937.9 12424.7 7375.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtable\"><g data-mml-node=\"mtr\" transform=\"translate(0,3187.9)\"><g data-mml-node=\"mtd\" transform=\"translate(778,0)\"></g><g data-mml-node=\"mtd\" transform=\"translate(778,0)\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1211.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2211.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2711.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3322.7,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4322.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4711.9,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5534.1,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(6534.3,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7034.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(7645.6,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(8645.8,0)\"><path data-c=\"B7\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9146,0)\"><path data-c=\"B7\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9646.2,0)\"><path data-c=\"B7\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(10146.4,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(11146.7,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,1177.9)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mo\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g></g><g data-mml-node=\"mtd\" transform=\"translate(778,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,710)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(822.2,0)\"><path data-c=\"2217\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1544.4,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1933.4,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2755.7,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3755.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4255.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(2292.4,-686)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><rect width=\"4844.9\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-1318)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mo\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g></g><g data-mml-node=\"mtd\" transform=\"translate(778,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"msup\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,363) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mn\" transform=\"translate(488.3,-686)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><rect width=\"1236.6\" height=\"60\" x=\"120\" y=\"220\"></rect></g><g data-mml-node=\"mo\" transform=\"translate(1698.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mfrac\" transform=\"translate(2699,0)\"><g data-mml-node=\"mi\" transform=\"translate(220,676)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(270,-686)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><rect width=\"800\" height=\"60\" x=\"120\" y=\"220\"></rect></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-3187.9)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mo\"><path data-c=\"2248\" d=\"M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z\"></path></g></g><g data-mml-node=\"mtd\" transform=\"translate(778,0)\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(633,413) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></g></g></g></svg></mjx-container></span></p>\r\n<h2 id=\"主要行为\">主要行为</h2>\r\n<p>每次从「未求出最短路径的点」中 取出 距离距离起点\r\n最小路径的点，以这个点为桥梁 刷新「未求出最短路径的点」的距离</p>\r\n<h2 id=\"图解案例分析\">图解案例分析</h2>\r\n<h3 id=\"题要\">题要</h3>\r\n<p>以 A 点为顶点，求到其他点的最短路径。</p>\r\n<figure>\r\n<img src=\"v2-72ddc44daec6a2916724464ec78ba342_1440w.jpg\" alt=\"img\">\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>邻接矩阵图</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[][] graph = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[][]{</span><br><span class=\"line\">{<span class=\"number\">0</span> , <span class=\"number\">2</span>, ∞, <span class=\"number\">6</span>}</span><br><span class=\"line\">{<span class=\"number\">2</span> , <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>}</span><br><span class=\"line\">{∞ , <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>}</span><br><span class=\"line\">{<span class=\"number\">6</span> , <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>}};</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"算法过程\">算法过程</h3>\r\n<p>result：已求出 最小路径的顶点 notFound：未求出\r\n最小路径的顶点，里面的值是 到起点的距离 每次从 「未求出最短路径的点」中\r\n取出 距离距离起点 最近的点，以这个点为桥梁\r\n刷新「未求出最短路径的点」的距离</p>\r\n<p>初始，result={A(0)} 中只有起点 A，notFound={B(2),C(∞),D(6)} 中是除了\r\nA 点的其他点，里面的值是到起点的距离（例如 B(2) 代表 B点到起点的距离为\r\n2）</p>\r\n<figure>\r\n<img src=\"v2-e8e6bf35bb176af1b1a7d9d57ed949e9_r.jpg\" alt=\"img\">\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>然后，从「未求出最短路径的点」notFound 中取出 最短路径的点 B(2)\r\n，然后通过 B(2) 为桥梁 刷新「未求出最短路径的点」的距离</p>\r\n<p>取出 最短路径的点： 从「未求出最短路径的点」notFound 中取出\r\n最短路径的点 B(2)，放入结果 result 中，结果如下：</p>\r\n<p>「未求出最短路径点」 notFound={C(∞),D(6)}，「已求出最短路径的点\r\n」result={A(0),B(2)}</p>\r\n<p>刷新距离： 通过 B(2) 为桥梁，刷新距离。</p>\r\n<p>例如 AD = 6 &lt; AB + BD = 4 以 B(2)\r\n为桥梁的距离更短，就刷新「未求出最短路径点」D(6) 的距离为 D(4)</p>\r\n<p>notFound={C(∞),D(4)}</p>\r\n<p>同理刷新 C(∞) 的距离为 C(5) ，最后结果如下：</p>\r\n<p>「未求出最短路径点」 notFound={C(5),D(4)}\r\n，「已求出最短路径的点」<code>result={A(0),B(2)}</code></p>\r\n<figure>\r\n<img src=\"v2-69b92f2678598a9570a559f92f65a046_r.jpg\" alt=\"img\">\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>然后，从「未求出最短路径的点」notFound 中取出 最短路径的点 D(4)\r\n，然后通过 D(4) 为桥梁 刷新「未求出最短路径的点」的距离</p>\r\n<p>同理，最后结果如下：</p>\r\n<p>「未求出最短路径点」 notFound={C(5)}\r\n，「已求出最短路径的点」result={A(0),B(2),D(4)}</p>\r\n<figure>\r\n<img src=\"v2-a83ad70c54cb580475bf8eaeaf4a7a5c_r.jpg\" alt=\"img\">\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>然后，从「未求出最短路径的点」notFound 中取出 最短路径的点 C(5)\r\n，算法结束</p>\r\n<p>result={A(0),B(2),D(4),C(5)} 就是最终所求的 最短距离</p>\r\n<figure>\r\n<img src=\"v2-564bc4d16069ea3c35ce4a2dfd7a8ded_r.jpg\" alt=\"img\">\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<ol start=\"3\" type=\"1\">\r\n<li>代码</li>\r\n</ol>\r\n<p>这里使用 -1 表无穷大，下面是 Java 代码和测试案例</p>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dijkstra</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] dijkstra(<span class=\"type\">int</span>[][] graph,<span class=\"type\">int</span> startVertex){</span><br><span class=\"line\">        <span class=\"comment\">//初始化 以求出最短路径的点 result[]</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> graph.length;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) {</span><br><span class=\"line\">            result[i] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        result[startVertex] = <span class=\"number\">0</span> ;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 初始化 未求出最短路径的点 notFound[]</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] notFound = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) {</span><br><span class=\"line\">            notFound[i] = graph[startVertex][i];</span><br><span class=\"line\">        }</span><br><span class=\"line\">        notFound[startVertex] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 开始 Dijkstra 算法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; length; i++) {</span><br><span class=\"line\">            <span class=\"comment\">//1. 从「未求出最短路径的点」notFound 中取出 最短路径的点</span></span><br><span class=\"line\">            <span class=\"comment\">//1.1 找到最短距离的点</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">minIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; length; j++) {</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (notFound[j] &gt; <span class=\"number\">0</span> &amp;&amp; notFound[j] &lt; min){</span><br><span class=\"line\">                    min = notFound[j];</span><br><span class=\"line\">                    minIndex = j;</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"comment\">//1.2 将最短距离的点 取出 放入结果中</span></span><br><span class=\"line\">            result[minIndex] = min;</span><br><span class=\"line\">            notFound[minIndex] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//2. 刷新 「未求出最短距离的点」 notFound[] 中的距离</span></span><br><span class=\"line\">            <span class=\"comment\">//2.1 遍历刚刚找到最短距离的点 (B) 的出度 (BA、BB、BC、BD)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; length; j++) {</span><br><span class=\"line\">                <span class=\"comment\">// 出度可通行(例如 BD:graph[1][3]  &gt; 0)</span></span><br><span class=\"line\">                <span class=\"comment\">// 出度点不能已经在结果集 result中(例如 D: result[3] == -1)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (graph[minIndex][j] &gt; <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; result[j] == -<span class=\"number\">1</span>){</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">newDistance</span> <span class=\"operator\">=</span> result[minIndex] + graph[minIndex][j];</span><br><span class=\"line\">                    <span class=\"comment\">//通过 B 为桥梁，刷新距离</span></span><br><span class=\"line\">                    <span class=\"comment\">//（比如`AD = 6 &lt; AB + BD = 4` 就刷新距离）（ -1 代表无限大）</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (newDistance &lt; notFound[j] || notFound[j]==-<span class=\"number\">1</span>){</span><br><span class=\"line\">                        notFound[j] = newDistance;</span><br><span class=\"line\">                    }</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">/** 测试案例 */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        <span class=\"type\">char</span>[] vertices = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[]{<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>};</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] graph = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[][]{</span><br><span class=\"line\">            {<span class=\"number\">0</span>, <span class=\"number\">2</span>, -<span class=\"number\">1</span>, <span class=\"number\">6</span>}, </span><br><span class=\"line\">            {<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>}, </span><br><span class=\"line\">            {-<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>}, </span><br><span class=\"line\">            {<span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>}</span><br><span class=\"line\">        };</span><br><span class=\"line\">        <span class=\"type\">int</span>[] dijkstra = dijkstra(graph, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : dijkstra) {</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\r\n<p>测试结果 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">2</span><br><span class=\"line\">5</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure> <a href=\"https://zhuanlan.zhihu.com/p/338414118\">Dijkstra算法详解 通俗易懂\r\n- 知乎 (zhihu.com)</a></p>\r\n<p>另题：</p>\r\n<figure>\r\n<img src=\"v2-6ca1b3a193342af0c9b7750c824d6707_r.jpg\" alt=\"img\">\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n","text":"Dijkstra 算法详解 概述 Dijkstra 算法是求一个图中一个点到其他所有点的最短路径的算法 Dijkstra 算法是一个基于「贪心」、「广度优先搜索」、「动态规划」求一个图中一个点到其他所有点的最短路径的算法，时间复杂度 O(n2) 主要行为 每次从「未求出最短路径的...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Shortest Path Algorithm","slug":"Shortest-Path-Algorithm","count":1,"path":"api/tags/Shortest-Path-Algorithm.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#dijkstra-%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">Dijkstra 算法详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">主要行为</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E8%A7%A3%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">图解案例分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A6%81\"><span class=\"toc-text\">题要</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">算法过程</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"CRC Algorithm","uid":"2e7a3ae4090ee29ca9a2e76805bad9b3","slug":"Algorithm/CRC、LRC、BCC校验与模二运算","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:30:05.000Z","comments":true,"path":"api/articles/Algorithm/CRC、LRC、BCC校验与模二运算.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":" 那简而言之就是 取首位 异或(首位为0 除数为0) 左移 上述三个步骤循环呗 当左移后余数长度小于被除数时则取余 也可以这么理解吧 当余数开头出现n个0的时候就可以全部消掉直到首位是1 商补上n-1个0和一个1就可以了 继续异或运算嘛 我是看到有好几题余数开头俩0的 分析看看 ...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"CRC","slug":"CRC","count":1,"path":"api/tags/CRC.json"},{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Catalan Number","uid":"413173748dc9f0bf852352ce35bf92b1","slug":"Algorithm/Catalan number","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:30:02.000Z","comments":true,"path":"api/articles/Algorithm/Catalan number.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"wikipedia-en: Catalan number - Wikipedia wikipedia-cn:卡塔兰数 - 维基百科，自由的百科全书 (wikipedia.org) 强烈推荐这篇博客：卡特兰(Catalan)数入门详解 - Morning_Glory - 博客园 (...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"String Processing","slug":"String-Processing","count":5,"path":"api/tags/String-Processing.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
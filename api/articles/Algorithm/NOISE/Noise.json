{"title":"Noise Generate","uid":"e93f281683f5f1e8c6e0ab2a6dab5abb","slug":"Algorithm/NOISE/Noise","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-07T12:40:15.545Z","comments":true,"path":"api/articles/Algorithm/NOISE/Noise.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"噪声---noise\">噪声 - Noise</h1>\r\n<blockquote>\r\n<p>Randomness is needed to make things unpredictable, varied, and appear\r\nnatural. ——catlike coding</p>\r\n</blockquote>\r\n<p>在任何游戏中，<code>噪声</code>都是不可缺少的存在。因此，了解这些噪声的特点、用途以及生成算法都显得十分重要</p>\r\n<p>本文从基于 shader graph 中内置的三种程序化噪声，记录了以下噪声：</p>\r\n<ul>\r\n<li>Simple Noise</li>\r\n<li>Gradient Noise(Perlin Noise)</li>\r\n<li>Voronoi Noise</li>\r\n<li>Value Noise</li>\r\n</ul>\r\n<p><img src=\"../../../images\\Algorithm\\001.png\"\r\nalt=\"image-20230325210305648\" /> <em>The built-in noise in unity\r\nShaderGraph.</em></p>\r\n<p>下面，我们试着自己去实现这些噪点算法</p>\r\n<h2 id=\"hashing\">Hashing</h2>\r\n<blockquote>\r\n<p>we have a process that for any specific input yields a unique and\r\nfixed apparently random output. This is what hash functions are for.\r\n——catlike coding</p>\r\n</blockquote>\r\n<h2 id=\"hashing-space\">Hashing Space</h2>\r\n<h2 id=\"value-noise\">Value Noise</h2>\r\n<h2 id=\"perlin-gradient-noise\">Perlin / Gradient Noise</h2>\r\n<h2 id=\"noise-variants\">Noise Variants</h2>\r\n<h2 id=\"voronoi-noise\">Voronoi Noise</h2>\r\n<h2 id=\"simplex-noise\">Simplex Noise</h2>\r\n<blockquote>\r\n<p>Simplex noise is a type of gradient noise, but we can also create\r\nvalue noise variants of it. We start with those because they are simpler\r\nand easier to analyze than the gradient variants.</p>\r\n</blockquote>\r\n<h2 id=\"reference\">Reference</h2>\r\n<ul>\r\n<li><a\r\nhref=\"https://catlikecoding.com/unity/tutorials/pseudorandom-noise/\">Unity\r\nPseudorandom Noise Tutorials (catlikecoding.com)</a></li>\r\n<li><a href=\"https://zhuanlan.zhihu.com/p/354931692\">游戏开发技术杂谈\r\n4：柏林噪声 1 - 知乎 (zhihu.com)</a></li>\r\n</ul>\r\n","text":"噪声 - Noise Randomness is needed to make things unpredictable, varied, and appear natural. ——catlike coding 在任何游戏中，噪声都是不可缺少的存在。因此，了解这些噪声的特点、用...","link":"","photos":[],"count_time":{"symbolsCount":916,"symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Noise","slug":"Noise","count":1,"path":"api/tags/Noise.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%99%AA%E5%A3%B0---noise\"><span class=\"toc-text\">噪声 - Noise</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hashing\"><span class=\"toc-text\">Hashing</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hashing-space\"><span class=\"toc-text\">Hashing Space</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#value-noise\"><span class=\"toc-text\">Value Noise</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#perlin-gradient-noise\"><span class=\"toc-text\">Perlin &#x2F; Gradient Noise</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#noise-variants\"><span class=\"toc-text\">Noise Variants</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#voronoi-noise\"><span class=\"toc-text\">Voronoi Noise</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#simplex-noise\"><span class=\"toc-text\">Simplex Noise</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#reference\"><span class=\"toc-text\">Reference</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Hash Function","uid":"991c84bc86acdc32c9243fba302e2655","slug":"Algorithm/HashFunction/HashFunction","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-07T12:40:02.354Z","comments":true,"path":"api/articles/Algorithm/HashFunction/HashFunction.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"简明Hash function教程 请注意！这篇文档是关于散列函数Hash function的，如果需要了解Hash table相关内容请查阅“简明Hash table教程”等相关文章 引子 在各种下载站的资源页面下方，经常会有如下以SHA开头的特殊字段 SHA1：9B71AD5...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Hash","slug":"Hash","count":1,"path":"api/tags/Hash.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Boyer Moore Algorithm","uid":"0d08c32366a524bf34b2dc2c2fb0333a","slug":"Algorithm/String Processing/Boyer Moore Algorithm","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:29:30.000Z","comments":true,"path":"api/articles/Algorithm/String Processing/Boyer Moore Algorithm.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Boyer Moore Algorithm General 高效，可靠，应用广泛：各种文本编辑器的\"查找\"功能（Ctrl+F），大多采用Boyer-Moore算法 1977年，德克萨斯大学的Robert S. Boyer教授和J Strother Moore教授发明了这种算法。 ...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"String Processing","slug":"String-Processing","count":4,"path":"api/tags/String-Processing.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"CRC Algorithm","uid":"2e7a3ae4090ee29ca9a2e76805bad9b3","slug":"Algorithm/CRC、LRC、BCC校验与模二运算","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-01T04:24:10.792Z","comments":true,"path":"api/articles/Algorithm/CRC、LRC、BCC校验与模二运算.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>那简而言之就是 取首位 异或(首位为0 除数为0) 左移 上述三个步骤循环呗 当左移后余数长度小于被除数时则取余 也可以这么理解吧 当余数开头出现n个0的时候就可以全部消掉直到首位是1 商补上n-1个0和一个1就可以了 继续异或运算嘛 我是看到有好几题余数开头俩0的 分析看看</p></blockquote>\n<h1 id=\"模2除法-CRC校验码计算\"><a href=\"#模2除法-CRC校验码计算\" class=\"headerlink\" title=\"模2除法(CRC校验码计算)\"></a>模2除法(CRC校验码计算)</h1><p>鉴于网上的讲解自己好不容易才看懂…所以整理了一下, 也方便大家能够理解</p>\n<h2 id=\"模2加减法\"><a href=\"#模2加减法\" class=\"headerlink\" title=\"模2加减法\"></a>模2加减法</h2><p>模2除法需要用到<code>模2加减法</code>,关于<code>模2加减法</code>,其实就是<code>异或操作</code>,规则如下:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F;不需要考虑进位和借位\n0 ± 0 &#x3D; 0\n1 ± 1 &#x3D; 0\n0 ± 1 &#x3D; 1\n1 ± 0 &#x3D; 1\n例: 1101 ± 1001 &#x3D; 0100\n计算如下:\n\t\t  1 1 0 1 \n\t\t± 1 0 0 1 \n\t\t-----------\n\t\t  0 1 0 0\n1234</code></pre>\n\n<p><strong>简记:同为0,异为1</strong></p>\n<hr>\n<h2 id=\"模2除法\"><a href=\"#模2除法\" class=\"headerlink\" title=\"模2除法:\"></a>模2除法:</h2><p>规则:假设被除数X,和除数P,余数R</p>\n<ol>\n<li><p>X除以P(对X和P做模2加减法),当前<strong>X</strong>首位为1时,商1,为0时商0</p>\n</li>\n<li><p>所得余数R<strong>去除首位</strong>(即左移一位):</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>若R第一位为0,将其作为新的被除数,除以0,此时其首位为0,商即为0<br>若R第一位为1,将其作为新的被除数,除以P,此时其首位为1,商即为1</p></blockquote>\n</li>\n<li><p>重复第2步直到R位数少于P位数</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"例-1111000对除数1101做模2除法\"><a href=\"#例-1111000对除数1101做模2除法\" class=\"headerlink\" title=\"例:1111000对除数1101做模2除法:\"></a>例:<code>1111000</code>对除数<code>1101</code>做模2除法:</h2><h4 id=\"先说结果-商1011余111\"><a href=\"#先说结果-商1011余111\" class=\"headerlink\" title=\"先说结果: 商1011余111\"></a>先说结果: 商<code>1011</code>余<code>111</code></h4><h4 id=\"整体运算\"><a href=\"#整体运算\" class=\"headerlink\" title=\"整体运算\"></a>整体运算</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">      1 0 1 1     &#x2F;&#x2F;商\n---------------\n1 1 1 1 0 0 0     &#x2F;&#x2F;被除数,注意首位为1\n1 1 0 1\t          &#x2F;&#x2F;被除数首位为1,除以除数\n---------------\n  0 1 0 0 0 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n  0 0 0 0         &#x2F;&#x2F;被除数首位为0,除以0\n---------------\n    1 0 0 0 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n    1 1 0 1       &#x2F;&#x2F;被除数首位为1,除以除数  \n---------------\n      1 0 1 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n      1 1 0 1     &#x2F;&#x2F;被除数首位为1,除以除数\n---------------\n        1 1 1     &#x2F;&#x2F;余数,此时余数位数少于除数,不能继续除了\n123456789101112131415</code></pre>\n\n<h4 id=\"分步分析\"><a href=\"#分步分析\" class=\"headerlink\" title=\"分步分析\"></a>分步分析</h4><h5 id=\"第一步-每一步其实都是模2加减法运算\"><a href=\"#第一步-每一步其实都是模2加减法运算\" class=\"headerlink\" title=\"第一步(每一步其实都是模2加减法运算):\"></a>第一步(每一步其实都是模2加减法运算):</h5><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">      1         &#x2F;&#x2F;商\n-------------\n1 1 1 1 0 0 0   &#x2F;&#x2F;被除数,注意首位为1\n1 1 0 1\t        &#x2F;&#x2F;除数\n-------------\n0 0 1 0 0 0 0   &#x2F;&#x2F;余数,模2运算后结果\n123456</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>商的第一位:被除数首位为1,商为1(只要被除数首位非0,商就是1)</p></blockquote>\n<h5 id=\"第二步-余数去除首位-左移一位-当第一位为0时-除以0-为1时-除以除数。\"><a href=\"#第二步-余数去除首位-左移一位-当第一位为0时-除以0-为1时-除以除数。\" class=\"headerlink\" title=\"第二步:余数去除首位(左移一位),当第一位为0时,除以0;为1时,除以除数。\"></a>第二步:余数去除首位(左移一位),当第一位为0时,除以0;为1时,除以除数。</h5><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">      1 0        &#x2F;&#x2F;商\n---------------\n  0 1 0 0 0 0    &#x2F;&#x2F;余数去除首位,作为新的被除数\n  0 0 0 0        &#x2F;&#x2F;被除数首位为0,除以0\n---------------\n  0 1 0 0 0 0    &#x2F;&#x2F;余数,模2运算后结果\n123456</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>商的第二位:被除数首位为0,商为0(只要被除数首位是0商就是0)</p></blockquote>\n<h5 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h5><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">      1 0 1      &#x2F;&#x2F;商\n----------------\n    1 0 0 0 0    &#x2F;&#x2F;余数去除首位,作为新的被除数\n    1 1 0 1      &#x2F;&#x2F;被除数首位为1,除以除数\n----------------\n    0 1 0 1 0    &#x2F;&#x2F;余数,模2运算后结果\n123456</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>商的第三位:被除数首位为1,商为1</p></blockquote>\n<h5 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h5><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">      1 0 1 1     &#x2F;&#x2F;商\n----------------\n      1 0 1 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n      1 1 0 1     &#x2F;&#x2F;被除数首位为1,除以除数\n----------------\n      0 1 1 1     &#x2F;&#x2F;余数,此时余数位数(这里的0要忽略掉,不参与下一轮,因为最上面的被除数后面\n      \t\t\t  &#x2F;&#x2F;没有数可以给这里往后补一位了)少于除数位数,不能继续除了\n1234567</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>商的第四位:被除数首位为1,商为1<br>此时不能继续做除法,计算结束</p></blockquote>\n<h5 id=\"得到最终结果-商1011余111\"><a href=\"#得到最终结果-商1011余111\" class=\"headerlink\" title=\"得到最终结果: 商1011余111\"></a>得到最终结果: 商<code>1011</code>余<code>111</code></h5><ul>\n<li>前言</li>\n<li>CRC算法简介</li>\n<li>CRC计算</li>\n<li>CRC校验</li>\n<li>CRC计算的C语言实现</li>\n<li>CRC计算工具</li>\n<li>总结</li>\n</ul>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近的工作中，要实现对通信数据的CRC计算，所以花了两天的时间好好研究了一下，周末有时间整理了一下笔记。</p>\n<p>一个完整的数据帧通常由以下部分构成：</p>\n<p><img src=\"/....%5Cimages%5CAlgorithm%5Cv2-fd234222bf00f00d841f2078b4a3cd18_1440w.jpg\" alt=\"img\"></p>\n<p>校验位是为了保证数据在传输过程中的完整性，采用一种指定的算法对原始数据进行计算，得出的一个校验值。接收方接收到数据时，采用同样的校验算法对原始数据进行计算，如果计算结果和接收到的<strong>校验值一致</strong>，说明数据校验正确，这一帧数据可以使用，如果不一致，说明传输过程中出现了差错，这一帧数据丢弃，请求重发。</p>\n<p>常用的校验算法有奇偶校验、校验和、CRC，还有LRC、BCC等不常用的校验算法。</p>\n<p>以串口通讯中的奇校验为例，如果数据中1的个数为奇数，则奇校验位0，否则为1。</p>\n<p>例如原始数据为：0001 0011，数据中1的个数（或各位相加）为3，所以奇校验位为0。这种校验方法很简单，但这种校验方法有很大的误码率。假设由于传输过程中的干扰，接收端接收到的数据是0010 0011，通过奇校验运算，得到奇校验位的值为0，虽然校验通过，但是数据已经发生了错误。</p>\n<p><img src=\"/....%5Cimages%5CAlgorithm%5Cv2-9c025c1b6d3b754f46375968fba3f26e_1440w.jpg\" alt=\"img\"></p>\n<p>校验和同理也会有类似的错误：</p>\n<p><img src=\"/....%5Cimages%5CAlgorithm%5Cv2-2f60503bcb6abedadbe2bf45f70f28ba_1440w.jpg\" alt=\"img\"></p>\n<p>一个好的校验校验方法，配合数字信号编码方式，如(差分)曼彻斯特编码，(不)归零码等对数据进行编码，可大大提高通信的健壮性和稳定性。例如以太网中使用的是CRC-32校验，曼彻斯特编码方式。本篇文章介绍CRC校验的原理和实现方法。</p>\n<h3 id=\"CRC算法简介\"><a href=\"#CRC算法简介\" class=\"headerlink\" title=\"CRC算法简介\"></a>CRC算法简介</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>循环冗余校验（Cyclic Redundancy Check， CRC）是一种根据网络数据包或计算机文件等数据产生简短固定位数校验码的一种信道编码技术，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的。</p></blockquote>\n<p>CRC校验计算速度快，检错能力强，易于用编码器等硬件电路实现。从检错的正确率与速度、成本等方面，都比奇偶校验等校验方式具有优势。因而，CRC 成为计算机信息通信领域最为普遍的校验方式。常见应用有以太网&#x2F;USB通信，压缩解压，视频编码，图像存储，磁盘读写等。</p>\n<h3 id=\"CRC参数模型\"><a href=\"#CRC参数模型\" class=\"headerlink\" title=\"CRC参数模型\"></a>CRC参数模型</h3><p>不知道你是否遇到过这种情况，同样的CRC多项式，调用不同的CRC计算函数，得到的结果却不一样，而且和手算的结果也不一样，这就涉及到CRC的参数模型了。计算一个正确的CRC值，需要知道CRC的参数模型。</p>\n<p>一个完整的CRC参数模型应该包含以下信息：WIDTH，POLY，INIT，REFIN，REFOUT，XOROUT。</p>\n<ul>\n<li>NAME：参数模型名称。</li>\n<li>WIDTH：宽度，即生成的CRC数据位宽，如CRC-8，生成的CRC为8位</li>\n<li>POLY：十六进制多项式，省略最高位1，如 x8 + x2 + x + 1，二进制为1 0000 0111，省略最高位1，转换为十六进制为0x07。</li>\n<li>INIT：CRC初始值，和WIDTH位宽一致。</li>\n<li>REFIN：true或false，在进行计算之前，原始数据是否翻转，如原始数据：0x34 &#x3D; 0011 0100，如果REFIN为true，进行翻转之后为0010 1100 &#x3D; 0x2c</li>\n<li>REFOUT：true或false，运算完成之后，得到的CRC值是否进行翻转，如计算得到的CRC值：0x97 &#x3D; 1001 0111，如果REFOUT为true，进行翻转之后为11101001 &#x3D; 0xE9。</li>\n<li>XOROUT：计算结果与此参数进行异或运算后得到最终的CRC值，和WIDTH位宽一致。</li>\n</ul>\n<p>通常如果只给了一个多项式，其他的没有说明则：INIT&#x3D;0x00，REFIN&#x3D;false，REFOUT&#x3D;false，XOROUT&#x3D;0x00。</p>\n<p>常用的21个标准CRC参数模型：</p>\n<p><img src=\"/....%5Cimages%5CAlgorithm%5Cv2-91f148259b466e4a75a10c6607370855_1440w.jpg\" alt=\"img\"></p>\n<p>CRC校验在电子通信领域非常常用，可以说有通信存在的地方，就有CRC校验：</p>\n<ul>\n<li>美信(MAXIM)的芯片DS2401&#x2F;DS18B20，都是使用的CRC-8&#x2F;MAXIM模型</li>\n<li>SD卡或MMC使用的是CRC-7&#x2F;MMC模型</li>\n<li>Modbus通信使用的是CRC-16&#x2F;MODBUS参数模型</li>\n<li>USB协议中使用的CRC-5&#x2F;USB和CRC-16&#x2F;USB模型</li>\n<li>STM32自带的硬件CRC计算模块使用的是CRC-32模型</li>\n</ul>\n<p>至于多项式的选择，初始值和异或值的选择，输入输出是否翻转，这就涉及到一定的编码和数学知识了。感兴趣的朋友，可以了解一下每个CRC模型各个参数的来源。至于每种参数模型的检错能力、重复率，需要专业的数学计算了，不在本文讨论的范畴内。</p>\n<h3 id=\"CRC计算\"><a href=\"#CRC计算\" class=\"headerlink\" title=\"CRC计算\"></a>CRC计算</h3><p>好了，了解了CRC参数模型知识，下面手算一个CRC值，来了解CRC计算的原理。</p>\n<p><strong>问：原始数据：0x34，使用CRC-8&#x2F;MAXIN参数模型，求CRC值？</strong></p>\n<p>答：根据CRC参数模型表，得到CRC-8&#x2F;MAXIN的参数如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">POLY &#x3D; 0x31 &#x3D; 0011 0001(最高位1已经省略)\nINIT &#x3D; 0x00\nXOROUT &#x3D; 0x00\nREFIN &#x3D; TRUE\nREFOUT &#x3D; TRUE</code></pre>\n\n<p>有了上面的参数，这样计算条件才算完整，下面来实际计算：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">0.原始数据 &#x3D; 0x34 &#x3D; 0011 0100，多项式 &#x3D; 0x31 &#x3D; 1 0011 0001\n1.INIT &#x3D; 00，原始数据高8位和初始值进行异或运算保持不变。\n2.REFIN为TRUE，需要先对原始数据进行翻转：0011 0100 &gt; 0010 1100\n3.原始数据左移8位，即后面补8个0：0010 1100 0000 0000\n4.把处理之后的数据和多项式进行模2除法，求得余数：\n原始数据：0010 1100 0000 0000 &#x3D; 10 1100 0000 0000\n多项式：1 0011 0001\n模2除法取余数低8位：1111 1011\n5.与XOROUT进行异或，1111 1011 xor 0000 0000 &#x3D; 1111 1011 \n6.因为REFOUT为TRUE，对结果进行翻转得到最终的CRC-8值：1101 1111 &#x3D; 0xDF\n7.数据+CRC：0011 0100 1101 1111 &#x3D; 34DF，相当于原始数据左移8位+余数。</code></pre>\n\n<p>模2除法求余数：</p>\n<p><img src=\"/....%5Cimages%5CAlgorithm%5Cv2-2237c19868f68ce99205668ccd9debb5_1440w.jpg\" alt=\"img\"></p>\n<p>验证手算结果：</p>\n<p><img src=\"/....%5Cimages%5CAlgorithm%5Cv2-be31dd176ba8f5a876b6049babca53ef_1440w.jpg\" alt=\"img\"></p>\n<p>可以看出是一致的，当你手算的结果和工具计算结果不一致时，可以看看INIT，XOROUT，REFINT，REFOUT这些参数是否一致，有1个参数不对，计算出的CRC结果都不一样。</p>\n<h3 id=\"CRC校验\"><a href=\"#CRC校验\" class=\"headerlink\" title=\"CRC校验\"></a>CRC校验</h3><p>上面通过笔算的方式，讲解了CRC计算的原理，下面来介绍一下如何进行校验。</p>\n<p>按照上面CRC计算的结果，最终的数据帧：0011 0100 1101 1111 &#x3D; 34DF，前8位0011 0100是原始数据，后8位1101 1111 是 CRC结果。</p>\n<p>接收端的校验有两种方式，一种是和CRC计算一样，在本地把<strong>接收到的数据和CRC分离</strong>，然后在本地对数据进行CRC运算，得到的CRC值和接收到的CRC进行比较，如果一致，说明数据接收正确，如果不一致，说明数据有错误。</p>\n<p>另一种方法是把整个数据帧进行CRC运算，因为是数据帧相当于把原始数据左移8位，然后加上余数，如果直接对整个数据帧进行CRC运算（除以多项式），那么余数应该为0，如果不为0说明数据出错。</p>\n<p><img src=\"/....%5Cimages%5CAlgorithm%5Cv2-fe3b5137beac80e83c438af2b1e4a947_1440w.jpg\" alt=\"img\"></p>\n<p>而且，不同位出错，余数也不同，可以证明，余数与出错位数的对应关系只与CRC参数模型有关，而与原始数据无关。</p>\n<h3 id=\"CRC计算的C语言实现\"><a href=\"#CRC计算的C语言实现\" class=\"headerlink\" title=\"CRC计算的C语言实现\"></a>CRC计算的C语言实现</h3><p>无论是用C还是其他语言，实现方法网上很多，这里我找了一个基于C语言的CRC计算库，里面包含了常用的21个CRC参数模型计算函数，可以直接使用，只有<code>crcLib.c</code>和<code>crcLib.h</code>两个文件。</p>\n<p>GitHub地址：<a href=\"https://link.zhihu.com/?target=https://github.com/whik/crc-lib-c\">https://github.com/whik/crc-lib-c</a></p>\n<p>使用方法非常简单：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &quot;crcLib.h&quot;\n\nint main()\n&#123;\n    uint8_t LENGTH &#x3D; 10;\n    uint8_t data[LENGTH];\n    uint8_t crc;\n\n    for(int i &#x3D; 0; i &lt; LENGTH; i++)\n    &#123;\n        data[i] &#x3D; i*5;\n        printf(&quot;%02x &quot;, data[i]);\n    &#125;\n    printf(&quot;\\n&quot;);\n\n    crc &#x3D; crc8_maxim(data, LENGTH);\n\n    printf(&quot;CRC-8&#x2F;MAXIM:%02x\\n&quot;, crc);\n    return 0;\n&#125;</code></pre>\n\n<p>计算结果：</p>\n<p><img src=\"/....%5Cimages%5CAlgorithm%5Cv2-5e57b35b78dbc8cd5f75be754edab9ba_1440w.jpg\" alt=\"img\"></p>\n<h3 id=\"CRC计算工具\"><a href=\"#CRC计算工具\" class=\"headerlink\" title=\"CRC计算工具\"></a>CRC计算工具</h3><p>下面这几款工具都可以自定义CRC算法模型，而且都有标准CRC模型可供选择。如果自己用C语言或者Verilog实现校验算法时，非常适合作为标准答案进行验证。</p>\n<ul>\n<li>在线计算：<a href=\"https://link.zhihu.com/?target=http://www.ip33.com/crc.html\">http://www.ip33.com/crc.html</a></li>\n<li>离线计算工具：CRC_Calc v0.1.exe或者GCRC.exe</li>\n</ul>\n<p>格西CRC计算器：</p>\n<p><img src=\"/....%5Cimages%5CAlgorithm%5Cv2-056da0822895f32460d981ca6c08357b_1440w.jpg\" alt=\"img\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>CRC校验并不能100%的检查出数据的错误，非常低的概率会出现CRC校验正确但数据中有错误位的情况。这和CRC的位数，多项式的选择等等有很大的关系，所以在实际使用中尽量选择标准CRC参数模型，这些多项式参数都是经过理论计算得出的，可以提高CRC的检错能力。CRC校验可以检错，也可以纠正单一比特的错误，你知道纠错的原理吗？</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://link.zhihu.com/?target=https://www.cnblogs.com/liushui-sky/p/9962123.html\">https://www.cnblogs.com/liushui-sky/p/9962123.html</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https://segmentfault.com/a/1190000018094567\">https://segmentfault.com/a/1190000018094567</a>!</li>\n</ul>\n","text":" 那简而言之就是 取首位 异或(首位为0 除数为0) 左移 上述三个步骤循环呗 当左移后余数长度小于被除数时则取余 也可以这么理解吧 当余数开头出现n个0的时候就可以全部消掉直到首位是1 商补上n-1个0和一个1就可以了 继续异或运算嘛 我是看到有好几题余数开头俩0的 分析看看 ...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"CRC","slug":"CRC","count":1,"path":"api/tags/CRC.json"},{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A8%A12%E9%99%A4%E6%B3%95-CRC%E6%A0%A1%E9%AA%8C%E7%A0%81%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">模2除法(CRC校验码计算)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A12%E5%8A%A0%E5%87%8F%E6%B3%95\"><span class=\"toc-text\">模2加减法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A12%E9%99%A4%E6%B3%95\"><span class=\"toc-text\">模2除法:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B-1111000%E5%AF%B9%E9%99%A4%E6%95%B01101%E5%81%9A%E6%A8%A12%E9%99%A4%E6%B3%95\"><span class=\"toc-text\">例:1111000对除数1101做模2除法:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%88%E8%AF%B4%E7%BB%93%E6%9E%9C-%E5%95%861011%E4%BD%99111\"><span class=\"toc-text\">先说结果: 商1011余111</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">整体运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%AD%A5%E5%88%86%E6%9E%90\"><span class=\"toc-text\">分步分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5-%E6%AF%8F%E4%B8%80%E6%AD%A5%E5%85%B6%E5%AE%9E%E9%83%BD%E6%98%AF%E6%A8%A12%E5%8A%A0%E5%87%8F%E6%B3%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">第一步(每一步其实都是模2加减法运算):</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E4%BD%99%E6%95%B0%E5%8E%BB%E9%99%A4%E9%A6%96%E4%BD%8D-%E5%B7%A6%E7%A7%BB%E4%B8%80%E4%BD%8D-%E5%BD%93%E7%AC%AC%E4%B8%80%E4%BD%8D%E4%B8%BA0%E6%97%B6-%E9%99%A4%E4%BB%A50-%E4%B8%BA1%E6%97%B6-%E9%99%A4%E4%BB%A5%E9%99%A4%E6%95%B0%E3%80%82\"><span class=\"toc-text\">第二步:余数去除首位(左移一位),当第一位为0时,除以0;为1时,除以除数。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5\"><span class=\"toc-text\">第三步</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E6%AD%A5\"><span class=\"toc-text\">第四步</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%97%E5%88%B0%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C-%E5%95%861011%E4%BD%99111\"><span class=\"toc-text\">得到最终结果: 商1011余111</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CRC%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">CRC算法简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CRC%E5%8F%82%E6%95%B0%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">CRC参数模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CRC%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">CRC计算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CRC%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">CRC校验</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CRC%E8%AE%A1%E7%AE%97%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">CRC计算的C语言实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CRC%E8%AE%A1%E7%AE%97%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">CRC计算工具</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"To Finish List","uid":"05224746dee6fcc8d8927349a6fd8d76","slug":"TODOLIST","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T21:05:16.000Z","comments":true,"path":"api/articles/TODOLIST.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"DTDDTD 简介 | 菜鸟教程 (runoob.com) XMLXML 简介 – 什么是 XML？ | 菜鸟教程 (runoob.com) Uptimebot网页监管工具：UptimeRobot: Free Website Monitoring Service Algorith...","link":"","photos":[],"count_time":{"symbolsCount":189,"symbolsTime":"1 mins."},"categories":[{"name":"To Finish List","slug":"To-Finish-List","count":1,"path":"api/categories/To-Finish-List.json"}],"tags":[{"name":"To Finish List","slug":"To-Finish-List","count":1,"path":"api/tags/To-Finish-List.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Dijkstra Algorithm","uid":"d42b57b5bace0bb67392a01a7601ad24","slug":"Algorithm/Dijkstra","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-01T04:24:30.479Z","comments":true,"path":"api/articles/Algorithm/Dijkstra.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Dijkstra 算法详解概述Dijkstra 算法是求一个图中一个点到其他所有点的最短路径的算法 Dijkstra 算法是一个基于「贪心」、「广度优先搜索」、「动态规划」求一个图中一个点到其他所有点的最短路径的算法，时间复杂度 O(n2) 主要行为每次从「未求出最短路径的点」中...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Shortest Path Algorithm","slug":"Shortest-Path-Algorithm","count":1,"path":"api/tags/Shortest-Path-Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"CRC Algorithm","uid":"2e7a3ae4090ee29ca9a2e76805bad9b3","slug":"Algorithm/CRC、LRC、BCC校验与模二运算","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-01T04:24:10.792Z","comments":true,"path":"api/articles/Algorithm/CRC、LRC、BCC校验与模二运算.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<blockquote>\r\n<p>那简而言之就是 取首位 异或(首位为0 除数为0) 左移 上述三个步骤循环呗\r\n当左移后余数长度小于被除数时则取余 也可以这么理解吧\r\n当余数开头出现n个0的时候就可以全部消掉直到首位是1\r\n商补上n-1个0和一个1就可以了 继续异或运算嘛 我是看到有好几题余数开头俩0的\r\n分析看看</p>\r\n</blockquote>\r\n<h1 id=\"模2除法crc校验码计算\">模2除法(CRC校验码计算)</h1>\r\n<p>鉴于网上的讲解自己好不容易才看懂…所以整理了一下,\r\n也方便大家能够理解</p>\r\n<h2 id=\"模2加减法\">模2加减法</h2>\r\n<p>模2除法需要用到<code>模2加减法</code>,关于<code>模2加减法</code>,其实就是<code>异或操作</code>,规则如下:</p>\r\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F;不需要考虑进位和借位\n0 ± 0 &#x3D; 0\n1 ± 1 &#x3D; 0\n0 ± 1 &#x3D; 1\n1 ± 0 &#x3D; 1\n例: 1101 ± 1001 &#x3D; 0100\n计算如下:\n\t\t  1 1 0 1 \n\t\t± 1 0 0 1 \n\t\t-----------\n\t\t  0 1 0 0\n1234</code></pre>\r\n<p><strong>简记:同为0,异为1</strong></p>\r\n<hr />\r\n<h2 id=\"模2除法\">模2除法:</h2>\r\n<p>规则:假设被除数X,和除数P,余数R</p>\r\n<ol type=\"1\">\r\n<li><p>X除以P(对X和P做模2加减法),当前<strong>X</strong>首位为1时,商1,为0时商0</p></li>\r\n<li><p>所得余数R<strong>去除首位</strong>(即左移一位):</p>\r\n<blockquote>\r\n<p>若R第一位为0,将其作为新的被除数,除以0,此时其首位为0,商即为0\r\n若R第一位为1,将其作为新的被除数,除以P,此时其首位为1,商即为1</p>\r\n</blockquote></li>\r\n<li><p>重复第2步直到R位数少于P位数</p></li>\r\n</ol>\r\n<hr />\r\n<h2\r\nid=\"例1111000对除数1101做模2除法\">例:<code>1111000</code>对除数<code>1101</code>做模2除法:</h2>\r\n<h4 id=\"先说结果-商1011余111\">先说结果:\r\n商<code>1011</code>余<code>111</code></h4>\r\n<h4 id=\"整体运算\">整体运算</h4>\r\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">      1 0 1 1     &#x2F;&#x2F;商\n---------------\n1 1 1 1 0 0 0     &#x2F;&#x2F;被除数,注意首位为1\n1 1 0 1\t          &#x2F;&#x2F;被除数首位为1,除以除数\n---------------\n  0 1 0 0 0 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n  0 0 0 0         &#x2F;&#x2F;被除数首位为0,除以0\n---------------\n    1 0 0 0 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n    1 1 0 1       &#x2F;&#x2F;被除数首位为1,除以除数  \n---------------\n      1 0 1 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n      1 1 0 1     &#x2F;&#x2F;被除数首位为1,除以除数\n---------------\n        1 1 1     &#x2F;&#x2F;余数,此时余数位数少于除数,不能继续除了\n123456789101112131415</code></pre>\r\n<h4 id=\"分步分析\">分步分析</h4>\r\n<h5\r\nid=\"第一步每一步其实都是模2加减法运算\">第一步(每一步其实都是模2加减法运算):</h5>\r\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">      1         &#x2F;&#x2F;商\n-------------\n1 1 1 1 0 0 0   &#x2F;&#x2F;被除数,注意首位为1\n1 1 0 1\t        &#x2F;&#x2F;除数\n-------------\n0 0 1 0 0 0 0   &#x2F;&#x2F;余数,模2运算后结果\n123456</code></pre>\r\n<blockquote>\r\n<p>商的第一位:被除数首位为1,商为1(只要被除数首位非0,商就是1)</p>\r\n</blockquote>\r\n<h5\r\nid=\"第二步余数去除首位左移一位当第一位为0时除以0为1时除以除数\">第二步:余数去除首位(左移一位),当第一位为0时,除以0;为1时,除以除数。</h5>\r\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">      1 0        &#x2F;&#x2F;商\n---------------\n  0 1 0 0 0 0    &#x2F;&#x2F;余数去除首位,作为新的被除数\n  0 0 0 0        &#x2F;&#x2F;被除数首位为0,除以0\n---------------\n  0 1 0 0 0 0    &#x2F;&#x2F;余数,模2运算后结果\n123456</code></pre>\r\n<blockquote>\r\n<p>商的第二位:被除数首位为0,商为0(只要被除数首位是0商就是0)</p>\r\n</blockquote>\r\n<h5 id=\"第三步\">第三步</h5>\r\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">      1 0 1      &#x2F;&#x2F;商\n----------------\n    1 0 0 0 0    &#x2F;&#x2F;余数去除首位,作为新的被除数\n    1 1 0 1      &#x2F;&#x2F;被除数首位为1,除以除数\n----------------\n    0 1 0 1 0    &#x2F;&#x2F;余数,模2运算后结果\n123456</code></pre>\r\n<blockquote>\r\n<p>商的第三位:被除数首位为1,商为1</p>\r\n</blockquote>\r\n<h5 id=\"第四步\">第四步</h5>\r\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">      1 0 1 1     &#x2F;&#x2F;商\n----------------\n      1 0 1 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n      1 1 0 1     &#x2F;&#x2F;被除数首位为1,除以除数\n----------------\n      0 1 1 1     &#x2F;&#x2F;余数,此时余数位数(这里的0要忽略掉,不参与下一轮,因为最上面的被除数后面\n      \t\t\t  &#x2F;&#x2F;没有数可以给这里往后补一位了)少于除数位数,不能继续除了\n1234567</code></pre>\r\n<blockquote>\r\n<p>商的第四位:被除数首位为1,商为1 此时不能继续做除法,计算结束</p>\r\n</blockquote>\r\n<h5 id=\"得到最终结果-商1011余111\">得到最终结果:\r\n商<code>1011</code>余<code>111</code></h5>\r\n<ul>\r\n<li>前言</li>\r\n<li>CRC算法简介</li>\r\n<li>CRC计算</li>\r\n<li>CRC校验</li>\r\n<li>CRC计算的C语言实现</li>\r\n<li>CRC计算工具</li>\r\n<li>总结</li>\r\n</ul>\r\n<h3 id=\"前言\">前言</h3>\r\n<p>最近的工作中，要实现对通信数据的CRC计算，所以花了两天的时间好好研究了一下，周末有时间整理了一下笔记。</p>\r\n<p>一个完整的数据帧通常由以下部分构成：</p>\r\n<figure>\r\n<img\r\nsrc=\"....\\images\\Algorithm\\v2-fd234222bf00f00d841f2078b4a3cd18_1440w.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>校验位是为了保证数据在传输过程中的完整性，采用一种指定的算法对原始数据进行计算，得出的一个校验值。接收方接收到数据时，采用同样的校验算法对原始数据进行计算，如果计算结果和接收到的<strong>校验值一致</strong>，说明数据校验正确，这一帧数据可以使用，如果不一致，说明传输过程中出现了差错，这一帧数据丢弃，请求重发。</p>\r\n<p>常用的校验算法有奇偶校验、校验和、CRC，还有LRC、BCC等不常用的校验算法。</p>\r\n<p>以串口通讯中的奇校验为例，如果数据中1的个数为奇数，则奇校验位0，否则为1。</p>\r\n<p>例如原始数据为：0001\r\n0011，数据中1的个数（或各位相加）为3，所以奇校验位为0。这种校验方法很简单，但这种校验方法有很大的误码率。假设由于传输过程中的干扰，接收端接收到的数据是0010\r\n0011，通过奇校验运算，得到奇校验位的值为0，虽然校验通过，但是数据已经发生了错误。</p>\r\n<figure>\r\n<img\r\nsrc=\"....\\images\\Algorithm\\v2-9c025c1b6d3b754f46375968fba3f26e_1440w.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>校验和同理也会有类似的错误：</p>\r\n<figure>\r\n<img\r\nsrc=\"....\\images\\Algorithm\\v2-2f60503bcb6abedadbe2bf45f70f28ba_1440w.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>一个好的校验校验方法，配合数字信号编码方式，如(差分)曼彻斯特编码，(不)归零码等对数据进行编码，可大大提高通信的健壮性和稳定性。例如以太网中使用的是CRC-32校验，曼彻斯特编码方式。本篇文章介绍CRC校验的原理和实现方法。</p>\r\n<h3 id=\"crc算法简介\">CRC算法简介</h3>\r\n<blockquote>\r\n<p>循环冗余校验（Cyclic Redundancy Check，\r\nCRC）是一种根据网络数据包或计算机文件等数据产生简短固定位数校验码的一种信道编码技术，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的。</p>\r\n</blockquote>\r\n<p>CRC校验计算速度快，检错能力强，易于用编码器等硬件电路实现。从检错的正确率与速度、成本等方面，都比奇偶校验等校验方式具有优势。因而，CRC\r\n成为计算机信息通信领域最为普遍的校验方式。常见应用有以太网/USB通信，压缩解压，视频编码，图像存储，磁盘读写等。</p>\r\n<h3 id=\"crc参数模型\">CRC参数模型</h3>\r\n<p>不知道你是否遇到过这种情况，同样的CRC多项式，调用不同的CRC计算函数，得到的结果却不一样，而且和手算的结果也不一样，这就涉及到CRC的参数模型了。计算一个正确的CRC值，需要知道CRC的参数模型。</p>\r\n<p>一个完整的CRC参数模型应该包含以下信息：WIDTH，POLY，INIT，REFIN，REFOUT，XOROUT。</p>\r\n<ul>\r\n<li>NAME：参数模型名称。</li>\r\n<li>WIDTH：宽度，即生成的CRC数据位宽，如CRC-8，生成的CRC为8位</li>\r\n<li>POLY：十六进制多项式，省略最高位1，如 x8 + x2 + x + 1，二进制为1\r\n0000 0111，省略最高位1，转换为十六进制为0x07。</li>\r\n<li>INIT：CRC初始值，和WIDTH位宽一致。</li>\r\n<li>REFIN：true或false，在进行计算之前，原始数据是否翻转，如原始数据：0x34\r\n= 0011 0100，如果REFIN为true，进行翻转之后为0010 1100 = 0x2c</li>\r\n<li>REFOUT：true或false，运算完成之后，得到的CRC值是否进行翻转，如计算得到的CRC值：0x97\r\n= 1001 0111，如果REFOUT为true，进行翻转之后为11101001 = 0xE9。</li>\r\n<li>XOROUT：计算结果与此参数进行异或运算后得到最终的CRC值，和WIDTH位宽一致。</li>\r\n</ul>\r\n<p>通常如果只给了一个多项式，其他的没有说明则：INIT=0x00，REFIN=false，REFOUT=false，XOROUT=0x00。</p>\r\n<p>常用的21个标准CRC参数模型：</p>\r\n<figure>\r\n<img\r\nsrc=\"....\\images\\Algorithm\\v2-91f148259b466e4a75a10c6607370855_1440w.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>CRC校验在电子通信领域非常常用，可以说有通信存在的地方，就有CRC校验：</p>\r\n<ul>\r\n<li>美信(MAXIM)的芯片DS2401/DS18B20，都是使用的CRC-8/MAXIM模型</li>\r\n<li>SD卡或MMC使用的是CRC-7/MMC模型</li>\r\n<li>Modbus通信使用的是CRC-16/MODBUS参数模型</li>\r\n<li>USB协议中使用的CRC-5/USB和CRC-16/USB模型</li>\r\n<li>STM32自带的硬件CRC计算模块使用的是CRC-32模型</li>\r\n</ul>\r\n<p>至于多项式的选择，初始值和异或值的选择，输入输出是否翻转，这就涉及到一定的编码和数学知识了。感兴趣的朋友，可以了解一下每个CRC模型各个参数的来源。至于每种参数模型的检错能力、重复率，需要专业的数学计算了，不在本文讨论的范畴内。</p>\r\n<h3 id=\"crc计算\">CRC计算</h3>\r\n<p>好了，了解了CRC参数模型知识，下面手算一个CRC值，来了解CRC计算的原理。</p>\r\n<p><strong>问：原始数据：0x34，使用CRC-8/MAXIN参数模型，求CRC值？</strong></p>\r\n<p>答：根据CRC参数模型表，得到CRC-8/MAXIN的参数如下：</p>\r\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">POLY &#x3D; 0x31 &#x3D; 0011 0001(最高位1已经省略)\nINIT &#x3D; 0x00\nXOROUT &#x3D; 0x00\nREFIN &#x3D; TRUE\nREFOUT &#x3D; TRUE</code></pre>\r\n<p>有了上面的参数，这样计算条件才算完整，下面来实际计算：</p>\r\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">0.原始数据 &#x3D; 0x34 &#x3D; 0011 0100，多项式 &#x3D; 0x31 &#x3D; 1 0011 0001\n1.INIT &#x3D; 00，原始数据高8位和初始值进行异或运算保持不变。\n2.REFIN为TRUE，需要先对原始数据进行翻转：0011 0100 &gt; 0010 1100\n3.原始数据左移8位，即后面补8个0：0010 1100 0000 0000\n4.把处理之后的数据和多项式进行模2除法，求得余数：\n原始数据：0010 1100 0000 0000 &#x3D; 10 1100 0000 0000\n多项式：1 0011 0001\n模2除法取余数低8位：1111 1011\n5.与XOROUT进行异或，1111 1011 xor 0000 0000 &#x3D; 1111 1011 \n6.因为REFOUT为TRUE，对结果进行翻转得到最终的CRC-8值：1101 1111 &#x3D; 0xDF\n7.数据+CRC：0011 0100 1101 1111 &#x3D; 34DF，相当于原始数据左移8位+余数。</code></pre>\r\n<p>模2除法求余数：</p>\r\n<figure>\r\n<img\r\nsrc=\"....\\images\\Algorithm\\v2-2237c19868f68ce99205668ccd9debb5_1440w.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>验证手算结果：</p>\r\n<figure>\r\n<img\r\nsrc=\"....\\images\\Algorithm\\v2-be31dd176ba8f5a876b6049babca53ef_1440w.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>可以看出是一致的，当你手算的结果和工具计算结果不一致时，可以看看INIT，XOROUT，REFINT，REFOUT这些参数是否一致，有1个参数不对，计算出的CRC结果都不一样。</p>\r\n<h3 id=\"crc校验\">CRC校验</h3>\r\n<p>上面通过笔算的方式，讲解了CRC计算的原理，下面来介绍一下如何进行校验。</p>\r\n<p>按照上面CRC计算的结果，最终的数据帧：0011 0100 1101 1111 =\r\n34DF，前8位0011 0100是原始数据，后8位1101 1111 是 CRC结果。</p>\r\n<p>接收端的校验有两种方式，一种是和CRC计算一样，在本地把<strong>接收到的数据和CRC分离</strong>，然后在本地对数据进行CRC运算，得到的CRC值和接收到的CRC进行比较，如果一致，说明数据接收正确，如果不一致，说明数据有错误。</p>\r\n<p>另一种方法是把整个数据帧进行CRC运算，因为是数据帧相当于把原始数据左移8位，然后加上余数，如果直接对整个数据帧进行CRC运算（除以多项式），那么余数应该为0，如果不为0说明数据出错。</p>\r\n<figure>\r\n<img\r\nsrc=\"....\\images\\Algorithm\\v2-fe3b5137beac80e83c438af2b1e4a947_1440w.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>而且，不同位出错，余数也不同，可以证明，余数与出错位数的对应关系只与CRC参数模型有关，而与原始数据无关。</p>\r\n<h3 id=\"crc计算的c语言实现\">CRC计算的C语言实现</h3>\r\n<p>无论是用C还是其他语言，实现方法网上很多，这里我找了一个基于C语言的CRC计算库，里面包含了常用的21个CRC参数模型计算函数，可以直接使用，只有<code>crcLib.c</code>和<code>crcLib.h</code>两个文件。</p>\r\n<p>GitHub地址：<a\r\nhref=\"https://link.zhihu.com/?target=https%3A//github.com/whik/crc-lib-c\">https://github.com/whik/crc-lib-c</a></p>\r\n<p>使用方法非常简单：</p>\r\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &quot;crcLib.h&quot;\n\nint main()\n&#123;\n    uint8_t LENGTH &#x3D; 10;\n    uint8_t data[LENGTH];\n    uint8_t crc;\n\n    for(int i &#x3D; 0; i &lt; LENGTH; i++)\n    &#123;\n        data[i] &#x3D; i*5;\n        printf(&quot;%02x &quot;, data[i]);\n    &#125;\n    printf(&quot;\\n&quot;);\n\n    crc &#x3D; crc8_maxim(data, LENGTH);\n\n    printf(&quot;CRC-8&#x2F;MAXIM:%02x\\n&quot;, crc);\n    return 0;\n&#125;</code></pre>\r\n<p>计算结果：</p>\r\n<figure>\r\n<img\r\nsrc=\"....\\images\\Algorithm\\v2-5e57b35b78dbc8cd5f75be754edab9ba_1440w.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<h3 id=\"crc计算工具\">CRC计算工具</h3>\r\n<p>下面这几款工具都可以自定义CRC算法模型，而且都有标准CRC模型可供选择。如果自己用C语言或者Verilog实现校验算法时，非常适合作为标准答案进行验证。</p>\r\n<ul>\r\n<li>在线计算：<a\r\nhref=\"https://link.zhihu.com/?target=http%3A//www.ip33.com/crc.html\">http://www.ip33.com/crc.html</a></li>\r\n<li>离线计算工具：CRC_Calc v0.1.exe或者GCRC.exe</li>\r\n</ul>\r\n<p>格西CRC计算器：</p>\r\n<figure>\r\n<img\r\nsrc=\"....\\images\\Algorithm\\v2-056da0822895f32460d981ca6c08357b_1440w.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<h3 id=\"总结\">总结</h3>\r\n<p>CRC校验并不能100%的检查出数据的错误，非常低的概率会出现CRC校验正确但数据中有错误位的情况。这和CRC的位数，多项式的选择等等有很大的关系，所以在实际使用中尽量选择标准CRC参数模型，这些多项式参数都是经过理论计算得出的，可以提高CRC的检错能力。CRC校验可以检错，也可以纠正单一比特的错误，你知道纠错的原理吗？</p>\r\n<h3 id=\"参考资料\">参考资料</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/liushui-sky/p/9962123.html\">https://www.cnblogs.com/liushui-sky/p/9962123.html</a></li>\r\n<li><a\r\nhref=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000018094567\">https://segmentfault.com/a/1190000018094567</a>!</li>\r\n</ul>\r\n","text":" 那简而言之就是 取首位 异或(首位为0 除数为0) 左移 上述三个步骤循环呗 当左移后余数长度小于被除数时则取余 也可以这么理解吧 当余数开头出现n个0的时候就可以全部消掉直到首位是1 商补上n-1个0和一个1就可以了 继续异或运算嘛 我是看到有好几题余数开头俩0的 分析看看 ...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"CRC","slug":"CRC","count":1,"path":"api/tags/CRC.json"},{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A8%A12%E9%99%A4%E6%B3%95crc%E6%A0%A1%E9%AA%8C%E7%A0%81%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">模2除法(CRC校验码计算)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A12%E5%8A%A0%E5%87%8F%E6%B3%95\"><span class=\"toc-text\">模2加减法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A12%E9%99%A4%E6%B3%95\"><span class=\"toc-text\">模2除法:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B1111000%E5%AF%B9%E9%99%A4%E6%95%B01101%E5%81%9A%E6%A8%A12%E9%99%A4%E6%B3%95\"><span class=\"toc-text\">例:1111000对除数1101做模2除法:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%88%E8%AF%B4%E7%BB%93%E6%9E%9C-%E5%95%861011%E4%BD%99111\"><span class=\"toc-text\">先说结果:\r\n商1011余111</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">整体运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%AD%A5%E5%88%86%E6%9E%90\"><span class=\"toc-text\">分步分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%E6%AF%8F%E4%B8%80%E6%AD%A5%E5%85%B6%E5%AE%9E%E9%83%BD%E6%98%AF%E6%A8%A12%E5%8A%A0%E5%87%8F%E6%B3%95%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">第一步(每一步其实都是模2加减法运算):</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BD%99%E6%95%B0%E5%8E%BB%E9%99%A4%E9%A6%96%E4%BD%8D%E5%B7%A6%E7%A7%BB%E4%B8%80%E4%BD%8D%E5%BD%93%E7%AC%AC%E4%B8%80%E4%BD%8D%E4%B8%BA0%E6%97%B6%E9%99%A4%E4%BB%A50%E4%B8%BA1%E6%97%B6%E9%99%A4%E4%BB%A5%E9%99%A4%E6%95%B0\"><span class=\"toc-text\">第二步:余数去除首位(左移一位),当第一位为0时,除以0;为1时,除以除数。</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5\"><span class=\"toc-text\">第三步</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E6%AD%A5\"><span class=\"toc-text\">第四步</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BE%97%E5%88%B0%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C-%E5%95%861011%E4%BD%99111\"><span class=\"toc-text\">得到最终结果:\r\n商1011余111</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#crc%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">CRC算法简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#crc%E5%8F%82%E6%95%B0%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">CRC参数模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#crc%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">CRC计算</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#crc%E6%A0%A1%E9%AA%8C\"><span class=\"toc-text\">CRC校验</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#crc%E8%AE%A1%E7%AE%97%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">CRC计算的C语言实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#crc%E8%AE%A1%E7%AE%97%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">CRC计算工具</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Vim 6. Navigation","uid":"8a564cf263c32b7750d24416c76931ac","slug":"Deploy/vim/06.navigation","date":"2022-12-23T04:23:24.000Z","updated":"2023-10-27T18:54:52.000Z","comments":true,"path":"api/articles/Deploy/vim/06.navigation.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Vim 6. Navigation 移动光标 具体按键 描述 Description h 左移 Move cursor to left by one position j 下移 Move cursor to downward by one position k 上移 Move c...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"Vim","slug":"Vim","count":7,"path":"api/categories/Vim.json"},{"name":"Linux","slug":"Vim/Linux","count":7,"path":"api/categories/Vim/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":12,"path":"api/tags/Linux.json"},{"name":"Vim","slug":"Vim","count":7,"path":"api/tags/Vim.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"全排列","uid":"4bbde60d3dafb255adad1c9293392efa","slug":"Algorithm/Permutations","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:30:18.000Z","comments":true,"path":"api/articles/Algorithm/Permutations.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Permutations - 全排列 顾名思义，就是找出当前元素所有可行的序列 一个朴素的思想是递归，这种方式简单但并不高效快捷 以两个示例来进行算法说明： Example1: 实验五 数据输出 实验准备 理解数据输入、输出的技巧。 实验目的 理解算法设计的数学基本思想，理解算法...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
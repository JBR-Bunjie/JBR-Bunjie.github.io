{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Algorithm/The Chinese Postman Problem","date":"2023-03-07T16:14:44.774Z","updated":"2022-04-06T12:18:43.000Z","comments":true,"path":"api/articles/Algorithm/The Chinese Postman Problem.json","keywords":null,"cover":null,"content":"<h1 id=\"The-Route-of-the-Postman\"><a href=\"#The-Route-of-the-Postman\" class=\"headerlink\" title=\"The Route of the Postman\"></a>The Route of the Postman</h1><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://algorithms.discrete.ma.tum.de/graph-algorithms/directed-chinese-postman/index_en.html\">The Chinese-Postman-Method (tum.de)</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%82%AE%E9%80%92%E5%91%98%E9%97%AE%E9%A2%98\">邮递员问题 - 维基百科，自由的百科全书 (wikipedia.org)</a></li>\n<li><a href=\"https://cfonheart.github.io/2018/04/19/%E4%B8%AD%E5%9B%BD%E9%82%AE%E9%80%92%E5%91%98%E9%97%AE%E9%A2%98/\">中国邮递员问题 | Junnor.G (cfonheart.github.io)</a></li>\n</ul>\n<h2 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a>Details</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>邮递员问题</strong>（也称<strong>邮路问题</strong>，Route Inspection Problem，或<strong>中国邮路问题</strong>,China Route Inspection Problem，或<strong>中国邮递员问题</strong>Chinese Postman Problem）是一个<a href=\"https://zh.wikipedia.org/wiki/%E5%9B%BE%E8%AE%BA\">图论</a>问题。此问题为在一个连通的无向图中找到一最短的封闭路径，且此路径需通过所有边至少一次。</p>\n<p>简单来说，邮递员问题就是在一个已知的地区，<a href=\"https://zh.wikipedia.org/wiki/%E9%83%B5%E5%B7%AE\">邮差</a>要设法找到一条最短路径，可以走过此地区所有的街道，且最后要回到出发点。</p></blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E4%B8%80%E7%AC%94%E7%94%BB%E9%97%AE%E9%A2%98\">一笔画问题 - 维基百科，自由的百科全书 (wikipedia.org)</a></p>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>图本身就是一个欧拉回路图，那么直接走一个欧拉回路就访问了所有路径并回到了起点</li>\n</ol>\n<p>  （欧拉回路图的前提条件是每个点的度数都是偶数）</p>\n<ol start=\"2\">\n<li>图不是一个欧拉回路图，需要对某些边重复走多次回到起点，<em><strong>等价于添加了一些已经存在的重边</strong></em>，构建了欧拉回路。</li>\n</ol>\n<p>  不是欧拉回路需要通过增加一些边使得图变成一个欧拉回路，并能保证问题的最优解，添加的边权值和一定是尽可能短的。</p>\n<ul>\n<li>计算度数为奇数的点</li>\n<li>算出所有点之间的最短路径</li>\n<li>奇度数的点一定为偶数，点与点之间构建二分图，权值为两点之间的最短路，找到一个最小权值匹配集</li>\n<li>对于匹配集，找到每一个匹配集两点之间形成的最短路径，那么这条最短路径就需要加入到额外的边中，且一定能保证这条路径上除了这两个匹配的奇度数点度数加了1变成了偶数，其他所有中间点都是加了2，不影奇偶性。</li>\n<li>所有边都添加好后，就是一个欧拉回路了，计算从起点开始的欧拉回路路径</li>\n</ul></blockquote>\n","text":"The Route of the PostmanReference The Chinese-Postman-Method (tum.de) 邮递员问题 - 维基百科，自由的百科全书 (wikipedia.org) 中国邮递员问题 | Junnor.G (cfonheart.git...","link":"","photos":[],"count_time":{"symbolsCount":815,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#The-Route-of-the-Postman\"><span class=\"toc-text\">The Route of the Postman</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Reference\"><span class=\"toc-text\">Reference</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Details\"><span class=\"toc-text\">Details</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">问题解决</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Algorithm/三角形面积计算","date":"2023-03-07T16:14:44.825Z","updated":"2022-10-07T09:24:22.000Z","comments":true,"path":"api/articles/Algorithm/三角形面积计算.json","keywords":null,"cover":null,"text":"1.底高求面积已知三角形底a，高h，则$$S = \\frac{a·h}{2}$$ 2.海伦公式已知三角形三边a,b,c，则$$\\begin{aligned}p &amp;= \\frac{a+b+c}{2}\\S &amp;= \\sqrt{[p(p - a)(p - b)(p - c...","link":"","photos":[],"count_time":{"symbolsCount":910,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Algorithm/Sugiyama","date":"2023-03-07T16:14:44.771Z","updated":"2022-03-08T12:18:54.000Z","comments":true,"path":"api/articles/Algorithm/Sugiyama.json","keywords":null,"cover":null,"text":"划时代的自动布局算法：sugiyama算法sugiyama algorithm stepsof the framework is to divide the task of drawing a graph into several subproblems, most of whi...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"Boyer Moore Algorithm","uid":"0d08c32366a524bf34b2dc2c2fb0333a","slug":"Algorithm/String Processing/Boyer Moore Algorithm","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:29:30.000Z","comments":true,"path":"api/articles/Algorithm/String Processing/Boyer Moore Algorithm.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"boyer-moore-algorithm\">Boyer Moore Algorithm</h1>\r\n<h2 id=\"general\">General</h2>\r\n<p>高效，可靠，应用广泛：各种文本编辑器的\"查找\"功能（Ctrl+F），大多采用<a\r\nhref=\"https://en.wikipedia.org/wiki/Boyer–Moore_string_search_algorithm\">Boyer-Moore算法</a></p>\r\n<p>1977年，德克萨斯大学的Robert S. Boyer教授和J Strother\r\nMoore教授发明了这种算法。</p>\r\n<h2 id=\"detail\">Detail</h2>\r\n<h3 id=\"坏字符规则\">\"坏字符规则\"</h3>\r\n<blockquote>\r\n<p>后移位数 = 坏字符的位置 - 搜索词中的上一次出现位置</p>\r\n</blockquote>\r\n<p>如果\"坏字符\"不包含在搜索词之中，则上一次出现位置为 -1。</p>\r\n<h3 id=\"好后缀规则\">\"好后缀规则\"</h3>\r\n<blockquote>\r\n<p>后移位数 = 好后缀的(最后)位置 - 后缀(在搜索词中)的上一次出现位置</p>\r\n</blockquote>\r\n<p><strong>注意点</strong>：</p>\r\n<ol type=\"1\">\r\n<li>\"好后缀\"的位置以最后一个字符为准。假定\"ABCDEF\"的\"EF\"是好后缀，则它的位置以\"F\"为准，即5（从0开始计算）</li>\r\n<li>如果\"好后缀\"在搜索词中只出现一次，则它的上一次出现位置为\r\n-1。比如，\"EF\"在\"ABCDEF\"之中只出现一次，则它的上一次出现位置为-1（即未出现）</li>\r\n<li>如果\"好后缀\"有多个，则除了最长的那个\"好后缀\"，其他\"好后缀\"的上一次出现位置必须在头部。比如，假定\"BABCDAB\"的\"好后缀\"是\"DAB\"、\"AB\"、\"B\"，请问这时\"好后缀\"的上一次出现位置是什么？回答是，此时采用的好后缀是\"B\"，它的上一次出现位置是头部，即第0位。这个规则也可以这样表达：如果最长的那个\"好后缀\"只出现一次，则可以把搜索词改写成如下形式进行位置计算\"(DA)BABCDAB\"，即虚拟加入最前面的\"DA\"</li>\r\n</ol>\r\n<h2 id=\"code\">Code</h2>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">pattern</span><span class=\"params\">(String pattern, String target)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">tLen</span> <span class=\"operator\">=</span> target.length();<span class=\"comment\">//主串的长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pLen</span> <span class=\"operator\">=</span> pattern.length();<span class=\"comment\">//模式串的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//如果模式串比主串长，没有可比性，直接返回-1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pLen &gt; tLen) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span>[] bad_table = build_bad_table(pattern);<span class=\"comment\">// 获得坏字符数值的数组，实现看下面</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] good_table = build_good_table(pattern);<span class=\"comment\">// 获得好后缀数值的数组，实现看下面</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> pLen - <span class=\"number\">1</span>, j; i &lt; tLen;) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;跳跃位置：&quot;</span> + i);</span><br><span class=\"line\">        <span class=\"comment\">//这里和上面实现坏字符的时候不一样的地方，我们之前提前求出坏字符以及好后缀</span></span><br><span class=\"line\">        <span class=\"comment\">//对应的数值数组，所以，我们只要在一边循环中进行比较。还要说明的一点是，这里</span></span><br><span class=\"line\">        <span class=\"comment\">//没有使用skip记录跳过的位置，直接针对主串中移动的指针i进行移动</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = pLen - <span class=\"number\">1</span>; target.charAt(i) == pattern.charAt(j); i--, j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//指向模式串的首字符，说明匹配成功，直接返回就可以了</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;匹配成功，位置：&quot;</span> + i);</span><br><span class=\"line\">                <span class=\"comment\">//如果你还要匹配不止一个模式串，那么这里直接跳出这个循环，并且让i++</span></span><br><span class=\"line\">                <span class=\"comment\">//因为不能直接跳过整个已经匹配的字符串，这样的话可能会丢失匹配。</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\t\ti++;   // 多次匹配</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\t\tbreak;</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果出现坏字符，那么这个时候比较坏字符以及好后缀的数组，哪个大用哪个</span></span><br><span class=\"line\">        i += Math.max(good_table[pLen - j - <span class=\"number\">1</span>], bad_table[target.charAt(i)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符信息表</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] build_bad_table(String pattern) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">table_size</span> <span class=\"operator\">=</span> <span class=\"number\">256</span>;<span class=\"comment\">//上面已经解释过了，字符的种类</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] bad_table = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[table_size];<span class=\"comment\">//创建一个数组，用来记录坏字符出现时，应该跳过的字符数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pLen</span> <span class=\"operator\">=</span> pattern.length();<span class=\"comment\">//模式串的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; bad_table.length; i++) &#123;</span><br><span class=\"line\">        bad_table[i] = pLen;  </span><br><span class=\"line\">        <span class=\"comment\">//默认初始化全部为匹配字符串长度,因为当主串中的坏字符在模式串中没有出</span></span><br><span class=\"line\">        <span class=\"comment\">//现时，直接跳过整个模式串的长度就可以了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; pLen - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> pattern.charAt(i);<span class=\"comment\">//记录下当前的字符ASCII码值</span></span><br><span class=\"line\">        <span class=\"comment\">//这里其实很值得思考一下，bad_table就不多说了，是根据字符的ASCII值存储</span></span><br><span class=\"line\">        <span class=\"comment\">//坏字符出现最右的位置，这在上面实现坏字符的时候也说过了。不过你仔细思考</span></span><br><span class=\"line\">        <span class=\"comment\">//一下，为什么这里存的坏字符数值，是最右的那个坏字符相对于模式串最后一个</span></span><br><span class=\"line\">        <span class=\"comment\">//字符的位置？为什么？首先你要理解i的含义，这个i不是在这里的i，而是在上面</span></span><br><span class=\"line\">        <span class=\"comment\">//那个pattern函数的循环的那个i，为了方便我们称呼为I，这个I很神奇，虽然I是</span></span><br><span class=\"line\">        <span class=\"comment\">//在主串上的指针，但是由于在循环中没有使用skip来记录，直接使用I随着j匹配</span></span><br><span class=\"line\">        <span class=\"comment\">//进行移动，也就意味着，在某种意义上，I也可以直接定位到模式串的相对位置，</span></span><br><span class=\"line\">        <span class=\"comment\">//理解了这一点，就好理解在本循环中，i的行为了。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//其实仔细去想一想，我们分情况来思考，如果模式串的最</span></span><br><span class=\"line\">        <span class=\"comment\">//后一个字符，也就是匹配开始的第一个字符，出现了坏字符，那么这个时候，直</span></span><br><span class=\"line\">        <span class=\"comment\">//接移动这个数值，那么正好能让最右的那个字符正对坏字符。那么如果不是第一个</span></span><br><span class=\"line\">        <span class=\"comment\">//字符出现坏字符呢？这种情况你仔细想一想，这种情况也就意味着出现了好后缀的</span></span><br><span class=\"line\">        <span class=\"comment\">//情况，假设我们将最右的字符正对坏字符</span></span><br><span class=\"line\">        bad_table[k] = pLen - <span class=\"number\">1</span> - i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bad_table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//匹配偏移表</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] build_good_table(String pattern) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pLen</span> <span class=\"operator\">=</span> pattern.length();<span class=\"comment\">//模式串长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] good_table = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[pLen];<span class=\"comment\">//创建一个数组，存好后缀数值</span></span><br><span class=\"line\">    <span class=\"comment\">//用于记录最新前缀的相对位置，初始化为模式串长度，因为意思就是当前后缀字符串为空</span></span><br><span class=\"line\">    <span class=\"comment\">//要明白lastPrefixPosition 的含义</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">lastPrefixPosition</span> <span class=\"operator\">=</span> pLen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> pLen - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPrefix(pattern, i + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果当前的位置存在前缀匹配，那么记录当前位置</span></span><br><span class=\"line\">            lastPrefixPosition = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        good_table[pLen - <span class=\"number\">1</span> - i] = lastPrefixPosition - i + pLen - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; pLen - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//计算出指定位置匹配的后缀的字符串长度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">slen</span> <span class=\"operator\">=</span> suffixLength(pattern, i);</span><br><span class=\"line\">        good_table[slen] = pLen - <span class=\"number\">1</span> - i + slen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> good_table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前缀匹配</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPrefix</span><span class=\"params\">(String pattern, <span class=\"type\">int</span> p)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">patternLength</span> <span class=\"operator\">=</span> pattern.length();<span class=\"comment\">//模式串长度</span></span><br><span class=\"line\">    <span class=\"comment\">//这里j从模式串第一个字符开始，i从指定的字符位置开始，通过循环判断当前指定的位置p</span></span><br><span class=\"line\">    <span class=\"comment\">//之后的字符串是否匹配模式串前缀</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> p, j = <span class=\"number\">0</span>; i &lt; patternLength; ++i, ++j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pattern.charAt(i) != pattern.charAt(j)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后缀匹配</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">suffixLength</span><span class=\"params\">(String pattern, <span class=\"type\">int</span> p)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pLen</span> <span class=\"operator\">=</span> pattern.length();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> p, j = pLen - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span> &amp;&amp; pattern.charAt(i) == pattern.charAt(j); i--, j--) &#123;</span><br><span class=\"line\">        len += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"reference\">Reference</h2>\r\n<ul>\r\n<li><a\r\nhref=\"https://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html\">字符串匹配的Boyer-Moore算法\r\n- 阮一峰的网络日志 (ruanyifeng.com)</a></li>\r\n<li><a\r\nhref=\"https://blog.csdn.net/DBC_121/article/details/105569440\">不用找了，学习BM算法，这篇就够了（思路+详注代码）_BoCong-Deng的博客-CSDN博客_bm算法</a></li>\r\n</ul>\r\n","text":"Boyer Moore Algorithm General 高效，可靠，应用广泛：各种文本编辑器的\"查找\"功能（Ctrl+F），大多采用Boyer-Moore算法 1977年，德克萨斯大学的Robert S. Boyer教授和J Strother Moore教授发明了这种算法。 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"String Processing","slug":"String-Processing","count":5,"path":"api/tags/String-Processing.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#boyer-moore-algorithm\"><span class=\"toc-text\">Boyer Moore Algorithm</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#general\"><span class=\"toc-text\">General</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#detail\"><span class=\"toc-text\">Detail</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9D%8F%E5%AD%97%E7%AC%A6%E8%A7%84%E5%88%99\"><span class=\"toc-text\">&quot;坏字符规则&quot;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A5%BD%E5%90%8E%E7%BC%80%E8%A7%84%E5%88%99\"><span class=\"toc-text\">&quot;好后缀规则&quot;</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#code\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#reference\"><span class=\"toc-text\">Reference</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Noise Generate","uid":"e93f281683f5f1e8c6e0ab2a6dab5abb","slug":"Algorithm/NOISE/Noise","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:29:08.000Z","comments":true,"path":"api/articles/Algorithm/NOISE/Noise.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"噪声 - Noise Randomness is needed to make things unpredictable, varied, and appear natural. ——catlike coding 在任何游戏中，噪声都是不可缺少的存在。因此，了解这些噪声的特点、用...","link":"","photos":[],"count_time":{"symbolsCount":916,"symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Noise","slug":"Noise","count":1,"path":"api/tags/Noise.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"KMP","uid":"53896b079468d4c41963b2300dea196e","slug":"Algorithm/String Processing/KMP","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T14:29:53.000Z","comments":true,"path":"api/articles/Algorithm/String Processing/KMP.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"KMP算法 KMP算法作用简介： 在计算机科学中，Knuth-Morris-Pratt字符串查找算法（简称为KMP算法）可在一个字符串S内查找一个词W的出现位置。一个词在不匹配时本身就包含足够的信息来确定下一个匹配可能的开始位置，此算法利用这一特性以避免重新检查先前配对的字符。 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"String Processing","slug":"String-Processing","count":5,"path":"api/tags/String-Processing.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
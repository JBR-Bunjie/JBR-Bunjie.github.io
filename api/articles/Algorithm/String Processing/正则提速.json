{"title":"Regex","uid":"fa3249ce619228ad8d74e7a819afc946","slug":"Algorithm/String Processing/正则提速","date":"2022-12-23T04:23:23.000Z","updated":"2023-03-08T01:11:43.356Z","comments":true,"path":"api/articles/Algorithm/String Processing/正则提速.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<ol>\n<li><p>让匹配更快失败，尤其是匹配很长的字符串时，匹配失败的位置要比成功的位置多得多。</p>\n</li>\n<li><p>以简单、必须的字元开始，排除明显不匹配的位置，如锚点(^或$)，特殊字符(x或\\u263A)字符类([a-z]或\\d之类的速记符)，和单词边界(\\b)；尽量避免使用分组、选择、重复量词开头，如/one|two/、\\s、\\s{1,}等。</p>\n</li>\n<li><p>使用量词模式时，尽量让重复部分具体化，让字元互斥，如用”[^”\\r\\n]<em>”代替”.</em>?”（这个依赖回溯）。</p>\n</li>\n<li><p>减少分支数量、缩小分支范围，用字符集和选项组件来减少分支的出现，或把分支在正则上出现的位置推后，把分支中最常出现的情况放在分支的最前面。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cat|bat -&gt; [cb]at;red|read -&gt; rea?d;red|raw -&gt; r(?:ed|aw); \n\n(.|\\r|\\n) -&gt; [\\s\\S]</code></pre></li>\n<li><p>精确匹配需要的文本以减少后续的处理，如果需要引用匹配的一部分，可使用捕获，然后通过反向引用来处理。</p>\n</li>\n<li><p>暴露必需的字元，用<code>/^(ab|cd)/</code>而不是<code>/(^ab|^cd)/</code>。</p>\n</li>\n<li><p>使用合适的量词，基于预期的回溯数量，使用合适的量词类型。</p>\n</li>\n<li><p>把正则表达式赋值给变量以便复用和提升提升性能，这样可以让正则减少不必要的编译过程。while (/regex1/.test(str1)) {/regex2/.exec(str2);…}用下面的代替上面的   var regex1 = /regex1/,regex2 = /regex2/;while (regex1.test(str1)) {regex2.exec(str2);…}</p>\n</li>\n<li><p>将复杂的正则表达式拆分成简单的片段，每个正则只在上一个成功的匹配中查找，更高效，而且可以减少回溯。</p>\n</li>\n<li><p>使用非捕获组，因为捕获组需要消耗时间和内存来记录反向引用，并不断更新，如果不需要反向引用，可用非捕获组(?:…)代替捕获组(…)；当需要全文匹配的反向引用时，可用regex.exec()返回的结果或者在替换字符串是使用$&amp;。   此优化在firefox中效果较小，但其他浏览器中处理长字符串时有较大影响</p>\n</li>\n</ol>\n<p>And More？</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/47401769\">觉得正则表达式太慢？这里有一个提速100倍的方案！ - 知乎 (zhihu.com)</a></p>\n<p>项目地址</p>\n<p><a href=\"https://github.com/vi3k6i5/flashtext\">vi3k6i5/flashtext: Extract Keywords from sentence or Replace keywords in sentences. (github.com)</a></p>\n","text":" 让匹配更快失败，尤其是匹配很长的字符串时，匹配失败的位置要比成功的位置多得多。 以简单、必须的字元开始，排除明显不匹配的位置，如锚点(^或$)，特殊字符(x或\\u263A)字符类([a-z]或\\d之类的速记符)，和单词边界(\\b)；尽量避免使用分组、选择、重复量词开头，如/on...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":26,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"String Processing","slug":"String-Processing","count":7,"path":"api/tags/String-Processing.json"},{"name":"Regex","slug":"Regex","count":1,"path":"api/tags/Regex.json"}],"toc":"","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"R&K Algorithm","uid":"3300e6e8edea21eb33ad89b2150bf9cc","slug":"Algorithm/String Processing/KR&RK","date":"2022-12-23T04:23:23.000Z","updated":"2023-03-08T01:10:37.847Z","comments":true,"path":"api/articles/Algorithm/String Processing/KR&RK.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Rabin–Karp algorithm - 拉宾-卡普算法拉宾-卡普算法（英語：Rabin–Karp algorithm）或卡普-拉宾算法（Karp–Rabin algorithm） GeneralRabin-Karp 算法是由 Richard M. Karp和 Michael...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":26,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"String Processing","slug":"String-Processing","count":7,"path":"api/tags/String-Processing.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Encoding Methods","uid":"b7afcba22e06e2e680735e918e5fcad8","slug":"Language Learning/Encoding/Endcoding","date":"2022-12-23T04:23:23.000Z","updated":"2023-03-08T02:06:24.429Z","comments":true,"path":"api/articles/Language Learning/Encoding/Endcoding.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"计算机编码梳理ASCII码描述这是计算机编码发展历程里的第一阶段：ASCII码，即：American Standard Code for Information Interchange，美国信息交换标准代码 设计思路：在计算机内部存储单元的最小单位时Byte。不过Byte仍然可以...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"Coding Language","slug":"Coding-Language","count":4,"path":"api/categories/Coding-Language.json"}],"tags":[{"name":"ASCII","slug":"ASCII","count":1,"path":"api/tags/ASCII.json"},{"name":"U","slug":"U","count":1,"path":"api/tags/U.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
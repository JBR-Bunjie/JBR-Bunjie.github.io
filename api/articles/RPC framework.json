{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"RPC framework","date":"2023-03-07T16:14:44.685Z","updated":"2022-03-07T09:02:28.000Z","comments":true,"path":"api/articles/RPC framework.json","keywords":null,"cover":null,"content":"<h1 id=\"remote-procedure-call-rpc\">Remote Procedure Call (RPC)</h1>\r\n<h3 id=\"what-is-remote-procedure-call-rpc\">What is Remote Procedure Call\r\n(RPC)?</h3>\r\n<p>Remote Procedure Call is a software communication protocol that one\r\nprogram can use to request a service from a program located in another\r\ncomputer on a network without having to understand the network's\r\ndetails. RPC is used to call other processes on the remote systems like\r\na local system. A procedure call is also sometimes known as a\r\n<em>function call</em> or a <em>subroutine call</em>.</p>\r\n<p>RPC uses the client-server model. The requesting program is a client,\r\nand the service-providing program is the server. Like a local procedure\r\ncall, an RPC is a synchronous operation requiring the requesting program\r\nto be suspended until the results of the remote procedure are returned.\r\nHowever, the use of lightweight processes or threads that share the same\r\naddress space enables multiple RPCs to be performed concurrently.</p>\r\n<p>The interface definition language (IDL) -- the specification language\r\nused to describe a software component's application programming\r\ninterface (API) -- is commonly used in Remote Procedure Call software.\r\nIn this case, IDL provides a bridge between the machines at either end\r\nof the link that may be using different operating systems (OSes) and\r\ncomputer languages.</p>\r\n<h3 id=\"what-does-rpc-do\">What does RPC do?</h3>\r\n<p>When program statements that use the RPC framework are compiled into\r\nan executable program, a stub is included in the compiled code that acts\r\nas the representative of the remote procedure code. When the program is\r\nrun and the procedure call is issued, the stub receives the request and\r\nforwards it to a client runtime program in the local computer. The first\r\ntime the client stub is invoked, it contacts a name server to determine\r\nthe transport address where the server resides.</p>\r\n<p>The client runtime program has the knowledge of how to address the\r\nremote computer and server application and sends the message across the\r\nnetwork that requests the remote procedure. Similarly, the server\r\nincludes a runtime program and stub that interface with the remote\r\nprocedure itself. Response-request protocols are returned the same\r\nway.</p>\r\n<h3 id=\"how-does-rpc-work\">How does RPC work?</h3>\r\n<p>When a remote procedure call is invoked, the calling environment is\r\nsuspended, the procedure parameters are transferred across the network\r\nto the environment where the procedure is to execute, and the procedure\r\nis then executed in that environment.</p>\r\n<p>When the procedure finishes, the results are transferred back to the\r\ncalling environment, where execution resumes as if returning from a\r\nregular procedure call.</p>\r\n<p>During an RPC, the following steps take place:</p>\r\n<ol type=\"1\">\r\n<li>The client calls the client stub. The call is a local procedure call\r\nwith parameters pushed onto the stack in the normal way.</li>\r\n<li>The client stub packs the procedure parameters into a message and\r\nmakes a system call to send the message. The packing of the procedure\r\nparameters is called marshalling.</li>\r\n<li>The client's local OS sends the message from the client machine to\r\nthe remote server machine.</li>\r\n<li>The server OS passes the incoming packets to the server stub.</li>\r\n<li>The server stub unpacks the parameters -- called\r\n<em>unmarshalling</em> -- from the message.</li>\r\n<li>When the server procedure is finished, it returns to the server\r\nstub, which marshals the return values into a message. The server stub\r\nthen hands the message to the transport layer.</li>\r\n<li>The transport layer sends the resulting message back to the client\r\ntransport layer, which hands the message back to the client stub.</li>\r\n<li>The client stub unmarshalls the return parameters, and execution\r\nreturns to the caller.</li>\r\n</ol>\r\n<h3 id=\"types-of-rpc\">Types of RPC</h3>\r\n<p>There are several RPC models and distributed computing\r\nimplementations. A popular model and implementation is the Open Software\r\nFoundation's (OSF) Distributed Computing Environment (DCE). The\r\nInstitute of Electrical and Electronics Engineers (IEEE) defines RPC in\r\nits ISO Remote Procedure Call Specification, ISO/IEC CD 11578 N6561,\r\nISO/IEC, November 1991.</p>\r\n<p>Examples of RPC configurations include the following:</p>\r\n<ul>\r\n<li>The normal method of operation where the client makes a call and\r\ndoesn't continue until the server returns the reply.</li>\r\n<li>The client makes a call and continues with its own processing. The\r\nserver doesn't reply.</li>\r\n<li>A facility for sending several client nonblocking calls in one\r\nbatch.</li>\r\n<li>RPC clients have a broadcast facility, i.e., they can send messages\r\nto many servers and then receive all the resulting replies.</li>\r\n<li>The client makes a nonblocking client/server call; the server\r\nsignals the call is completed by calling a procedure associated with the\r\nclient.</li>\r\n</ul>\r\n<p>RPC spans the transport layer and the application layer in the Open\r\nSystems Interconnection (OSI) model of network communication. RPC makes\r\nit easier to develop an application that includes multiple programs\r\ndistributed in a network. Alternative methods for client-server\r\ncommunication include message queueing and IBM's Advanced\r\nProgram-to-Program Communication (APPC).</p>\r\n<h3 id=\"pros-and-cons-of-rpc\">Pros and cons of RPC</h3>\r\n<p>Though it boasts a wide range of benefits, there are certainly a\r\nshare of pitfalls that those who use RPC should be aware of.</p>\r\n<p>Here are some of the advantages RPC provides for developers and\r\napplication managers:</p>\r\n<ul>\r\n<li>Helps clients communicate with servers via the traditional use of\r\nprocedure calls in high-level languages.</li>\r\n<li>Can be used in a distributed environment, as well as the local\r\nenvironment.</li>\r\n<li>Supports process-oriented and thread-oriented models.</li>\r\n<li>Hides the internal message-passing mechanism from the user.</li>\r\n<li>Requires only minimal effort to rewrite and redevelop the code.</li>\r\n<li>Provides abstraction, i.e., the message-passing nature of network\r\ncommunication is hidden from the user.</li>\r\n<li>Omits many of the protocol layers to improve performance.</li>\r\n</ul>\r\n<p>On the other hand, some of the disadvantages of RPC include the\r\nfollowing:</p>\r\n<ul>\r\n<li>The client and server use different execution environments for their\r\nrespective routines, and the use of resources (e.g., files) is also more\r\ncomplex. Consequently, RPC systems aren't always suited for transferring\r\nlarge amounts of data.</li>\r\n<li>RPC is highly vulnerable to failure because it involves a\r\ncommunication system, another machine and another process.</li>\r\n<li>There is no uniform standard for RPC; it can be implemented in a\r\nvariety of ways.</li>\r\n<li>RPC is only interaction-based, and as such, it doesn't offer any\r\nflexibility when it comes to hardware architecture.</li>\r\n</ul>\r\n<p><a\r\nhref=\"https://www.techtarget.com/searchapparchitecture/definition/Remote-Procedure-Call-RPC\">What\r\nIs Remote Procedure Call (RPC)? Definition from SearchAppArchitecture\r\n(techtarget.com)</a></p>\r\n<p><a\r\nhref=\"https://zhuanlan.zhihu.com/p/187560185\">RPC是什么，看完你就知道了\r\n- 知乎 (zhihu.com)</a></p>\r\n","text":"Remote Procedure Call (RPC) What is Remote Procedure Call (RPC)? Remote Procedure Call is a software communication protocol that one program...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#remote-procedure-call-rpc\"><span class=\"toc-text\">Remote Procedure Call (RPC)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#what-is-remote-procedure-call-rpc\"><span class=\"toc-text\">What is Remote Procedure Call\r\n(RPC)?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#what-does-rpc-do\"><span class=\"toc-text\">What does RPC do?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#how-does-rpc-work\"><span class=\"toc-text\">How does RPC work?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#types-of-rpc\"><span class=\"toc-text\">Types of RPC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pros-and-cons-of-rpc\"><span class=\"toc-text\">Pros and cons of RPC</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"为你的github项目新建一个doc页面","date":"2023-03-07T16:14:44.704Z","updated":"2023-03-08T12:38:45.000Z","comments":true,"path":"api/articles/为你的github项目新建一个doc页面.json","keywords":null,"cover":null,"text":"Github特殊仓库： 以JBR-Bunjie为例 用户名仓库 用户名仓库为: JBR-Bunjie\\JBR-Bunjie 个人博客 个人博客仓库为: JBR-Bunjie\\JBR-Bunjie.github.io，这个仓库会直接导向网页JBR-Bunjie.github.io ...","link":"","photos":[],"count_time":{"symbolsCount":395,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Complexity Has to Live Somewhere","date":"2023-03-07T16:14:44.585Z","updated":"2022-03-01T10:21:30.000Z","comments":true,"path":"api/articles/Complexity Has to Live Somewhere.json","keywords":null,"cover":null,"text":"Original Post: Complexity Has to Live Somewhere (ferd.ca) Chinese Version: Complexity Has to Live Somewhere - Google 文档 架构设计-复杂度是不灭的 - 知乎 (z...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
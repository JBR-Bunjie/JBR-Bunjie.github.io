{"title":"To Finish List","uid":"05224746dee6fcc8d8927349a6fd8d76","slug":"TODOLIST","date":"2022-12-23T04:23:23.000Z","updated":"2023-10-27T21:05:16.000Z","comments":true,"path":"api/articles/TODOLIST.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h2 id=\"dtd\">DTD</h2>\r\n<p><a href=\"https://www.runoob.com/dtd/dtd-intro.html\">DTD 简介 |\r\n菜鸟教程 (runoob.com)</a></p>\r\n<h2 id=\"xml\">XML</h2>\r\n<p><a href=\"https://www.runoob.com/xml/xml-intro.html\">XML 简介 – 什么是\r\nXML？ | 菜鸟教程 (runoob.com)</a></p>\r\n<h2 id=\"uptimebot\">Uptimebot</h2>\r\n<p>网页监管工具：<a href=\"https://uptimerobot.com/\">UptimeRobot: Free\r\nWebsite Monitoring Service</a></p>\r\n<h2 id=\"algorithm\">Algorithm</h2>\r\n<h3 id=\"模拟退火\">模拟退火</h3>\r\n<p><a\r\nhref=\"https://m-sea.blog.luogu.org/qian-tan-SA\">浅谈玄学算法——模拟退火 -\r\nM_sea 的博客 - 洛谷博客 (luogu.org)</a></p>\r\n","text":"DTD DTD 简介 | 菜鸟教程 (runoob.com) XML XML 简介 – 什么是 XML？ | 菜鸟教程 (runoob.com) Uptimebot 网页监管工具：UptimeRobot: Free Website Monitoring Service Algor...","link":"","photos":[],"count_time":{"symbolsCount":207,"symbolsTime":"1 mins."},"categories":[{"name":"To Finish List","slug":"To-Finish-List","count":1,"path":"api/categories/To-Finish-List.json"}],"tags":[{"name":"To Finish List","slug":"To-Finish-List","count":1,"path":"api/tags/To-Finish-List.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dtd\"><span class=\"toc-text\">DTD</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#xml\"><span class=\"toc-text\">XML</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#uptimebot\"><span class=\"toc-text\">Uptimebot</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#algorithm\"><span class=\"toc-text\">Algorithm</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB\"><span class=\"toc-text\">模拟退火</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"CRC Algorithm","uid":"2e7a3ae4090ee29ca9a2e76805bad9b3","slug":"Algorithm/CRC、LRC、BCC校验与模二运算","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-01T04:24:10.792Z","comments":true,"path":"api/articles/Algorithm/CRC、LRC、BCC校验与模二运算.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":" 那简而言之就是 取首位 异或(首位为0 除数为0) 左移 上述三个步骤循环呗 当左移后余数长度小于被除数时则取余 也可以这么理解吧 当余数开头出现n个0的时候就可以全部消掉直到首位是1 商补上n-1个0和一个1就可以了 继续异或运算嘛 我是看到有好几题余数开头俩0的 分析看看 ...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"CRC","slug":"CRC","count":1,"path":"api/tags/CRC.json"},{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Dijkstra Algorithm","uid":"d42b57b5bace0bb67392a01a7601ad24","slug":"Algorithm/Dijkstra","date":"2022-12-23T04:23:23.000Z","updated":"2023-11-01T04:24:30.479Z","comments":true,"path":"api/articles/Algorithm/Dijkstra.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Dijkstra 算法详解 概述 Dijkstra 算法是求一个图中一个点到其他所有点的最短路径的算法 Dijkstra 算法是一个基于「贪心」、「广度优先搜索」、「动态规划」求一个图中一个点到其他所有点的最短路径的算法，时间复杂度 O(n2) 主要行为 每次从「未求出最短路径的...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"Shortest Path Algorithm","slug":"Shortest-Path-Algorithm","count":1,"path":"api/tags/Shortest-Path-Algorithm.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Complexity Has to Live Somewhere","date":"2023-03-07T16:14:44.585Z","updated":"2022-03-01T10:21:30.000Z","comments":true,"path":"api/articles/Complexity Has to Live Somewhere.json","keywords":null,"cover":null,"content":"<p>Original Post: <a\r\nhref=\"https://ferd.ca/complexity-has-to-live-somewhere.html\">Complexity\r\nHas to Live Somewhere (ferd.ca)</a></p>\r\n<p>Chinese Version:</p>\r\n<p><a\r\nhref=\"https://docs.google.com/document/d/1Qp2foEIk2Tn0x-hwM3-3FeFf3sADnhMabQGOkgE09QI/edit\">Complexity\r\nHas to Live Somewhere - Google 文档</a></p>\r\n<p><a\r\nhref=\"https://zhuanlan.zhihu.com/p/410049005\">架构设计-复杂度是不灭的 -\r\n知乎 (zhihu.com)</a></p>\r\n<p>Some Related Posts: <a\r\nhref=\"https://zhuanlan.zhihu.com/p/138145081\">复杂度是不灭的，只会转移，难道一切都是徒劳的吗？\r\n- 知乎 (zhihu.com)</a></p>\r\n<blockquote>\r\n<p>Complexity has to live somewhere. If you embrace it, give it the\r\nplace it deserves, design your system and organisation knowing it\r\nexists, and focus on adapting, it might just become a strength.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>很多架构/系统一开始是简单的，这一点都没错，因为他们开始只处理简单问题，只处理几个点，这是正确的。随着系统的不断升级迭代，他们开始把复杂的事情往简单里入侵，于是系统边界开始变得模糊不清，最后崩塌。</p>\r\n</blockquote>\r\n<p>千里之堤毁于蚁穴。</p>\r\n<blockquote>\r\n<ul>\r\n<li>if you make the build tool simple, it won't handle all the weird\r\nedge cases that exist out there</li>\r\n<li>if you want to handle the weird edge cases, you need to deviate from\r\nwhatever norm you wanted to establish</li>\r\n<li>if you want ease of use for common defaults, the rules for common\r\ndefaults must be shared between the tool and the users, who shape their\r\nsystems to fit the tool's expectations</li>\r\n<li>if you allow configuration or scripting, you give the users a way to\r\nspecify the rules that must be shared, so the tool fits their\r\nsystems</li>\r\n<li>if you want to keep the tool simple, you have to force your users to\r\nonly play within the parameters that fit this simplicity</li>\r\n<li>if your users' use cases don't map well to your simplicity, they\r\nwill build shims around your tool to attain their objectives</li>\r\n</ul>\r\n</blockquote>\r\n<p>所以怎么解决复杂？要把复杂交给谁？</p>\r\n<p>是希望用户自定义？还是一站式打包，全部总揽？是只针对小问题破局？还是囊括一切？</p>\r\n<p>层层交叉，复杂自然分散。但是这些分散的复杂是否都经过了稳妥的处理？它们是不是被随意地丢弃在各个角落？</p>\r\n<p>最后：复杂度不会解决，但你所能做的一切都可以促成一个更完善的垃圾堆放处的实现</p>\r\n","text":"Original Post: Complexity Has to Live Somewhere (ferd.ca) Chinese Version: Complexity Has to Live Somewhere - Google 文档 架构设计-复杂度是不灭的 - 知乎 (z...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"RPC framework","date":"2023-03-07T16:14:44.685Z","updated":"2022-03-07T09:02:28.000Z","comments":true,"path":"api/articles/RPC framework.json","keywords":null,"cover":null,"text":"Remote Procedure Call (RPC) What is Remote Procedure Call (RPC)? Remote Procedure Call is a software communication protocol that one program...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Binaries与Source","date":"2023-03-07T16:14:44.579Z","updated":"2023-03-07T15:51:54.567Z","comments":true,"path":"api/articles/Binaries与Source.json","keywords":null,"cover":null,"text":"Binaries和Source的区别 二进制（Binaries）文件： 即Binary文件/二进制文件：二进制包里面包括了已经经过编译，可以马上运行的程序。你只需要下载和解包（安装）它们以后，就马上可以使用 源（Source）文件： 一般是开源程序，这是程序的源代码文件，需要在你...","link":"","photos":[],"count_time":{"symbolsCount":298,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
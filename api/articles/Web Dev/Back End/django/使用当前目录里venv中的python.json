{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/使用当前目录里venv中的python","date":"2023-03-08T00:28:42.134Z","updated":"2022-09-08T09:07:40.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/使用当前目录里venv中的python.json","keywords":null,"cover":[],"content":"<h1 id=\"Python-虚拟环境\"><a href=\"#Python-虚拟环境\" class=\"headerlink\" title=\"Python 虚拟环境\"></a>Python 虚拟环境</h1><p>Python 之所以强大，除了语言本身的特性外，更重要的是拥有无所不及的第三方库。</p>\n<p>依赖问题？</p>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><h3 id=\"python-包库\"><a href=\"#python-包库\" class=\"headerlink\" title=\"python 包库\"></a>python 包库</h3><p>包库或者叫软件源是 Python 第三方软件的库的集合，或者市场，可以发布、下载和管理软件包，其中 pypi (Python Package Index) <a href=\"https://pypi.org/\">https://pypi.org/</a> 是官方指定的软件包库，基于其上的 pip 工具就是从这里查找、下载安装软件包的。为了提高下载速度，世界上有很多 Pypi 的镜像服务器，在国内也有多个软件源，例如阿里的软件源是：<a href=\"http://mirrors.aliyun.com/pypi/simple/%E3%80%82\">http://mirrors.aliyun.com/pypi/simple/。</a> 除此之外，还有其他软件源，如正对科学计算的 anaconda 的软件源 <a href=\"https://repo.anaconda.com/\">https://repo.anaconda.com/</a></p>\n<h3 id=\"python-包管理器\"><a href=\"#python-包管理器\" class=\"headerlink\" title=\"python 包管理器\"></a>python 包管理器</h3><p>软件包源中的软件包数量巨大，版本多样，所以需要借助于软件源管理工具，例如 pip、conda、Pipenv、Poetry 等</p>\n<ul>\n<li>pip 是最常用的包管理工具，通过 <code>pip install &lt;packagename&gt;</code> 命令格式来安装软件包，使用的是 pypi 软件包源</li>\n<li>conda 多用作科学计算领域的包管理工具，功能丰富且强大，使用的软件包源是 Anaconda repository 和 Anaconda Cloud，conda 不仅支持 Python 软件包，还可以安装 C、C++ 、R 以及其他语言的二定制软件包。除了软件包管理外，还能提供相互隔离的软件环境。</li>\n<li>Pipenv 是 Kenneth Reitz 在2017年1月发布的Python依赖管理工具，现在由PyPA维护。Pipenv 会自动帮你管理虚拟环境和依赖文件，并且提供了一系列命令和选项来帮助你实现各种依赖和环境管理相关的操作</li>\n<li>Poetry 和 Pipenv 类似，是一个 Python 虚拟环境和依赖管理工具，另外它还提供了包管理功能，比如打包和发布。你可以把它看做是 Pipenv 和 Flit 这些工具的超集。它可以让你用 Poetry 来同时管理 Python 库和 Python 程序</li>\n</ul>\n<p>很多包管理工具不仅提供了基本的包管理功能，还提供了虚拟环境构建，程序管理的等功能</p>\n<h3 id=\"Python-虚拟环境-1\"><a href=\"#Python-虚拟环境-1\" class=\"headerlink\" title=\"Python 虚拟环境\"></a>Python 虚拟环境</h3><p>Python 应用经常需要使用一些包第三方包或者模块，有时需要依赖特定的包或者库的版本，所以不能有一个能适应所有 Python 应用的软件环境，很多时候不同的 Python 应用所依赖的版本是冲突的，满足了其中一个，另一个则无法运行，解决这一问题的方法是 虚拟环境。 虚拟环境是一个包含了特定 Python 解析器以及一些软件包的自包含目录，不同的应用程序可以使用不同的虚拟环境，从而解决了依赖冲突问题，而且虚拟环境中只需要安装应用相关的包或者模块，可以给部署提供便利</p>\n<h2 id=\"构建虚拟环境\"><a href=\"#构建虚拟环境\" class=\"headerlink\" title=\"构建虚拟环境\"></a>构建虚拟环境</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>虚拟环境并不是什么新技术，主要是利用了操作系统中环境变量以及进程间环境隔离的特性</p>\n<p>操作系统的环境变量可以为程序提供信息和做信息交换介质，进程可以共享操作系统中的环境变量，也可以为进程指定环境变量，其中 PATH 是很重要的环境变量，用于为操作系统和程序提供可执行文件的访问路径，例如写一个程序 a.exe，存放在 D:\\MyProgram 中，在命令行中执行 a.exe ，会得到提示“ 无法找到程序 a.exe”，为了让系统找到，可以将 D:\\MyProgram 路径加入到 PATH 环境变量中，当输入 a.exe 时，操作系统就会从 PATH 所提供的路径中逐个查找，这时就可以找到了。Linux 和 MacOS 具有相似的特性，甚至比 Windows 的功能更丰富。</p>\n<p>Python 虚拟环境就是利用这个特性构建的，在激活虚拟环境之时，激活脚本会将当前命令行程序的 PATH 修改为虚拟环境的，这样执行命令就会在被修改的 PATH 中查找，从而避免了原本 PATH 可以找到的命令，从而实现了 Python 环境的隔离。</p>\n<p>为了让开发这容易区分当前环境是否虚拟环境以及是那个虚拟环境，命令提示符前会加上特殊标记，例如:</p>\n<p><a href=\"http://www.justdopython.com/assets/images/2020/05/venv/01.png\"><img src=\"http://www.justdopython.com/assets/images/2020/05/venv/01.png\" alt=\"Python 虚拟环境\"></a></p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><h4 id=\"virtualenv-工具\"><a href=\"#virtualenv-工具\" class=\"headerlink\" title=\"virtualenv 工具\"></a>virtualenv 工具</h4><p>在 python3.3 之前，只能通过 virtualenv 创建虚拟环境，首先需要安装 virtualenv</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install virtualenv </code></pre>\n\n<p>安装完后，在当前目录下创建一个名为 myvenv 的虚拟环境:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">virtualenv --no-site-packages myvenv </code></pre>\n\n<p>参数 <code>--no-site-packages</code> 的意思是创建虚拟环境时，不复制主环境中安装的第三方包，也就是创建一个 “干净的” 虚拟环境</p>\n<p>virtualenv 还有很多参数，用于不同的使用场景，例如:</p>\n<ul>\n<li>-p: 用于指定 Python 解析器，就是安装好的 Python 应用程序，默认为当前环境中的 Python</li>\n<li>–no-pip：不需要安装 pip，默认为安装</li>\n<li>–clear：如果创建虚拟环境的目录已经有了其他虚拟环境，清楚重建</li>\n</ul>\n<h4 id=\"venv-模块\"><a href=\"#venv-模块\" class=\"headerlink\" title=\"venv 模块\"></a>venv 模块</h4><p>Python3.3 之后，可以用模块 venv 代替 virtualenv 工具，好处时不用单独安装，3.3 及之后的版本，都可以通过安装好的 Python 来创建虚拟环境:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">python -m venv myvenv</code></pre>\n\n<p>可以在当前目录创建一个名为 myvenv 的虚拟环境</p>\n<p>venv 有些才参数，不过相比 virtualenv 少了些，这里简单介绍几个：</p>\n<ul>\n<li>–without-pip: 不需要安装 pip，默认为安装</li>\n<li>–clear：如果创建虚拟环境的目录已经有了其他虚拟环境，清楚重建</li>\n</ul>\n<p>因为 venv 是依附于一个 Python 解析器创建的，所以不需要指定 Python 解释器版本</p>\n<h3 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h3><p>虚拟环境创建好后，需要激活才能在当前命令行中使用，可以理解成将当前命令行环境中 PATH 变量的值替换掉</p>\n<p>通过 virtualenv 和 模块 venv 创建的虚拟环境，激活方式是一样的，即运行激活脚本</p>\n<ul>\n<li><p>Windows 系统中，激活脚本路径是 <code>&lt;myvenv&gt;\\Scripts\\activate.bat</code>，如果是 powershell 命令行，脚本换成 <code>Activate.ps1</code> , 注意将 <code>&lt;myvenv&gt;</code> 换成你自己的虚拟环境目录</p>\n</li>\n<li><p>Linux 系统中，激活脚本路径是 <code>&lt;myvenv&gt;/bin/activate</code>，默认脚本没有执行权限，要么设置脚本为可执行，要么用 <code>source</code> 命令执行，例如</p>\n<p><code>$ source myvenv/bin/activate </code></p>\n</li>\n</ul>\n<p>激活后，可以在命令行行头看到虚拟环境标记</p>\n<h2 id=\"与开发工具配合\"><a href=\"#与开发工具配合\" class=\"headerlink\" title=\"与开发工具配合\"></a>与开发工具配合</h2><p>虽然通过激活脚本，很容易切换到虚拟环境，但是在实际开发中，还是不够方便，而且现在很多开发工具，特别是提供 Python 解析环境的开发工具，都可以和虚拟环境配合，在开发过程中几乎无感，对开发工作是很大的帮助</p>\n<h3 id=\"Visual-Studio-Code\"><a href=\"#Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio Code\"></a>Visual Studio Code</h3><p>VS Code 是个后起之秀，功能强大且具有丰富的插件资源，无疑是这两年发展最快的综合开发工具。现在的版本配置 Python 虚拟环境很简单，只需要选择一个 Python 解释器就好了</p>\n<p>同时按下 Ctrl+Shift+P, 在弹出的命令窗口中输入 “解析器”，然后在下拉列表中选择 “Python:选择解析器”，这里会缓存一些已经创建好的解析器，如果没有想要的，可以选择 “Enter interpreter path” 来选择解析器路径，即已经创建好的虚拟环境脚本文件夹中的 Python 程序，就可以创建一个新的解析器</p>\n<p><a href=\"http://www.justdopython.com/assets/images/2020/05/venv/02.png\"><img src=\"http://www.justdopython.com/assets/images/2020/05/venv/02.png\" alt=\"选择 Python 解析器\"></a></p>\n<p>如果编辑的是 Python 代码文件，在状态栏中也可以选择和切换解释器，更为方便</p>\n<p><a href=\"http://www.justdopython.com/assets/images/2020/05/venv/03.png\"><img src=\"http://www.justdopython.com/assets/images/2020/05/venv/03.png\" alt=\"选择 Python 解析器\"></a></p>\n<h3 id=\"Pycharm\"><a href=\"#Pycharm\" class=\"headerlink\" title=\"Pycharm\"></a>Pycharm</h3><p>Pycharm 应该是功能最好的 Python 开发工具，转为 Python 开发而生，除了基本的开发功能外，还提供项目创建、打包、测试等丰富功能，有很大的市场占有率</p>\n<p>创建项目时，在项目创建对话框中，可以创建或者选择已经已有的解析器</p>\n<p><a href=\"http://www.justdopython.com/assets/images/2020/05/venv/04.png\"><img src=\"http://www.justdopython.com/assets/images/2020/05/venv/04.png\" alt=\"选择 Python 解析器\"></a></p>\n<p>选择创建新的解析器时，需要选择创建虚拟环境的工具，如 virtualenv；指定虚拟环境的目录；选择 Python 基础解析器，同 virtualenv 工具的 -p 参数的效果；以及是否要继承基础解析器的第三方库 和 是否将这个虚拟环境作为默认环境，即创建其他项目时默认选择</p>\n<p>如果选择已存在的解析器，和 VS Code 差不多，可以选择已经缓存的或者指定解析器的路径</p>\n<h2 id=\"部署虚拟环境\"><a href=\"#部署虚拟环境\" class=\"headerlink\" title=\"部署虚拟环境\"></a>部署虚拟环境</h2><p>之所以在开发时选择虚拟环境，除了避免库之间的冲突，还有重要的原因时方便部署，因为虚拟环境时独立的，仅包含了项目相关的依赖库，所以部署的效率更高，风险更小</p>\n<p>一般部署流程是：</p>\n<ol>\n<li>开发完成后，使用 <code>pip freeze &gt; requirements.txt</code> 命令将项目的库依赖导出，作为代码的一部分</li>\n<li>将代码上传到服务器</li>\n<li>在服务器上创建一个虚拟环境</li>\n<li>激活虚拟环境，执行 <code>pip install -r requirements.txt</code>，安装项目依赖</li>\n</ol>\n<p>怎么运行项目，需要看项目的具体情况</p>\n<ul>\n<li>Web 项目 Web 项目一般使用 Django、Flask 的 Web 开发的提供 Web 服务的项目，部署时需要一个 Web 容器，作为程序的运行环境，容器的配置中都有一个虚拟环境的设置，其实是指定 Python 解析器的路径，将其设置为虚拟环境的目录或者 Python 解析器就可以了，启动时就用使用虚拟环境，并与其他环境隔离。例如 uWSGI 配置文件中 home 参数是用来指定解析器的。</li>\n<li>服务类项目 服务类项目就是需要以服务的形式长时间运行的，例如之前介绍的 公交闹钟，或者一些定时爬虫之类的，对于 Linux 而言，当前主流的服务方式是 Systemd，是一种比 init 更先进的服务管理工具，在服务脚本中， 设置 ExecStart 执行命令为全路径的虚拟环境的 Python 解析器，服务启动时，使用独立的虚拟环境了。 Windows 服务，对于达成 EXE 包的，不需要配置虚拟环境，因为打包时已经考虑了环境问题了，如果时脚本运行的话，需要指定全路径的 Python 解析器</li>\n<li>单次运行项目 对于一些测试或者实验性质的项目，大多数情况下手动执行，只要在激活的虚拟环境下，或者用特定的 Python 解析器运行就好了，和在开发过程中运行区别不大</li>\n</ul>\n<h2 id=\"其他虚拟环境管理工具\"><a href=\"#其他虚拟环境管理工具\" class=\"headerlink\" title=\"其他虚拟环境管理工具\"></a>其他虚拟环境管理工具</h2><ul>\n<li>virtualenvwrapper： 是对 virtualenv 的一个封装，还有针对 vim 用户和 emacs 用户的 扩展，能支持 bash/ksh/zsh</li>\n<li>virtualenvwrapper-win： 针对 Windows batch shell 的 virtualenvwrapper</li>\n<li>pyenv： 用来解决这类问题。它可以安装、卸载、编译、管理多个 python 版本，并随时将其中一个设置为工作环境</li>\n<li>pyenv-win： 针对 Windows 的 pyenv</li>\n</ul>\n","text":"Python 虚拟环境Python 之所以强大，除了语言本身的特性外，更重要的是拥有无所不及的第三方库。 依赖问题？ 包python 包库包库或者叫软件源是 Python 第三方软件的库的集合，或者市场，可以发布、下载和管理软件包，其中 pypi (Python Package ...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">Python 虚拟环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%85\"><span class=\"toc-text\">包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python-%E5%8C%85%E5%BA%93\"><span class=\"toc-text\">python 包库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python-%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8\"><span class=\"toc-text\">python 包管理器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83-1\"><span class=\"toc-text\">Python 虚拟环境</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">构建虚拟环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">创建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#virtualenv-%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">virtualenv 工具</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#venv-%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">venv 模块</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BF%80%E6%B4%BB\"><span class=\"toc-text\">激活</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%85%8D%E5%90%88\"><span class=\"toc-text\">与开发工具配合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Visual-Studio-Code\"><span class=\"toc-text\">Visual Studio Code</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Pycharm\"><span class=\"toc-text\">Pycharm</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">部署虚拟环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">其他虚拟环境管理工具</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/Django Model","date":"2023-03-08T00:28:42.137Z","updated":"2022-08-31T03:33:22.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/Django Model.json","keywords":null,"cover":null,"text":"Django Model参考文档 模型 | Django 文档 | Django (djangoproject.com) 详解Django的Models（django基础四）_Charles-Su的博客-CSDN博客_django model 内容：Model在项目中的意义模型准...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Java/JavaProject/eclipse","date":"2023-03-08T00:28:39.774Z","updated":"2021-10-02T17:00:16.000Z","comments":true,"path":"api/articles/Language Learning/Java/JavaProject/eclipse.json","keywords":null,"cover":null,"text":"Eclipse中有如下一些和运行调试相关的快捷键。 【Ctrl+Shift+B】：在当前行设置断点或取消设置的断点。 【F11】：调试最后一次执行的程序。 【Ctrl+F11】：运行最后一次执行的程序。 【F5】：跟踪到方法中，当程序执行到某方法时，可以按【F5】键跟踪到方法中。...","link":"","photos":[],"count_time":{"symbolsCount":147,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
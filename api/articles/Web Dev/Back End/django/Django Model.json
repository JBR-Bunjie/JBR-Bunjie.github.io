{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/Django Model","date":"2023-03-07T16:14:46.251Z","updated":"2022-08-31T03:33:22.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/Django Model.json","keywords":null,"cover":null,"content":"<h1 id=\"django-model\">Django Model</h1>\r\n<h2 id=\"参考文档\">参考文档</h2>\r\n<ul>\r\n<li><a\r\nhref=\"https://docs.djangoproject.com/zh-hans/4.1/topics/db/models/\">模型\r\n| Django 文档 | Django (djangoproject.com)</a></li>\r\n<li><a\r\nhref=\"https://blog.csdn.net/happygjcd/article/details/102649947\">详解Django的Models（django基础四）_Charles-Su的博客-CSDN博客_django\r\nmodel</a></li>\r\n<li></li>\r\n</ul>\r\n<h2 id=\"内容\">内容：</h2>\r\n<h3 id=\"model在项目中的意义\">Model在项目中的意义</h3>\r\n<p>模型准确且唯一的描述了数据。它包含储存数据的重要字段和行为。</p>\r\n<p>一般来说，每一个模型都映射一张数据库表。</p>\r\n<p>基础：</p>\r\n<ul>\r\n<li>每个模型都是一个 Python 的类，这些类继承 <a\r\nhref=\"https://docs.djangoproject.com/zh-hans/4.1/ref/models/instances/#django.db.models.Model\"><code>django.db.models.Model</code></a></li>\r\n<li>模型类的每个属性都相当于一个数据库的字段。</li>\r\n<li>利用这些，Django 提供了一个自动生成访问数据库的 API；请参阅 <a\r\nhref=\"https://docs.djangoproject.com/zh-hans/4.1/topics/db/queries/\">执行查询</a>。</li>\r\n</ul>\r\n<h3 id=\"model的构建\">Model的构建</h3>\r\n<h4 id=\"继承来源\">继承来源：</h4>\r\n<p>我们可以继承 <code>models.Model</code> , <code>AbstractUser</code>\r\n等来构建我们的新Model类</p>\r\n<p>其中</p>\r\n<h5 id=\"models.model\">models.Model:</h5>\r\n<p>Models则是通用的模型类，自定义模型都需要继承这个</p>\r\n<h5 id=\"abstractuser\">AbstractUser:</h5>\r\n<p>AbstractUser要记得在setting.py里面加上AUTH_USER_MODEL =\r\n‘users.UserProfile’</p>\r\n<p>AbstractUser是内置的用户类，当要继承内置的用户模型并进行扩展时，就使用它</p>\r\n<h4 id=\"inner-class----meta\">Inner Class -- Meta：</h4>\r\n<p>Model metadata is “anything that’s not a field”, such as ordering\r\noptions (<a\r\nhref=\"https://docs.djangoproject.com/en/4.1/ref/models/options/#django.db.models.Options.ordering\"><code>ordering</code></a>),\r\ndatabase table name (<a\r\nhref=\"https://docs.djangoproject.com/en/4.1/ref/models/options/#django.db.models.Options.db_table\"><code>db_table</code></a>),\r\nor human-readable singular and plural names (<a\r\nhref=\"https://docs.djangoproject.com/en/4.1/ref/models/options/#django.db.models.Options.verbose_name\"><code>verbose_name</code></a>\r\nand <a\r\nhref=\"https://docs.djangoproject.com/en/4.1/ref/models/options/#django.db.models.Options.verbose_name_plural\"><code>verbose_name_plural</code></a>).\r\nNone are required, and adding <code>class Meta</code> to a model is\r\ncompletely optional.</p>\r\n<p>A complete list of all possible <code>Meta</code> options can be\r\nfound in the <a\r\nhref=\"https://docs.djangoproject.com/en/4.1/ref/models/options/\">model\r\noption reference</a>.</p>\r\n<h4 id=\"基本属性与字段\">基本属性与字段：</h4>\r\n<h5 id=\"field类型\">1.field类型</h5>\r\n<p>AutoField:一个自动递增的整形字段，通常用于主键</p>\r\n<p>CharField：字符串字段，用于输入较短的字符，对应与HTML里面&lt;input\r\ntype='text'&gt;</p>\r\n<p>TextField：文本字段，用于输入较多的字符，对应html标签 &lt;input type\r\n= \"textarea\"&gt;；</p>\r\n<p>EmailField：邮箱字段，用于输入带有Email格式的字符</p>\r\n<p>DateFiled</p>\r\n<p>TimeFiled</p>\r\n<p>DateTimeField：日期字段，支持时间输入</p>\r\n<p>ImageField：用于上传图片并验证图片合法性，需定义upload_to参数，使用本字段需安装python\r\npillow等图片库</p>\r\n<p>IntegerField：整数字段，用于保持整数信息</p>\r\n<h5 id=\"field属性\">field属性</h5>\r\n<p>primary_key：设置True or False，定义此字段是否为主键</p>\r\n<p>default：设置默认值，可以设置默认的文本、时间、图片、时间等</p>\r\n<p>null：设置True or False，是否允许数据库字段为Null，默认为False</p>\r\n<p>blank：设置True or\r\nFalse，定义是否运行用户不输入，默认为False；若为True，则用户可以不输入此字段</p>\r\n<p>max_length：设置默认长度，一般在CharField、TextField、EmailField等文本字段设置</p>\r\n<p>verbose_name：设置该字段的名称，所有字段都可以设置，在Web页面会显示出来（例如将英文显示为中文）</p>\r\n<p>choices：设置该字段的可选值，本字段的值是一个二维元素的元祖；元素的第1个值为实际存储的值，第2个值为HTML页面显示的值</p>\r\n<p>upload_to：设置上传路径，ImageField和FileField字段需要设置此参数,如果路径不存在，会自动创建</p>\r\n<h5 id=\"meta类属性\">Meta类属性</h5>\r\n<p>verbose_name：设置对象名称（例如usecms），若没有设置，则默认为该类名的小写分词形式，例如类名为CamelCase会被转换为camel\r\ncase；</p>\r\n<p>verbose_name_plural：设置对象名称复数（例如usercms），一般设置跟verbose_name一样，</p>\r\n<p>verbose_name_plural=verbose_name否则会默认加s；</p>\r\n<p>db_table：设置映射的数据表名，默认为“应用名_模型名”，即用该模型所在app的名称加本模型类的名称</p>\r\n<p>proxy：设置True or\r\nFalse，设置本模型及所有继承本模型的子模型是否为代理模型；</p>\r\n<p>abstract：设置True or\r\nFalse，设置本模型类是否为抽象基类；如果是抽象基类，那么是不会创建这张表的，这张表用来作为基类被其他的表继承</p>\r\n<h5 id=\"model层的命令详解\">model层的命令详解</h5>\r\n<p>python manage.py makemigrations+名字:#\r\n生成数据库表的初始化文件initial.py文件</p>\r\n<p>python manage.py migrate# #\r\n基于数据库表初始化文件initial.py文件，正式生成数据表</p>\r\n<p>python manage.py sqlmigrate polls\r\n0001查看数据库的生成语句，因为initial.0001是数据库表的初始化文件</p>\r\n<h4 id=\"基本设计思路\">基本设计思路：</h4>\r\n","text":"Django Model 参考文档 模型 | Django 文档 | Django (djangoproject.com) 详解Django的Models（django基础四）_Charles-Su的博客-CSDN博客_django model 内容： Model在项目中的意义 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#django-model\"><span class=\"toc-text\">Django Model</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">参考文档</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">内容：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#model%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">Model在项目中的意义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#model%E7%9A%84%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">Model的构建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF%E6%9D%A5%E6%BA%90\"><span class=\"toc-text\">继承来源：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#models.model\"><span class=\"toc-text\">models.Model:</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#abstractuser\"><span class=\"toc-text\">AbstractUser:</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#inner-class----meta\"><span class=\"toc-text\">Inner Class -- Meta：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">基本属性与字段：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#field%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.field类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#field%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">field属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#meta%E7%B1%BB%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">Meta类属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#model%E5%B1%82%E7%9A%84%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">model层的命令详解</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">基本设计思路：</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/使用当前目录里venv中的python","date":"2023-03-07T16:14:46.254Z","updated":"2022-09-08T09:07:40.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/使用当前目录里venv中的python.json","keywords":null,"cover":null,"text":"Python 虚拟环境 Python 之所以强大，除了语言本身的特性外，更重要的是拥有无所不及的第三方库。 依赖问题？ 包 python 包库 包库或者叫软件源是 Python 第三方软件的库的集合，或者市场，可以发布、下载和管理软件包，其中 pypi (Python Packa...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/BuildUpYourApps","date":"2023-03-07T16:14:46.244Z","updated":"2022-09-09T03:18:44.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/BuildUpYourApps.json","keywords":null,"cover":null,"text":" remeber: we always do makemigrations and migrate when we change the models Step 1. create an app django-amdin startapp &lt;YourAppName&gt; ...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
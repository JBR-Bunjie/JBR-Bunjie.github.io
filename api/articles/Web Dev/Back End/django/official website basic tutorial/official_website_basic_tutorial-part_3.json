{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_3","date":"2023-03-07T16:14:46.267Z","updated":"2022-08-25T08:14:03.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_3.json","keywords":null,"cover":null,"content":"<h2 id=\"官网原教程：\"><a href=\"#官网原教程：\" class=\"headerlink\" title=\"官网原教程：\"></a>官网原教程：</h2><h3 id=\"PART-3：\"><a href=\"#PART-3：\" class=\"headerlink\" title=\"PART 3：\"></a>PART 3：</h3><p><a href=\"https://docs.djangoproject.com/en/4.0/intro/tutorial03/#raising-a-404-error\">Writing your first Django app, part 3 | Django documentation | Django (djangoproject.com)</a></p>\n<h4 id=\"概述：\"><a href=\"#概述：\" class=\"headerlink\" title=\"概述：\"></a>概述：</h4><ul>\n<li>编写处理http请求的函数</li>\n<li>在urls中，添加视图内容</li>\n<li></li>\n</ul>\n<h4 id=\"复述：\"><a href=\"#复述：\" class=\"headerlink\" title=\"复述：\"></a>复述：</h4><h5 id=\"1-编写处理http请求的函数：\"><a href=\"#1-编写处理http请求的函数：\" class=\"headerlink\" title=\"1. 编写处理http请求的函数：\"></a>1. 编写处理http请求的函数：</h5><p>示例函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from django.http import HttpResponse\nfrom .models import Question\n\ndef index(request):\n    latest_question_list &#x3D; Question.objects.order_by(&#39;-pub_date&#39;)[:5]\n    output &#x3D; &#39;, &#39;.join([q.question_text for q in latest_question_list])\n    return HttpResponse(output)\n# 我们也可以使用这样的方式：在html文件中编写特殊语句并通过render函数及HttpResponse返回给前端\n# 需要额外引入：&#96;from django.template import loader&#96;\n#   template &#x3D; loader.get_template(&#39;polls&#x2F;index.html&#39;)\n#   context &#x3D; &#123;\n#       &#39;latest_question_list&#39;: latest_question_list,\n#   &#125;\n#   return HttpResponse(template.render(context, request))\n\n# 当然也可以使用shortcuts中的render函数：https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;zh-hans&#x2F;4.0&#x2F;intro&#x2F;tutorial03&#x2F;#a-shortcut-render\ndef detail(request, question_id):\n    try:\n        question &#x3D; Question.objects.get(pk&#x3D;question_id)\n    except Question.DoesNotExist:\n        raise Http404(&quot;Question does not exist&quot;)\n    return render(request, &#39;polls&#x2F;detail.html&#39;, &#123;&#39;question&#39;: question&#125;)\n\ndef results(request, question_id):\n    response &#x3D; &quot;You&#39;re looking at the results of question %s.&quot;\n    return HttpResponse(response % question_id)\n\ndef vote(request, question_id):\n    return HttpResponse(&quot;You&#39;re voting on question %s.&quot; % question_id)</code></pre>\n\n<p>这些函数实际需要做的只有两件事：</p>\n<ul>\n<li>按需求处理请求，或者抛出异常</li>\n<li>返回处理结果或者错误信息</li>\n</ul>\n<p>在处理的过程中，我们从数据库里读取必要信息以参与处理，以达成我们的目的。以上方代码中的<code>index</code>函数为例，我们读取了数据库中以日期为序的最近5个问题，并在后续处理中进行合并并以逗号<code>,</code>分割，最后返回一个<code>HttpResponse</code>对象来完成本次请求。</p>\n<p>如果收到的请求无效，我们应当以适当的方式抛出错误，请注意在处理时将model层和view层相分离：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>为什么我们使用辅助函数 <a href=\"https://docs.djangoproject.com/zh-hans/4.0/topics/http/shortcuts/#django.shortcuts.get_object_or_404\"><code>get_object_or_404()</code></a> 而不是自己捕获 <a href=\"https://docs.djangoproject.com/zh-hans/4.0/ref/exceptions/#django.core.exceptions.ObjectDoesNotExist\"><code>ObjectDoesNotExist</code></a> 异常呢？还有，为什么模型 API 不直接抛出 <a href=\"https://docs.djangoproject.com/zh-hans/4.0/ref/exceptions/#django.core.exceptions.ObjectDoesNotExist\"><code>ObjectDoesNotExist</code></a> 而是抛出 <a href=\"https://docs.djangoproject.com/zh-hans/4.0/topics/http/views/#django.http.Http404\"><code>Http404</code></a> 呢？</p>\n<p>因为这样做会增加模型层和视图层的耦合性。指导 Django 设计的最重要的思想之一就是要保证松散耦合。一些受控的耦合将会被包含在 <a href=\"https://docs.djangoproject.com/zh-hans/4.0/topics/http/shortcuts/#module-django.shortcuts\"><code>django.shortcuts</code></a> 模块中。</p>\n<p><a href=\"https://docs.djangoproject.com/zh-hans/4.0/intro/tutorial03/#a-shortcut-get-object-or-404\">编写你的第一个 Django 应用，第 3 部分 | Django 文档 | Django (djangoproject.com)</a></p></blockquote>\n<p>为了便于构建views，django提供了一套template系统:，可至<a href=\"https://docs.djangoproject.com/zh-hans/4.0/topics/templates/\">模板 | Django 文档 | Django (djangoproject.com)</a>查看</p>\n<h5 id=\"2-编写urls\"><a href=\"#2-编写urls\" class=\"headerlink\" title=\"2. 编写urls\"></a>2. 编写urls</h5><p>编写好对应请求的处理函数后，自然要把它们挂载到对应的url路径上，此时便需要修改project module和当前app中的urls文件</p>\n<p>project module内urls - 示例内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">urlpatterns &#x3D; [\n    path(&#39;admin&#x2F;&#39;, admin.site.urls),\n    path(&#39;polls&#x2F;&#39;, include(&#39;polls.urls&#39;))\n]</code></pre>\n\n<p>app内urls - 示例内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from django.urls import path\nfrom . import views\n\nurlpatterns &#x3D; [\n    # ex: &#x2F;polls&#x2F;\n    path(&#39;&#39;, views.index, name&#x3D;&#39;index&#39;),\n    # ex: &#x2F;polls&#x2F;5&#x2F;\n    path(&#39;&lt;int:question_id&gt;&#x2F;&#39;, views.detail, name&#x3D;&#39;detail&#39;),\n    # ex: &#x2F;polls&#x2F;5&#x2F;results&#x2F;\n    path(&#39;&lt;int:question_id&gt;&#x2F;results&#x2F;&#39;, views.results, name&#x3D;&#39;results&#39;),\n    # ex: &#x2F;polls&#x2F;5&#x2F;vote&#x2F;\n    path(&#39;&lt;int:question_id&gt;&#x2F;vote&#x2F;&#39;, views.vote, name&#x3D;&#39;vote&#39;),\n]</code></pre>\n\n<p>如果你转到 “/polls/34/“ ，Django 将会运行 <code>detail()</code> 方法并且展示你在 URL 里提供的问题 ID。也就是说当某人请求你网站的某一页面时——比如”/polls/34/“，那么Django 将会根据配置项 <a href=\"https://docs.djangoproject.com/zh-hans/4.0/ref/settings/#std-setting-ROOT_URLCONF\"><code>ROOT_URLCONF</code></a> 中的设置载入 <code>mysite.urls</code> 模块，然后寻找名为 <code>urlpatterns</code> 变量并且按序匹配正则表达式。在找到匹配项 <code>&#39;polls/&#39;</code>，它切掉了匹配的文本（<code>&quot;polls/&quot;</code>），将剩余文本——<code>&quot;34/&quot;</code>，发送至 ‘polls.urls’ URLconf 做进一步处理。在这里剩余文本匹配了 <code>&#39;&lt;int:question_id&gt;/&#39;</code>，使得我们 Django 以如下形式调用 <code>detail()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">detail(request&#x3D;&lt;HttpRequest object&gt;, question_id&#x3D;34)</code></pre>\n\n<p>这样便完成了基本的前后端交互</p>\n","text":"官网原教程：PART 3：Writing your first Django app, part 3 | Django documentation | Django (djangoproject.com) 概述： 编写处理http请求的函数 在urls中，添加视图内容 复述：1....","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%98%E7%BD%91%E5%8E%9F%E6%95%99%E7%A8%8B%EF%BC%9A\"><span class=\"toc-text\">官网原教程：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PART-3%EF%BC%9A\"><span class=\"toc-text\">PART 3：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">概述：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">复述：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%BC%96%E5%86%99%E5%A4%84%E7%90%86http%E8%AF%B7%E6%B1%82%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">1. 编写处理http请求的函数：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E7%BC%96%E5%86%99urls\"><span class=\"toc-text\">2. 编写urls</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_4","date":"2023-03-07T16:14:46.270Z","updated":"2022-08-22T11:20:24.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_4.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_2","date":"2023-03-07T16:14:46.264Z","updated":"2022-08-24T08:17:47.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_2.json","keywords":null,"cover":null,"text":"官网原教程：PART 2：Writing your first Django app, part 2 | Django documentation | Django (djangoproject.com) 概述： 建立数据库：基于sqlite数据库，介绍project modul...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
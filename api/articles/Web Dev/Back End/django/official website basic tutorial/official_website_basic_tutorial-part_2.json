{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_2","date":"2023-03-07T16:14:46.264Z","updated":"2022-08-24T08:17:47.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_2.json","keywords":null,"cover":null,"content":"<h2 id=\"官网原教程\">官网原教程：</h2>\r\n<h3 id=\"part-2\">PART 2：</h3>\r\n<p><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/intro/tutorial02/\">Writing\r\nyour first Django app, part 2 | Django documentation | Django\r\n(djangoproject.com)</a></p>\r\n<h4 id=\"概述\">概述：</h4>\r\n<ul>\r\n<li>建立数据库：基于sqlite数据库，介绍project\r\nmodule下settings中包括如何更换其他数据库的部分内容，并通过migrate命令快速创建所需数据库</li>\r\n<li></li>\r\n</ul>\r\n<h4 id=\"复述\">复述：</h4>\r\n<h5 id=\"建立数据库\">1. 建立数据库</h5>\r\n<h6 id=\"a.-确认数据库设置\">a. 确认数据库设置</h6>\r\n<p>Django默认使用SQLite作为默认数据库，因为这是Python内置的数据库。</p>\r\n<p>如果需要更换别的数据库的话，首先需要安装合适的database\r\nbindings，然后改变project module下settings文件中的设置文件中\r\n<code>DATABASES</code> <code>'default'</code>\r\n项目中的一些键值，包括：</p>\r\n<blockquote>\r\n<ul>\r\n<li><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/settings/#std-setting-DATABASE-ENGINE\"><code>ENGINE</code></a>\r\n– Either <code>'django.db.backends.sqlite3'</code>,\r\n<code>'django.db.backends.postgresql'</code>,\r\n<code>'django.db.backends.mysql'</code>, or\r\n<code>'django.db.backends.oracle'</code>. Other backends are <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/databases/#third-party-notes\">also\r\navailable</a>.</li>\r\n<li><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/settings/#std-setting-NAME\"><code>NAME</code></a>\r\n– The name of your database. If you’re using SQLite, the database will\r\nbe a file on your computer; in that case, <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/settings/#std-setting-NAME\"><code>NAME</code></a>\r\nshould be the full absolute path, including filename, of that file. The\r\ndefault value, <code>BASE_DIR / 'db.sqlite3'</code>, will store the file\r\nin your project directory.</li>\r\n</ul>\r\n</blockquote>\r\n<p>并且如果不使用 SQLite，则必须添加更多内容，比如 <a\r\nhref=\"https://docs.djangoproject.com/zh-hans/4.0/ref/settings/#std-setting-USER\"><code>USER</code></a>\r\n、 <a\r\nhref=\"https://docs.djangoproject.com/zh-hans/4.0/ref/settings/#std-setting-PASSWORD\"><code>PASSWORD</code></a>\r\n、 <a\r\nhref=\"https://docs.djangoproject.com/zh-hans/4.0/ref/settings/#std-setting-HOST\"><code>HOST</code></a>\r\n等。更多内容请查阅文档：<a\r\nhref=\"https://docs.djangoproject.com/zh-hans/4.0/ref/settings/#std-setting-DATABASES\"><code>DATABASES</code></a>\r\n。</p>\r\n<blockquote>\r\n<p>如果你使用了 SQLite\r\n以外的数据库，请确认在使用前已经创建了数据库。你可以通过在你的数据库交互式命令行中使用\r\n\"<code>CREATE DATABASE database_name;</code>\" 命令来完成这件事。</p>\r\n<p>另外，还要确保该数据库用户中提供 <code>mysite/settings.py</code> 具有\r\n\"create database\" 权限。这使得自动创建的 <a\r\nhref=\"https://docs.djangoproject.com/zh-hans/4.0/topics/testing/overview/#the-test-database\">test\r\ndatabase</a> 能被以后的教程使用。</p>\r\n<p>如果你使用\r\nSQLite，那么你不需要在使用前做任何事——数据库会在需要的时候自动创建。</p>\r\n</blockquote>\r\n<h6 id=\"b.-按规则设置时区\">b. 按规则设置时区</h6>\r\n<p>注意时区属性的格式</p>\r\n<h6 id=\"c.-check-installed_apps-items\">c. check\r\n<code>INSTALLED_APPS</code> items</h6>\r\n<p>the item, <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/settings/#std-setting-INSTALLED_APPS\"><code>INSTALLED_APPS</code></a>\r\nsetting at the top of the file, holds the names of all Django\r\napplications that are <strong>activated</strong> in this Django\r\ninstance.</p>\r\n<p>Apps can be used in multiple projects, and you can package and\r\ndistribute them for use by others in their projects.</p>\r\n<blockquote>\r\n<p>By default, <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/settings/#std-setting-INSTALLED_APPS\"><code>INSTALLED_APPS</code></a>\r\ncontains the following apps, all of which come with Django:</p>\r\n<ul>\r\n<li><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#module-django.contrib.admin\"><code>django.contrib.admin</code></a>\r\n– The admin site. You’ll use it shortly.</li>\r\n<li><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/topics/auth/#module-django.contrib.auth\"><code>django.contrib.auth</code></a>\r\n– An authentication system.</li>\r\n<li><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/contrib/contenttypes/#module-django.contrib.contenttypes\"><code>django.contrib.contenttypes</code></a>\r\n– A framework for content types.</li>\r\n<li><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/topics/http/sessions/#module-django.contrib.sessions\"><code>django.contrib.sessions</code></a>\r\n– A session framework.</li>\r\n<li><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/contrib/messages/#module-django.contrib.messages\"><code>django.contrib.messages</code></a>\r\n– A messaging framework.</li>\r\n<li><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/contrib/staticfiles/#module-django.contrib.staticfiles\"><code>django.contrib.staticfiles</code></a>\r\n– A framework for managing static files.</li>\r\n</ul>\r\n<p>These applications are included by default as a convenience for the\r\ncommon case.</p>\r\n</blockquote>\r\n<p>Some of these applications make use of at least one database table,\r\nthough, so we need to create the tables in the database before we can\r\nuse them. To do that, run the following command:</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">py manage.py migrate</code></pre>\r\n<p>as we said before \"the database file will be created automatically\r\nwhen it is needed.\", the sqlite database finally appeared with those\r\ntables above.</p>\r\n<blockquote>\r\n<p>The <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/#django-admin-migrate\"><code>migrate</code></a>\r\ncommand looks at the <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/settings/#std-setting-INSTALLED_APPS\"><code>INSTALLED_APPS</code></a>\r\nsetting and creates any necessary database tables according to the\r\ndatabase settings in your <code>mysite/settings.py</code> file and the\r\ndatabase migrations shipped with the app (we’ll cover those later).\r\nYou’ll see a message for each migration it applies. If you’re\r\ninterested, run the command-line client for your database and type\r\n<code>\\dt</code> (PostgreSQL), <code>SHOW TABLES;</code> (MariaDB,\r\nMySQL), <code>.tables</code> (SQLite), or\r\n<code>SELECT TABLE_NAME FROM USER_TABLES;</code> (Oracle) to display the\r\ntables Django created.</p>\r\n</blockquote>\r\n<h5 id=\"model文件编写\">2. model文件编写</h5>\r\n<blockquote>\r\n<p>Now we’ll define your models – essentially, your database layout,\r\nwith additional metadata.</p>\r\n<p>在 Django 里写一个数据库驱动的 Web 应用的第一步是定义模型 -\r\n也就是数据库结构设计和附加的其它元数据。</p>\r\n</blockquote>\r\n<h6 id=\"a.-什么是一个model\">a. 什么是一个model？</h6>\r\n<blockquote>\r\n<p><strong>Philosophy</strong></p>\r\n<p>A model is the single, definitive source of information about your\r\ndata. It contains the essential fields and behaviors of the data you’re\r\nstoring. Django follows the <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/misc/design-philosophies/#dry\">DRY\r\nPrinciple</a>. The goal is to define your data model in one place and\r\nautomatically derive things from it.</p>\r\n<p>This includes the migrations - unlike in Ruby On Rails, for example,\r\nmigrations are entirely derived from your models file, and are\r\nessentially a history that Django can roll through to update your\r\ndatabase schema to match your current models.</p>\r\n</blockquote>\r\n<h6 id=\"b.-examples\">b. examples</h6>\r\n<p>In our poll app, we’ll create two models: <code>Question</code> and\r\n<code>Choice</code>.</p>\r\n<ul>\r\n<li>A <code>Question</code> has a question and a publication date.</li>\r\n<li>A <code>Choice</code> has two fields: the text of the choice and a\r\nvote tally. Each <code>Choice</code> is associated with a\r\n<code>Question</code>.</li>\r\n</ul>\r\n<p>These concepts are represented by Python classes. Edit the\r\n<code>polls/models.py</code> file so it looks like this:</p>\r\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from django.db import models\n\nclass Question(models.Model):\n    question_text &#x3D; models.CharField(max_length&#x3D;200)\n    pub_date &#x3D; models.DateTimeField(&#39;date published&#39;)\n\nclass Choice(models.Model):\n    question &#x3D; models.ForeignKey(Question, on_delete&#x3D;models.CASCADE)\n    choice_text &#x3D; models.CharField(max_length&#x3D;200)\n    votes &#x3D; models.IntegerField(default&#x3D;0)</code></pre>\r\n<p>Here, <strong>each model is represented by a class that subclasses <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/instances/#django.db.models.Model\"><code>django.db.models.Model</code></a>.\r\nEach model has a number of class variables, each of which represents a\r\ndatabase field in the model.</strong></p>\r\n<p>Each field is represented by an instance of a <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.Field\"><code>Field</code></a>\r\nclass – e.g., <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.CharField\"><code>CharField</code></a>\r\nfor character fields and <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.DateTimeField\"><code>DateTimeField</code></a>\r\nfor datetimes. This tells Django what type of data each field holds.</p>\r\n<p><strong>The name of each <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.Field\"><code>Field</code></a>\r\ninstance (e.g. <code>question_text</code> or <code>pub_date</code>) is\r\nthe field’s name</strong>, in machine-friendly format. You’ll use this\r\nvalue in your Python code, and your database will use it as the column\r\nname.</p>\r\n<p>You can use an optional first positional argument to a <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.Field\"><code>Field</code></a>\r\nto designate a human-readable name. That’s used in a couple of\r\nintrospective parts of Django, and it doubles as documentation. If this\r\nfield isn’t provided, Django will use the machine-readable name. In this\r\nexample, we’ve only defined a human-readable name for\r\n<code>Question.pub_date</code>. For all other fields in this model, the\r\nfield’s machine-readable name will suffice as its human-readable\r\nname.</p>\r\n<p><strong>Some <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.Field\"><code>Field</code></a>\r\nclasses have required arguments.</strong> <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.CharField\"><code>CharField</code></a>,\r\nfor example, requires that you give it a <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.CharField.max_length\"><code>max_length</code></a>.\r\nThat’s used not only in the database schema, but in validation, as we’ll\r\nsoon see.</p>\r\n<p>A <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.Field\"><code>Field</code></a>\r\ncan also have various optional arguments; in this case, we’ve set the <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.Field.default\"><code>default</code></a>\r\nvalue of <code>votes</code> to 0.</p>\r\n<p>Finally, note a relationship is defined, using <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/models/fields/#django.db.models.ForeignKey\"><code>ForeignKey</code></a>.\r\nThat tells Django each <code>Choice</code> is related to a single\r\n<code>Question</code>. Django supports all the common database\r\nrelationships: many-to-one, many-to-many, and one-to-one.</p>\r\n<h5 id=\"激活你的model\">3. 激活你的model</h5>\r\n<blockquote>\r\n<p>That small bit of model code gives Django a lot of information. With\r\nit, Django is able to:</p>\r\n<ul>\r\n<li>Create a database schema (<code>CREATE TABLE</code> statements) for\r\nthis app.</li>\r\n<li>Create a Python database-access API for accessing\r\n<code>Question</code> and <code>Choice</code> objects.</li>\r\n</ul>\r\n</blockquote>\r\n<p>first we need to tell our project that the <code>polls</code> app is\r\ninstalled.</p>\r\n<ul>\r\n<li>add the <code>'polls.apps.PollsConfig'</code> (see\r\n<code>polls/apps.py</code>) to <code>INSTALLED_APPS</code></li>\r\n<li>run the command <code>py manage.py makemigrations polls</code>, you\r\nshould see the output like: &gt; Migrations for 'polls': &gt;\r\npolls/migrations/0001_initial.py &gt; - Create model Question &gt; -\r\nCreate model Choice</li>\r\n</ul>\r\n<blockquote>\r\n<blockquote>\r\n<p>more about command <strong><code>makemigrations</code></strong>:</p>\r\n<p>By running <strong><code>makemigrations</code></strong>, you’re\r\ntelling Django that you’ve made some changes to your models (in this\r\ncase, you’ve made new ones) and that you’d like the changes to be stored\r\nas a <em>migration</em>.</p>\r\n<p>Migrations are how Django stores changes to your models (and thus\r\nyour database schema) - they’re files on disk. You can read the\r\nmigration for your new model if you like; it’s the file\r\n<code>polls/migrations/0001_initial.py</code>. Don’t worry, you’re not\r\nexpected to read them every time Django makes one, but they’re designed\r\nto be human-editable in case you want to manually tweak how Django\r\nchanges things.</p>\r\n</blockquote>\r\n</blockquote>\r\n<p>To run the migrations and manage your database schema automatically -\r\nusing the command <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/#django-admin-migrate\"><code>migrate</code></a>\r\nfirst. let’s see what SQL that migration would run. The <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/#django-admin-sqlmigrate\"><code>sqlmigrate</code></a>\r\ncommand takes migration names and returns their SQL:</p>\r\n<ul>\r\n<li><p><code>py manage.py sqlmigrate polls 0001</code></p>\r\n<blockquote>\r\n<p>You should see something similar to the following (we’ve reformatted\r\nit for readability):</p>\r\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN;\n--\n-- Create model Question\n--\nCREATE TABLE &quot;polls_question&quot; (\n    &quot;id&quot; serial NOT NULL PRIMARY KEY,\n    &quot;question_text&quot; varchar(200) NOT NULL,\n    &quot;pub_date&quot; timestamp with time zone NOT NULL\n);\n--\n-- Create model Choice\n--\nCREATE TABLE &quot;polls_choice&quot; (\n    &quot;id&quot; serial NOT NULL PRIMARY KEY,\n    &quot;choice_text&quot; varchar(200) NOT NULL,\n    &quot;votes&quot; integer NOT NULL,\n    &quot;question_id&quot; integer NOT NULL\n);\nALTER TABLE &quot;polls_choice&quot;\n  ADD CONSTRAINT &quot;polls_choice_question_id_c5b4b260_fk_polls_question_id&quot;\n    FOREIGN KEY (&quot;question_id&quot;)\n    REFERENCES &quot;polls_question&quot; (&quot;id&quot;)\n    DEFERRABLE INITIALLY DEFERRED;\nCREATE INDEX &quot;polls_choice_question_id_c5b4b260&quot; ON &quot;polls_choice&quot; (&quot;question_id&quot;);\n\nCOMMIT;</code></pre>\r\n<p>Note the following:</p>\r\n<ul>\r\n<li>The exact output will vary depending on the database you are using.\r\nThe example above is generated for PostgreSQL.</li>\r\n<li>Table names are automatically generated by combining the name of the\r\napp (<code>polls</code>) and the lowercase name of the model –\r\n<code>question</code> and <code>choice</code>. (You can override this\r\nbehavior.)</li>\r\n<li>Primary keys (IDs) are added automatically. (You can override this,\r\ntoo.)</li>\r\n<li>By convention, Django appends <code>\"_id\"</code> to the foreign key\r\nfield name. (Yes, you can override this, as well.)</li>\r\n<li>The foreign key relationship is made explicit by a\r\n<code>FOREIGN KEY</code> constraint. Don’t worry about the\r\n<code>DEFERRABLE</code> parts; it’s telling PostgreSQL to not enforce\r\nthe foreign key until the end of the transaction.</li>\r\n<li>It’s tailored to the database you’re using, so database-specific\r\nfield types such as <code>auto_increment</code> (MySQL),\r\n<code>serial</code> (PostgreSQL), or\r\n<code>integer primary key autoincrement</code> (SQLite) are handled for\r\nyou automatically. Same goes for the quoting of field names – e.g.,\r\nusing double quotes or single quotes.</li>\r\n<li>The <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/#django-admin-sqlmigrate\"><code>sqlmigrate</code></a>\r\ncommand doesn’t actually run the migration on your database - instead,\r\nit prints it to the screen so that you can see what SQL Django thinks is\r\nrequired. It’s useful for checking what Django is going to do or if you\r\nhave database administrators who require SQL scripts for changes.</li>\r\n</ul>\r\n<p>If you’re interested, you can also run <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/#django-admin-check\"><code>python manage.py check</code></a>;\r\nthis checks for any problems in your project without making migrations\r\nor touching the database.</p>\r\n<p>Now, run <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/#django-admin-migrate\"><code>migrate</code></a>\r\nagain to create those model tables in your database:</p>\r\n</blockquote></li>\r\n<li><p><code>py manage.py migrate</code></p>\r\n<blockquote>\r\n<p>The <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/#django-admin-migrate\"><code>migrate</code></a>\r\ncommand takes all the migrations that haven’t been applied (Django\r\ntracks which ones are applied using a special table in your database\r\ncalled <code>django_migrations</code>) and runs them against your\r\ndatabase - essentially, synchronizing the changes you made to your\r\nmodels with the schema in the database.</p>\r\n<p>Migrations are very powerful and let you change your models over\r\ntime, as you develop your project, without the need to delete your\r\ndatabase or tables and make new ones - it specializes in upgrading your\r\ndatabase live, without losing data. We’ll cover them in more depth in a\r\nlater part of the tutorial, but for now, remember the three-step guide\r\nto making model changes:</p>\r\n<ul>\r\n<li>Change your models (in <code>models.py</code>).</li>\r\n<li>Run <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/#django-admin-makemigrations\"><code>python manage.py makemigrations</code></a>\r\nto create migrations for those changes</li>\r\n<li>Run <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/#django-admin-migrate\"><code>python manage.py migrate</code></a>\r\nto apply those changes to the database.</li>\r\n</ul>\r\n<p>The reason that there are separate commands to make and apply\r\nmigrations is because you’ll commit migrations to your version control\r\nsystem and ship them with your app; they not only make your development\r\neasier, they’re also usable by other developers and in production.</p>\r\n<p>Read the <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/\">django-admin\r\ndocumentation</a> for full information on what the\r\n<code>manage.py</code> utility can do.</p>\r\n</blockquote></li>\r\n</ul>\r\n<h5 id=\"完善model初试api\">4. 完善model，初试api</h5>\r\n<p>Now, let’s hop into the interactive Python shell and play around with\r\nthe free API Django gives you. To invoke the Python shell, use this\r\ncommand:</p>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">py manage.py shell</code></pre>\r\n<p>We’re using this instead of simply typing “python”, because\r\n<code>manage.py</code> sets the <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/topics/settings/#envvar-DJANGO_SETTINGS_MODULE\"><code>DJANGO_SETTINGS_MODULE</code></a>\r\nenvironment variable, which gives Django the Python import path to your\r\n<code>mysite/settings.py</code> file.</p>\r\n<p>You can try these <strong>database api</strong> below:</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; from polls.models import Choice, Question  # Import the model classes we just wrote.\n\n# No questions are in the system yet.\n&gt;&gt;&gt; Question.objects.all()\n&lt;QuerySet []&gt;\n\n# Create a new Question.\n# Support for time zones is enabled in the default settings file, so\n# Django expects a datetime with tzinfo for pub_date. Use timezone.now()\n# instead of datetime.datetime.now() and it will do the right thing.\n&gt;&gt;&gt; from django.utils import timezone\n&gt;&gt;&gt; q &#x3D; Question(question_text&#x3D;&quot;What&#39;s new?&quot;, pub_date&#x3D;timezone.now())\n\n# Save the object into the database. You have to call save() explicitly.\n&gt;&gt;&gt; q.save()\n\n# Now it has an ID.\n&gt;&gt;&gt; q.id\n1\n\n# Access model field values via Python attributes.\n&gt;&gt;&gt; q.question_text\n&quot;What&#39;s new?&quot;\n&gt;&gt;&gt; q.pub_date\ndatetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo&#x3D;&lt;UTC&gt;)\n\n# Change values by changing the attributes, then calling save().\n&gt;&gt;&gt; q.question_text &#x3D; &quot;What&#39;s up?&quot;\n&gt;&gt;&gt; q.save()\n\n# objects.all() displays all the questions in the database.\n&gt;&gt;&gt; Question.objects.all()\n&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;\n</code></pre>\r\n<p>我们可以为类内添加__str__()方法来快速查看项目内容</p>\r\n<blockquote>\r\n<p><a href=\"https://www.runoob.com/note/41154\">Python\r\n<strong>str</strong>() 方法 (runoob.com)</a></p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text # Choice类同理</code></pre>\r\n<p>这样当我们查看内容时就能看到</p>\r\n<blockquote>\r\n<p>&gt;&gt;&gt; Question.objects.all() &lt;QuerySet [&lt;Question:\r\nWhat's up?&gt;]&gt;</p>\r\n</blockquote>\r\n<p>当然也可以添加别的“正常的功能”，如：</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Question(models.Model):\n    # ...\n    def was_published_recently(self):\n        return self.pub_date &gt;&#x3D; timezone.now() - datetime.timedelta(days&#x3D;1)</code></pre>\r\n<p>更多操作:</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; from polls.models import Choice, Question\n\n# Make sure our __str__() addition worked.\n&gt;&gt;&gt; Question.objects.all()\n&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;\n\n# Django provides a rich database lookup API that&#39;s entirely driven by\n# keyword arguments.\n&gt;&gt;&gt; Question.objects.filter(id&#x3D;1)\n&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;\n&gt;&gt;&gt; Question.objects.filter(question_text__startswith&#x3D;&#39;What&#39;)\n&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;\n\n# Get the question that was published this year.\n&gt;&gt;&gt; from django.utils import timezone\n&gt;&gt;&gt; current_year &#x3D; timezone.now().year\n&gt;&gt;&gt; Question.objects.get(pub_date__year&#x3D;current_year)\n&lt;Question: What&#39;s up?&gt;\n\n# Request an ID that doesn&#39;t exist, this will raise an exception.\n&gt;&gt;&gt; Question.objects.get(id&#x3D;2)\nTraceback (most recent call last):\n    ...\nDoesNotExist: Question matching query does not exist.\n\n# Lookup by a primary key is the most common case, so Django provides a\n# shortcut for primary-key exact lookups.\n# The following is identical to Question.objects.get(id&#x3D;1).\n&gt;&gt;&gt; Question.objects.get(pk&#x3D;1)\n&lt;Question: What&#39;s up?&gt;\n\n# Make sure our custom method worked.\n&gt;&gt;&gt; q &#x3D; Question.objects.get(pk&#x3D;1)\n&gt;&gt;&gt; q.was_published_recently()\nTrue\n\n# Give the Question a couple of Choices. The create call constructs a new\n# Choice object, does the INSERT statement, adds the choice to the set\n# of available choices and returns the new Choice object. Django creates\n# a set to hold the &quot;other side&quot; of a ForeignKey relation\n# (e.g. a question&#39;s choice) which can be accessed via the API.\n&gt;&gt;&gt; q &#x3D; Question.objects.get(pk&#x3D;1)\n\n# Display any choices from the related object set -- none so far.\n&gt;&gt;&gt; q.choice_set.all()\n&lt;QuerySet []&gt;\n\n# Create three choices.\n&gt;&gt;&gt; q.choice_set.create(choice_text&#x3D;&#39;Not much&#39;, votes&#x3D;0)\n&lt;Choice: Not much&gt;\n&gt;&gt;&gt; q.choice_set.create(choice_text&#x3D;&#39;The sky&#39;, votes&#x3D;0)\n&lt;Choice: The sky&gt;\n&gt;&gt;&gt; c &#x3D; q.choice_set.create(choice_text&#x3D;&#39;Just hacking again&#39;, votes&#x3D;0)\n\n# Choice objects have API access to their related Question objects.\n&gt;&gt;&gt; c.question\n&lt;Question: What&#39;s up?&gt;\n\n# And vice versa: Question objects get access to Choice objects.\n&gt;&gt;&gt; q.choice_set.all()\n&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;\n&gt;&gt;&gt; q.choice_set.count()\n3\n\n# The API automatically follows relationships as far as you need.\n# Use double underscores to separate relationships.\n# This works as many levels deep as you want; there&#39;s no limit.\n# Find all Choices for any question whose pub_date is in this year\n# (reusing the &#39;current_year&#39; variable we created above).\n&gt;&gt;&gt; Choice.objects.filter(question__pub_date__year&#x3D;current_year)\n&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;\n\n# Let&#39;s delete one of the choices. Use delete() for that.\n&gt;&gt;&gt; c &#x3D; q.choice_set.filter(choice_text__startswith&#x3D;&#39;Just hacking&#39;)\n&gt;&gt;&gt; c.delete()</code></pre>\r\n<h5 id=\"试用admin端\">5. 试用admin端</h5>\r\n<p>create a admin user</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">py manage.py createsuperuser</code></pre>\r\n<p>Start your server, make sure you have added the admin site to\r\nurls.py. Then follow the urls to open the admin page, you will see the\r\nlogin page. After that, you should see the Django admin index page,\r\nwithout your polls app though(if you follow the tutorial completely)</p>\r\n<blockquote>\r\n<p>Only one more thing to do: we need to tell the admin that\r\n<code>Question</code> objects have an admin interface. To do this, open\r\nthe <code>polls/admin.py</code> file, and edit it to look like this:</p>\r\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&gt;from django.contrib import admin\n\n&gt;from .models import Question\n\n&gt;admin.site.register(Question)</code></pre>\r\n</blockquote>\r\n<p>Now that we’ve registered <code>Question</code>, Django knows that it\r\nshould be displayed on the admin index page.</p>\r\n","text":"官网原教程： PART 2： Writing your first Django app, part 2 | Django documentation | Django (djangoproject.com) 概述： 建立数据库：基于sqlite数据库，介绍project mod...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%98%E7%BD%91%E5%8E%9F%E6%95%99%E7%A8%8B\"><span class=\"toc-text\">官网原教程：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#part-2\"><span class=\"toc-text\">PART 2：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E8%BF%B0\"><span class=\"toc-text\">复述：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">1. 建立数据库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#a.-%E7%A1%AE%E8%AE%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">a. 确认数据库设置</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#b.-%E6%8C%89%E8%A7%84%E5%88%99%E8%AE%BE%E7%BD%AE%E6%97%B6%E5%8C%BA\"><span class=\"toc-text\">b. 按规则设置时区</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#c.-check-installed_apps-items\"><span class=\"toc-text\">c. check\r\nINSTALLED_APPS items</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#model%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99\"><span class=\"toc-text\">2. model文件编写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#a.-%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E4%B8%AAmodel\"><span class=\"toc-text\">a. 什么是一个model？</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#b.-examples\"><span class=\"toc-text\">b. examples</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%BF%80%E6%B4%BB%E4%BD%A0%E7%9A%84model\"><span class=\"toc-text\">3. 激活你的model</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E5%96%84model%E5%88%9D%E8%AF%95api\"><span class=\"toc-text\">4. 完善model，初试api</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AF%95%E7%94%A8admin%E7%AB%AF\"><span class=\"toc-text\">5. 试用admin端</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_3","date":"2023-03-07T16:14:46.267Z","updated":"2022-08-25T08:14:03.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_3.json","keywords":null,"cover":null,"text":"官网原教程： PART 3： Writing your first Django app, part 3 | Django documentation | Django (djangoproject.com) 概述： 编写处理http请求的函数 在urls中，添加视图内容 复述：...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_1","date":"2023-03-07T16:14:46.261Z","updated":"2022-08-22T11:20:38.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_1.json","keywords":null,"cover":null,"text":"官网原教程： PART 1： Writing your first Django app, part 1 | Django documentation | Django (djangoproject.com) 概述： 概述教程内容 使用startproject命令创建的项目的基本...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Front End/01. html_dom","date":"2023-03-07T16:14:46.384Z","updated":"2021-11-04T14:34:45.000Z","comments":true,"path":"api/articles/Web Dev/Front End/01. html_dom.json","keywords":null,"cover":null,"content":"<p>#HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准。 /*\r\n其实可以修改更多包括———— 改变html内容 ， 改变 CSS 样式 ， 改变 HTML 属性\r\n， 创建新的 HTML 元素 ， 删除已有的 HTML 元素 ， 改变事件（处理程序）\r\n*/</p>\r\n###DOM 节点 1. 根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点!\r\n- 整个文档是一个文档节点 - 每个 HTML 元素是元素节点 - HTML\r\n元素内的文本是文本节点 - 每个 HTML 属性是属性节点 - 注释是注释节点 2.\r\n节点的级别 -\r\n用父（parent）、子（child）和同胞（sibling）等术语来描述这些关系。 -\r\n父节点拥有子节点,同级的子节点被称为同胞（兄弟或姐妹） 3. 节点范例 -\r\n代码示例： <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;html&gt;\n  &lt;head&gt;\n\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;title&gt;DOM 教程&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n\t&lt;h1&gt;DOM 课程1&lt;&#x2F;h1&gt;\n\t&lt;p&gt;Hello world!&lt;&#x2F;p&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre> -\r\n<html>\r\n节点没有父节点；它是根节点 -\r\n<head>\r\n和\r\n<body>\r\n的父节点是\r\n<html>\r\n节点 - 文本节点 \"Hello world!\" 的父节点是\r\n<p>\r\n<p>节点 4. DOM处理中的常见错误就是希望元素包含文本 - 解释： text is\r\nalways stored in text nodes A common error in DOM processing is to\r\nexpect an element node to contain text However, the text of an element\r\nnode is stored in a text node. In this example:\r\n<code>&lt;year&gt;2005&lt;/year&gt;</code>, the element node <year>,\r\nholds a text node <em>with</em> the value \"2005\". \"2005\" is not the\r\nvalue of the <year> element -\r\n即：文本只在文本节点中，而文本节点只是属于<year>的子节点，year并不包含\"2005\",\"2005\"是专属于文本节点的值\r\n5. 可通过 JavaScript （以及其他编程语言）对 HTML DOM 进行访问。</p>\r\n<p>###DOM方法 HTML DOM 方法是我们可以在节点（HTML\r\n元素）上执行的动作。→方法是我们能够执行的动作（比如添加或修改元素）。</p>\r\n<ol type=\"1\">\r\n<li><p>getElementById(id) -\r\n获取带有指定<strong>id</strong>的节点（元素）</p>\r\n<p>/*\r\n返回值类型为元素对象，只返回指定ID的元素，如果在后面用.value是可以的，但是将.value赋给一个变量就不行，原因不明\r\n*/</p></li>\r\n<li><p>getElementsByTagName() -\r\n返回带有指定<strong>标签名</strong>的所有元素/*\r\ndocument.getElementsByTagName(\"p\"); */</p>\r\n<p>/* document.getElementById(\"main\").getElementsByTagName(\"p\");\r\n<em>//</em></p>\r\n<p>\r\n<p>元素应该是 id=\"main\" 的元素的后代 */</p></li>\r\n<li><p>The getElementsByClassName() -\r\n查找带有相同<strong>类名</strong>的所有 HTML 元素</p></li>\r\n<li><p>appendChild(node) - 插入新的子节点（元素）</p></li>\r\n<li><p>removeChild(node) - 删除子节点（元素）</p></li>\r\n<li><p>createElement() -</p></li>\r\n</ol>\r\n###DOM属性 HTML DOM 属性是我们可以在节点（HTML\r\n元素）设置和修改的值。→属性是我们能够获取或设置的值（比如节点的名称或内容）。\r\n1. innerHTML - 节点（元素）的文本值（或者是————获取html元素的内容）/*\r\ninnerHTML 属性可用于获取或改变任意 HTML 元素，包括\r\n<html>\r\n和\r\n<body>\r\n<p>*/ 2. parentNode - 节点（元素）的父节点 3. childNodes -\r\n节点（元素）的子节点 4. attributes - 节点（元素）的属性节点 5. nodeName\r\n- 规定节点的名称 - 只读</p>\r\n<pre><code>/* 元素节点的 nodeName 与标签名相同,  属性节点的 nodeName 与属性名相同, 文本节点的 nodeName 始终是 #text, 文档节点的 nodeName 始终是 #document */</code></pre>\r\n<ol start=\"6\" type=\"1\">\r\n<li><p>nodeValue - 规定节点的值</p>\r\n<p>/* 元素节点的 nodeValue 是 undefined 或 null, 文本节点的 nodeValue\r\n是文本本身,属性节点的 nodeValue 是属性值 */</p></li>\r\n<li><p>nodeType - 返回节点的类型 - 只读</p>\r\n<p>/* 元素节点反1， 属性节点反2， 文本节点反3， 注释节点反8，文档节点反9\r\n*/</p></li>\r\n</ol>\r\n<p>###DOM事件 使用 JavaScript 向 HTML 元素分配事件： 1. onclick -\r\n鼠标点击触发事件 2. onload - 用户进入界面触发事件 /* onload\r\n事件可用于检查访客的浏览器类型和版本，以便基于这些信息来加载不同版本的网页。\r\n*/ 3. onunload - 用户离开页面触发事件 - onload 和 onunload\r\n事件可用于处理 cookies。</p>\r\n<pre><code>    /* 实例见下 */</code></pre>\r\n<ol start=\"4\" type=\"1\">\r\n<li>onchange - 当用户改变输入字段的内容时，将调用事件\r\n<ul>\r\n<li>实例见下20</li>\r\n</ul></li>\r\n<li>onmouseover -</li>\r\n<li>onmouseout -</li>\r\n<li>onmousedown -</li>\r\n<li>onmouseup -</li>\r\n</ol>\r\n<p>/* DOM方法与属性综合使用简单实践 */ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t\n\t&lt;body&gt;\n\t\t&lt;p id&#x3D;&quot;intro&quot;&gt;Hello World!&lt;&#x2F;p&gt;\n\t\t&lt;script&gt;\n\t\t\tvar txt&#x3D;document.getElementById(&quot;intro&quot;).innerHTML;&#x2F;* getElementById是方法， 而innerHtml是属性 *&#x2F;\n\t\t\tdocument.write(txt);&#x2F;* innerHTML直接使用：***document.getElementById(&quot; ~~xxx的id~~ &quot;).innerHTML*** &#x3D; &quot; hello world &quot; *&#x2F;\n\t\t&lt;&#x2F;script&gt; &#x2F;* 作用很明了————捕获id为 &quot;intro&quot; 的元素，将它的值赋给txt， 并在文件中打印一次txt*&#x2F;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre></p>\r\n<p>/* nodeName、nodeType、nodeValue 应用实例 */ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n\t&lt;html&gt;\n\t\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\n\t\t&lt;p id&#x3D;&quot;intro&quot;&gt;Hello World!&lt;&#x2F;p&gt;\n\n\t\t&lt;script&gt;\n\t\t\tx&#x3D;document.getElementById(&quot;intro&quot;);\n\t\t\tdocument.write(x.firstChild.nodeName&#x2F;* nodeType *&#x2F;&#x2F;* nodeValue *&#x2F;);\n\t\t&lt;&#x2F;script&gt;\n\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre></p>\r\n<p>/* innerHTML 实例//改变 HTML 内容 */ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;p id&#x3D;&quot;p1&quot;&gt;Hello World!&lt;&#x2F;p&gt;\t\t\n\t\t&lt;script&gt;\n\t\t\tdocument.getElementById(&quot;p1&quot;).innerHTML&#x3D;&quot;新文本!&quot;;\n\t\t&lt;&#x2F;script&gt;&#x2F;* p1 原本的文字并没有消失，它是在文档渲染中进行的实时替换的，仍然存在且仍然可以被利用，但是利用的js代码必须在替换之前！！！ *&#x2F;\n\t\t&lt;p&gt;段落通过脚本来修改内容。&lt;&#x2F;p&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre></p>\r\n<p>/* 改变 HTML 样式 */ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">\t&lt;p id&#x3D;&quot;p1&quot;&gt;Hello world!&lt;&#x2F;p&gt;\n\t&lt;p id&#x3D;&quot;p2&quot;&gt;Hello world!&lt;&#x2F;p&gt;\n\n&#96;&#96;&#96;html\n&lt;script&gt;\ndocument.getElementById(&quot;p2&quot;).style.color&#x3D;&quot;blue&quot;;\ndocument.getElementById(&quot;p2&quot;).style.fontFamily&#x3D;&quot;Arial&quot;;\ndocument.getElementById(&quot;p2&quot;).style.fontSize&#x3D;&quot;larger&quot;;\n&lt;&#x2F;script&gt;\n&#96;&#96;</code></pre></p>\r\n/* 使用事件 <em>/ 1. <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;document.body.style.backgroundColor&#x3D;&#39;lavender&#39;;&quot; value&#x3D;&quot;修改背景颜色&quot;&gt;</code></pre> 也可以用函数执行: <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n\tfunction ChangeBackground()\n\t&#123;\n\t\tdocument.body.style.backgroundColor&#x3D;&quot;lavender&quot;;\n\t&#125;\n&lt;&#x2F;script&gt;\n&lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;ChangeBackground()&quot; value&#x3D;&quot;修改背景颜色&quot; &#x2F;&gt;</code></pre>\r\n/</em> 常见html事件的例子 - 当用户点击鼠标时 - 当网页已加载时 -\r\n当图片已加载时 - 当鼠标移动到元素上时 - 当输入字段被改变时 - 当 HTML\r\n表单被提交时 - 当用户触发按键时 <em>/ 2. <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;h1 onclick&#x3D;&quot;this.innerHTML&#x3D;&#39;Ooops!&#39;&quot;&gt;点击文本!&lt;&#x2F;h1&gt;&#x2F;* 没有定义函数，直接在元素里完成脚本编写 *&#x2F;</code></pre> 也可以用函数执行\r\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n\tfunction changetext(id)&#123;\n\t\tid.innerHTML&#x3D;&quot;Ooops!&quot;;\n\t&#125;\n&lt;&#x2F;script&gt;\n&lt;h1 onclick&#x3D;&quot;changetext(this)&quot;&gt;点击文本!&lt;&#x2F;h1&gt;</code></pre> 等于 <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script&gt;\n\tfunction changetext()\n\t&#123;\n\t\tdocument.getElementById(1).innerHTML&#x3D;&quot;Ooops!&quot;;\n\t&#125;\n&lt;&#x2F;script&gt;\n\t&lt;h1 onclick&#x3D;&quot;changetext()&quot; id&#x3D;&quot;1&quot;&gt;点击文本!&lt;&#x2F;h1&gt;</code></pre> 3. <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">\t</code></pre> /</em>\r\n创建新的HTML元素 - createElement() <em>//</em>\r\n特点：将新元素作为父元素的最后一个子元素进行添加 <em>/ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;div1&quot;&gt;\n\t\t&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;\n\t\t&lt;p id&#x3D;&quot;p2&quot;&gt;这是另一个段落。&lt;&#x2F;p&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;script&gt;\n\t\t\tvar para&#x3D;document.createElement(&quot;p&quot;);\n\t\t\tvar node&#x3D;document.createTextNode(&quot;这是一个新段落。&quot;);\n\t\t\tpara.appendChild(node);\n\t\t\tvar element&#x3D;document.getElementById(&quot;div1&quot;);\n\t\t\telement.appendChild(para);\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\r\n/</em> 实例解析 这段代码创建了一个新的\r\n<p>\r\n<p>元素： 先新建你要添加的元素 var para=document.createElement(\"p\");</p>\r\n<pre><code>如需向 &lt;p&gt; 元素添加文本，您首先必须创建文本节点。这段代码创建文本节点：      必须创建文字节点来存储字符\r\nvar node=document.createTextNode(&quot;这是一个新段落。&quot;);\r\n\r\n然后您必须向 &lt;p&gt; 元素追加文本节点：                                        向元素节点追加文字节点\r\npara.appendChild(node);\r\n\r\n最后，您必须向已有元素追加这个新元素。                                     向已有元素追加新元素\r\n这段代码查找到一个已有的元素：\r\nvar element=document.getElementById(&quot;div1&quot;);\r\n\r\n这段代码向这个已存在的元素追加新元素：\r\nelement.appendChild(para); */</code></pre>\r\n<p>/* 创建新的 HTML 元素 - insertBefore() <em>//</em>\r\n特点：新元素添加时可以自选位置 */ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;div1&quot;&gt;\n\t\t\t&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;\n\t\t\t&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;script&gt;\n\t\t\tvar para&#x3D;document.createElement(&quot;p&quot;);\t\t\t\t\t\t\t先新建你要添加的元素\n\t\t\tvar node&#x3D;document.createTextNode(&quot;这是一个新段落。&quot;);\t\t\t\t必须创建文字节点来存储字符\n\t\t\tpara.appendChild(node);\t\t\t\t\t\t\t\t\t\t\t向元素节点追加文字节点\n\t\t\tvar element&#x3D;document.getElementById(&quot;div1&quot;);\t\t\t\t\t找到新元素的插入指向的父元素\n\t\t\tvar child&#x3D;document.getElementById(&quot;p1&quot;);\t\t\t\t\t\t找到具体子元素中的插入位置(before)\n\t\t\telement.insertBefore(para,child);\t\t\t\t\t\t\t\t向已有元素追加新元素\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre></p>\r\n<p>/* 删除已有的 HTML 元素 */ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;div1&quot;&gt;\n\t\t\t&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;\n\t\t\t&lt;p id&#x3D;&quot;p2&quot;&gt;这是另一个段落。&lt;&#x2F;p&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;script&gt;\n\t\t\tvar parent&#x3D;document.getElementById(&quot;div1&quot;);\t\t\t\t\t\t找到要删除元素的父元素\n\t\t\tvar child&#x3D;document.getElementById(&quot;p1&quot;);\t\t\t\t\t\t找到具体要删除的元素\n\t\t\tparent.removeChild(child);\t\t\t\t\t\t\t\t\t\t执行删除\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre></p>\r\n<p>/* 替换 HTML 元素 */ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;div1&quot;&gt;\n\t\t\t&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;\n\t\t\t&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;script&gt;\n\t\t\tvar parent&#x3D;document.getElementById(&quot;div1&quot;);\t\t\t\t\t\t找父\n\t\t\tvar child&#x3D;document.getElementById(&quot;p1&quot;);\t\t\t\t\t\t找子\n\t\t\tvar para&#x3D;document.createElement(&quot;p&quot;);\t\t\t\t\t\t\t新子\n\t\t\tvar node&#x3D;document.createTextNode(&quot;这是一个新的段落。&quot;);\t\t\t新子内文本\n\t\t\tpara.appendChild(node);\t\t\t\t\t\t\t\t\t\t\t文本与子绑定\n\t\t\tparent.replaceChild(para,child);\t\t\t\t\t\t\t\t替换\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre></p>\r\n<p>/* onchange事件实例 */ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;\n\t\t&lt;script&gt;\n\t\t\tfunction myFunction()\n\t\t\t&#123;\n\t\t\t\tvar x&#x3D;document.getElementById(&quot;fname&quot;);\n\t\t\t\tx.value&#x3D;x.value.toUpperCase();\n\t\t\t&#125;\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t输入你的名字: &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;fname&quot; onchange&#x3D;&quot;myFunction()&quot;&gt;\t\n\t\t&lt;p&gt;当你离开输入框后，函数将被触发，将小写字母转为大写字母。&lt;&#x2F;p&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre></p>\r\n<p>/* onload事件实例（类推onunload） */ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body onload&#x3D;&quot;checkCookies()&quot;&gt;\n\t\t&lt;script&gt;\n\t\t\tfunction checkCookies()\n\t\t\t&#123;\n\t\t\t\tif (navigator.cookieEnabled&#x3D;&#x3D;true)&#x2F;* navigator是js中的一个对象(Navigator 对象包含有关浏览器的信息)，cookieEnabled是其一个属性 *&#x2F;\n\t\t\t\t&#123;\n\t\t\t\t\talert(&quot;Cookie 可用&quot;)\n\t\t\t\t&#125;\n\t\t\t\telse\n\t\t\t\t&#123;\n\t\t\t\t\talert(&quot;Cookie 不可用&quot;)\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&lt;&#x2F;script&gt;\n\t\t&lt;p&gt;页面载入时，弹出浏览器 Cookie 可用状态。&lt;&#x2F;p&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre></p>\r\n<p>/* onmouseover 和 onmouseout 事件 及可类推的 onmousedown、onmouseup\r\n以及 onclick 事件 */ <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div onmouseover&#x3D;&quot;mOver(this)&quot; onmouseout&#x3D;&quot;mOut(this)&quot; style&#x3D;&quot;background-color:#D94A38;width:120px;height:20px;padding:40px;&quot;&gt;Mouse Over Me&lt;&#x2F;div&gt;\n\t\t&lt;script&gt;\n\t\t\tfunction mOver(obj)\n\t\t\t&#123;\n\t\t\t\tobj.innerHTML&#x3D;&quot;Thank You&quot;\n\t\t\t&#125;\n\t\t\tfunction mOut(obj)\n\t\t\t&#123;\n\t\t\t\tobj.innerHTML&#x3D;&quot;Mouse Over Me&quot;\n\t\t\t&#125;\n\t\t&lt;&#x2F;script&gt;\n\t\t\t&#x2F;* \t\t\n\t\t\t\t\t&lt;div onmousedown&#x3D;&quot;mDown(this)&quot; onmouseup&#x3D;&quot;mUp(this)&quot; style&#x3D;&quot;background-color:#D94A38;width:90px;height:20px;padding:40px;&quot;&gt;Click Me&lt;&#x2F;div&gt;\n\t\t\t\t\t&lt;script&gt;\n\t\t\t\t\t function mDown(obj)\n\t\t\t\t\t &#123;\n\t\t\t\t\t\tobj.style.backgroundColor&#x3D;&quot;#1ec5e5&quot;;\n\t\t\t\t\t\tobj.innerHTML&#x3D;&quot;Release Me&quot;\n\t\t\t\t\t &#125;\n\t\t\t\t\t \n\t\t\t\t\t function mUp(obj)\n\t\t\t\t\t &#123;\n\t\t\t\t\t\tobj.style.backgroundColor&#x3D;&quot;#D94A38&quot;;\n\t\t\t\t\t\tobj.innerHTML&#x3D;&quot;Thank You&quot;\n\t\t\t\t\t &#125;\n\t\t\t\t\t&lt;&#x2F;script&gt;\n\t\t\t*&#x2F;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre></p>\r\n<p><strong>备注一些单位：</strong></p>\r\n<table>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">em</td>\r\n<td style=\"text-align: left;\">相对于父元素的字体大小</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">px</td>\r\n<td style=\"text-align: left;\">相对于屏幕分辨率</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">%</td>\r\n<td style=\"text-align: left;\">相对于父元素</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">cm</td>\r\n<td style=\"text-align: left;\">即厘米</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">mm</td>\r\n<td style=\"text-align: left;\">即毫米</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">in</td>\r\n<td style=\"text-align: left;\">即英寸</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">pt</td>\r\n<td style=\"text-align: left;\">1/72 英寸</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">pc</td>\r\n<td style=\"text-align: left;\">1/21</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n","text":"#HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准。 /* 其实可以修改更多包括———— 改变html内容 ， 改变 CSS 样式 ， 改变 HTML 属性 ， 创建新的 HTML 元素 ， 删除已有的 HTML 元素 ， 改变事件（处理程序） */ ##...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Front End/02. svg","date":"2023-03-07T16:14:46.386Z","updated":"2020-11-29T09:53:34.000Z","comments":true,"path":"api/articles/Web Dev/Front End/02. svg.json","keywords":null,"cover":null,"text":" svg————可缩放矢量模型（scalable vector graphics） svg的主要意义：svg生成矢量图，它不会随着图片的缩放而发生失真 ##使用svg 使用 标签导入 &lt;embed src&#x3D;&quot;circle1.svg&quot; type&...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/SpringBoot/FirstSpringBootApplication","date":"2023-03-07T16:14:46.377Z","updated":"2021-09-05T08:46:39.000Z","comments":true,"path":"api/articles/Web Dev/Back End/SpringBoot/FirstSpringBootApplication.json","keywords":null,"cover":null,"text":" ","link":"","photos":[],"count_time":{"symbolsCount":2,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/CommonHash.png","path":"images/CommonHash.png","modified":1,"renderable":0},{"_id":"source/images/FTP-image-20211002180657770.png","path":"images/FTP-image-20211002180657770.png","modified":1,"renderable":0},{"_id":"source/images/Git-image-20211003154821032.png","path":"images/Git-image-20211003154821032.png","modified":1,"renderable":0},{"_id":"source/images/FTPimage-20211002181804382.png","path":"images/FTPimage-20211002181804382.png","modified":1,"renderable":0},{"_id":"source/images/Git-image-20211003155529616.png","path":"images/Git-image-20211003155529616.png","modified":1,"renderable":0},{"_id":"source/images/Git-image-20211003165533697.png","path":"images/Git-image-20211003165533697.png","modified":1,"renderable":0},{"_id":"source/images/Git-image-20211003171322547.png","path":"images/Git-image-20211003171322547.png","modified":1,"renderable":0},{"_id":"source/images/Initialize.png","path":"images/Initialize.png","modified":1,"renderable":0},{"_id":"source/images/MD5's function.png","path":"images/MD5's function.png","modified":1,"renderable":0},{"_id":"source/images/blog20201003163321.png","path":"images/blog20201003163321.png","modified":1,"renderable":0},{"_id":"source/images/image-20210907112642306.png","path":"images/image-20210907112642306.png","modified":1,"renderable":0},{"_id":"source/images/image-20210907170607746.png","path":"images/image-20210907170607746.png","modified":1,"renderable":0},{"_id":"source/images/image-20210907171745526.png","path":"images/image-20210907171745526.png","modified":1,"renderable":0},{"_id":"source/images/image-20210907192522519.png","path":"images/image-20210907192522519.png","modified":1,"renderable":0},{"_id":"source/images/image-20210907193059189.png","path":"images/image-20210907193059189.png","modified":1,"renderable":0},{"_id":"source/images/image-20210907193619068.png","path":"images/image-20210907193619068.png","modified":1,"renderable":0},{"_id":"source/images/image-20210907194151912.png","path":"images/image-20210907194151912.png","modified":1,"renderable":0},{"_id":"source/images/image-20210918235240645-16319803627632.png","path":"images/image-20210918235240645-16319803627632.png","modified":1,"renderable":0},{"_id":"source/images/image-20210918235447255-16319804884733.png","path":"images/image-20210918235447255-16319804884733.png","modified":1,"renderable":0},{"_id":"source/images/image-20210918235654741-16319806164524.png","path":"images/image-20210918235654741-16319806164524.png","modified":1,"renderable":0},{"_id":"source/images/image-20211001150441411.png","path":"images/image-20211001150441411.png","modified":1,"renderable":0},{"_id":"source/svg/bilibili-fill.svg","path":"svg/bilibili-fill.svg","modified":1,"renderable":0},{"_id":"source/svg/social_github.svg","path":"svg/social_github.svg","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif","path":"images/PythonBasicGrammarImage/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/hello-world-in-python.png","path":"images/PythonBasicGrammarImage/hello-world-in-python.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210329193537197.png","path":"images/PythonBasicGrammarImage/image-20210329193537197.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210329193638362.png","path":"images/PythonBasicGrammarImage/image-20210329193638362.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210329193807978.png","path":"images/PythonBasicGrammarImage/image-20210329193807978.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210329194151198.png","path":"images/PythonBasicGrammarImage/image-20210329194151198.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210330151608813.png","path":"images/PythonBasicGrammarImage/image-20210330151608813.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210330151923931.png","path":"images/PythonBasicGrammarImage/image-20210330151923931.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210330152927963.png","path":"images/PythonBasicGrammarImage/image-20210330152927963.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210330153314699.png","path":"images/PythonBasicGrammarImage/image-20210330153314699.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210330153736850.png","path":"images/PythonBasicGrammarImage/image-20210330153736850.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402161704512.png","path":"images/PythonBasicGrammarImage/image-20210402161704512.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402163342743.png","path":"images/PythonBasicGrammarImage/image-20210402163342743.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402163401305.png","path":"images/PythonBasicGrammarImage/image-20210402163401305.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402163513449.png","path":"images/PythonBasicGrammarImage/image-20210402163513449.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402163932528.png","path":"images/PythonBasicGrammarImage/image-20210402163932528.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402164253225.png","path":"images/PythonBasicGrammarImage/image-20210402164253225.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402171810502.png","path":"images/PythonBasicGrammarImage/image-20210402171810502.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402172917361.png","path":"images/PythonBasicGrammarImage/image-20210402172917361.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402172939650.png","path":"images/PythonBasicGrammarImage/image-20210402172939650.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402172959101.png","path":"images/PythonBasicGrammarImage/image-20210402172959101.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402173226983.png","path":"images/PythonBasicGrammarImage/image-20210402173226983.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402174032001.png","path":"images/PythonBasicGrammarImage/image-20210402174032001.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210402174928766.png","path":"images/PythonBasicGrammarImage/image-20210402174928766.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210923234720280-16324120504921.png","path":"images/PythonBasicGrammarImage/image-20210923234720280-16324120504921.png","modified":1,"renderable":0},{"_id":"source/images/PythonBasicGrammarImage/image-20210923235953188.png","path":"images/PythonBasicGrammarImage/image-20210923235953188.png","modified":1,"renderable":0},{"_id":"themes/aurora/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":1,"renderable":1},{"_id":"themes/aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/FTP部署.md","hash":"40620f0660c3fde6bb31a081a7209e18335f747f","modified":1633403496000},{"_id":"source/_posts/Setup Private Git Repository .md","hash":"3ffe19502d7a52ea7bd12c8cc85a3c78003555a4","modified":1633403998000},{"_id":"source/_posts/basicGrammar.md","hash":"6f072f05886b5ae8469e23bf3c84a48ab45aa26b","modified":1632651034000},{"_id":"source/_posts/beautifyGithubHome.md","hash":"d49c1579a00a134e9965f9298c6f3968b51f8d78","modified":1631878364000},{"_id":"source/_posts/hashFunction.md","hash":"dc5d9dcd2554889a957fb20ef35956fe8fc31ad3","modified":1631878330000},{"_id":"source/_posts/index.md","hash":"37623b51f631655a43ab0b106588089b720f2cbb","modified":1631878390000},{"_id":"source/_posts/updateGit.md","hash":"09530413cb24fb9f798b0cedc54ec7ef2a95bf31","modified":1631878398000},{"_id":"source/about/index.md","hash":"3b2c3a08c29f23507439e4b431a532baa1c8aa80","modified":1631115946000},{"_id":"source/images/FTP-image-20211002180657770.png","hash":"858226d9e1b7285b6e31a44248950a77d19c1459","modified":1633169238000},{"_id":"source/images/FTPimage-20211002181804382.png","hash":"cc5c5774f97881a2bd3d0bcadb2e126169672152","modified":1633169892000},{"_id":"source/images/Git-image-20211003155529616.png","hash":"8a24405a1338ca91fd2c1a435c420928facaa710","modified":1633247744000},{"_id":"source/images/Git-image-20211003165533697.png","hash":"be11347b61665744230acedbc849715e92ee7a1f","modified":1633251344000},{"_id":"source/images/Git-image-20211003171322547.png","hash":"2f2c7e061e4cc571a31f8e1e240c71a25d946c58","modified":1633252414000},{"_id":"source/images/Initialize.png","hash":"f5177dda95ad94afc74681df8f05770e22159b2f","modified":1631848034000},{"_id":"source/images/MD5's function.png","hash":"0172125d6a1e2c9f1db17985770de74a3d48afa7","modified":1631846010000},{"_id":"source/images/image-20210907112642306.png","hash":"57c15504d13508cb3f0f81f1f90a69e3f0e274a8","modified":1631115946000},{"_id":"source/images/image-20210907171745526.png","hash":"94329145480567cbc52aac61738b9198722a29fb","modified":1631115946000},{"_id":"source/images/image-20210907193619068.png","hash":"8d022bdd41a9c7de67b7c5bfe88e380b3e1380e7","modified":1631115946000},{"_id":"source/images/image-20210918235240645-16319803627632.png","hash":"f31b2130ba2a14cdfb84c6373880d0023de2b1ef","modified":1631980364000},{"_id":"source/images/image-20210918235447255-16319804884733.png","hash":"2d3c69cad2999c9365ff5527ac8a20791eea53e2","modified":1631980490000},{"_id":"source/images/image-20210918235654741-16319806164524.png","hash":"ff0e607ff6c0d79278949ea7b6e5ed06e1251999","modified":1631980618000},{"_id":"source/images/image-20211001150441411.png","hash":"5179eef520e22e2341831b1f0bfd043e0c71bc77","modified":1633093392000},{"_id":"source/svg/bilibili-fill.svg","hash":"3190f5dd031a56bf161f8b73ae75790abd707166","modified":1631115948000},{"_id":"source/svg/social_github.svg","hash":"3de037990ff448c85315968aded7d75575c65047","modified":1631115948000},{"_id":"source/images/PythonBasicGrammarImage/image-20210329193537197.png","hash":"1276f68dffce4c2d7b4ffff11a565401697d0651","modified":1617358750000},{"_id":"source/images/PythonBasicGrammarImage/image-20210329193638362.png","hash":"e6f8359cfa15299e25f38c9605d90999bbb48324","modified":1617358756000},{"_id":"source/images/PythonBasicGrammarImage/image-20210329193807978.png","hash":"e8b1dfdce4ecfb9a4f4d59873d4cc4f429581835","modified":1617358762000},{"_id":"source/images/PythonBasicGrammarImage/image-20210330151923931.png","hash":"de8967de8cbaf8cf3cebe1ee020b0d795218382c","modified":1617358808000},{"_id":"source/images/PythonBasicGrammarImage/image-20210330152927963.png","hash":"df9105df069d3913e9fe3aa2d98cd9a9a235434c","modified":1617358884000},{"_id":"source/images/PythonBasicGrammarImage/image-20210330153736850.png","hash":"8c64cc9e0c049d3ea3ed435470978c6f3246030a","modified":1617358914000},{"_id":"source/images/PythonBasicGrammarImage/image-20210330153314699.png","hash":"c1db0402a4b2023bee9a0f5adc0c2246473aad5e","modified":1617358904000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402161704512.png","hash":"8f6e15cfaccd74ca46c357adf9b68cc4c09af1d1","modified":1617358920000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402163342743.png","hash":"a787f00ba3516a8cc62f675b1cf214c48a17a395","modified":1617358932000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402163401305.png","hash":"894d92d10ac6c0e9dad76ababfe92b5dc88b9d6c","modified":1617358938000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402163513449.png","hash":"204106b7489f78b9b783291d9014b8c427df5273","modified":1617358926000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402163932528.png","hash":"d1caf2b29c227d594c4d42541e1b50c03d692709","modified":1617358946000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402164253225.png","hash":"0db06f26ccbd4f318cc12323e4348ca639b834fa","modified":1617358942000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402171810502.png","hash":"bbb8496cc41849a971b046adf71dc4bc2c7ee106","modified":1617358974000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402172917361.png","hash":"9f1caa858a19d70eb7beb7706a96b0198ec933f1","modified":1617358962000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402172939650.png","hash":"fe57c7fa51967b88f8b636f472e43ef902dfc998","modified":1617358958000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402172959101.png","hash":"fff2f54c8e8e32ea60aa0be0d2217e708616113d","modified":1617358952000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402173226983.png","hash":"7c73a55712e1bb1693f31e34e425ffeb6a6b6ba3","modified":1617358964000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402174032001.png","hash":"61b68bf092ed0cb2395e9fd08fd6671b3f7033cd","modified":1617358968000},{"_id":"source/images/PythonBasicGrammarImage/image-20210402174928766.png","hash":"e067228dc1bc172a6b835140bd086fd3f4fb0c06","modified":1617358984000},{"_id":"source/images/PythonBasicGrammarImage/image-20210923234720280-16324120504921.png","hash":"792e5fafad12b8ecf9bf05e4ebf1c9cb96f79bcf","modified":1632412052000},{"_id":"source/images/PythonBasicGrammarImage/image-20210923235953188.png","hash":"2988694eef7044da53a5b68498af22e20be1df97","modified":1632412794000},{"_id":"source/images/image-20210907193059189.png","hash":"1b40c234e07532baa0fe0d2957c171d62181b5f4","modified":1631115946000},{"_id":"source/images/PythonBasicGrammarImage/hello-world-in-python.png","hash":"4945dd0348cb393eb91f6979e160114ea2c30d71","modified":1632637486000},{"_id":"source/images/PythonBasicGrammarImage/image-20210329194151198.png","hash":"2fd6cbc8ebedc3e4ba2295d8027f4da015048a69","modified":1617358768000},{"_id":"source/images/PythonBasicGrammarImage/image-20210330151608813.png","hash":"a524c11bd09bd9107fac7bf09fc41ed42fc01456","modified":1617358804000},{"_id":"source/images/CommonHash.png","hash":"14fce7c2eb90537bca7607e6035b3ebd30fb0b84","modified":1631798370000},{"_id":"source/images/blog20201003163321.png","hash":"efacff073ba8db7c01e7324777df9c8998f3db09","modified":1631115946000},{"_id":"source/images/image-20210907194151912.png","hash":"93467bdfed070c18288fcf3ec2baa0d9f5bc0edf","modified":1631115946000},{"_id":"source/images/image-20210907170607746.png","hash":"ab30b723679e94df68f58e79fdac0e6a32921fee","modified":1631115946000},{"_id":"source/images/image-20210907192522519.png","hash":"8a30ba22729c32735be67b1a3689f4478cc96f48","modified":1631115946000},{"_id":"source/images/Git-image-20211003154821032.png","hash":"6aad4be60cada494d5999201b1b171b5097a9a9b","modified":1633247316000},{"_id":"themes/aurora/_config.landscape.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631115946260},{"_id":"source/images/PythonBasicGrammarImage/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif","hash":"c5d91404008a5d25c1f2e7fbad5ebae1374a5bcf","modified":1632637792000},{"_id":"themes/aurora/.browserslistrc","hash":"f6207992dad603b7f95a53b50a9f377705e3ca69","modified":1631115948000},{"_id":"themes/aurora/CHANGELOG.md","hash":"e777b57bc47cfd214833c74e4dc3378fe5902848","modified":1631115948000},{"_id":"themes/aurora/CHANGELOG_CN.md","hash":"ba9dc27b01bca1fc3be9883f4c45ac910d48ffcd","modified":1631115948000},{"_id":"themes/aurora/LICENSE","hash":"eae7268643be4ab062a7e3bee45f801280467f22","modified":1631115948000},{"_id":"themes/aurora/README.md","hash":"53abd8d764aafd50f9a7ccb28f8bbf0301c6ed93","modified":1631115948000},{"_id":"themes/aurora/_config.yml","hash":"a65ec7787b85a8481de85f53ee738c7ed030f6b9","modified":1631115948000},{"_id":"themes/aurora/jest.config.js","hash":"68e507c5c0088668b45f7df421c6082c1e5f13b2","modified":1631115948000},{"_id":"themes/aurora/package.json","hash":"8f7fdec4a780a1d315f977b010c9bbcb8982ac75","modified":1631115948000},{"_id":"themes/aurora/.circleci/config.yml","hash":"4187c1a1dcca60f5440624495e8701aa80d8fbcb","modified":1631115948000},{"_id":"themes/aurora/data/cn.yml","hash":"ad76cd08cc67d3522ab53664d2fb11e011eccdda","modified":1631115948000},{"_id":"themes/aurora/data/en.yml","hash":"a9b6634af3fd0027ac42f204faa3488fddf2118c","modified":1631115948000},{"_id":"themes/aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":1631115948000},{"_id":"themes/aurora/scripts/index.js","hash":"94b2d886727df91d0b12667e30e48d005a66e5a6","modified":1631115948000},{"_id":"themes/aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1631115948000},{"_id":"themes/aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1631115948000},{"_id":"themes/aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/filters/index.js","hash":"d5457f17dbe032844198db4dd2322bcb5325adbd","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/generators/category.js","hash":"3b034888ec9111958730287946f0aba6d4f93dab","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/generators/index.js","hash":"e1bb156a41f35b8f8c5871ae47df6b1d79f19f6d","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/generators/page.js","hash":"e5b0012dc8a11912f3a2bdf62c027c7d1bd491bd","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/generators/post.js","hash":"e184e1c5f3c2a80f9bbbe27be66f2c630f7b133a","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/generators/search.js","hash":"b09848fcf68456d69d0f422db938728e780eafbe","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/generators/site.js","hash":"f7dd92a8d4eba255876638367576a0f90cc4a517","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/generators/statistic.js","hash":"796178a0dff17d41c4a075be31d5782186a0403d","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/generators/tag.js","hash":"3003c9cfb28ebca1b7fac623e64277b1d729b0c2","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/helpers/mapper.js","hash":"32aca268669dc480ffa2b629685d224c2b458482","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/helpers/symbols-count-time.js","hash":"b65146566b1ca496a8dbfb952de9e214c16a22d9","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/helpers/toc.js","hash":"f21425ae899bc5ce6dadee6fea5e1786771ccb2e","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/helpers/truncate-html.js","hash":"75024c9ad2b6a466e74c76f31216dd75d9cb800d","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/helpers/utils.js","hash":"255f723679d09b3721ac962177ffdda08ce377fa","modified":1631115948000},{"_id":"themes/aurora/scripts/lib/injector/index.js","hash":"c575c0e0dded6e375f2b58acb25a03720d0c8397","modified":1631115948000},{"_id":"themes/aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1631115948000},{"_id":"themes/aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1631115948000},{"_id":"themes/aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1631115948000},{"_id":"themes/aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1631115948000},{"_id":"themes/aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1631115948000},{"_id":"themes/aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1631115948000},{"_id":"themes/aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1631115948000},{"_id":"themes/aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1631115948000},{"_id":"themes/aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1631115948000},{"_id":"themes/aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1631115948000},{"_id":"themes/aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1631115948000},{"_id":"themes/aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1631115948000},{"_id":"themes/aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1631115948000},{"_id":"themes/aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1631115948000},{"_id":"themes/aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1631115948000},{"_id":"themes/aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1631115948000},{"_id":"themes/aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1631115948000},{"_id":"themes/aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1631115948000},{"_id":"themes/aurora/source/static/css/app.0d31776f.css","hash":"d37424072c270dac2a2ec5785b7e575d6f22ba40","modified":1631115948000},{"_id":"themes/aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1631115948000},{"_id":"themes/aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"7e5f8f63da4a883e87047b5e06fa9397b3e19cea","modified":1631115948000},{"_id":"public/api/posts/1.json","hash":"787b185e4a23c7398ae5bda47f441f57cd133570","modified":1633404133931},{"_id":"public/api/articles/FTP部署.json","hash":"d504df74eb77cc010e30fd77453accd974ab0f04","modified":1633404133931},{"_id":"public/api/articles/Setup Private Git Repository .json","hash":"fa9b3e1df41f187874333f371cb49c1cef5722ae","modified":1633404133931},{"_id":"public/api/articles/basicGrammar.json","hash":"a61518e931ce94a8f115fdeff86c558bc1215e18","modified":1633404133931},{"_id":"public/api/articles/hashFunction.json","hash":"c4004c77a556399d37cd69ffb7724ea9af9e5d2f","modified":1633404133931},{"_id":"public/api/articles/updateGit.json","hash":"77c03d83a4834769c86696efdb2410a4d4b289bd","modified":1633404133931},{"_id":"public/api/articles/beautifyGithubHome.json","hash":"1eb7007efa05e586a4bd2203af8e14c2ec05fec7","modified":1633404133931},{"_id":"public/api/articles/index.json","hash":"d941475bf16c813ec480be77fbd2d4cd7089419e","modified":1633404133931},{"_id":"public/api/features.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1633404133931},{"_id":"public/api/authors/blog-author.json","hash":"42facc9bd216a645fcd1349b678c641c8c5e41fd","modified":1633404133931},{"_id":"public/api/site.json","hash":"f2d21a77f455bd9140c887cb20e193d1068d7e73","modified":1633404133931},{"_id":"public/api/categories.json","hash":"136b03e32e38b6e515f908e4d0942791e8ac90e8","modified":1633404133931},{"_id":"public/api/categories/配置方法.json","hash":"b0ff96ae38da0cea767df73e994c03d23e7203ae","modified":1633404133931},{"_id":"public/api/categories/Programming-Language-Learning.json","hash":"e14401658e84c7e3ffaca242d03d9063a337d6b6","modified":1633404133931},{"_id":"public/api/categories/工具美化.json","hash":"e9213cad48e59682907b3003df3d4c04bbb69981","modified":1633404133931},{"_id":"public/api/categories/算法.json","hash":"a31ea77e20c3c6f156b6b1201878537ca98d002b","modified":1633404133931},{"_id":"public/api/tags.json","hash":"000a510260df39124b9953939f6a51e4cd101438","modified":1633404133931},{"_id":"public/api/tags/FTP.json","hash":"4a8eb39fcc5498ea1f645917f2d876cf064cba92","modified":1633404133931},{"_id":"public/api/tags/Git.json","hash":"a2ae5e7e29bd934f8f35ec8f7b5fa6375b51888e","modified":1633404133931},{"_id":"public/api/tags/Python.json","hash":"5c8cd35ec57960d9a0f34a7f78aefeba8788e5b0","modified":1633404133931},{"_id":"public/api/tags/GitHub.json","hash":"2a1a97420bf250424b98654da3444c05e66b7782","modified":1633404133931},{"_id":"public/api/tags/Hash.json","hash":"8c7b6a7d2ee70e5aa9f4c8dfce89a396d65eefd0","modified":1633404133931},{"_id":"public/api/tags/使用hexo来搭建你的博客！.json","hash":"58b89815b935071a554fbde5665e57c049de41fd","modified":1633404133931},{"_id":"public/api/pages/about/index.json","hash":"c35323dd10ed4c955c90125eba9b1cbc15ead249","modified":1633404133931},{"_id":"public/api/statistic.json","hash":"09b94752f5fbf01242d43c44231aa0438e873e53","modified":1633404133931},{"_id":"public/api/search.json","hash":"f73d4362d6dcc2f06539392ae30400c20c7e7ea5","modified":1633404133931},{"_id":"public/post/FTP部署.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/post/Setup Private Git Repository .html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/post/basicGrammar.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/post/hashFunction.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/post/updateGit.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/post/beautifyGithubHome.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/post/index.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/index.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/tags/index.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/archives/index.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/page/about/index.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/tags/search/index.html","hash":"04c36c679b0f3159cc3ace40afea36114f0c471f","modified":1633404133931},{"_id":"public/images/FTP-image-20211002180657770.png","hash":"858226d9e1b7285b6e31a44248950a77d19c1459","modified":1633404133931},{"_id":"public/images/FTPimage-20211002181804382.png","hash":"cc5c5774f97881a2bd3d0bcadb2e126169672152","modified":1633404133931},{"_id":"public/images/Git-image-20211003155529616.png","hash":"8a24405a1338ca91fd2c1a435c420928facaa710","modified":1633404133931},{"_id":"public/images/Git-image-20211003165533697.png","hash":"be11347b61665744230acedbc849715e92ee7a1f","modified":1633404133931},{"_id":"public/images/Git-image-20211003171322547.png","hash":"2f2c7e061e4cc571a31f8e1e240c71a25d946c58","modified":1633404133931},{"_id":"public/images/Initialize.png","hash":"f5177dda95ad94afc74681df8f05770e22159b2f","modified":1633404133931},{"_id":"public/images/MD5's function.png","hash":"0172125d6a1e2c9f1db17985770de74a3d48afa7","modified":1633404133931},{"_id":"public/images/image-20210907112642306.png","hash":"57c15504d13508cb3f0f81f1f90a69e3f0e274a8","modified":1633404133931},{"_id":"public/images/image-20210907171745526.png","hash":"94329145480567cbc52aac61738b9198722a29fb","modified":1633404133931},{"_id":"public/images/image-20210907193619068.png","hash":"8d022bdd41a9c7de67b7c5bfe88e380b3e1380e7","modified":1633404133931},{"_id":"public/images/image-20210918235240645-16319803627632.png","hash":"f31b2130ba2a14cdfb84c6373880d0023de2b1ef","modified":1633404133931},{"_id":"public/images/image-20210918235447255-16319804884733.png","hash":"2d3c69cad2999c9365ff5527ac8a20791eea53e2","modified":1633404133931},{"_id":"public/images/image-20211001150441411.png","hash":"5179eef520e22e2341831b1f0bfd043e0c71bc77","modified":1633404133931},{"_id":"public/images/image-20210918235654741-16319806164524.png","hash":"ff0e607ff6c0d79278949ea7b6e5ed06e1251999","modified":1633404133931},{"_id":"public/svg/bilibili-fill.svg","hash":"3190f5dd031a56bf161f8b73ae75790abd707166","modified":1633404133931},{"_id":"public/svg/social_github.svg","hash":"3de037990ff448c85315968aded7d75575c65047","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210329193537197.png","hash":"1276f68dffce4c2d7b4ffff11a565401697d0651","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210329193638362.png","hash":"e6f8359cfa15299e25f38c9605d90999bbb48324","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210329193807978.png","hash":"e8b1dfdce4ecfb9a4f4d59873d4cc4f429581835","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210330151923931.png","hash":"de8967de8cbaf8cf3cebe1ee020b0d795218382c","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210330152927963.png","hash":"df9105df069d3913e9fe3aa2d98cd9a9a235434c","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210330153314699.png","hash":"c1db0402a4b2023bee9a0f5adc0c2246473aad5e","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210330153736850.png","hash":"8c64cc9e0c049d3ea3ed435470978c6f3246030a","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402161704512.png","hash":"8f6e15cfaccd74ca46c357adf9b68cc4c09af1d1","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402163342743.png","hash":"a787f00ba3516a8cc62f675b1cf214c48a17a395","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402163401305.png","hash":"894d92d10ac6c0e9dad76ababfe92b5dc88b9d6c","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402163513449.png","hash":"204106b7489f78b9b783291d9014b8c427df5273","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402163932528.png","hash":"d1caf2b29c227d594c4d42541e1b50c03d692709","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402171810502.png","hash":"bbb8496cc41849a971b046adf71dc4bc2c7ee106","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402164253225.png","hash":"0db06f26ccbd4f318cc12323e4348ca639b834fa","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402172917361.png","hash":"9f1caa858a19d70eb7beb7706a96b0198ec933f1","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402172939650.png","hash":"fe57c7fa51967b88f8b636f472e43ef902dfc998","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402172959101.png","hash":"fff2f54c8e8e32ea60aa0be0d2217e708616113d","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402173226983.png","hash":"7c73a55712e1bb1693f31e34e425ffeb6a6b6ba3","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402174032001.png","hash":"61b68bf092ed0cb2395e9fd08fd6671b3f7033cd","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210402174928766.png","hash":"e067228dc1bc172a6b835140bd086fd3f4fb0c06","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210923234720280-16324120504921.png","hash":"792e5fafad12b8ecf9bf05e4ebf1c9cb96f79bcf","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210923235953188.png","hash":"2988694eef7044da53a5b68498af22e20be1df97","modified":1633404133931},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1633404133931},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1633404133931},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1633404133931},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1633404133931},{"_id":"public/images/image-20210907193059189.png","hash":"1b40c234e07532baa0fe0d2957c171d62181b5f4","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/hello-world-in-python.png","hash":"4945dd0348cb393eb91f6979e160114ea2c30d71","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210329194151198.png","hash":"2fd6cbc8ebedc3e4ba2295d8027f4da015048a69","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/image-20210330151608813.png","hash":"a524c11bd09bd9107fac7bf09fc41ed42fc01456","modified":1633404133931},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1633404133931},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1633404133931},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1633404133931},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1633404133931},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1633404133931},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1633404133931},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1633404133931},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1633404133931},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1633404133931},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1633404133931},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1633404133931},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1633404133931},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1633404133931},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1633404133931},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1633404133931},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1633404133931},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1633404133931},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1633404133931},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1633404133931},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1633404133931},{"_id":"public/images/CommonHash.png","hash":"14fce7c2eb90537bca7607e6035b3ebd30fb0b84","modified":1633404133931},{"_id":"public/images/blog20201003163321.png","hash":"efacff073ba8db7c01e7324777df9c8998f3db09","modified":1633404133931},{"_id":"public/images/image-20210907194151912.png","hash":"93467bdfed070c18288fcf3ec2baa0d9f5bc0edf","modified":1633404133931},{"_id":"public/images/image-20210907170607746.png","hash":"ab30b723679e94df68f58e79fdac0e6a32921fee","modified":1633404133931},{"_id":"public/images/image-20210907192522519.png","hash":"8a30ba22729c32735be67b1a3689f4478cc96f48","modified":1633404133931},{"_id":"public/images/Git-image-20211003154821032.png","hash":"6aad4be60cada494d5999201b1b171b5097a9a9b","modified":1633404133931},{"_id":"public/images/PythonBasicGrammarImage/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif","hash":"c5d91404008a5d25c1f2e7fbad5ebae1374a5bcf","modified":1633404133931}],"Category":[{"name":"配置方法","_id":"ckudindl300035smb5lkk2ykj"},{"name":"Programming Language Learning","_id":"ckudindmh000c5smb6vlk3z2o"},{"name":"工具美化","_id":"ckudindmp000h5smb6zva3z5b"},{"name":"算法","_id":"ckudindmv000m5smb9ptq68pv"}],"Data":[],"Page":[{"title":"About_Me","_content":"你好！这里是姜饼人，JBR_Bunjie\n\n你可以通过邮箱与我取得联系\n\n<!--\nuseless\nauthor:\n  name: JBR-Bunjie\n  link: https://space.bilibili.com/415377461\n  avatar: https://avatars.githubusercontent.com/u/90251718?v=4\n  description: \"仿生程序员会在光环上遇见乐正绫吗？\"\n  socials:\n    bilibili: https://space.bilibili.com/415377461\n\tgithub: https://github.com/JBR-Bunjie\n-->","source":"about/index.md","raw":"---\ntitle: About_Me\n---\n你好！这里是姜饼人，JBR_Bunjie\n\n你可以通过邮箱与我取得联系\n\n<!--\nuseless\nauthor:\n  name: JBR-Bunjie\n  link: https://space.bilibili.com/415377461\n  avatar: https://avatars.githubusercontent.com/u/90251718?v=4\n  description: \"仿生程序员会在光环上遇见乐正绫吗？\"\n  socials:\n    bilibili: https://space.bilibili.com/415377461\n\tgithub: https://github.com/JBR-Bunjie\n-->","date":"2009-04-22T19:24:48.000Z","updated":"2021-09-08T15:45:46.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckudindk900005smbfn7vclea","content":"<p>你好！这里是姜饼人，JBR_Bunjie</p>\n<p>你可以通过邮箱与我取得联系</p>\n<!--\nuseless\nauthor:\n  name: JBR-Bunjie\n  link: https://space.bilibili.com/415377461\n  avatar: https://avatars.githubusercontent.com/u/90251718?v=4\n  description: \"仿生程序员会在光环上遇见乐正绫吗？\"\n  socials:\n    bilibili: https://space.bilibili.com/415377461\n    github: https://github.com/JBR-Bunjie\n-->","site":{"data":{}},"excerpt":"","more":"<p>你好！这里是姜饼人，JBR_Bunjie</p>\n<p>你可以通过邮箱与我取得联系</p>\n<!--\nuseless\nauthor:\n  name: JBR-Bunjie\n  link: https://space.bilibili.com/415377461\n  avatar: https://avatars.githubusercontent.com/u/90251718?v=4\n  description: \"仿生程序员会在光环上遇见乐正绫吗？\"\n  socials:\n    bilibili: https://space.bilibili.com/415377461\n    github: https://github.com/JBR-Bunjie\n-->"}],"Post":[{"title":"建立一个FTP服务器吧!","date":"2021-10-05T03:07:03.000Z","<!--feature":"true-->","cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","_content":"# 建立一个FTP服务器吧！\n\n## 了解FTP\n\n### 什么是ftp？\n\nFTP即：File Transfer Protocol，即ftp，可以直译为**“文件传输协议”**。但是由于FTP本身是使用明文进行数据传输，所以有了更多加密版本的FTP协议如：FTPS(FTP over SSL)，SFTP：Secure FTP(FTP over SSH)等\n\n## 部署FTP服务器\n\n### 以windows作为服务端——<a href=\"#filezilla\">filezilla</a>实现\n\n推荐视频教程：[FileZilla：如何快速搭建FTP服务器](https://www.bilibili.com/video/BV1xv411k7Lj?from=search&seid=6077142084469792314&spm_id_from=333.337.0.0)\n\n1. Filezilla Sever只支持Windows平台，而Client同时支持Windows，Linux，Mac\n\n2. 设置Filezilla时需要注意：你添加的Port不是实际使用时的端口，是管理端口，所以不论设为什么值，只要不和当前系统已有端口重合都是可以的\n\n3. Filezilla使用多用户管理机制，不过你在正式使用之前需要先创建用户。在`Edit-User-general`中创建\n\n   + 这个单个用户并不意味着是单个自然人，多个人是可以共享一个用户名和密码的，这里的用户主要是用于区分访问种类与权限而非界定访问的实际个人\n   + 用户与用户之间可以设置不同目录来访问不同的资源：`shared folders`中管理，但是每一个用户都需要一个根目录\n   + 当你添加一个非根目录的时候，需要手动指定它在访问时所在的目录——即电脑本地的文件路径和访问到的文件路径并不是不统一的。但是根目录是无需指定路径的，或者说根目录的路径是`/`\n   + 注意用户的权限管理，记得设置用户密码\n\n4. home会占用网址的路径，它不需要指定路径，对于home外的目录，添加之后，需要指定新的路径\n\n   + 需要注意的是，ftp服务中的添加的目录与本机文件的实际目录是可以没有关系的\n\n     ​\t例如，对两个同级目录，你可以将一个目录赋在另一个目录的路径的子路径中\n\n   + 配置路径地址时，注意使用反斜杠\n\n### 以Linux作为服务端——vsftpd实现\n\n#### 在云服务器上部署ftp服务\n\n这里采用了阿里云服务器的CentOS7系统，版本是7.6\n\n使用了常用的vsftpd包来搭建ftp服务\n\nvsftpd项目地址：[vsftpd - Secure, fast FTP server for UNIX-like systems (security.appspot.com)](https://security.appspot.com/vsftpd.html)\n\n:::warning\n\n##### 安装ftp服务\n\n请注意，本文可能仅适用于CentOS，其他的Linux发行版与CentOS虽同为Linux系统，但是也有诸多不同\n\n例如，第5步需要修改的vsftpd.conf文件，CentOS系统下它会出现在 /etc/vsftpd 文件夹下，而Ubuntu系统下它则会直接出现在 /etc 文件夹下\n\n如果你需要以本教程做参考的话，请不要照搬本教程。比如将CentOS的包管理工具yum替换为你当前Linux发行版下的包管理工具\n\n:::\n\n1. 安装vsftpd\n\n```bash\nyum install -y vsftpd\n```\n\n2. 设置vsftpd开机启动\n\n```bash\nsystemctl enable vsftpd\n```\n\n3. 启动vsftpd服务\n\n```bash\nsystemctl start vsftpd\n```\n\n4. 检验服务是否启动\n\n```bash\nnetstat -antup | grep ftp\n```\n\n##### 配置vsftpd\n\n###### <span id=\"usernameAndCode\">建立用户并为他配置用户专属文件夹</span>\n\n1. 执行以下命令，为 FTP 服务创建一个 Linux 用户，本文以 ftpuser 为例。\n\n   ```bash\n   useradd ftpuser\n   ```\n\n   当你创建了一个新的用户的时候，Linux回味这个用户在 `/home` 目录下建立一个以用户名为名的文件夹，并且这个目录这就是此后用户登陆时的默认路径 `~`所代指的路径\n\n2. 执行以下命令，设置 `ftpuser` 用户的密码。\n\n   ```bash\n   passwd ftpuser\n   ```\n\n   输入密码后请按Enter确认设置，密码默认不显示，本文以JBRBunjie为例。\n\n3. 执行以下命令，创建 FTP 服务使用的文件目录，本文以/var/ftp/test为例。\n\n   ```bash\n   mkdir /var/ftp/test\n   ```\n\n   :::tip\n\n   事实上，这个目录是哪里都可以的。只是一定要记得这个目录路径是什么，因为这个路径过会儿是会写入配置文件的。当客户机访问服务器时，实际地址就是这个地址\n\n   :::\n\n4. 执行以下命令，修改目录权限。\n\n   ```bash\n   chown -R ftpuser:ftpuser /var/ftp/test\n   ```\n\n   > 你也可以直接新开一个终端，并以ftpuser身份登录\n   >\n   > 这样子可以省去很多没必要的麻烦，因为在ftpuser身份下创建的所以文件的owner都是ftpuser，就可以省略用户权限配置这一步\n\n###### 修改vsftpd.conf配置文件，并设置chroot\n\n1. 打开要修改的文件：\n\n   ```bash\n   vim /etc/vsftpd/vsftpd.conf\n   ```\n\n   \n\n2. 按`i`切换至编辑模式以修改配置文件vsftpd.conf：\n\n> 注意：\n>\n> FTP 可通过主动模式和被动模式与客户端机器进行连接并传输数据。由于大多数客户端机器的防火墙设置及无法获取真实 IP 等原因，一般选择**被动模式**搭建 FTP 服务。以下修改以设置被动模式为例，如需选择主动模式，可以参看腾讯云的文档：[设置 FTP 主动模式](https://cloud.tencent.com/document/product/213/10912#port)。\n\n3. 修改以下配置参数，取消它们前面的`#`注释或者修改对应值，和本地用户的登录权限，设置指定例外用户列表文件的路径，并开启监听 IPv4 sockets。\n\n   ```bash\n   # Allow anonymous FTP? (Beware - allowed by default if you comment this out).\n   # 是否运行匿名用户登录\n   anonymous_enable=NO\n   \n   # Uncomment this to allow local users to log in.\n   # When SELinux is enforcing check for SE bool ftp_home_dir\n   # 取消此注释来运行本地用户登录\n   local_enable=YES\n   \n   # You may specify an explicit list of local users to chroot() to their home directory. If chroot_local_user is YES, then this list becomes a list of users to NOT chroot(). (Warning! chroot'ing can be very dangerous. If using chroot, make sure that the user does not have write access to the top level directory within the chroot)\n   # 如果两个配置项都为yes，那么, 凡是加在文件chroot_list中的用户都是不受限止的用户，即, 可以浏览其主目录的上级目录.\n   # 如果不希望某用户能够浏览其主目录上级目录中的内容,可以如上设置,然后在文件vsftpd.chroot_list中去掉或不添加该用户即可。\n   \n   # 也可以如下配置\n   # chroot_local_user＝NO\n   # chroot_list_enable=YES(这行必须要有, 否则文件vsftpd.chroot_list不会起作用)\n   # 则所有用户都能够访问上级目录，你可以把所有不希望有这种浏览其主目录之上的各目录权限的用户添加到文件chroot_list中即可(一行一个用户名，此时, 在该文件中的用户都是不可以浏览其主目录之外的目录的)\n   chroot_local_user=YES\n   chroot_list_enable=YES\n   # chroot_list路径\n   chroot_list_file=/etc/vsftpd/chroot_list\n   \n   # When \"listen\" directive is enabled, vsftpd runs in standalone mode and\n   # listens on IPv4 sockets. This directive cannot be used in conjunction\n   # with the listen_ipv6 directive.\n   # 监听IPv4 sockets\n   listen=YES\n   ```\n\n   :::tip\n\n   什么是<a href=\"#SELinux\">SELinux</a>？\n\n   Security-Enhanced Linux (SELinux) is a security architecture for <a href=\"#what-is-linux\">Linux® systems</a> that allows administrators to have more control over who can access the system. It was originally developed by the United States National Security Agency (NSA) as a series of patches to the <a href=\"#linux-kernel\">Linux kernel</a> using Linux Security Modules (LSM). \n\n   SELinux was released to the open source community in 2000, and was integrated into the upstream Linux kernel in 2003.\n\n   SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux历史上最杰出的新安全子系统\n\n   :::\n\n2. 在`listen_ipv6=YES`行首添加`#`来将此功能注释掉\n\n   ```bash\n   # This directive enables listening on IPv6 sockets. By default, listening\n   # on the IPv6 \"any\" address (::) will accept connections from both IPv6\n   # and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n   # sockets. If you want that (perhaps because you want to listen on specific\n   # addresses) then you must run two copies of vsftpd with two configuration\n   # files.\n   # Make sure, that one of the listen options is commented !!\n   \n   # 关闭监听 IPv6 sockets。\n   # listen_ipv6=YES\n   ```\n\n3. 添加以下配置参数，开启被动模式，设置本地用户登录后所在目录，以及云服务器建立数据传输可使用的端口范围值\n\n   ```bash\n   local_root=/var/ftp/test\n   allow_writeable_chroot=YES\n   pasv_enable=YES\n   pasv_address=xxx.xx.xxx.xx #请修改为您的 Linux 云服务器公网 IP\n   pasv_min_port=40000\n   pasv_max_port=45000\n   ```\n\n   按 `Esc` 后输入 `:wq!` 保存后退出。\n\n4. <span id=\"continue-steps\">创建`chroot_list`文件</span>\n\n   ```bash\n   vim /etc/vsftpd/chroot_list\n   ```\n\n   - 按 **i** 进入编辑模式，输入用户名，一个用户名占据一行，\n\n   - 设置完成后按 **Esc** 并输入 **:wq** 保存后退出。\n\n   - 您若没有设置例外用户的需求，可跳过此步骤，输入 **:wq** 退出文件。或者直接改用 `touch` 命令来创建文件\n\n7. 重启 FTP 服务。\n\n   ```bash\n   systemctl restart vsftpd\n   ```\n\n\n\n##### 设置云服务器安全组\n\n增加新的策略：\n\n1. 开放ftp 21端口\n2. 开放你在vsftpd.config中所配置的端口范围(pasv_min_port - pasv_max_port) 40000 - 45000\n\n示例：\n\n![image-20211002181804382](../images/FTPimage-20211002181804382.png)\n\n:::tip\n\n如果你使用的不是云服务器，你只需要将本地的防火墙指定端口打开就行\n\n:::\n\n##### 验证 FTP 服务\n\n您可通过 FTP 客户端软件、浏览器或文件资源管理器等工具验证 FTP 服务。\n\n1. 打开客户端的 IE 浏览器，选择【工具】>【Internet 选项】>【高级】，根据您选择的 FTP 模式进行修改：\n   - 主动模式：取消勾选【使用被动 FTP】\n   \n   - 被动模式：勾选【使用被动 FTP】\n   \n     ![image-20211002180657770](../images/FTP-image-20211002180657770.png)\n   \n2. 打开计算机的ftp客户端，如果是windows电脑可以直接使用`file explorer`，在路径栏中访问\"ftp://xxx.xxx.xxx.xxx（你服务器的地址）\"\n\n3. 在弹出的“登录身份”窗口中输入 <a href=\"#usernameAndCode\">配置 vsftpd</a> 中已设置的用户名及密码。本文使用的用户名为 `ftpuser`，密码为 `JBRBunjie`\n\n4. 成功登录后，即可上传及下载文件\n\n\n\n## 踩坑集合\n\n### Linux 系统环境下\n\n#### 550 No such file or directory / 550 create directory operation failed\n\n查看当前用户：\n\n如果你能连上远程地址，但是根本看不到文件内容，并且当你输入正确密码时仍然报错：550\n\n建议排查的东西：\n\n- 你配置的目录是否正确：`/etc/vsftpd/vsftpd.conf` 中的 `local_root` 是否是你实际配置的目录\n\n- `ftpuser` 是否拥有操作当前 `local_root=/var/ftp/test` 目录及内层文件的权限\n\n  ```bash\n  ls -l [option: existed folder in current menu]\n  ```\n\n- 服务是否启动\n\n  ```bash\n  netstat -antup | grep ftp\n  ```\n\n- 修改了配置项但还没有重启服务\n\n  ```bash\n  systemctl restart vsftpd\n  ```\n\n- 检查SELinux服务：\n\n  ```bash\n  getsebool -a | grep ftp\n  ```\n\n  如果这条语句的结果是\n\n  ![image-20210918235447255](../images/image-20210918235447255-16319804884733.png)\n\n  代表SELinux安全服务处于disabled状态，不是这里的错，大概率还是上面四条错误\n\n  但是如果是下面这样\n\n![image-20210918235240645](../images/image-20210918235240645-16319803627632.png)\n\n​\t——几乎所有与ftp相关的服务都被关闭掉了\n\n​\t那几乎可以肯定是在这里出错了\n\n​\t解决办法是修改/etc/selinux/config配置文件：\n\n```bash\nvim /etc/selinux/config\n```\n\n​\t把`SELINUX`默认的`permissive`或`enforcing`改为`disabled`\n\n![image-20210918235654741](../images/image-20210918235654741-16319806164524.png)\n\n- 最后办法：重启计算机\n\n#### 553 Could not create file\n\n解决方法\n\n1. 执行以下命令，检查服务器磁盘空间的使用率。\n\n   ```bash\n   df -h\n   ```\n\n   - 如果磁盘空间不足，将会导致文件无法上传，建议删除磁盘容量较大的文件。\n   - 如果磁盘空间正常，请执行下一步。\n\n2. 执行以下命令，检查 FTP 目录是否有写的权限。\n\n   ```bash\n   ls -l /home/test      \n   # /home/test 为 FTP 目录，请修改为您实际的 FTP 目录。\n   ```\n\n   - 若返回结果中没有 `w`，则表示该用户没有写的权限，请执行下一步。\n   - 若返回结果中已有 `w`，(⊙﹏⊙)，那我建议你重装系统（\n\n3. 执行以下命令，对 FTP 目录加上写的权限。\n\n   ```bash\n   chmod +w /home/test \n   # /home/test 为 FTP 目录，请修改为您实际的 FTP 目录。\n   ```\n\n4. 执行以下命令，重新检查写的权限是否设置成功。\n\n   ```bash\n   ls -l /home/test   \n   # /home/test 为 FTP 目录，请修改为您实际的 FTP 目录。\n   ```\n   \n\n### 设置 FTP 主动模式\n\n主动模式需修改的配置如下，其余配置保持默认设置：\n\n```bash\nanonymous_enable=NO      #禁止匿名用户登录\n\nlocal_enable=YES         #支持本地用户登录\n\nchroot_local_user=YES    #全部用户被限制在主目录\nchroot_list_enable=YES   #启用例外用户名单\nchroot_list_file=/etc/vsftpd/chroot_list  #指定用户列表文件，该列表中的用户不被锁定在主目录\n\nlisten=YES               #监听IPv4 sockets\n\n#在行首添加#注释掉以下参数\n#listen_ipv6=YES         #关闭监听IPv6 sockets\n\n#添加下列参数\nallow_writeable_chroot=YES\nlocal_root=/var/ftp/test #设置本地用户登录后所在的目录\n```\n\n按 **Esc** 后输入 **:wq** 保存后退出，并前往<a href=\"#continue-steps\">这里</a>>继续完成 vsftpd 配置。\n\n\n\n## 参考资料：\n\n[FileZilla - The free FTP solution (filezilla-project.org)](https://filezilla-project.org/)\n\n<span id=\"SELinux\">[What is SELinux? (redhat.com)](https://www.redhat.com/en/topics/linux/what-is-selinux)</span>\n\n<span id=\"what-is-linux\">[What is Linux? (redhat.com)](https://www.redhat.com/en/topics/linux/what-is-linux)</span>\n\n<span id=\"linux-kernel\">https://www.redhat.com/en/topics/linux/what-is-the-linux-kernel</span>\n\n","source":"_posts/FTP部署.md","raw":"---\ntitle: 建立一个FTP服务器吧!\ndate: 2021-10-5 11:07:03\ntags:\n  - FTP\ncategories:\n  - 配置方法\n<!--feature: true-->\ncover: https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg\n---\n# 建立一个FTP服务器吧！\n\n## 了解FTP\n\n### 什么是ftp？\n\nFTP即：File Transfer Protocol，即ftp，可以直译为**“文件传输协议”**。但是由于FTP本身是使用明文进行数据传输，所以有了更多加密版本的FTP协议如：FTPS(FTP over SSL)，SFTP：Secure FTP(FTP over SSH)等\n\n## 部署FTP服务器\n\n### 以windows作为服务端——<a href=\"#filezilla\">filezilla</a>实现\n\n推荐视频教程：[FileZilla：如何快速搭建FTP服务器](https://www.bilibili.com/video/BV1xv411k7Lj?from=search&seid=6077142084469792314&spm_id_from=333.337.0.0)\n\n1. Filezilla Sever只支持Windows平台，而Client同时支持Windows，Linux，Mac\n\n2. 设置Filezilla时需要注意：你添加的Port不是实际使用时的端口，是管理端口，所以不论设为什么值，只要不和当前系统已有端口重合都是可以的\n\n3. Filezilla使用多用户管理机制，不过你在正式使用之前需要先创建用户。在`Edit-User-general`中创建\n\n   + 这个单个用户并不意味着是单个自然人，多个人是可以共享一个用户名和密码的，这里的用户主要是用于区分访问种类与权限而非界定访问的实际个人\n   + 用户与用户之间可以设置不同目录来访问不同的资源：`shared folders`中管理，但是每一个用户都需要一个根目录\n   + 当你添加一个非根目录的时候，需要手动指定它在访问时所在的目录——即电脑本地的文件路径和访问到的文件路径并不是不统一的。但是根目录是无需指定路径的，或者说根目录的路径是`/`\n   + 注意用户的权限管理，记得设置用户密码\n\n4. home会占用网址的路径，它不需要指定路径，对于home外的目录，添加之后，需要指定新的路径\n\n   + 需要注意的是，ftp服务中的添加的目录与本机文件的实际目录是可以没有关系的\n\n     ​\t例如，对两个同级目录，你可以将一个目录赋在另一个目录的路径的子路径中\n\n   + 配置路径地址时，注意使用反斜杠\n\n### 以Linux作为服务端——vsftpd实现\n\n#### 在云服务器上部署ftp服务\n\n这里采用了阿里云服务器的CentOS7系统，版本是7.6\n\n使用了常用的vsftpd包来搭建ftp服务\n\nvsftpd项目地址：[vsftpd - Secure, fast FTP server for UNIX-like systems (security.appspot.com)](https://security.appspot.com/vsftpd.html)\n\n:::warning\n\n##### 安装ftp服务\n\n请注意，本文可能仅适用于CentOS，其他的Linux发行版与CentOS虽同为Linux系统，但是也有诸多不同\n\n例如，第5步需要修改的vsftpd.conf文件，CentOS系统下它会出现在 /etc/vsftpd 文件夹下，而Ubuntu系统下它则会直接出现在 /etc 文件夹下\n\n如果你需要以本教程做参考的话，请不要照搬本教程。比如将CentOS的包管理工具yum替换为你当前Linux发行版下的包管理工具\n\n:::\n\n1. 安装vsftpd\n\n```bash\nyum install -y vsftpd\n```\n\n2. 设置vsftpd开机启动\n\n```bash\nsystemctl enable vsftpd\n```\n\n3. 启动vsftpd服务\n\n```bash\nsystemctl start vsftpd\n```\n\n4. 检验服务是否启动\n\n```bash\nnetstat -antup | grep ftp\n```\n\n##### 配置vsftpd\n\n###### <span id=\"usernameAndCode\">建立用户并为他配置用户专属文件夹</span>\n\n1. 执行以下命令，为 FTP 服务创建一个 Linux 用户，本文以 ftpuser 为例。\n\n   ```bash\n   useradd ftpuser\n   ```\n\n   当你创建了一个新的用户的时候，Linux回味这个用户在 `/home` 目录下建立一个以用户名为名的文件夹，并且这个目录这就是此后用户登陆时的默认路径 `~`所代指的路径\n\n2. 执行以下命令，设置 `ftpuser` 用户的密码。\n\n   ```bash\n   passwd ftpuser\n   ```\n\n   输入密码后请按Enter确认设置，密码默认不显示，本文以JBRBunjie为例。\n\n3. 执行以下命令，创建 FTP 服务使用的文件目录，本文以/var/ftp/test为例。\n\n   ```bash\n   mkdir /var/ftp/test\n   ```\n\n   :::tip\n\n   事实上，这个目录是哪里都可以的。只是一定要记得这个目录路径是什么，因为这个路径过会儿是会写入配置文件的。当客户机访问服务器时，实际地址就是这个地址\n\n   :::\n\n4. 执行以下命令，修改目录权限。\n\n   ```bash\n   chown -R ftpuser:ftpuser /var/ftp/test\n   ```\n\n   > 你也可以直接新开一个终端，并以ftpuser身份登录\n   >\n   > 这样子可以省去很多没必要的麻烦，因为在ftpuser身份下创建的所以文件的owner都是ftpuser，就可以省略用户权限配置这一步\n\n###### 修改vsftpd.conf配置文件，并设置chroot\n\n1. 打开要修改的文件：\n\n   ```bash\n   vim /etc/vsftpd/vsftpd.conf\n   ```\n\n   \n\n2. 按`i`切换至编辑模式以修改配置文件vsftpd.conf：\n\n> 注意：\n>\n> FTP 可通过主动模式和被动模式与客户端机器进行连接并传输数据。由于大多数客户端机器的防火墙设置及无法获取真实 IP 等原因，一般选择**被动模式**搭建 FTP 服务。以下修改以设置被动模式为例，如需选择主动模式，可以参看腾讯云的文档：[设置 FTP 主动模式](https://cloud.tencent.com/document/product/213/10912#port)。\n\n3. 修改以下配置参数，取消它们前面的`#`注释或者修改对应值，和本地用户的登录权限，设置指定例外用户列表文件的路径，并开启监听 IPv4 sockets。\n\n   ```bash\n   # Allow anonymous FTP? (Beware - allowed by default if you comment this out).\n   # 是否运行匿名用户登录\n   anonymous_enable=NO\n   \n   # Uncomment this to allow local users to log in.\n   # When SELinux is enforcing check for SE bool ftp_home_dir\n   # 取消此注释来运行本地用户登录\n   local_enable=YES\n   \n   # You may specify an explicit list of local users to chroot() to their home directory. If chroot_local_user is YES, then this list becomes a list of users to NOT chroot(). (Warning! chroot'ing can be very dangerous. If using chroot, make sure that the user does not have write access to the top level directory within the chroot)\n   # 如果两个配置项都为yes，那么, 凡是加在文件chroot_list中的用户都是不受限止的用户，即, 可以浏览其主目录的上级目录.\n   # 如果不希望某用户能够浏览其主目录上级目录中的内容,可以如上设置,然后在文件vsftpd.chroot_list中去掉或不添加该用户即可。\n   \n   # 也可以如下配置\n   # chroot_local_user＝NO\n   # chroot_list_enable=YES(这行必须要有, 否则文件vsftpd.chroot_list不会起作用)\n   # 则所有用户都能够访问上级目录，你可以把所有不希望有这种浏览其主目录之上的各目录权限的用户添加到文件chroot_list中即可(一行一个用户名，此时, 在该文件中的用户都是不可以浏览其主目录之外的目录的)\n   chroot_local_user=YES\n   chroot_list_enable=YES\n   # chroot_list路径\n   chroot_list_file=/etc/vsftpd/chroot_list\n   \n   # When \"listen\" directive is enabled, vsftpd runs in standalone mode and\n   # listens on IPv4 sockets. This directive cannot be used in conjunction\n   # with the listen_ipv6 directive.\n   # 监听IPv4 sockets\n   listen=YES\n   ```\n\n   :::tip\n\n   什么是<a href=\"#SELinux\">SELinux</a>？\n\n   Security-Enhanced Linux (SELinux) is a security architecture for <a href=\"#what-is-linux\">Linux® systems</a> that allows administrators to have more control over who can access the system. It was originally developed by the United States National Security Agency (NSA) as a series of patches to the <a href=\"#linux-kernel\">Linux kernel</a> using Linux Security Modules (LSM). \n\n   SELinux was released to the open source community in 2000, and was integrated into the upstream Linux kernel in 2003.\n\n   SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux历史上最杰出的新安全子系统\n\n   :::\n\n2. 在`listen_ipv6=YES`行首添加`#`来将此功能注释掉\n\n   ```bash\n   # This directive enables listening on IPv6 sockets. By default, listening\n   # on the IPv6 \"any\" address (::) will accept connections from both IPv6\n   # and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n   # sockets. If you want that (perhaps because you want to listen on specific\n   # addresses) then you must run two copies of vsftpd with two configuration\n   # files.\n   # Make sure, that one of the listen options is commented !!\n   \n   # 关闭监听 IPv6 sockets。\n   # listen_ipv6=YES\n   ```\n\n3. 添加以下配置参数，开启被动模式，设置本地用户登录后所在目录，以及云服务器建立数据传输可使用的端口范围值\n\n   ```bash\n   local_root=/var/ftp/test\n   allow_writeable_chroot=YES\n   pasv_enable=YES\n   pasv_address=xxx.xx.xxx.xx #请修改为您的 Linux 云服务器公网 IP\n   pasv_min_port=40000\n   pasv_max_port=45000\n   ```\n\n   按 `Esc` 后输入 `:wq!` 保存后退出。\n\n4. <span id=\"continue-steps\">创建`chroot_list`文件</span>\n\n   ```bash\n   vim /etc/vsftpd/chroot_list\n   ```\n\n   - 按 **i** 进入编辑模式，输入用户名，一个用户名占据一行，\n\n   - 设置完成后按 **Esc** 并输入 **:wq** 保存后退出。\n\n   - 您若没有设置例外用户的需求，可跳过此步骤，输入 **:wq** 退出文件。或者直接改用 `touch` 命令来创建文件\n\n7. 重启 FTP 服务。\n\n   ```bash\n   systemctl restart vsftpd\n   ```\n\n\n\n##### 设置云服务器安全组\n\n增加新的策略：\n\n1. 开放ftp 21端口\n2. 开放你在vsftpd.config中所配置的端口范围(pasv_min_port - pasv_max_port) 40000 - 45000\n\n示例：\n\n![image-20211002181804382](../images/FTPimage-20211002181804382.png)\n\n:::tip\n\n如果你使用的不是云服务器，你只需要将本地的防火墙指定端口打开就行\n\n:::\n\n##### 验证 FTP 服务\n\n您可通过 FTP 客户端软件、浏览器或文件资源管理器等工具验证 FTP 服务。\n\n1. 打开客户端的 IE 浏览器，选择【工具】>【Internet 选项】>【高级】，根据您选择的 FTP 模式进行修改：\n   - 主动模式：取消勾选【使用被动 FTP】\n   \n   - 被动模式：勾选【使用被动 FTP】\n   \n     ![image-20211002180657770](../images/FTP-image-20211002180657770.png)\n   \n2. 打开计算机的ftp客户端，如果是windows电脑可以直接使用`file explorer`，在路径栏中访问\"ftp://xxx.xxx.xxx.xxx（你服务器的地址）\"\n\n3. 在弹出的“登录身份”窗口中输入 <a href=\"#usernameAndCode\">配置 vsftpd</a> 中已设置的用户名及密码。本文使用的用户名为 `ftpuser`，密码为 `JBRBunjie`\n\n4. 成功登录后，即可上传及下载文件\n\n\n\n## 踩坑集合\n\n### Linux 系统环境下\n\n#### 550 No such file or directory / 550 create directory operation failed\n\n查看当前用户：\n\n如果你能连上远程地址，但是根本看不到文件内容，并且当你输入正确密码时仍然报错：550\n\n建议排查的东西：\n\n- 你配置的目录是否正确：`/etc/vsftpd/vsftpd.conf` 中的 `local_root` 是否是你实际配置的目录\n\n- `ftpuser` 是否拥有操作当前 `local_root=/var/ftp/test` 目录及内层文件的权限\n\n  ```bash\n  ls -l [option: existed folder in current menu]\n  ```\n\n- 服务是否启动\n\n  ```bash\n  netstat -antup | grep ftp\n  ```\n\n- 修改了配置项但还没有重启服务\n\n  ```bash\n  systemctl restart vsftpd\n  ```\n\n- 检查SELinux服务：\n\n  ```bash\n  getsebool -a | grep ftp\n  ```\n\n  如果这条语句的结果是\n\n  ![image-20210918235447255](../images/image-20210918235447255-16319804884733.png)\n\n  代表SELinux安全服务处于disabled状态，不是这里的错，大概率还是上面四条错误\n\n  但是如果是下面这样\n\n![image-20210918235240645](../images/image-20210918235240645-16319803627632.png)\n\n​\t——几乎所有与ftp相关的服务都被关闭掉了\n\n​\t那几乎可以肯定是在这里出错了\n\n​\t解决办法是修改/etc/selinux/config配置文件：\n\n```bash\nvim /etc/selinux/config\n```\n\n​\t把`SELINUX`默认的`permissive`或`enforcing`改为`disabled`\n\n![image-20210918235654741](../images/image-20210918235654741-16319806164524.png)\n\n- 最后办法：重启计算机\n\n#### 553 Could not create file\n\n解决方法\n\n1. 执行以下命令，检查服务器磁盘空间的使用率。\n\n   ```bash\n   df -h\n   ```\n\n   - 如果磁盘空间不足，将会导致文件无法上传，建议删除磁盘容量较大的文件。\n   - 如果磁盘空间正常，请执行下一步。\n\n2. 执行以下命令，检查 FTP 目录是否有写的权限。\n\n   ```bash\n   ls -l /home/test      \n   # /home/test 为 FTP 目录，请修改为您实际的 FTP 目录。\n   ```\n\n   - 若返回结果中没有 `w`，则表示该用户没有写的权限，请执行下一步。\n   - 若返回结果中已有 `w`，(⊙﹏⊙)，那我建议你重装系统（\n\n3. 执行以下命令，对 FTP 目录加上写的权限。\n\n   ```bash\n   chmod +w /home/test \n   # /home/test 为 FTP 目录，请修改为您实际的 FTP 目录。\n   ```\n\n4. 执行以下命令，重新检查写的权限是否设置成功。\n\n   ```bash\n   ls -l /home/test   \n   # /home/test 为 FTP 目录，请修改为您实际的 FTP 目录。\n   ```\n   \n\n### 设置 FTP 主动模式\n\n主动模式需修改的配置如下，其余配置保持默认设置：\n\n```bash\nanonymous_enable=NO      #禁止匿名用户登录\n\nlocal_enable=YES         #支持本地用户登录\n\nchroot_local_user=YES    #全部用户被限制在主目录\nchroot_list_enable=YES   #启用例外用户名单\nchroot_list_file=/etc/vsftpd/chroot_list  #指定用户列表文件，该列表中的用户不被锁定在主目录\n\nlisten=YES               #监听IPv4 sockets\n\n#在行首添加#注释掉以下参数\n#listen_ipv6=YES         #关闭监听IPv6 sockets\n\n#添加下列参数\nallow_writeable_chroot=YES\nlocal_root=/var/ftp/test #设置本地用户登录后所在的目录\n```\n\n按 **Esc** 后输入 **:wq** 保存后退出，并前往<a href=\"#continue-steps\">这里</a>>继续完成 vsftpd 配置。\n\n\n\n## 参考资料：\n\n[FileZilla - The free FTP solution (filezilla-project.org)](https://filezilla-project.org/)\n\n<span id=\"SELinux\">[What is SELinux? (redhat.com)](https://www.redhat.com/en/topics/linux/what-is-selinux)</span>\n\n<span id=\"what-is-linux\">[What is Linux? (redhat.com)](https://www.redhat.com/en/topics/linux/what-is-linux)</span>\n\n<span id=\"linux-kernel\">https://www.redhat.com/en/topics/linux/what-is-the-linux-kernel</span>\n\n","slug":"FTP部署","published":1,"updated":"2021-10-05T03:11:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckudindkl00015smbao0c3tjz","content":"<h1 id=\"建立一个FTP服务器吧！\"><a href=\"#建立一个FTP服务器吧！\" class=\"headerlink\" title=\"建立一个FTP服务器吧！\"></a>建立一个FTP服务器吧！</h1><h2 id=\"了解FTP\"><a href=\"#了解FTP\" class=\"headerlink\" title=\"了解FTP\"></a>了解FTP</h2><h3 id=\"什么是ftp？\"><a href=\"#什么是ftp？\" class=\"headerlink\" title=\"什么是ftp？\"></a>什么是ftp？</h3><p>FTP即：File Transfer Protocol，即ftp，可以直译为<strong>“文件传输协议”</strong>。但是由于FTP本身是使用明文进行数据传输，所以有了更多加密版本的FTP协议如：FTPS(FTP over SSL)，SFTP：Secure FTP(FTP over SSH)等</p>\n<h2 id=\"部署FTP服务器\"><a href=\"#部署FTP服务器\" class=\"headerlink\" title=\"部署FTP服务器\"></a>部署FTP服务器</h2><h3 id=\"以windows作为服务端——filezilla实现\"><a href=\"#以windows作为服务端——filezilla实现\" class=\"headerlink\" title=\"以windows作为服务端——filezilla实现\"></a>以windows作为服务端——<a href=\"#filezilla\">filezilla</a>实现</h3><p>推荐视频教程：<a href=\"https://www.bilibili.com/video/BV1xv411k7Lj?from=search&seid=6077142084469792314&spm_id_from=333.337.0.0\">FileZilla：如何快速搭建FTP服务器</a></p>\n<ol>\n<li><p>Filezilla Sever只支持Windows平台，而Client同时支持Windows，Linux，Mac</p>\n</li>\n<li><p>设置Filezilla时需要注意：你添加的Port不是实际使用时的端口，是管理端口，所以不论设为什么值，只要不和当前系统已有端口重合都是可以的</p>\n</li>\n<li><p>Filezilla使用多用户管理机制，不过你在正式使用之前需要先创建用户。在<code>Edit-User-general</code>中创建</p>\n<ul>\n<li>这个单个用户并不意味着是单个自然人，多个人是可以共享一个用户名和密码的，这里的用户主要是用于区分访问种类与权限而非界定访问的实际个人</li>\n<li>用户与用户之间可以设置不同目录来访问不同的资源：<code>shared folders</code>中管理，但是每一个用户都需要一个根目录</li>\n<li>当你添加一个非根目录的时候，需要手动指定它在访问时所在的目录——即电脑本地的文件路径和访问到的文件路径并不是不统一的。但是根目录是无需指定路径的，或者说根目录的路径是<code>/</code></li>\n<li>注意用户的权限管理，记得设置用户密码</li>\n</ul>\n</li>\n<li><p>home会占用网址的路径，它不需要指定路径，对于home外的目录，添加之后，需要指定新的路径</p>\n<ul>\n<li><p>需要注意的是，ftp服务中的添加的目录与本机文件的实际目录是可以没有关系的</p>\n<p>​    例如，对两个同级目录，你可以将一个目录赋在另一个目录的路径的子路径中</p>\n</li>\n<li><p>配置路径地址时，注意使用反斜杠</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"以Linux作为服务端——vsftpd实现\"><a href=\"#以Linux作为服务端——vsftpd实现\" class=\"headerlink\" title=\"以Linux作为服务端——vsftpd实现\"></a>以Linux作为服务端——vsftpd实现</h3><h4 id=\"在云服务器上部署ftp服务\"><a href=\"#在云服务器上部署ftp服务\" class=\"headerlink\" title=\"在云服务器上部署ftp服务\"></a>在云服务器上部署ftp服务</h4><p>这里采用了阿里云服务器的CentOS7系统，版本是7.6</p>\n<p>使用了常用的vsftpd包来搭建ftp服务</p>\n<p>vsftpd项目地址：<a href=\"https://security.appspot.com/vsftpd.html\">vsftpd - Secure, fast FTP server for UNIX-like systems (security.appspot.com)</a></p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><h5 id=\"安装ftp服务\"><a href=\"#安装ftp服务\" class=\"headerlink\" title=\"安装ftp服务\"></a>安装ftp服务</h5><p>请注意，本文可能仅适用于CentOS，其他的Linux发行版与CentOS虽同为Linux系统，但是也有诸多不同</p>\n<p>例如，第5步需要修改的vsftpd.conf文件，CentOS系统下它会出现在 /etc/vsftpd 文件夹下，而Ubuntu系统下它则会直接出现在 /etc 文件夹下</p>\n<p>如果你需要以本教程做参考的话，请不要照搬本教程。比如将CentOS的包管理工具yum替换为你当前Linux发行版下的包管理工具</p>\n</p>\n</div>\n<ol>\n<li>安装vsftpd</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum install -y vsftpd</code></pre>\n\n<ol start=\"2\">\n<li>设置vsftpd开机启动</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl enable vsftpd</code></pre>\n\n<ol start=\"3\">\n<li>启动vsftpd服务</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl start vsftpd</code></pre>\n\n<ol start=\"4\">\n<li>检验服务是否启动</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">netstat -antup | grep ftp</code></pre>\n\n<h5 id=\"配置vsftpd\"><a href=\"#配置vsftpd\" class=\"headerlink\" title=\"配置vsftpd\"></a>配置vsftpd</h5><h6 id=\"建立用户并为他配置用户专属文件夹\"><a href=\"#建立用户并为他配置用户专属文件夹\" class=\"headerlink\" title=\"建立用户并为他配置用户专属文件夹\"></a><span id=\"usernameAndCode\">建立用户并为他配置用户专属文件夹</span></h6><ol>\n<li><p>执行以下命令，为 FTP 服务创建一个 Linux 用户，本文以 ftpuser 为例。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">useradd ftpuser</code></pre>\n\n<p>当你创建了一个新的用户的时候，Linux回味这个用户在 <code>/home</code> 目录下建立一个以用户名为名的文件夹，并且这个目录这就是此后用户登陆时的默认路径 <code>~</code>所代指的路径</p>\n</li>\n<li><p>执行以下命令，设置 <code>ftpuser</code> 用户的密码。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">passwd ftpuser</code></pre>\n\n<p>输入密码后请按Enter确认设置，密码默认不显示，本文以JBRBunjie为例。</p>\n</li>\n<li><p>执行以下命令，创建 FTP 服务使用的文件目录，本文以/var/ftp/test为例。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkdir &#x2F;var&#x2F;ftp&#x2F;test</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>事实上，这个目录是哪里都可以的。只是一定要记得这个目录路径是什么，因为这个路径过会儿是会写入配置文件的。当客户机访问服务器时，实际地址就是这个地址</p>\n\n</div>\n</li>\n<li><p>执行以下命令，修改目录权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chown -R ftpuser:ftpuser &#x2F;var&#x2F;ftp&#x2F;test</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>你也可以直接新开一个终端，并以ftpuser身份登录</p>\n<p>这样子可以省去很多没必要的麻烦，因为在ftpuser身份下创建的所以文件的owner都是ftpuser，就可以省略用户权限配置这一步</p></blockquote>\n</li>\n</ol>\n<h6 id=\"修改vsftpd-conf配置文件，并设置chroot\"><a href=\"#修改vsftpd-conf配置文件，并设置chroot\" class=\"headerlink\" title=\"修改vsftpd.conf配置文件，并设置chroot\"></a>修改vsftpd.conf配置文件，并设置chroot</h6><ol>\n<li><p>打开要修改的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</code></pre></li>\n<li><p>按<code>i</code>切换至编辑模式以修改配置文件vsftpd.conf：</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：</p>\n<p>FTP 可通过主动模式和被动模式与客户端机器进行连接并传输数据。由于大多数客户端机器的防火墙设置及无法获取真实 IP 等原因，一般选择<strong>被动模式</strong>搭建 FTP 服务。以下修改以设置被动模式为例，如需选择主动模式，可以参看腾讯云的文档：<a href=\"https://cloud.tencent.com/document/product/213/10912#port\">设置 FTP 主动模式</a>。</p></blockquote>\n<ol start=\"3\">\n<li><p>修改以下配置参数，取消它们前面的<code>#</code>注释或者修改对应值，和本地用户的登录权限，设置指定例外用户列表文件的路径，并开启监听 IPv4 sockets。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># Allow anonymous FTP? (Beware - allowed by default if you comment this out).\n# 是否运行匿名用户登录\nanonymous_enable&#x3D;NO\n\n# Uncomment this to allow local users to log in.\n# When SELinux is enforcing check for SE bool ftp_home_dir\n# 取消此注释来运行本地用户登录\nlocal_enable&#x3D;YES\n\n# You may specify an explicit list of local users to chroot() to their home directory. If chroot_local_user is YES, then this list becomes a list of users to NOT chroot(). (Warning! chroot&#39;ing can be very dangerous. If using chroot, make sure that the user does not have write access to the top level directory within the chroot)\n# 如果两个配置项都为yes，那么, 凡是加在文件chroot_list中的用户都是不受限止的用户，即, 可以浏览其主目录的上级目录.\n# 如果不希望某用户能够浏览其主目录上级目录中的内容,可以如上设置,然后在文件vsftpd.chroot_list中去掉或不添加该用户即可。\n\n# 也可以如下配置\n# chroot_local_user＝NO\n# chroot_list_enable&#x3D;YES(这行必须要有, 否则文件vsftpd.chroot_list不会起作用)\n# 则所有用户都能够访问上级目录，你可以把所有不希望有这种浏览其主目录之上的各目录权限的用户添加到文件chroot_list中即可(一行一个用户名，此时, 在该文件中的用户都是不可以浏览其主目录之外的目录的)\nchroot_local_user&#x3D;YES\nchroot_list_enable&#x3D;YES\n# chroot_list路径\nchroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list\n\n# When &quot;listen&quot; directive is enabled, vsftpd runs in standalone mode and\n# listens on IPv4 sockets. This directive cannot be used in conjunction\n# with the listen_ipv6 directive.\n# 监听IPv4 sockets\nlisten&#x3D;YES</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>什么是<a href=\"#SELinux\">SELinux</a>？</p>\n<p>Security-Enhanced Linux (SELinux) is a security architecture for <a href=\"#what-is-linux\">Linux® systems</a> that allows administrators to have more control over who can access the system. It was originally developed by the United States National Security Agency (NSA) as a series of patches to the <a href=\"#linux-kernel\">Linux kernel</a> using Linux Security Modules (LSM). </p>\n<p>SELinux was released to the open source community in 2000, and was integrated into the upstream Linux kernel in 2003.</p>\n<p>SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux历史上最杰出的新安全子系统</p>\n</p>\n</div>\n</li>\n<li><p>在<code>listen_ipv6=YES</code>行首添加<code>#</code>来将此功能注释掉</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\n# Make sure, that one of the listen options is commented !!\n\n# 关闭监听 IPv6 sockets。\n# listen_ipv6&#x3D;YES</code></pre></li>\n<li><p>添加以下配置参数，开启被动模式，设置本地用户登录后所在目录，以及云服务器建立数据传输可使用的端口范围值</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">local_root&#x3D;&#x2F;var&#x2F;ftp&#x2F;test\nallow_writeable_chroot&#x3D;YES\npasv_enable&#x3D;YES\npasv_address&#x3D;xxx.xx.xxx.xx #请修改为您的 Linux 云服务器公网 IP\npasv_min_port&#x3D;40000\npasv_max_port&#x3D;45000</code></pre>\n\n<p>按 <code>Esc</code> 后输入 <code>:wq!</code> 保存后退出。</p>\n</li>\n<li><p><span id=\"continue-steps\">创建<code>chroot_list</code>文件</span></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim &#x2F;etc&#x2F;vsftpd&#x2F;chroot_list</code></pre>\n\n<ul>\n<li><p>按 <strong>i</strong> 进入编辑模式，输入用户名，一个用户名占据一行，</p>\n</li>\n<li><p>设置完成后按 <strong>Esc</strong> 并输入 <strong>:wq</strong> 保存后退出。</p>\n</li>\n<li><p>您若没有设置例外用户的需求，可跳过此步骤，输入 <strong>:wq</strong> 退出文件。或者直接改用 <code>touch</code> 命令来创建文件</p>\n</li>\n</ul>\n</li>\n<li><p>重启 FTP 服务。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl restart vsftpd</code></pre></li>\n</ol>\n<h5 id=\"设置云服务器安全组\"><a href=\"#设置云服务器安全组\" class=\"headerlink\" title=\"设置云服务器安全组\"></a>设置云服务器安全组</h5><p>增加新的策略：</p>\n<ol>\n<li>开放ftp 21端口</li>\n<li>开放你在vsftpd.config中所配置的端口范围(pasv_min_port - pasv_max_port) 40000 - 45000</li>\n</ol>\n<p>示例：</p>\n<p><img src=\"../images/FTPimage-20211002181804382.png\" alt=\"image-20211002181804382\"></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>如果你使用的不是云服务器，你只需要将本地的防火墙指定端口打开就行</p>\n\n</div>\n<h5 id=\"验证-FTP-服务\"><a href=\"#验证-FTP-服务\" class=\"headerlink\" title=\"验证 FTP 服务\"></a>验证 FTP 服务</h5><p>您可通过 FTP 客户端软件、浏览器或文件资源管理器等工具验证 FTP 服务。</p>\n<ol>\n<li><p>打开客户端的 IE 浏览器，选择【工具】&gt;【Internet 选项】&gt;【高级】，根据您选择的 FTP 模式进行修改：</p>\n<ul>\n<li><p>主动模式：取消勾选【使用被动 FTP】</p>\n</li>\n<li><p>被动模式：勾选【使用被动 FTP】</p>\n<p><img src=\"../images/FTP-image-20211002180657770.png\" alt=\"image-20211002180657770\"></p>\n</li>\n</ul>\n</li>\n<li><p>打开计算机的ftp客户端，如果是windows电脑可以直接使用<code>file explorer</code>，在路径栏中访问”<a href=\"ftp://xxx.xxx.xxx.xxx(你服务器的地址)&quot;/\">ftp://xxx.xxx.xxx.xxx（你服务器的地址）&quot;</a></p>\n</li>\n<li><p>在弹出的“登录身份”窗口中输入 <a href=\"#usernameAndCode\">配置 vsftpd</a> 中已设置的用户名及密码。本文使用的用户名为 <code>ftpuser</code>，密码为 <code>JBRBunjie</code></p>\n</li>\n<li><p>成功登录后，即可上传及下载文件</p>\n</li>\n</ol>\n<h2 id=\"踩坑集合\"><a href=\"#踩坑集合\" class=\"headerlink\" title=\"踩坑集合\"></a>踩坑集合</h2><h3 id=\"Linux-系统环境下\"><a href=\"#Linux-系统环境下\" class=\"headerlink\" title=\"Linux 系统环境下\"></a>Linux 系统环境下</h3><h4 id=\"550-No-such-file-or-directory-550-create-directory-operation-failed\"><a href=\"#550-No-such-file-or-directory-550-create-directory-operation-failed\" class=\"headerlink\" title=\"550 No such file or directory / 550 create directory operation failed\"></a>550 No such file or directory / 550 create directory operation failed</h4><p>查看当前用户：</p>\n<p>如果你能连上远程地址，但是根本看不到文件内容，并且当你输入正确密码时仍然报错：550</p>\n<p>建议排查的东西：</p>\n<ul>\n<li><p>你配置的目录是否正确：<code>/etc/vsftpd/vsftpd.conf</code> 中的 <code>local_root</code> 是否是你实际配置的目录</p>\n</li>\n<li><p><code>ftpuser</code> 是否拥有操作当前 <code>local_root=/var/ftp/test</code> 目录及内层文件的权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ls -l [option: existed folder in current menu]</code></pre></li>\n<li><p>服务是否启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">netstat -antup | grep ftp</code></pre></li>\n<li><p>修改了配置项但还没有重启服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl restart vsftpd</code></pre></li>\n<li><p>检查SELinux服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">getsebool -a | grep ftp</code></pre>\n\n<p>如果这条语句的结果是</p>\n<p><img src=\"../images/image-20210918235447255-16319804884733.png\" alt=\"image-20210918235447255\"></p>\n<p>代表SELinux安全服务处于disabled状态，不是这里的错，大概率还是上面四条错误</p>\n<p>但是如果是下面这样</p>\n</li>\n</ul>\n<p><img src=\"../images/image-20210918235240645-16319803627632.png\" alt=\"image-20210918235240645\"></p>\n<p>​    ——几乎所有与ftp相关的服务都被关闭掉了</p>\n<p>​    那几乎可以肯定是在这里出错了</p>\n<p>​    解决办法是修改/etc/selinux/config配置文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim &#x2F;etc&#x2F;selinux&#x2F;config</code></pre>\n\n<p>​    把<code>SELINUX</code>默认的<code>permissive</code>或<code>enforcing</code>改为<code>disabled</code></p>\n<p><img src=\"../images/image-20210918235654741-16319806164524.png\" alt=\"image-20210918235654741\"></p>\n<ul>\n<li>最后办法：重启计算机</li>\n</ul>\n<h4 id=\"553-Could-not-create-file\"><a href=\"#553-Could-not-create-file\" class=\"headerlink\" title=\"553 Could not create file\"></a>553 Could not create file</h4><p>解决方法</p>\n<ol>\n<li><p>执行以下命令，检查服务器磁盘空间的使用率。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">df -h</code></pre>\n\n<ul>\n<li>如果磁盘空间不足，将会导致文件无法上传，建议删除磁盘容量较大的文件。</li>\n<li>如果磁盘空间正常，请执行下一步。</li>\n</ul>\n</li>\n<li><p>执行以下命令，检查 FTP 目录是否有写的权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ls -l &#x2F;home&#x2F;test      \n# &#x2F;home&#x2F;test 为 FTP 目录，请修改为您实际的 FTP 目录。</code></pre>\n\n<ul>\n<li>若返回结果中没有 <code>w</code>，则表示该用户没有写的权限，请执行下一步。</li>\n<li>若返回结果中已有 <code>w</code>，(⊙﹏⊙)，那我建议你重装系统（</li>\n</ul>\n</li>\n<li><p>执行以下命令，对 FTP 目录加上写的权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chmod +w &#x2F;home&#x2F;test \n# &#x2F;home&#x2F;test 为 FTP 目录，请修改为您实际的 FTP 目录。</code></pre></li>\n<li><p>执行以下命令，重新检查写的权限是否设置成功。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ls -l &#x2F;home&#x2F;test   \n# &#x2F;home&#x2F;test 为 FTP 目录，请修改为您实际的 FTP 目录。</code></pre></li>\n</ol>\n<h3 id=\"设置-FTP-主动模式\"><a href=\"#设置-FTP-主动模式\" class=\"headerlink\" title=\"设置 FTP 主动模式\"></a>设置 FTP 主动模式</h3><p>主动模式需修改的配置如下，其余配置保持默认设置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">anonymous_enable&#x3D;NO      #禁止匿名用户登录\n\nlocal_enable&#x3D;YES         #支持本地用户登录\n\nchroot_local_user&#x3D;YES    #全部用户被限制在主目录\nchroot_list_enable&#x3D;YES   #启用例外用户名单\nchroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list  #指定用户列表文件，该列表中的用户不被锁定在主目录\n\nlisten&#x3D;YES               #监听IPv4 sockets\n\n#在行首添加#注释掉以下参数\n#listen_ipv6&#x3D;YES         #关闭监听IPv6 sockets\n\n#添加下列参数\nallow_writeable_chroot&#x3D;YES\nlocal_root&#x3D;&#x2F;var&#x2F;ftp&#x2F;test #设置本地用户登录后所在的目录</code></pre>\n\n<p>按 <strong>Esc</strong> 后输入 <strong>:wq</strong> 保存后退出，并前往<a href=\"#continue-steps\">这里</a>&gt;继续完成 vsftpd 配置。</p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><a href=\"https://filezilla-project.org/\">FileZilla - The free FTP solution (filezilla-project.org)</a></p>\n<p><span id=\"SELinux\"><a href=\"https://www.redhat.com/en/topics/linux/what-is-selinux\">What is SELinux? (redhat.com)</a></span></p>\n<p><span id=\"what-is-linux\"><a href=\"https://www.redhat.com/en/topics/linux/what-is-linux\">What is Linux? (redhat.com)</a></span></p>\n<p><span id=\"linux-kernel\"><a href=\"https://www.redhat.com/en/topics/linux/what-is-the-linux-kernel\">https://www.redhat.com/en/topics/linux/what-is-the-linux-kernel</a></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"建立一个FTP服务器吧！\"><a href=\"#建立一个FTP服务器吧！\" class=\"headerlink\" title=\"建立一个FTP服务器吧！\"></a>建立一个FTP服务器吧！</h1><h2 id=\"了解FTP\"><a href=\"#了解FTP\" class=\"headerlink\" title=\"了解FTP\"></a>了解FTP</h2><h3 id=\"什么是ftp？\"><a href=\"#什么是ftp？\" class=\"headerlink\" title=\"什么是ftp？\"></a>什么是ftp？</h3><p>FTP即：File Transfer Protocol，即ftp，可以直译为<strong>“文件传输协议”</strong>。但是由于FTP本身是使用明文进行数据传输，所以有了更多加密版本的FTP协议如：FTPS(FTP over SSL)，SFTP：Secure FTP(FTP over SSH)等</p>\n<h2 id=\"部署FTP服务器\"><a href=\"#部署FTP服务器\" class=\"headerlink\" title=\"部署FTP服务器\"></a>部署FTP服务器</h2><h3 id=\"以windows作为服务端——filezilla实现\"><a href=\"#以windows作为服务端——filezilla实现\" class=\"headerlink\" title=\"以windows作为服务端——filezilla实现\"></a>以windows作为服务端——<a href=\"#filezilla\">filezilla</a>实现</h3><p>推荐视频教程：<a href=\"https://www.bilibili.com/video/BV1xv411k7Lj?from=search&seid=6077142084469792314&spm_id_from=333.337.0.0\">FileZilla：如何快速搭建FTP服务器</a></p>\n<ol>\n<li><p>Filezilla Sever只支持Windows平台，而Client同时支持Windows，Linux，Mac</p>\n</li>\n<li><p>设置Filezilla时需要注意：你添加的Port不是实际使用时的端口，是管理端口，所以不论设为什么值，只要不和当前系统已有端口重合都是可以的</p>\n</li>\n<li><p>Filezilla使用多用户管理机制，不过你在正式使用之前需要先创建用户。在<code>Edit-User-general</code>中创建</p>\n<ul>\n<li>这个单个用户并不意味着是单个自然人，多个人是可以共享一个用户名和密码的，这里的用户主要是用于区分访问种类与权限而非界定访问的实际个人</li>\n<li>用户与用户之间可以设置不同目录来访问不同的资源：<code>shared folders</code>中管理，但是每一个用户都需要一个根目录</li>\n<li>当你添加一个非根目录的时候，需要手动指定它在访问时所在的目录——即电脑本地的文件路径和访问到的文件路径并不是不统一的。但是根目录是无需指定路径的，或者说根目录的路径是<code>/</code></li>\n<li>注意用户的权限管理，记得设置用户密码</li>\n</ul>\n</li>\n<li><p>home会占用网址的路径，它不需要指定路径，对于home外的目录，添加之后，需要指定新的路径</p>\n<ul>\n<li><p>需要注意的是，ftp服务中的添加的目录与本机文件的实际目录是可以没有关系的</p>\n<p>​    例如，对两个同级目录，你可以将一个目录赋在另一个目录的路径的子路径中</p>\n</li>\n<li><p>配置路径地址时，注意使用反斜杠</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"以Linux作为服务端——vsftpd实现\"><a href=\"#以Linux作为服务端——vsftpd实现\" class=\"headerlink\" title=\"以Linux作为服务端——vsftpd实现\"></a>以Linux作为服务端——vsftpd实现</h3><h4 id=\"在云服务器上部署ftp服务\"><a href=\"#在云服务器上部署ftp服务\" class=\"headerlink\" title=\"在云服务器上部署ftp服务\"></a>在云服务器上部署ftp服务</h4><p>这里采用了阿里云服务器的CentOS7系统，版本是7.6</p>\n<p>使用了常用的vsftpd包来搭建ftp服务</p>\n<p>vsftpd项目地址：<a href=\"https://security.appspot.com/vsftpd.html\">vsftpd - Secure, fast FTP server for UNIX-like systems (security.appspot.com)</a></p>\n<p>:::warning</p>\n<h5 id=\"安装ftp服务\"><a href=\"#安装ftp服务\" class=\"headerlink\" title=\"安装ftp服务\"></a>安装ftp服务</h5><p>请注意，本文可能仅适用于CentOS，其他的Linux发行版与CentOS虽同为Linux系统，但是也有诸多不同</p>\n<p>例如，第5步需要修改的vsftpd.conf文件，CentOS系统下它会出现在 /etc/vsftpd 文件夹下，而Ubuntu系统下它则会直接出现在 /etc 文件夹下</p>\n<p>如果你需要以本教程做参考的话，请不要照搬本教程。比如将CentOS的包管理工具yum替换为你当前Linux发行版下的包管理工具</p>\n<p>:::</p>\n<ol>\n<li>安装vsftpd</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum install -y vsftpd</code></pre>\n\n<ol start=\"2\">\n<li>设置vsftpd开机启动</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl enable vsftpd</code></pre>\n\n<ol start=\"3\">\n<li>启动vsftpd服务</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl start vsftpd</code></pre>\n\n<ol start=\"4\">\n<li>检验服务是否启动</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">netstat -antup | grep ftp</code></pre>\n\n<h5 id=\"配置vsftpd\"><a href=\"#配置vsftpd\" class=\"headerlink\" title=\"配置vsftpd\"></a>配置vsftpd</h5><h6 id=\"建立用户并为他配置用户专属文件夹\"><a href=\"#建立用户并为他配置用户专属文件夹\" class=\"headerlink\" title=\"建立用户并为他配置用户专属文件夹\"></a><span id=\"usernameAndCode\">建立用户并为他配置用户专属文件夹</span></h6><ol>\n<li><p>执行以下命令，为 FTP 服务创建一个 Linux 用户，本文以 ftpuser 为例。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">useradd ftpuser</code></pre>\n\n<p>当你创建了一个新的用户的时候，Linux回味这个用户在 <code>/home</code> 目录下建立一个以用户名为名的文件夹，并且这个目录这就是此后用户登陆时的默认路径 <code>~</code>所代指的路径</p>\n</li>\n<li><p>执行以下命令，设置 <code>ftpuser</code> 用户的密码。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">passwd ftpuser</code></pre>\n\n<p>输入密码后请按Enter确认设置，密码默认不显示，本文以JBRBunjie为例。</p>\n</li>\n<li><p>执行以下命令，创建 FTP 服务使用的文件目录，本文以/var/ftp/test为例。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkdir &#x2F;var&#x2F;ftp&#x2F;test</code></pre>\n\n<p>:::tip</p>\n<p>事实上，这个目录是哪里都可以的。只是一定要记得这个目录路径是什么，因为这个路径过会儿是会写入配置文件的。当客户机访问服务器时，实际地址就是这个地址</p>\n<p>:::</p>\n</li>\n<li><p>执行以下命令，修改目录权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chown -R ftpuser:ftpuser &#x2F;var&#x2F;ftp&#x2F;test</code></pre>\n\n<blockquote>\n<p>你也可以直接新开一个终端，并以ftpuser身份登录</p>\n<p>这样子可以省去很多没必要的麻烦，因为在ftpuser身份下创建的所以文件的owner都是ftpuser，就可以省略用户权限配置这一步</p>\n</blockquote>\n</li>\n</ol>\n<h6 id=\"修改vsftpd-conf配置文件，并设置chroot\"><a href=\"#修改vsftpd-conf配置文件，并设置chroot\" class=\"headerlink\" title=\"修改vsftpd.conf配置文件，并设置chroot\"></a>修改vsftpd.conf配置文件，并设置chroot</h6><ol>\n<li><p>打开要修改的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</code></pre></li>\n<li><p>按<code>i</code>切换至编辑模式以修改配置文件vsftpd.conf：</p>\n</li>\n</ol>\n<blockquote>\n<p>注意：</p>\n<p>FTP 可通过主动模式和被动模式与客户端机器进行连接并传输数据。由于大多数客户端机器的防火墙设置及无法获取真实 IP 等原因，一般选择<strong>被动模式</strong>搭建 FTP 服务。以下修改以设置被动模式为例，如需选择主动模式，可以参看腾讯云的文档：<a href=\"https://cloud.tencent.com/document/product/213/10912#port\">设置 FTP 主动模式</a>。</p>\n</blockquote>\n<ol start=\"3\">\n<li><p>修改以下配置参数，取消它们前面的<code>#</code>注释或者修改对应值，和本地用户的登录权限，设置指定例外用户列表文件的路径，并开启监听 IPv4 sockets。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># Allow anonymous FTP? (Beware - allowed by default if you comment this out).\n# 是否运行匿名用户登录\nanonymous_enable&#x3D;NO\n\n# Uncomment this to allow local users to log in.\n# When SELinux is enforcing check for SE bool ftp_home_dir\n# 取消此注释来运行本地用户登录\nlocal_enable&#x3D;YES\n\n# You may specify an explicit list of local users to chroot() to their home directory. If chroot_local_user is YES, then this list becomes a list of users to NOT chroot(). (Warning! chroot&#39;ing can be very dangerous. If using chroot, make sure that the user does not have write access to the top level directory within the chroot)\n# 如果两个配置项都为yes，那么, 凡是加在文件chroot_list中的用户都是不受限止的用户，即, 可以浏览其主目录的上级目录.\n# 如果不希望某用户能够浏览其主目录上级目录中的内容,可以如上设置,然后在文件vsftpd.chroot_list中去掉或不添加该用户即可。\n\n# 也可以如下配置\n# chroot_local_user＝NO\n# chroot_list_enable&#x3D;YES(这行必须要有, 否则文件vsftpd.chroot_list不会起作用)\n# 则所有用户都能够访问上级目录，你可以把所有不希望有这种浏览其主目录之上的各目录权限的用户添加到文件chroot_list中即可(一行一个用户名，此时, 在该文件中的用户都是不可以浏览其主目录之外的目录的)\nchroot_local_user&#x3D;YES\nchroot_list_enable&#x3D;YES\n# chroot_list路径\nchroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list\n\n# When &quot;listen&quot; directive is enabled, vsftpd runs in standalone mode and\n# listens on IPv4 sockets. This directive cannot be used in conjunction\n# with the listen_ipv6 directive.\n# 监听IPv4 sockets\nlisten&#x3D;YES</code></pre>\n\n<p>:::tip</p>\n<p>什么是<a href=\"#SELinux\">SELinux</a>？</p>\n<p>Security-Enhanced Linux (SELinux) is a security architecture for <a href=\"#what-is-linux\">Linux® systems</a> that allows administrators to have more control over who can access the system. It was originally developed by the United States National Security Agency (NSA) as a series of patches to the <a href=\"#linux-kernel\">Linux kernel</a> using Linux Security Modules (LSM). </p>\n<p>SELinux was released to the open source community in 2000, and was integrated into the upstream Linux kernel in 2003.</p>\n<p>SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux历史上最杰出的新安全子系统</p>\n<p>:::</p>\n</li>\n<li><p>在<code>listen_ipv6=YES</code>行首添加<code>#</code>来将此功能注释掉</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\n# Make sure, that one of the listen options is commented !!\n\n# 关闭监听 IPv6 sockets。\n# listen_ipv6&#x3D;YES</code></pre></li>\n<li><p>添加以下配置参数，开启被动模式，设置本地用户登录后所在目录，以及云服务器建立数据传输可使用的端口范围值</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">local_root&#x3D;&#x2F;var&#x2F;ftp&#x2F;test\nallow_writeable_chroot&#x3D;YES\npasv_enable&#x3D;YES\npasv_address&#x3D;xxx.xx.xxx.xx #请修改为您的 Linux 云服务器公网 IP\npasv_min_port&#x3D;40000\npasv_max_port&#x3D;45000</code></pre>\n\n<p>按 <code>Esc</code> 后输入 <code>:wq!</code> 保存后退出。</p>\n</li>\n<li><p><span id=\"continue-steps\">创建<code>chroot_list</code>文件</span></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim &#x2F;etc&#x2F;vsftpd&#x2F;chroot_list</code></pre>\n\n<ul>\n<li><p>按 <strong>i</strong> 进入编辑模式，输入用户名，一个用户名占据一行，</p>\n</li>\n<li><p>设置完成后按 <strong>Esc</strong> 并输入 <strong>:wq</strong> 保存后退出。</p>\n</li>\n<li><p>您若没有设置例外用户的需求，可跳过此步骤，输入 <strong>:wq</strong> 退出文件。或者直接改用 <code>touch</code> 命令来创建文件</p>\n</li>\n</ul>\n</li>\n<li><p>重启 FTP 服务。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl restart vsftpd</code></pre></li>\n</ol>\n<h5 id=\"设置云服务器安全组\"><a href=\"#设置云服务器安全组\" class=\"headerlink\" title=\"设置云服务器安全组\"></a>设置云服务器安全组</h5><p>增加新的策略：</p>\n<ol>\n<li>开放ftp 21端口</li>\n<li>开放你在vsftpd.config中所配置的端口范围(pasv_min_port - pasv_max_port) 40000 - 45000</li>\n</ol>\n<p>示例：</p>\n<p><img src=\"../images/FTPimage-20211002181804382.png\" alt=\"image-20211002181804382\"></p>\n<p>:::tip</p>\n<p>如果你使用的不是云服务器，你只需要将本地的防火墙指定端口打开就行</p>\n<p>:::</p>\n<h5 id=\"验证-FTP-服务\"><a href=\"#验证-FTP-服务\" class=\"headerlink\" title=\"验证 FTP 服务\"></a>验证 FTP 服务</h5><p>您可通过 FTP 客户端软件、浏览器或文件资源管理器等工具验证 FTP 服务。</p>\n<ol>\n<li><p>打开客户端的 IE 浏览器，选择【工具】&gt;【Internet 选项】&gt;【高级】，根据您选择的 FTP 模式进行修改：</p>\n<ul>\n<li><p>主动模式：取消勾选【使用被动 FTP】</p>\n</li>\n<li><p>被动模式：勾选【使用被动 FTP】</p>\n<p><img src=\"../images/FTP-image-20211002180657770.png\" alt=\"image-20211002180657770\"></p>\n</li>\n</ul>\n</li>\n<li><p>打开计算机的ftp客户端，如果是windows电脑可以直接使用<code>file explorer</code>，在路径栏中访问”<a href=\"ftp://xxx.xxx.xxx.xxx(你服务器的地址)&quot;/\">ftp://xxx.xxx.xxx.xxx（你服务器的地址）&quot;</a></p>\n</li>\n<li><p>在弹出的“登录身份”窗口中输入 <a href=\"#usernameAndCode\">配置 vsftpd</a> 中已设置的用户名及密码。本文使用的用户名为 <code>ftpuser</code>，密码为 <code>JBRBunjie</code></p>\n</li>\n<li><p>成功登录后，即可上传及下载文件</p>\n</li>\n</ol>\n<h2 id=\"踩坑集合\"><a href=\"#踩坑集合\" class=\"headerlink\" title=\"踩坑集合\"></a>踩坑集合</h2><h3 id=\"Linux-系统环境下\"><a href=\"#Linux-系统环境下\" class=\"headerlink\" title=\"Linux 系统环境下\"></a>Linux 系统环境下</h3><h4 id=\"550-No-such-file-or-directory-550-create-directory-operation-failed\"><a href=\"#550-No-such-file-or-directory-550-create-directory-operation-failed\" class=\"headerlink\" title=\"550 No such file or directory / 550 create directory operation failed\"></a>550 No such file or directory / 550 create directory operation failed</h4><p>查看当前用户：</p>\n<p>如果你能连上远程地址，但是根本看不到文件内容，并且当你输入正确密码时仍然报错：550</p>\n<p>建议排查的东西：</p>\n<ul>\n<li><p>你配置的目录是否正确：<code>/etc/vsftpd/vsftpd.conf</code> 中的 <code>local_root</code> 是否是你实际配置的目录</p>\n</li>\n<li><p><code>ftpuser</code> 是否拥有操作当前 <code>local_root=/var/ftp/test</code> 目录及内层文件的权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ls -l [option: existed folder in current menu]</code></pre></li>\n<li><p>服务是否启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">netstat -antup | grep ftp</code></pre></li>\n<li><p>修改了配置项但还没有重启服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl restart vsftpd</code></pre></li>\n<li><p>检查SELinux服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">getsebool -a | grep ftp</code></pre>\n\n<p>如果这条语句的结果是</p>\n<p><img src=\"../images/image-20210918235447255-16319804884733.png\" alt=\"image-20210918235447255\"></p>\n<p>代表SELinux安全服务处于disabled状态，不是这里的错，大概率还是上面四条错误</p>\n<p>但是如果是下面这样</p>\n</li>\n</ul>\n<p><img src=\"../images/image-20210918235240645-16319803627632.png\" alt=\"image-20210918235240645\"></p>\n<p>​    ——几乎所有与ftp相关的服务都被关闭掉了</p>\n<p>​    那几乎可以肯定是在这里出错了</p>\n<p>​    解决办法是修改/etc/selinux/config配置文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim &#x2F;etc&#x2F;selinux&#x2F;config</code></pre>\n\n<p>​    把<code>SELINUX</code>默认的<code>permissive</code>或<code>enforcing</code>改为<code>disabled</code></p>\n<p><img src=\"../images/image-20210918235654741-16319806164524.png\" alt=\"image-20210918235654741\"></p>\n<ul>\n<li>最后办法：重启计算机</li>\n</ul>\n<h4 id=\"553-Could-not-create-file\"><a href=\"#553-Could-not-create-file\" class=\"headerlink\" title=\"553 Could not create file\"></a>553 Could not create file</h4><p>解决方法</p>\n<ol>\n<li><p>执行以下命令，检查服务器磁盘空间的使用率。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">df -h</code></pre>\n\n<ul>\n<li>如果磁盘空间不足，将会导致文件无法上传，建议删除磁盘容量较大的文件。</li>\n<li>如果磁盘空间正常，请执行下一步。</li>\n</ul>\n</li>\n<li><p>执行以下命令，检查 FTP 目录是否有写的权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ls -l &#x2F;home&#x2F;test      \n# &#x2F;home&#x2F;test 为 FTP 目录，请修改为您实际的 FTP 目录。</code></pre>\n\n<ul>\n<li>若返回结果中没有 <code>w</code>，则表示该用户没有写的权限，请执行下一步。</li>\n<li>若返回结果中已有 <code>w</code>，(⊙﹏⊙)，那我建议你重装系统（</li>\n</ul>\n</li>\n<li><p>执行以下命令，对 FTP 目录加上写的权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chmod +w &#x2F;home&#x2F;test \n# &#x2F;home&#x2F;test 为 FTP 目录，请修改为您实际的 FTP 目录。</code></pre></li>\n<li><p>执行以下命令，重新检查写的权限是否设置成功。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ls -l &#x2F;home&#x2F;test   \n# &#x2F;home&#x2F;test 为 FTP 目录，请修改为您实际的 FTP 目录。</code></pre></li>\n</ol>\n<h3 id=\"设置-FTP-主动模式\"><a href=\"#设置-FTP-主动模式\" class=\"headerlink\" title=\"设置 FTP 主动模式\"></a>设置 FTP 主动模式</h3><p>主动模式需修改的配置如下，其余配置保持默认设置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">anonymous_enable&#x3D;NO      #禁止匿名用户登录\n\nlocal_enable&#x3D;YES         #支持本地用户登录\n\nchroot_local_user&#x3D;YES    #全部用户被限制在主目录\nchroot_list_enable&#x3D;YES   #启用例外用户名单\nchroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list  #指定用户列表文件，该列表中的用户不被锁定在主目录\n\nlisten&#x3D;YES               #监听IPv4 sockets\n\n#在行首添加#注释掉以下参数\n#listen_ipv6&#x3D;YES         #关闭监听IPv6 sockets\n\n#添加下列参数\nallow_writeable_chroot&#x3D;YES\nlocal_root&#x3D;&#x2F;var&#x2F;ftp&#x2F;test #设置本地用户登录后所在的目录</code></pre>\n\n<p>按 <strong>Esc</strong> 后输入 <strong>:wq</strong> 保存后退出，并前往<a href=\"#continue-steps\">这里</a>&gt;继续完成 vsftpd 配置。</p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p><a href=\"https://filezilla-project.org/\">FileZilla - The free FTP solution (filezilla-project.org)</a></p>\n<p><span id=\"SELinux\"><a href=\"https://www.redhat.com/en/topics/linux/what-is-selinux\">What is SELinux? (redhat.com)</a></span></p>\n<p><span id=\"what-is-linux\"><a href=\"https://www.redhat.com/en/topics/linux/what-is-linux\">What is Linux? (redhat.com)</a></span></p>\n<p><span id=\"linux-kernel\"><a href=\"https://www.redhat.com/en/topics/linux/what-is-the-linux-kernel\">https://www.redhat.com/en/topics/linux/what-is-the-linux-kernel</a></span></p>\n"},{"title":"私有Git仓库搭建","date":"2021-10-05T03:05:03.000Z","<!--feature":"true-->","cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","_content":"# 云服务器上的私有Git仓库搭建\n\n---\n\n## 环境：\n\n阿里云服务器CentOS7.6\n\n## 部署Git\n\n### 安装Git：\n\n#### 非CentOS安装Git：\n\n绝大多数Linux发行版安装Git只需要一条命令——参看：<a href=\"#gitLinux\">Git官方指南</a>\n\n#### 关于CentOS安装：\n\n与绝大部分Linux系统不同，redhat发行的系统通过包管理工具yum最高只能安装到1.8.3版本，需要使用更高版本的话都只能通过源码编译安装\n\n>Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.\n>\n>RHEL and derivatives typically ship older versions of git. You can [download a tarball](#gitDownloadPage) and build from source, or use a 3rd-party repository such as [the IUS Community Project](#gitDownloadPage) to obtain a more recent version of git.\n\n##### 下载源码\n\n首先我们先选择要安装的Git版本，我选择了2.33.0，下载并传到服务器上\n\n![image-20211001150441411](../images/image-20211001150441411.png)\n\n##### 解压，编译，安装\n\n```bash\n# 查看git版本\ngit --version\n \n# 卸载\n# yum remove git\nyum eras\n\n# 进入源码目录\n$ cd git-2.33.0\n\n# 安装工具和依赖\n$ yum install libcurl-devel\n$ yum install expat-devel\n$ yum install openssl-devel\n \n# 编译\n$ make prefix=/usr/local/git all\n# 编译内容带/usr/locak/git目录\n$ make prefix=/usr/local/git install\n# 在/usr/local/git目录完成安装，请注意，这个不是git的默认路径，所以我们还需要为git的bin中文件建立软连接到/usr/bin中\n```\n\n:::tip\n\n关于编译命令：make\n\nmake all：编译所有的目标\n\nmake install：安装已编译好的程序\n\n:::warning\n\nBy default, `make install` will install all the files in `/usr/local/bin`, `/usr/local/lib` etc.  You can specify an installation prefix other than `/usr/local' using `--prefix', for instance `--prefix=$HOME`\n\n:::\n\n:::\n\n##### 添加到环境变量\n\n```bash\n# 将git路径加入bashrc配置\n$ echo \"export PATH=$PATH:/usr/local/git/bin\" >>/etc/bashrc\n \n# 应用bashrc\n$ source /etc/bashrc\n\n# 验证结果\n$ git --version\n# git version 2.33.0\n```\n\n##### 建立软连接\n\n```bash\nln -s /usr/local/git/bin/git-upload-pack /usr/bin/git-upload-pack\nln -s /usr/local/git/bin/git-r-pack /usr/bin/git-receive-pack\n# 一定要注意抓取地址和目标地址都要调换！\n# 如果没有在/usr/bin目录添加这两个文件的话，会因为没有处理请求的命令，报出没有权限的错\n```\n\n### 创建仓库：\n\n```bash\ncd /home/git # 进入git用户目录\n# 这个目录下会有三个以.记来隐藏的文件，请不要删除\n\n# 请以git用户的身份执行以下命令，否则还要执行修改用户目录权限的命令\n# 否则当客户端在以git身份执行clone等操作时会因为没有权限而失败\ngit init --bare yourRepositoryName.git # 这个命令有多个版本，如：git init yourRepositoryName.git, git init -bare youreRepositoryName.git 请注意区分\n```\n\n### 在客户端克隆仓库：\n\n```powershell\ngit clone git@server-IP:/home/git/test.git\n```\n\n完成！\n\n![image-20211003154821032](../images/Git-image-20211003154821032.png)\n\n\n\n### 添加工作空间：\n\n一般来讲，bare仓库不像是普通的仓库那样会在根目录中保存文件，bare仓库不保存文件并将.git文件夹下的全部内容直接暴露在当前仓库根目录中，且不包含工作区\n\n工作空间示例：\n\n![image-20211003155529616](../images/Git-image-20211003155529616.png)\n\n要查看工作空间，我们需要使用一个<a href=\"#hook\">钩子</a>：post-receive钩子\n\n有了这个钩子，我们要在裸仓库内看到用户提交的工作空间很简单了。只需要创建/编写post-receivek即可：\n\n在服务器裸仓库内\n\n```bash\ncd hooks\n```\n\n创建并编辑post-receive\n\n```bash\nvim post-receive\n```\n\n输入内容：\n\n```bash\n#!/bin/sh\ngit --work-tree=#工作空间# --git-dir=#Git仓库地址# checkout -f\n```\n例如，我此处的配置是：\n\n```bash\n#!/bin/sh\ngit --work-tree=/home/git/gitWorkspace/testWorkspace --git-dir=/home/git/test.git checkout -f\n```\n\n+ 工作空间：服务器上空目录地址，git用户需要有读写权限。\n+ Git仓库地址：服务器上本仓库地址。\n\n赋予执行权限：\n\n```bash\nchmod +x post-receive\n# 用ls -alc\n```\n\n![image-20211003171322547](../images/Git-image-20211003171322547.png)\n\n之后，用户push提交后，–work-tree参数定义的工作空间就可以看到用户提交的具体内容：\n\n![image-20211003165533697](../images/Git-image-20211003165533697.png)\n\n---\n\n## 参考内容：\n\n### 教程中提到的webstie\n\n[Git Website (git-scm.com)](https://git-scm.com/)\n\n<span id=\"gitLinux\">[Git Download Page(git-scm.com)](https://git-scm.com/download/linux)</span>\n\n<span id=\"gitDownloadPage\">[Index of /pub/software/scm/git/ (kernel.org)](https://mirrors.edge.kernel.org/pub/software/scm/git/)</span>\n\n<span id=\"IUS\">[IUS](https://ius.io/)</span>\n\n<span id=\"hook\">[Git - Git 钩子 (git-scm.com)](https://git-scm.com/book/zh/v2/自定义-Git-Git-钩子)</span>\n\n### 拓展资料\n\n[all about \"bare\" repos -- what, why, and how to fix a non-bare push (htmlpreview.github.io)](http://htmlpreview.github.io/?https://github.com/sitaramc/sitaramc.github.com/blob/dce410b2a2804723676db9cabd7bb506b6d9ba05/concepts/bare.html)\n\n[git - Where are the files in a bare repository? - Stack Overflow](https://stackoverflow.com/questions/37033032/where-are-the-files-in-a-bare-repository)\n\n[Git - Getting Git on a Server (git-scm.com)](https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server)\n\n[Accessing files of a repository from the Git server - Stack Overflow](https://stackoverflow.com/questions/20939430/accessing-files-of-a-repository-from-the-git-server)\n\n<iframe src=\"//player.bilibili.com/player.html?aid=932066812&bvid=BV11M4y1N7q6&cid=383208463&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n","source":"_posts/Setup Private Git Repository .md","raw":"---\ntitle: 私有Git仓库搭建\ndate: 2021-10-5 11:05:03\ntags:\n  - Git\ncategories:\n  - 配置方法\n<!--feature: true-->\ncover: https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg\n---\n# 云服务器上的私有Git仓库搭建\n\n---\n\n## 环境：\n\n阿里云服务器CentOS7.6\n\n## 部署Git\n\n### 安装Git：\n\n#### 非CentOS安装Git：\n\n绝大多数Linux发行版安装Git只需要一条命令——参看：<a href=\"#gitLinux\">Git官方指南</a>\n\n#### 关于CentOS安装：\n\n与绝大部分Linux系统不同，redhat发行的系统通过包管理工具yum最高只能安装到1.8.3版本，需要使用更高版本的话都只能通过源码编译安装\n\n>Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.\n>\n>RHEL and derivatives typically ship older versions of git. You can [download a tarball](#gitDownloadPage) and build from source, or use a 3rd-party repository such as [the IUS Community Project](#gitDownloadPage) to obtain a more recent version of git.\n\n##### 下载源码\n\n首先我们先选择要安装的Git版本，我选择了2.33.0，下载并传到服务器上\n\n![image-20211001150441411](../images/image-20211001150441411.png)\n\n##### 解压，编译，安装\n\n```bash\n# 查看git版本\ngit --version\n \n# 卸载\n# yum remove git\nyum eras\n\n# 进入源码目录\n$ cd git-2.33.0\n\n# 安装工具和依赖\n$ yum install libcurl-devel\n$ yum install expat-devel\n$ yum install openssl-devel\n \n# 编译\n$ make prefix=/usr/local/git all\n# 编译内容带/usr/locak/git目录\n$ make prefix=/usr/local/git install\n# 在/usr/local/git目录完成安装，请注意，这个不是git的默认路径，所以我们还需要为git的bin中文件建立软连接到/usr/bin中\n```\n\n:::tip\n\n关于编译命令：make\n\nmake all：编译所有的目标\n\nmake install：安装已编译好的程序\n\n:::warning\n\nBy default, `make install` will install all the files in `/usr/local/bin`, `/usr/local/lib` etc.  You can specify an installation prefix other than `/usr/local' using `--prefix', for instance `--prefix=$HOME`\n\n:::\n\n:::\n\n##### 添加到环境变量\n\n```bash\n# 将git路径加入bashrc配置\n$ echo \"export PATH=$PATH:/usr/local/git/bin\" >>/etc/bashrc\n \n# 应用bashrc\n$ source /etc/bashrc\n\n# 验证结果\n$ git --version\n# git version 2.33.0\n```\n\n##### 建立软连接\n\n```bash\nln -s /usr/local/git/bin/git-upload-pack /usr/bin/git-upload-pack\nln -s /usr/local/git/bin/git-r-pack /usr/bin/git-receive-pack\n# 一定要注意抓取地址和目标地址都要调换！\n# 如果没有在/usr/bin目录添加这两个文件的话，会因为没有处理请求的命令，报出没有权限的错\n```\n\n### 创建仓库：\n\n```bash\ncd /home/git # 进入git用户目录\n# 这个目录下会有三个以.记来隐藏的文件，请不要删除\n\n# 请以git用户的身份执行以下命令，否则还要执行修改用户目录权限的命令\n# 否则当客户端在以git身份执行clone等操作时会因为没有权限而失败\ngit init --bare yourRepositoryName.git # 这个命令有多个版本，如：git init yourRepositoryName.git, git init -bare youreRepositoryName.git 请注意区分\n```\n\n### 在客户端克隆仓库：\n\n```powershell\ngit clone git@server-IP:/home/git/test.git\n```\n\n完成！\n\n![image-20211003154821032](../images/Git-image-20211003154821032.png)\n\n\n\n### 添加工作空间：\n\n一般来讲，bare仓库不像是普通的仓库那样会在根目录中保存文件，bare仓库不保存文件并将.git文件夹下的全部内容直接暴露在当前仓库根目录中，且不包含工作区\n\n工作空间示例：\n\n![image-20211003155529616](../images/Git-image-20211003155529616.png)\n\n要查看工作空间，我们需要使用一个<a href=\"#hook\">钩子</a>：post-receive钩子\n\n有了这个钩子，我们要在裸仓库内看到用户提交的工作空间很简单了。只需要创建/编写post-receivek即可：\n\n在服务器裸仓库内\n\n```bash\ncd hooks\n```\n\n创建并编辑post-receive\n\n```bash\nvim post-receive\n```\n\n输入内容：\n\n```bash\n#!/bin/sh\ngit --work-tree=#工作空间# --git-dir=#Git仓库地址# checkout -f\n```\n例如，我此处的配置是：\n\n```bash\n#!/bin/sh\ngit --work-tree=/home/git/gitWorkspace/testWorkspace --git-dir=/home/git/test.git checkout -f\n```\n\n+ 工作空间：服务器上空目录地址，git用户需要有读写权限。\n+ Git仓库地址：服务器上本仓库地址。\n\n赋予执行权限：\n\n```bash\nchmod +x post-receive\n# 用ls -alc\n```\n\n![image-20211003171322547](../images/Git-image-20211003171322547.png)\n\n之后，用户push提交后，–work-tree参数定义的工作空间就可以看到用户提交的具体内容：\n\n![image-20211003165533697](../images/Git-image-20211003165533697.png)\n\n---\n\n## 参考内容：\n\n### 教程中提到的webstie\n\n[Git Website (git-scm.com)](https://git-scm.com/)\n\n<span id=\"gitLinux\">[Git Download Page(git-scm.com)](https://git-scm.com/download/linux)</span>\n\n<span id=\"gitDownloadPage\">[Index of /pub/software/scm/git/ (kernel.org)](https://mirrors.edge.kernel.org/pub/software/scm/git/)</span>\n\n<span id=\"IUS\">[IUS](https://ius.io/)</span>\n\n<span id=\"hook\">[Git - Git 钩子 (git-scm.com)](https://git-scm.com/book/zh/v2/自定义-Git-Git-钩子)</span>\n\n### 拓展资料\n\n[all about \"bare\" repos -- what, why, and how to fix a non-bare push (htmlpreview.github.io)](http://htmlpreview.github.io/?https://github.com/sitaramc/sitaramc.github.com/blob/dce410b2a2804723676db9cabd7bb506b6d9ba05/concepts/bare.html)\n\n[git - Where are the files in a bare repository? - Stack Overflow](https://stackoverflow.com/questions/37033032/where-are-the-files-in-a-bare-repository)\n\n[Git - Getting Git on a Server (git-scm.com)](https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server)\n\n[Accessing files of a repository from the Git server - Stack Overflow](https://stackoverflow.com/questions/20939430/accessing-files-of-a-repository-from-the-git-server)\n\n<iframe src=\"//player.bilibili.com/player.html?aid=932066812&bvid=BV11M4y1N7q6&cid=383208463&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n","slug":"Setup Private Git Repository ","published":1,"updated":"2021-10-05T03:19:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckudindkz00025smbhwpld4m6","content":"<h1 id=\"云服务器上的私有Git仓库搭建\"><a href=\"#云服务器上的私有Git仓库搭建\" class=\"headerlink\" title=\"云服务器上的私有Git仓库搭建\"></a>云服务器上的私有Git仓库搭建</h1><hr>\n<h2 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h2><p>阿里云服务器CentOS7.6</p>\n<h2 id=\"部署Git\"><a href=\"#部署Git\" class=\"headerlink\" title=\"部署Git\"></a>部署Git</h2><h3 id=\"安装Git：\"><a href=\"#安装Git：\" class=\"headerlink\" title=\"安装Git：\"></a>安装Git：</h3><h4 id=\"非CentOS安装Git：\"><a href=\"#非CentOS安装Git：\" class=\"headerlink\" title=\"非CentOS安装Git：\"></a>非CentOS安装Git：</h4><p>绝大多数Linux发行版安装Git只需要一条命令——参看：<a href=\"#gitLinux\">Git官方指南</a></p>\n<h4 id=\"关于CentOS安装：\"><a href=\"#关于CentOS安装：\" class=\"headerlink\" title=\"关于CentOS安装：\"></a>关于CentOS安装：</h4><p>与绝大部分Linux系统不同，redhat发行的系统通过包管理工具yum最高只能安装到1.8.3版本，需要使用更高版本的话都只能通过源码编译安装</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.</p>\n<p>RHEL and derivatives typically ship older versions of git. You can <a href=\"#gitDownloadPage\">download a tarball</a> and build from source, or use a 3rd-party repository such as <a href=\"#gitDownloadPage\">the IUS Community Project</a> to obtain a more recent version of git.</p></blockquote>\n<h5 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h5><p>首先我们先选择要安装的Git版本，我选择了2.33.0，下载并传到服务器上</p>\n<p><img src=\"../images/image-20211001150441411.png\" alt=\"image-20211001150441411\"></p>\n<h5 id=\"解压，编译，安装\"><a href=\"#解压，编译，安装\" class=\"headerlink\" title=\"解压，编译，安装\"></a>解压，编译，安装</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 查看git版本\ngit --version\n \n# 卸载\n# yum remove git\nyum eras\n\n# 进入源码目录\n$ cd git-2.33.0\n\n# 安装工具和依赖\n$ yum install libcurl-devel\n$ yum install expat-devel\n$ yum install openssl-devel\n \n# 编译\n$ make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git all\n# 编译内容带&#x2F;usr&#x2F;locak&#x2F;git目录\n$ make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git install\n# 在&#x2F;usr&#x2F;local&#x2F;git目录完成安装，请注意，这个不是git的默认路径，所以我们还需要为git的bin中文件建立软连接到&#x2F;usr&#x2F;bin中</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>关于编译命令：make</p>\n<p>make all：编译所有的目标</p>\n<p>make install：安装已编译好的程序</p>\n<p>:::warning</p>\n<p>By default, <code>make install</code> will install all the files in <code>/usr/local/bin</code>, <code>/usr/local/lib</code> etc.  You can specify an installation prefix other than <code>/usr/local&#39; using </code>–prefix’, for instance <code>--prefix=$HOME</code></p>\n</p>\n</div>\n<p>:::</p>\n<h5 id=\"添加到环境变量\"><a href=\"#添加到环境变量\" class=\"headerlink\" title=\"添加到环境变量\"></a>添加到环境变量</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 将git路径加入bashrc配置\n$ echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&quot; &gt;&gt;&#x2F;etc&#x2F;bashrc\n \n# 应用bashrc\n$ source &#x2F;etc&#x2F;bashrc\n\n# 验证结果\n$ git --version\n# git version 2.33.0</code></pre>\n\n<h5 id=\"建立软连接\"><a href=\"#建立软连接\" class=\"headerlink\" title=\"建立软连接\"></a>建立软连接</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ln -s &#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&#x2F;git-upload-pack &#x2F;usr&#x2F;bin&#x2F;git-upload-pack\nln -s &#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&#x2F;git-r-pack &#x2F;usr&#x2F;bin&#x2F;git-receive-pack\n# 一定要注意抓取地址和目标地址都要调换！\n# 如果没有在&#x2F;usr&#x2F;bin目录添加这两个文件的话，会因为没有处理请求的命令，报出没有权限的错</code></pre>\n\n<h3 id=\"创建仓库：\"><a href=\"#创建仓库：\" class=\"headerlink\" title=\"创建仓库：\"></a>创建仓库：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd &#x2F;home&#x2F;git # 进入git用户目录\n# 这个目录下会有三个以.记来隐藏的文件，请不要删除\n\n# 请以git用户的身份执行以下命令，否则还要执行修改用户目录权限的命令\n# 否则当客户端在以git身份执行clone等操作时会因为没有权限而失败\ngit init --bare yourRepositoryName.git # 这个命令有多个版本，如：git init yourRepositoryName.git, git init -bare youreRepositoryName.git 请注意区分</code></pre>\n\n<h3 id=\"在客户端克隆仓库：\"><a href=\"#在客户端克隆仓库：\" class=\"headerlink\" title=\"在客户端克隆仓库：\"></a>在客户端克隆仓库：</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">git clone git@server-IP:&#x2F;home&#x2F;git&#x2F;test.git</code></pre>\n\n<p>完成！</p>\n<p><img src=\"../images/Git-image-20211003154821032.png\" alt=\"image-20211003154821032\"></p>\n<h3 id=\"添加工作空间：\"><a href=\"#添加工作空间：\" class=\"headerlink\" title=\"添加工作空间：\"></a>添加工作空间：</h3><p>一般来讲，bare仓库不像是普通的仓库那样会在根目录中保存文件，bare仓库不保存文件并将.git文件夹下的全部内容直接暴露在当前仓库根目录中，且不包含工作区</p>\n<p>工作空间示例：</p>\n<p><img src=\"../images/Git-image-20211003155529616.png\" alt=\"image-20211003155529616\"></p>\n<p>要查看工作空间，我们需要使用一个<a href=\"#hook\">钩子</a>：post-receive钩子</p>\n<p>有了这个钩子，我们要在裸仓库内看到用户提交的工作空间很简单了。只需要创建/编写post-receivek即可：</p>\n<p>在服务器裸仓库内</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd hooks</code></pre>\n\n<p>创建并编辑post-receive</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim post-receive</code></pre>\n\n<p>输入内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;sh\ngit --work-tree&#x3D;#工作空间# --git-dir&#x3D;#Git仓库地址# checkout -f</code></pre>\n<p>例如，我此处的配置是：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;sh\ngit --work-tree&#x3D;&#x2F;home&#x2F;git&#x2F;gitWorkspace&#x2F;testWorkspace --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;test.git checkout -f</code></pre>\n\n<ul>\n<li>工作空间：服务器上空目录地址，git用户需要有读写权限。</li>\n<li>Git仓库地址：服务器上本仓库地址。</li>\n</ul>\n<p>赋予执行权限：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chmod +x post-receive\n# 用ls -alc</code></pre>\n\n<p><img src=\"../images/Git-image-20211003171322547.png\" alt=\"image-20211003171322547\"></p>\n<p>之后，用户push提交后，–work-tree参数定义的工作空间就可以看到用户提交的具体内容：</p>\n<p><img src=\"../images/Git-image-20211003165533697.png\" alt=\"image-20211003165533697\"></p>\n<hr>\n<h2 id=\"参考内容：\"><a href=\"#参考内容：\" class=\"headerlink\" title=\"参考内容：\"></a>参考内容：</h2><h3 id=\"教程中提到的webstie\"><a href=\"#教程中提到的webstie\" class=\"headerlink\" title=\"教程中提到的webstie\"></a>教程中提到的webstie</h3><p><a href=\"https://git-scm.com/\">Git Website (git-scm.com)</a></p>\n<p><span id=\"gitLinux\"><a href=\"https://git-scm.com/download/linux\">Git Download Page(git-scm.com)</a></span></p>\n<p><span id=\"gitDownloadPage\"><a href=\"https://mirrors.edge.kernel.org/pub/software/scm/git/\">Index of /pub/software/scm/git/ (kernel.org)</a></span></p>\n<p><span id=\"IUS\"><a href=\"https://ius.io/\">IUS</a></span></p>\n<p><span id=\"hook\"><a href=\"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\">Git - Git 钩子 (git-scm.com)</a></span></p>\n<h3 id=\"拓展资料\"><a href=\"#拓展资料\" class=\"headerlink\" title=\"拓展资料\"></a>拓展资料</h3><p><a href=\"http://htmlpreview.github.io/?https://github.com/sitaramc/sitaramc.github.com/blob/dce410b2a2804723676db9cabd7bb506b6d9ba05/concepts/bare.html\">all about “bare” repos – what, why, and how to fix a non-bare push (htmlpreview.github.io)</a></p>\n<p><a href=\"https://stackoverflow.com/questions/37033032/where-are-the-files-in-a-bare-repository\">git - Where are the files in a bare repository? - Stack Overflow</a></p>\n<p><a href=\"https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server\">Git - Getting Git on a Server (git-scm.com)</a></p>\n<p><a href=\"https://stackoverflow.com/questions/20939430/accessing-files-of-a-repository-from-the-git-server\">Accessing files of a repository from the Git server - Stack Overflow</a></p>\n<iframe src=\"//player.bilibili.com/player.html?aid=932066812&bvid=BV11M4y1N7q6&cid=383208463&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"云服务器上的私有Git仓库搭建\"><a href=\"#云服务器上的私有Git仓库搭建\" class=\"headerlink\" title=\"云服务器上的私有Git仓库搭建\"></a>云服务器上的私有Git仓库搭建</h1><hr>\n<h2 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h2><p>阿里云服务器CentOS7.6</p>\n<h2 id=\"部署Git\"><a href=\"#部署Git\" class=\"headerlink\" title=\"部署Git\"></a>部署Git</h2><h3 id=\"安装Git：\"><a href=\"#安装Git：\" class=\"headerlink\" title=\"安装Git：\"></a>安装Git：</h3><h4 id=\"非CentOS安装Git：\"><a href=\"#非CentOS安装Git：\" class=\"headerlink\" title=\"非CentOS安装Git：\"></a>非CentOS安装Git：</h4><p>绝大多数Linux发行版安装Git只需要一条命令——参看：<a href=\"#gitLinux\">Git官方指南</a></p>\n<h4 id=\"关于CentOS安装：\"><a href=\"#关于CentOS安装：\" class=\"headerlink\" title=\"关于CentOS安装：\"></a>关于CentOS安装：</h4><p>与绝大部分Linux系统不同，redhat发行的系统通过包管理工具yum最高只能安装到1.8.3版本，需要使用更高版本的话都只能通过源码编译安装</p>\n<blockquote>\n<p>Red Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et al.</p>\n<p>RHEL and derivatives typically ship older versions of git. You can <a href=\"#gitDownloadPage\">download a tarball</a> and build from source, or use a 3rd-party repository such as <a href=\"#gitDownloadPage\">the IUS Community Project</a> to obtain a more recent version of git.</p>\n</blockquote>\n<h5 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h5><p>首先我们先选择要安装的Git版本，我选择了2.33.0，下载并传到服务器上</p>\n<p><img src=\"../images/image-20211001150441411.png\" alt=\"image-20211001150441411\"></p>\n<h5 id=\"解压，编译，安装\"><a href=\"#解压，编译，安装\" class=\"headerlink\" title=\"解压，编译，安装\"></a>解压，编译，安装</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 查看git版本\ngit --version\n \n# 卸载\n# yum remove git\nyum eras\n\n# 进入源码目录\n$ cd git-2.33.0\n\n# 安装工具和依赖\n$ yum install libcurl-devel\n$ yum install expat-devel\n$ yum install openssl-devel\n \n# 编译\n$ make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git all\n# 编译内容带&#x2F;usr&#x2F;locak&#x2F;git目录\n$ make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git install\n# 在&#x2F;usr&#x2F;local&#x2F;git目录完成安装，请注意，这个不是git的默认路径，所以我们还需要为git的bin中文件建立软连接到&#x2F;usr&#x2F;bin中</code></pre>\n\n<p>:::tip</p>\n<p>关于编译命令：make</p>\n<p>make all：编译所有的目标</p>\n<p>make install：安装已编译好的程序</p>\n<p>:::warning</p>\n<p>By default, <code>make install</code> will install all the files in <code>/usr/local/bin</code>, <code>/usr/local/lib</code> etc.  You can specify an installation prefix other than <code>/usr/local&#39; using </code>–prefix’, for instance <code>--prefix=$HOME</code></p>\n<p>:::</p>\n<p>:::</p>\n<h5 id=\"添加到环境变量\"><a href=\"#添加到环境变量\" class=\"headerlink\" title=\"添加到环境变量\"></a>添加到环境变量</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 将git路径加入bashrc配置\n$ echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&quot; &gt;&gt;&#x2F;etc&#x2F;bashrc\n \n# 应用bashrc\n$ source &#x2F;etc&#x2F;bashrc\n\n# 验证结果\n$ git --version\n# git version 2.33.0</code></pre>\n\n<h5 id=\"建立软连接\"><a href=\"#建立软连接\" class=\"headerlink\" title=\"建立软连接\"></a>建立软连接</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ln -s &#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&#x2F;git-upload-pack &#x2F;usr&#x2F;bin&#x2F;git-upload-pack\nln -s &#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&#x2F;git-r-pack &#x2F;usr&#x2F;bin&#x2F;git-receive-pack\n# 一定要注意抓取地址和目标地址都要调换！\n# 如果没有在&#x2F;usr&#x2F;bin目录添加这两个文件的话，会因为没有处理请求的命令，报出没有权限的错</code></pre>\n\n<h3 id=\"创建仓库：\"><a href=\"#创建仓库：\" class=\"headerlink\" title=\"创建仓库：\"></a>创建仓库：</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd &#x2F;home&#x2F;git # 进入git用户目录\n# 这个目录下会有三个以.记来隐藏的文件，请不要删除\n\n# 请以git用户的身份执行以下命令，否则还要执行修改用户目录权限的命令\n# 否则当客户端在以git身份执行clone等操作时会因为没有权限而失败\ngit init --bare yourRepositoryName.git # 这个命令有多个版本，如：git init yourRepositoryName.git, git init -bare youreRepositoryName.git 请注意区分</code></pre>\n\n<h3 id=\"在客户端克隆仓库：\"><a href=\"#在客户端克隆仓库：\" class=\"headerlink\" title=\"在客户端克隆仓库：\"></a>在客户端克隆仓库：</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">git clone git@server-IP:&#x2F;home&#x2F;git&#x2F;test.git</code></pre>\n\n<p>完成！</p>\n<p><img src=\"../images/Git-image-20211003154821032.png\" alt=\"image-20211003154821032\"></p>\n<h3 id=\"添加工作空间：\"><a href=\"#添加工作空间：\" class=\"headerlink\" title=\"添加工作空间：\"></a>添加工作空间：</h3><p>一般来讲，bare仓库不像是普通的仓库那样会在根目录中保存文件，bare仓库不保存文件并将.git文件夹下的全部内容直接暴露在当前仓库根目录中，且不包含工作区</p>\n<p>工作空间示例：</p>\n<p><img src=\"../images/Git-image-20211003155529616.png\" alt=\"image-20211003155529616\"></p>\n<p>要查看工作空间，我们需要使用一个<a href=\"#hook\">钩子</a>：post-receive钩子</p>\n<p>有了这个钩子，我们要在裸仓库内看到用户提交的工作空间很简单了。只需要创建/编写post-receivek即可：</p>\n<p>在服务器裸仓库内</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd hooks</code></pre>\n\n<p>创建并编辑post-receive</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vim post-receive</code></pre>\n\n<p>输入内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;sh\ngit --work-tree&#x3D;#工作空间# --git-dir&#x3D;#Git仓库地址# checkout -f</code></pre>\n<p>例如，我此处的配置是：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;sh\ngit --work-tree&#x3D;&#x2F;home&#x2F;git&#x2F;gitWorkspace&#x2F;testWorkspace --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;test.git checkout -f</code></pre>\n\n<ul>\n<li>工作空间：服务器上空目录地址，git用户需要有读写权限。</li>\n<li>Git仓库地址：服务器上本仓库地址。</li>\n</ul>\n<p>赋予执行权限：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chmod +x post-receive\n# 用ls -alc</code></pre>\n\n<p><img src=\"../images/Git-image-20211003171322547.png\" alt=\"image-20211003171322547\"></p>\n<p>之后，用户push提交后，–work-tree参数定义的工作空间就可以看到用户提交的具体内容：</p>\n<p><img src=\"../images/Git-image-20211003165533697.png\" alt=\"image-20211003165533697\"></p>\n<hr>\n<h2 id=\"参考内容：\"><a href=\"#参考内容：\" class=\"headerlink\" title=\"参考内容：\"></a>参考内容：</h2><h3 id=\"教程中提到的webstie\"><a href=\"#教程中提到的webstie\" class=\"headerlink\" title=\"教程中提到的webstie\"></a>教程中提到的webstie</h3><p><a href=\"https://git-scm.com/\">Git Website (git-scm.com)</a></p>\n<p><span id=\"gitLinux\"><a href=\"https://git-scm.com/download/linux\">Git Download Page(git-scm.com)</a></span></p>\n<p><span id=\"gitDownloadPage\"><a href=\"https://mirrors.edge.kernel.org/pub/software/scm/git/\">Index of /pub/software/scm/git/ (kernel.org)</a></span></p>\n<p><span id=\"IUS\"><a href=\"https://ius.io/\">IUS</a></span></p>\n<p><span id=\"hook\"><a href=\"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\">Git - Git 钩子 (git-scm.com)</a></span></p>\n<h3 id=\"拓展资料\"><a href=\"#拓展资料\" class=\"headerlink\" title=\"拓展资料\"></a>拓展资料</h3><p><a href=\"http://htmlpreview.github.io/?https://github.com/sitaramc/sitaramc.github.com/blob/dce410b2a2804723676db9cabd7bb506b6d9ba05/concepts/bare.html\">all about “bare” repos – what, why, and how to fix a non-bare push (htmlpreview.github.io)</a></p>\n<p><a href=\"https://stackoverflow.com/questions/37033032/where-are-the-files-in-a-bare-repository\">git - Where are the files in a bare repository? - Stack Overflow</a></p>\n<p><a href=\"https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server\">Git - Getting Git on a Server (git-scm.com)</a></p>\n<p><a href=\"https://stackoverflow.com/questions/20939430/accessing-files-of-a-repository-from-the-git-server\">Accessing files of a repository from the Git server - Stack Overflow</a></p>\n<iframe src=\"//player.bilibili.com/player.html?aid=932066812&bvid=BV11M4y1N7q6&cid=383208463&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n"},{"title":"Python编程入门","date":"2021-09-26T09:22:04.000Z","<!--feature":"true-->","cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","_content":"# Python 3 Basic Grammar Training\n\n## 为什么是python？\n\n一个最重要的原因——简单，快速，容易上手：<img src=\"../images/PythonBasicGrammarImage/hello-world-in-python.png\">\n\n你也可以通过著名的开发语言排行榜TIOBE来直观感受Python有多么热门[index | TIOBE - The Software Quality Company](https://www.tiobe.com/tiobe-index/)\n\n### python官网：[Welcome to Python.org](https://www.python.org/)\n\n### python社区（PYPI）：[PyPI · The Python Package Index](https://pypi.org/)\n\n### python最大的优势：开发效率高\n\n### python最大的劣势：运行效率低\n\n~~开发效率与运行效率间的取舍是动态语言不可能绕过的问题，Python选择了开发效率换运行效率。~~\n\n~~但是python支持嵌入c，c++等高效率的低级语言，可以在一定程度上缓解这个问题~~\n\n## 配置你的电脑环境：\n\n安装Python 3.8（Python会自带一个编辑器\"IDLE\"，不过只提供了基础的代码编写功能）\n\n你可以通过我\n\n关于IDE，我会推荐推荐使用Jet Brains公司出品的Pycharm。当然，宇宙第一IDE——Visual Studio也是不错的选择\n\n> 关于Python的版本：\n>\n> Python3中的更新与c/c++的新标准，Java的新版本等有相通之处；\n>\n> > 每次Python更新都会推出很多新的feature，3.7版本中更新了这些内容：https://docs.python.org/zh-cn/3.7/whatsnew/3.7.html，如果你需要了解当前版本更新了什么，最好的办法当然是去阅读Python的官方文档，当然，你也可以直接在Python自带的ide：idle来查阅Python的版本变化信息。在idle中，你可以按照Help >>> Python Docs >> What’s New In Python 3.7的路径来查看\n>\n> 简单来说，python的更新会添加新的语法，提升python的稳定性(一般)，少数情况下会删除旧的语法与功能~~（3.10的兼容性差大概就是这么来的~~）\n>\n> ~~截止本文完成时，Python已经推出了发布3.11版本的计划，并且已经推出了Python3.11的文档：[What’s New In Python 3.11 — Python 3.11.0a0 documentation](https://docs.python.org/3.11/whatsnew/3.11.html)~~\n\n## 正式开始！\n\n### 从命令行开始！\n\n![image-20210923234720280](../images/PythonBasicGrammarImage/image-20210923234720280-16324120504921.png)\n\n这时，cmd就进入了python的编写模式，支持python 当前版本的所有语法，和python自带的编辑器\n\n> 当然，你也可以使用windows的powershell，不过相对于cmd而言，powershell更加复杂，而且有各种莫名其妙的限制\n\n:::warning\n\n注意，如果你在cmd中输入python后打开的是windows 商店，这是你操作系统的环境变量出了问题，请在edit the system environment variables下仔细检查Path中python条目下的环境变量指向的地址！\n\n:::\n\n#### 现在尝试打印Hello World吧\n\n所有你需要做的只是输入\n\n```python\nprint(\"Hello World\")\n```\n\ncmd就会显示：\n\n![image-20210329193537197](../images/PythonBasicGrammarImage/image-20210329193537197.png)\n\n简单吧！相信你一定会爱上python这门简单的语言的\n\n如果你要回到cmd的初始状态，只需要用 quit() 即可\n\n![image-20210329193638362](../images/PythonBasicGrammarImage/image-20210329193638362.png)\n\n#### 什么时候需要使用到命令行？\n\n比如我现在已经编写完成了一个基于python的脚本。在命令行中，我们甚至无需要进入python的编辑模式，只需输入python + 文件路径即可直接执行。一般来说，启动一个ide是很耗费时间的，而这就是我们节约时间的手段。\n\n![image-20210923235953188](../images/PythonBasicGrammarImage/image-20210923235953188.png)\n\n### 在pycharm中继续：\n\n#### PyCharm介绍\n\n官网：[PyCharm: the Python IDE for Professional Developers by JetBrains](https://www.jetbrains.com/pycharm/)\n\n至于为什么选用它，建议逼乎一下😂\n\n#### 新建项目\n\n![image-20210329193807978](../images/PythonBasicGrammarImage/image-20210329193807978.png)\n\n#### 对pycharm的一些初始设置：\n\n1. 设置编码：（都改为utf-8）![image-20210329194151198](../images/PythonBasicGrammarImage/image-20210329194151198.png)\n2. 设置新建文件的默认代码和内容：![image-20210330151608813](../images/PythonBasicGrammarImage/image-20210330151608813.png)\n\n你可以在PyCharm的官网上找到所有的File template variables：[File template variables | PyCharm (jetbrains.com)](https://www.jetbrains.com/help/pycharm/file-template-variables.html)\n\n#### 在console里执行命令：\n\n前面已经提到过在命令行中执行Python代码，这当然是运行已经编写好的Python程序或脚本的好办法。但是命令行中执行程序后就立刻输出结果并结束程序，那要是程序结束后我还想继续执行更多操作怎么办？\n\n这时候你可能需要用到Python Console功能![image-20210330151923931](../images/PythonBasicGrammarImage/image-20210330151923931.png)\n\npycharm中的console就是一个pychon的直接运行环境，这里允许你以解释性的形式逐句输入并运行python代码。值得一提的是，在PyCharm中运行你的Python文件时，默认输出到Python Console中，这意味着你可以在程序结束完成之后接着输入更多内容\n\n:::tip\n\n当你有不确定的代码需要验证的时候，不妨先复制到console里试一试！\n\n:::\n\n### 数据类型：\n\n在学习语法之前，你需要了解构成程序的要素是什么\n\n如果你有过其它语言的编程经验的话，你可能会说“数据结构+算法”\n\n但是如果你纯新手的话，那这可能难以理解。那么我会说，程序是由符合当前编程语言语法的语句依次执行生成的，构建程序的基本内容是数据的运算与处理\n\n很显然，就数据的处理而言，直接使用 1 + 2 等既定的数据常量是远远不够的——我们需要应付更多变的情况——这就要用到**变量**\n\n#### Python变量命名规则\n\n和其它语言一样，Python也有自己的变量命名规则\n\n- 第一个字符必须是字母表中字母或下划线 **_** \n\n- 标识符的其他的部分由字母、数字和下划线组成\n\n- 标识符对大小写敏感\n\n- 注意避开python自己的保留字符\n\n  你可以通过以下语句来查询Python保留的关键字符\n\n  ```python\n  import keyword \n  keyword.kwlist\n  ```\n\n  \n\n示例：\n![image-20210330152927963](../images/PythonBasicGrammarImage/image-20210330152927963.png)\n\n\n\n#### 关于变量的基本数据类型：\n\n在 Python 中，变量就是变量，它没有类型，我们所说的\"类型\"是变量所指的内存中对象的类型。\n\nPython 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。\n\n> 不过Python中的确存在这些“基本数据类型”如：int，float之类的，并且它们之间都存在着严格的限制\n>\n> 你可以使用 type() 函数来检查当前变量的数据类型：![image-20210330153736850](../images/PythonBasicGrammarImage/image-20210330153736850.png)\n\n#### 标准数据类型：\n\n- **不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）；\n- **可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）。\n\n共六种\n\n##### 关于可变与不可变数据：\n\n什么是不可变数据？\n\n在Python中，我们可以设立变量 a = 1，之后我们可以对 a 的值做出改变，比如又执行语句 a = 2，这时 a 当然就不再指向1，但是1这个“内容”本身并没有改变。\n\n而可变数据则是可以改变数据的具体内容：如语句 a = [1, 2]，我们可以将 a 中的[0], [1]等数据单独拎出来并做出改变而并不改变 a 本身的指向\n\n这些“指向”，“内容”都是基于内存地址来说的。\n\n不可变数据类型： 当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。\n\n可变数据类型  ：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。\n\n你可以用 `id(变量名)`来查验对应变量的内存地址是否发生变化\n\n##### 数字：\n\nint float...\n\n\n\n##### 列表：Python中功能最强大的数据类型\n\n用“[ ]”来定义列表！\n\n列表支持：\n\n1. 列表间的拼接![image-20210402172959101](../images/PythonBasicGrammarImage/image-20210402172959101.png)\n2. 定义以列表为元素的列表![image-20210402172939650](../images/PythonBasicGrammarImage/image-20210402172939650.png)\n3. 将整个列表赋给新列表![image-20210402172917361](../images/PythonBasicGrammarImage/image-20210402172917361.png)（也可以使用copy()函数：![image-20210402173226983](../images/PythonBasicGrammarImage/image-20210402173226983.png)）\n4. 通过append()，entend()，insert()，实现增\n5. 通过pop()，remove()，实现删 \n6. 支持通过截取来获取列表内容（截取参看字符串\n\n##### 元组：”常量列表“\n\n不能改变元素个数的列表，列表中一切涉及改变元素个数改变的功能全部NG\n\n用 “( )\" 来定义一个元组\n\n:::warning\n\n元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：\n\n![image-20210402174032001](../images/PythonBasicGrammarImage/image-20210402174032001.png)\n\n:::\n\n##### 字符串：特化列表\n\n1. python允许直接把字符/字符串存储到一个变量中\n\n```python\n>>> a = \"bunjie\"\n>>> a[-1]\n'e'\n>>> a[0]\n'b'\n>>> a[1]\n'u'\n>>> a[:]\n'bunjie'\n>>> a[0:1]\n'b'\n>>> a[0:5]\n'bunji'\n>>> a[0:6]\n'bunjie'\n>>> a[0:7]\n'bunjie' #没有报错\n>>> a[-1:-2]\n''\n>>> a[:-1]\n'bunji'\n>>> a[:-6]\n''\n>>> a[:-5]\n'b'\n```\n\n![image-20210402171810502](../images/PythonBasicGrammarImage/image-20210402171810502.png)\n\n##### 字典：\n\n使用键值对进行匹配，类似c语言中的“枚举类型”，以键值对构建数据内容 `{key: value, ...}`\n\n```python\nd = {key1 : value1, key2 : value2, key3 : value3 }\nprint(d[key1])\n# 输出：value1\n\nD = {} # 我们可以使用大括号来创建空字典\n```\n\n字典可能是所有数据类型中最高效的，因为取元素时直接采用key来定点查找而不是像是list等数据类型依次迭代查找\n\n##### 集合：\n\n是的，就是集合论中的集合\n\n总体来说，集合这种数据类型我们使用得较少，做可以使用大括号 **{ }** 或者 **set()** 函数创建集合，注意：创建一个空集合必须用 **set()** 而不是 **{ }**，因为 **{ }** 是用来创建一个空字典。\n\n创建格式：\n\n```python\nparame1 = {value01, value02, ...} # 注意格式\nparame2 = set() # set只允许单个参数，我们一般使用set来创建空集合\n```\n\n> 根据我们中学时所学到的知识，我们知道：集合具有确定性、互异性、无序性\n>\n> 根据这些性质，我们获知：单个确定数据只会出现一次。所以如果出现重复的值，集合会把相同的合并。\n\n### 语法：\n\n#### 关于注释：\n\n##### 什么是注释？\n\n注释是你在程序中插入的解释性的文字，单纯的只是为了方便别人和自己理解当前程序。程序在运行时会忽略所有被注释的部分，所以你留下的注释并不会对程序功能造成任何实际上的影响\n\n##### python中的注释方式：\n\n1. 以 **`#`** 作为单行注释，在pycharm中，你可以使用   `ctrl + /` 来快速注释一整行:\n\n   ```python\n   # 这是一个单行注释\n   ```\n\n2. 以一对三个连续的单引号**`''' '''`**，或一对三个连续的双引号**`\"\"\" \"\"\"`**来作为多行注释\n\n   ```python\n   \"\"\"\n   这是一个多行注释\n   \"\"\"\n   \n   '''\n   这也是一个多行注释\n   '''\n   ```\n\n\n#### 关于缩进：\n\nPython没有 `{ }`，它采用精确的缩进来确定控制语句的执行范围！\n\n一个项目里最好只采用 *tab* 和 *space* 两种中的一种缩进，如果在一个控制体里使用了两种缩进格式是会报错的\n\n个人建议使用 *tab* 作为缩进\n\n![image-20210330153314699](../images/PythonBasicGrammarImage/image-20210330153314699.png)\n\npython没有分号：“ ; ”， 语句间几乎没有大括号，代价是精确的缩进！\n\n#### 条件控制语句\n\n##### 为什么使用条件控制？\n\n当然是为了以一个程序去应对多种可能性\n\n例如：我们解决除法运算时，我们当然需要以除数不为零来分类，但是我们不可能因为这一点就开发两个程序，并且要求用户根据除数是什么来选择运行那个程序——这就要求我们在设计程序的时候为某些特定情况运行特定代码\n\n##### Python中的条件控制语句长什么样？\n\nPython中if语句的一般形式如下所示：\n\n```python\nif condition_1:    \n    statement_block_1 \nelif condition_2:    \n    statement_block_2\n# 更多情况使用elif condiition_3: ... 并以此类推\nelse:\n    statement_block_3\n```\n\n- 如果 \"condition_1\" 为 True 将执行 \"statement_block_1\" 块语句\n- 如果 \"condition_1\" 为False，将**判断** \"condition_2\"\n- 如果\"condition_2\" 为 True 将执行 \"statement_block_2\" 块语句\n- 如果 \"condition_1\"与\"condition_2\"均为False，那么将执行\"statement_block_3\"块语句\n\n:::warning\n\n1、每个条件后面要使用冒号 **:**，表示接下来是满足条件后要执行的语句块。\n\n2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。\n\n3、在Python中没有switch – case语句。\n\n:::\n\n#### 循环语句：\n\n循环的意义有点类似于乘法之于加法，它提供了一种解出某一个条件下的最终结果的方式。借助循环，计算机能够非常高效的完成人很难或无法完成的事情，比如说，在大量文件中查找包含某个搜索词的文档，对几十万条销售数据进行统计汇总等。\n\n##### while循环：\n\n```python\nwhile 判断条件(condition)：    \n\t执行语句(statements)……\n# 每次循环之前都会进行一次condition是否为真的判断，如果结果为false，则立即停止循环\n```\n\n##### for循环：\n\n```python\nfor <variable> in <sequence>:\n    <statements>\nelse:\n    <statements>\n```\n\n例一：<img src=\"./006faQNTgw1f5wnm0mcxrg30ci07o47l.gif\">\n\n例二：![image-20210402174928766](../images/PythonBasicGrammarImage/image-20210402174928766.png)\n\n\n\n## 基础语法到此结束！\n\n\n\n## 附录1：python包的获取和管理\n\n类似于Node的npm，Linux中的yum，apt等，python有自己的包管理工具——pip，这也是Python安装时自带的\n\n但是直接从pypi上获取包的速度太慢~~长城防火墙~~，所以我们要借用一些国内的镜像网站，比如[清华大学的清华源镜像网站](https://pypi.tuna.tsinghua.edu.cn/simple/)\n\n你可以从console(非python的编辑模式)里用python的pip语句指定国内的镜像源来直接安装包，如：\n\n```powershell\npip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple/\n# -i代表当前安装操作使用后面的临时源\n```\n\n不过我们也可以通过 ctrl + shift + s 打开pycharm的 settings 进入 Project: (你当前的项目名) >> Python InterPreter 来直接安装包。记得在manage repository中添加国内的python源的地址\n\n> 国内Python源建议使用清华源：https://pypi.tuna.tsinghua.edu.cn/simple/\n\n## 附录2：Python运算符\n运算符：（python的语法糖很大一部分集中在多种多样的运算符，这也是让书写python代码速度起飞的重要原因！）\n\n~~（虽然刚接触的时候会因为大量的运算符而痛苦😀）~~\n\n### 运算符手册：\n\n#### 算数运算符：（相比c语言多了幂运算于取整运算）\n\n| 运算符 | 描述                                            | 实例                                    |\n| :----- | :---------------------------------------------- | :-------------------------------------- |\n| +      | 加 - 两个对象相加                               | a + b 输出结果 31                       |\n| -      | 减 - 得到负数或是一个数减去另一个数             | a - b 输出结果 -11                      |\n| *      | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 210                      |\n| /      | 除 - x 除以 y                                   | b / a 输出结果 2.1                      |\n| %      | 取模 - 返回除法的余数                           | b % a 输出结果 1                        |\n| **     | 幂 - 返回x的y次幂                               | a**b 为10的21次方                       |\n| //     | 取整除 - 向下取接近商的整数                     | >>> 9//2 <br />4 <br/>>>> -9//2<br/> -5 |\n\n#### 比较运算符：（和c语言相同）\n\n| 运算符 | 描述                                                         | 实例                  |\n| :----- | :----------------------------------------------------------- | :-------------------- |\n| ==     | 等于 - 比较对象是否相等                                      | (a == b) 返回 False。 |\n| !=     | 不等于 - 比较两个对象是否不相等                              | (a != b) 返回 True。  |\n| >      | 大于 - 返回x是否大于y                                        | (a > b) 返回 False。  |\n| <      | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。 | (a < b) 返回 True。   |\n| >=     | 大于等于 - 返回x是否大于等于y。                              | (a >= b) 返回 False。 |\n| <=     | 小于等于 - 返回x是否小于等于y。                              | (a <= b) 返回 True。  |\n\n#### 赋值运算：\n\n| 运算符 | 描述             | 实例                                  |\n| :----- | :--------------- | :------------------------------------ |\n| =      | 简单的赋值运算符 | c = a + b 将 a + b 的运算结果赋值为 c |\n| +=     | 加法赋值运算符   | c += a 等效于 c = c + a               |\n| -=     | 减法赋值运算符   | c -= a 等效于 c = c - a               |\n| *=     | 乘法赋值运算符   | c *= a 等效于 c = c * a               |\n| /=     | 除法赋值运算符   | c /= a 等效于 c = c / a               |\n| %=     | 取模赋值运算符   | c %= a 等效于 c = c % a               |\n| **=    | 幂赋值运算符     | c **= a 等效于 c = c ** a             |\n| //=    | 取整除赋值运算符 | c //= a 等效于 c = c // a             |\n\n:::warning\n\n特别提醒！\npython中没有像c语言一样的自加运算！![image-20210402161704512](../images/PythonBasicGrammarImage/image-20210402161704512.png)\n\n:::\n\n#### 位运算符：（和c语言相同）\n\n| 运算符 | 描述:(下表中变量 a 为 60，b 为 13二进制格式如下：)           | 实例                                                         |\n| :----- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| &      | 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 | (a & b) 输出结果 12 ，二进制解释： 0000 1100                 |\n| \\|     | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。 | (a \\| b) 输出结果 61 ，二进制解释： 0011 1101                |\n| ^      | 按位异或运算符：当两对应的二进位相异时，结果为1              | (a ^ b) 输出结果 49 ，二进制解释： 0011 0001                 |\n| ~      | 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。**~x** 类似于 **-x-1** | (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。 |\n| <<     | 左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。 | a << 2 输出结果 240 ，二进制解释： 1111 0000                 |\n| >>     | 右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数 | a >> 2 输出结果 15 ，二进制解释： 0000 1111                  |\n\n#### 逻辑运算符：\n\n| 运算符 | 逻辑表达式 | 描述（令a=10， b=20）                                        | 实例                                                         |\n| :----- | :--------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| and    | x and y    | 布尔\"与\" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。 | (a and b) 返回 20。![image-20210402163513449](../images/PythonBasicGrammarImage/image-20210402163513449.png) |\n| or     | x or y     | 布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。(与“与运算恰好相反”) | (a or b) 返回 10。                                           |\n| not    | not x      | 布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 | not(a and b) 返回 False                                      |\n\n> 补充说明：![image-20210402163342743](../images/PythonBasicGrammarImage/image-20210402163342743.png)![image-20210402163401305](../images/PythonBasicGrammarImage/image-20210402163401305.png)\n>\n\n#### 成员运算符：\n\n| 运算符 | 描述                                                    | 实例                                              |\n| :----- | :------------------------------------------------------ | :------------------------------------------------ |\n| in     | 如果在指定的序列中找到值返回 True，否则返回 False。     | x 在 y 序列中 , 如果 x 在 y 序列中返回 True。     |\n| not in | 如果在指定的序列中没有找到值返回 True，否则返回 False。 | x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。 |\n\n#### 身份运算符：\n\n（有种 == 和 != 的感觉，但是确实不一样！）\n\n*is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。*![image-20210402164253225](image-20210402164253225.png)\n\n| 运算符 | 描述（注：id () 函数用于获取对象内存地址。） | 实例                                                         |\n| :----- | :------------------------------------------- | :----------------------------------------------------------- |\n| is     | is 是判断两个标识符是不是引用自一个对象      | **x is y**, 类似 **id(x) == id(y)** , 如果引用的是同一个对象则返回 True，否则返回 False |\n| is not | is not 是判断两个标识符是不是引用自不同对象  | **x is not y** ， 类似 **id(a) != id(b)**。如果引用的不是同一个对象则返回结果 True，否则返回 False。 |\n\n![image-20210402163932528](../images/PythonBasicGrammarImage/image-20210402163932528.png)\n\n\n\n### Python运算符优先级\n\n以下表格列出了从最高到最低优先级的所有运算符：\n\n| 运算符                   | 描述                                                   |\n| :----------------------- | :----------------------------------------------------- |\n| **                       | 指数 (最高优先级)                                      |\n| ~ + -                    | 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) |\n| * / % //                 | 乘，除，求余数和取整除                                 |\n| + -                      | 加法减法                                               |\n| >> <<                    | 右移，左移运算符                                       |\n| &                        | 位 'AND'                                               |\n| ^ \\|                     | 位运算符                                               |\n| <= < > >=                | 比较运算符                                             |\n| == !=                    | 等于运算符                                             |\n| = %= /= //= -= += *= **= | 赋值运算符                                             |\n| is is not                | 身份运算符                                             |\n| in not in                | 成员运算符                                             |\n| not and or               | 逻辑运算符                                             |\n\n\n\n最后~~（传教）~~:我即使是死了，钉在棺材里了，也要在墓里，用这腐朽的声带喊出：“**vocaloid forever！！！**\"\n\n最后的最后：都看到这里了，不听支歌吗?(❁'◡'❁)\n\n<iframe src=\"//player.bilibili.com/player.html?aid=245852635&bvid=BV1Vv411t7Gb&cid=273023330&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n\n\n## 参考资料：\n\n1. [Python3 教程 | 菜鸟教程 (runoob.com)](https://www.runoob.com/python3/python3-tutorial.html)\n","source":"_posts/basicGrammar.md","raw":"---\ntitle: Python编程入门\ndate: 2021-09-26 17:22:04\ntags:\n  - Python\ncategories:\n  - Programming Language Learning\n<!--feature: true-->\ncover: https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg\n---\n# Python 3 Basic Grammar Training\n\n## 为什么是python？\n\n一个最重要的原因——简单，快速，容易上手：<img src=\"../images/PythonBasicGrammarImage/hello-world-in-python.png\">\n\n你也可以通过著名的开发语言排行榜TIOBE来直观感受Python有多么热门[index | TIOBE - The Software Quality Company](https://www.tiobe.com/tiobe-index/)\n\n### python官网：[Welcome to Python.org](https://www.python.org/)\n\n### python社区（PYPI）：[PyPI · The Python Package Index](https://pypi.org/)\n\n### python最大的优势：开发效率高\n\n### python最大的劣势：运行效率低\n\n~~开发效率与运行效率间的取舍是动态语言不可能绕过的问题，Python选择了开发效率换运行效率。~~\n\n~~但是python支持嵌入c，c++等高效率的低级语言，可以在一定程度上缓解这个问题~~\n\n## 配置你的电脑环境：\n\n安装Python 3.8（Python会自带一个编辑器\"IDLE\"，不过只提供了基础的代码编写功能）\n\n你可以通过我\n\n关于IDE，我会推荐推荐使用Jet Brains公司出品的Pycharm。当然，宇宙第一IDE——Visual Studio也是不错的选择\n\n> 关于Python的版本：\n>\n> Python3中的更新与c/c++的新标准，Java的新版本等有相通之处；\n>\n> > 每次Python更新都会推出很多新的feature，3.7版本中更新了这些内容：https://docs.python.org/zh-cn/3.7/whatsnew/3.7.html，如果你需要了解当前版本更新了什么，最好的办法当然是去阅读Python的官方文档，当然，你也可以直接在Python自带的ide：idle来查阅Python的版本变化信息。在idle中，你可以按照Help >>> Python Docs >> What’s New In Python 3.7的路径来查看\n>\n> 简单来说，python的更新会添加新的语法，提升python的稳定性(一般)，少数情况下会删除旧的语法与功能~~（3.10的兼容性差大概就是这么来的~~）\n>\n> ~~截止本文完成时，Python已经推出了发布3.11版本的计划，并且已经推出了Python3.11的文档：[What’s New In Python 3.11 — Python 3.11.0a0 documentation](https://docs.python.org/3.11/whatsnew/3.11.html)~~\n\n## 正式开始！\n\n### 从命令行开始！\n\n![image-20210923234720280](../images/PythonBasicGrammarImage/image-20210923234720280-16324120504921.png)\n\n这时，cmd就进入了python的编写模式，支持python 当前版本的所有语法，和python自带的编辑器\n\n> 当然，你也可以使用windows的powershell，不过相对于cmd而言，powershell更加复杂，而且有各种莫名其妙的限制\n\n:::warning\n\n注意，如果你在cmd中输入python后打开的是windows 商店，这是你操作系统的环境变量出了问题，请在edit the system environment variables下仔细检查Path中python条目下的环境变量指向的地址！\n\n:::\n\n#### 现在尝试打印Hello World吧\n\n所有你需要做的只是输入\n\n```python\nprint(\"Hello World\")\n```\n\ncmd就会显示：\n\n![image-20210329193537197](../images/PythonBasicGrammarImage/image-20210329193537197.png)\n\n简单吧！相信你一定会爱上python这门简单的语言的\n\n如果你要回到cmd的初始状态，只需要用 quit() 即可\n\n![image-20210329193638362](../images/PythonBasicGrammarImage/image-20210329193638362.png)\n\n#### 什么时候需要使用到命令行？\n\n比如我现在已经编写完成了一个基于python的脚本。在命令行中，我们甚至无需要进入python的编辑模式，只需输入python + 文件路径即可直接执行。一般来说，启动一个ide是很耗费时间的，而这就是我们节约时间的手段。\n\n![image-20210923235953188](../images/PythonBasicGrammarImage/image-20210923235953188.png)\n\n### 在pycharm中继续：\n\n#### PyCharm介绍\n\n官网：[PyCharm: the Python IDE for Professional Developers by JetBrains](https://www.jetbrains.com/pycharm/)\n\n至于为什么选用它，建议逼乎一下😂\n\n#### 新建项目\n\n![image-20210329193807978](../images/PythonBasicGrammarImage/image-20210329193807978.png)\n\n#### 对pycharm的一些初始设置：\n\n1. 设置编码：（都改为utf-8）![image-20210329194151198](../images/PythonBasicGrammarImage/image-20210329194151198.png)\n2. 设置新建文件的默认代码和内容：![image-20210330151608813](../images/PythonBasicGrammarImage/image-20210330151608813.png)\n\n你可以在PyCharm的官网上找到所有的File template variables：[File template variables | PyCharm (jetbrains.com)](https://www.jetbrains.com/help/pycharm/file-template-variables.html)\n\n#### 在console里执行命令：\n\n前面已经提到过在命令行中执行Python代码，这当然是运行已经编写好的Python程序或脚本的好办法。但是命令行中执行程序后就立刻输出结果并结束程序，那要是程序结束后我还想继续执行更多操作怎么办？\n\n这时候你可能需要用到Python Console功能![image-20210330151923931](../images/PythonBasicGrammarImage/image-20210330151923931.png)\n\npycharm中的console就是一个pychon的直接运行环境，这里允许你以解释性的形式逐句输入并运行python代码。值得一提的是，在PyCharm中运行你的Python文件时，默认输出到Python Console中，这意味着你可以在程序结束完成之后接着输入更多内容\n\n:::tip\n\n当你有不确定的代码需要验证的时候，不妨先复制到console里试一试！\n\n:::\n\n### 数据类型：\n\n在学习语法之前，你需要了解构成程序的要素是什么\n\n如果你有过其它语言的编程经验的话，你可能会说“数据结构+算法”\n\n但是如果你纯新手的话，那这可能难以理解。那么我会说，程序是由符合当前编程语言语法的语句依次执行生成的，构建程序的基本内容是数据的运算与处理\n\n很显然，就数据的处理而言，直接使用 1 + 2 等既定的数据常量是远远不够的——我们需要应付更多变的情况——这就要用到**变量**\n\n#### Python变量命名规则\n\n和其它语言一样，Python也有自己的变量命名规则\n\n- 第一个字符必须是字母表中字母或下划线 **_** \n\n- 标识符的其他的部分由字母、数字和下划线组成\n\n- 标识符对大小写敏感\n\n- 注意避开python自己的保留字符\n\n  你可以通过以下语句来查询Python保留的关键字符\n\n  ```python\n  import keyword \n  keyword.kwlist\n  ```\n\n  \n\n示例：\n![image-20210330152927963](../images/PythonBasicGrammarImage/image-20210330152927963.png)\n\n\n\n#### 关于变量的基本数据类型：\n\n在 Python 中，变量就是变量，它没有类型，我们所说的\"类型\"是变量所指的内存中对象的类型。\n\nPython 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。\n\n> 不过Python中的确存在这些“基本数据类型”如：int，float之类的，并且它们之间都存在着严格的限制\n>\n> 你可以使用 type() 函数来检查当前变量的数据类型：![image-20210330153736850](../images/PythonBasicGrammarImage/image-20210330153736850.png)\n\n#### 标准数据类型：\n\n- **不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）；\n- **可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）。\n\n共六种\n\n##### 关于可变与不可变数据：\n\n什么是不可变数据？\n\n在Python中，我们可以设立变量 a = 1，之后我们可以对 a 的值做出改变，比如又执行语句 a = 2，这时 a 当然就不再指向1，但是1这个“内容”本身并没有改变。\n\n而可变数据则是可以改变数据的具体内容：如语句 a = [1, 2]，我们可以将 a 中的[0], [1]等数据单独拎出来并做出改变而并不改变 a 本身的指向\n\n这些“指向”，“内容”都是基于内存地址来说的。\n\n不可变数据类型： 当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。\n\n可变数据类型  ：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。\n\n你可以用 `id(变量名)`来查验对应变量的内存地址是否发生变化\n\n##### 数字：\n\nint float...\n\n\n\n##### 列表：Python中功能最强大的数据类型\n\n用“[ ]”来定义列表！\n\n列表支持：\n\n1. 列表间的拼接![image-20210402172959101](../images/PythonBasicGrammarImage/image-20210402172959101.png)\n2. 定义以列表为元素的列表![image-20210402172939650](../images/PythonBasicGrammarImage/image-20210402172939650.png)\n3. 将整个列表赋给新列表![image-20210402172917361](../images/PythonBasicGrammarImage/image-20210402172917361.png)（也可以使用copy()函数：![image-20210402173226983](../images/PythonBasicGrammarImage/image-20210402173226983.png)）\n4. 通过append()，entend()，insert()，实现增\n5. 通过pop()，remove()，实现删 \n6. 支持通过截取来获取列表内容（截取参看字符串\n\n##### 元组：”常量列表“\n\n不能改变元素个数的列表，列表中一切涉及改变元素个数改变的功能全部NG\n\n用 “( )\" 来定义一个元组\n\n:::warning\n\n元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：\n\n![image-20210402174032001](../images/PythonBasicGrammarImage/image-20210402174032001.png)\n\n:::\n\n##### 字符串：特化列表\n\n1. python允许直接把字符/字符串存储到一个变量中\n\n```python\n>>> a = \"bunjie\"\n>>> a[-1]\n'e'\n>>> a[0]\n'b'\n>>> a[1]\n'u'\n>>> a[:]\n'bunjie'\n>>> a[0:1]\n'b'\n>>> a[0:5]\n'bunji'\n>>> a[0:6]\n'bunjie'\n>>> a[0:7]\n'bunjie' #没有报错\n>>> a[-1:-2]\n''\n>>> a[:-1]\n'bunji'\n>>> a[:-6]\n''\n>>> a[:-5]\n'b'\n```\n\n![image-20210402171810502](../images/PythonBasicGrammarImage/image-20210402171810502.png)\n\n##### 字典：\n\n使用键值对进行匹配，类似c语言中的“枚举类型”，以键值对构建数据内容 `{key: value, ...}`\n\n```python\nd = {key1 : value1, key2 : value2, key3 : value3 }\nprint(d[key1])\n# 输出：value1\n\nD = {} # 我们可以使用大括号来创建空字典\n```\n\n字典可能是所有数据类型中最高效的，因为取元素时直接采用key来定点查找而不是像是list等数据类型依次迭代查找\n\n##### 集合：\n\n是的，就是集合论中的集合\n\n总体来说，集合这种数据类型我们使用得较少，做可以使用大括号 **{ }** 或者 **set()** 函数创建集合，注意：创建一个空集合必须用 **set()** 而不是 **{ }**，因为 **{ }** 是用来创建一个空字典。\n\n创建格式：\n\n```python\nparame1 = {value01, value02, ...} # 注意格式\nparame2 = set() # set只允许单个参数，我们一般使用set来创建空集合\n```\n\n> 根据我们中学时所学到的知识，我们知道：集合具有确定性、互异性、无序性\n>\n> 根据这些性质，我们获知：单个确定数据只会出现一次。所以如果出现重复的值，集合会把相同的合并。\n\n### 语法：\n\n#### 关于注释：\n\n##### 什么是注释？\n\n注释是你在程序中插入的解释性的文字，单纯的只是为了方便别人和自己理解当前程序。程序在运行时会忽略所有被注释的部分，所以你留下的注释并不会对程序功能造成任何实际上的影响\n\n##### python中的注释方式：\n\n1. 以 **`#`** 作为单行注释，在pycharm中，你可以使用   `ctrl + /` 来快速注释一整行:\n\n   ```python\n   # 这是一个单行注释\n   ```\n\n2. 以一对三个连续的单引号**`''' '''`**，或一对三个连续的双引号**`\"\"\" \"\"\"`**来作为多行注释\n\n   ```python\n   \"\"\"\n   这是一个多行注释\n   \"\"\"\n   \n   '''\n   这也是一个多行注释\n   '''\n   ```\n\n\n#### 关于缩进：\n\nPython没有 `{ }`，它采用精确的缩进来确定控制语句的执行范围！\n\n一个项目里最好只采用 *tab* 和 *space* 两种中的一种缩进，如果在一个控制体里使用了两种缩进格式是会报错的\n\n个人建议使用 *tab* 作为缩进\n\n![image-20210330153314699](../images/PythonBasicGrammarImage/image-20210330153314699.png)\n\npython没有分号：“ ; ”， 语句间几乎没有大括号，代价是精确的缩进！\n\n#### 条件控制语句\n\n##### 为什么使用条件控制？\n\n当然是为了以一个程序去应对多种可能性\n\n例如：我们解决除法运算时，我们当然需要以除数不为零来分类，但是我们不可能因为这一点就开发两个程序，并且要求用户根据除数是什么来选择运行那个程序——这就要求我们在设计程序的时候为某些特定情况运行特定代码\n\n##### Python中的条件控制语句长什么样？\n\nPython中if语句的一般形式如下所示：\n\n```python\nif condition_1:    \n    statement_block_1 \nelif condition_2:    \n    statement_block_2\n# 更多情况使用elif condiition_3: ... 并以此类推\nelse:\n    statement_block_3\n```\n\n- 如果 \"condition_1\" 为 True 将执行 \"statement_block_1\" 块语句\n- 如果 \"condition_1\" 为False，将**判断** \"condition_2\"\n- 如果\"condition_2\" 为 True 将执行 \"statement_block_2\" 块语句\n- 如果 \"condition_1\"与\"condition_2\"均为False，那么将执行\"statement_block_3\"块语句\n\n:::warning\n\n1、每个条件后面要使用冒号 **:**，表示接下来是满足条件后要执行的语句块。\n\n2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。\n\n3、在Python中没有switch – case语句。\n\n:::\n\n#### 循环语句：\n\n循环的意义有点类似于乘法之于加法，它提供了一种解出某一个条件下的最终结果的方式。借助循环，计算机能够非常高效的完成人很难或无法完成的事情，比如说，在大量文件中查找包含某个搜索词的文档，对几十万条销售数据进行统计汇总等。\n\n##### while循环：\n\n```python\nwhile 判断条件(condition)：    \n\t执行语句(statements)……\n# 每次循环之前都会进行一次condition是否为真的判断，如果结果为false，则立即停止循环\n```\n\n##### for循环：\n\n```python\nfor <variable> in <sequence>:\n    <statements>\nelse:\n    <statements>\n```\n\n例一：<img src=\"./006faQNTgw1f5wnm0mcxrg30ci07o47l.gif\">\n\n例二：![image-20210402174928766](../images/PythonBasicGrammarImage/image-20210402174928766.png)\n\n\n\n## 基础语法到此结束！\n\n\n\n## 附录1：python包的获取和管理\n\n类似于Node的npm，Linux中的yum，apt等，python有自己的包管理工具——pip，这也是Python安装时自带的\n\n但是直接从pypi上获取包的速度太慢~~长城防火墙~~，所以我们要借用一些国内的镜像网站，比如[清华大学的清华源镜像网站](https://pypi.tuna.tsinghua.edu.cn/simple/)\n\n你可以从console(非python的编辑模式)里用python的pip语句指定国内的镜像源来直接安装包，如：\n\n```powershell\npip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple/\n# -i代表当前安装操作使用后面的临时源\n```\n\n不过我们也可以通过 ctrl + shift + s 打开pycharm的 settings 进入 Project: (你当前的项目名) >> Python InterPreter 来直接安装包。记得在manage repository中添加国内的python源的地址\n\n> 国内Python源建议使用清华源：https://pypi.tuna.tsinghua.edu.cn/simple/\n\n## 附录2：Python运算符\n运算符：（python的语法糖很大一部分集中在多种多样的运算符，这也是让书写python代码速度起飞的重要原因！）\n\n~~（虽然刚接触的时候会因为大量的运算符而痛苦😀）~~\n\n### 运算符手册：\n\n#### 算数运算符：（相比c语言多了幂运算于取整运算）\n\n| 运算符 | 描述                                            | 实例                                    |\n| :----- | :---------------------------------------------- | :-------------------------------------- |\n| +      | 加 - 两个对象相加                               | a + b 输出结果 31                       |\n| -      | 减 - 得到负数或是一个数减去另一个数             | a - b 输出结果 -11                      |\n| *      | 乘 - 两个数相乘或是返回一个被重复若干次的字符串 | a * b 输出结果 210                      |\n| /      | 除 - x 除以 y                                   | b / a 输出结果 2.1                      |\n| %      | 取模 - 返回除法的余数                           | b % a 输出结果 1                        |\n| **     | 幂 - 返回x的y次幂                               | a**b 为10的21次方                       |\n| //     | 取整除 - 向下取接近商的整数                     | >>> 9//2 <br />4 <br/>>>> -9//2<br/> -5 |\n\n#### 比较运算符：（和c语言相同）\n\n| 运算符 | 描述                                                         | 实例                  |\n| :----- | :----------------------------------------------------------- | :-------------------- |\n| ==     | 等于 - 比较对象是否相等                                      | (a == b) 返回 False。 |\n| !=     | 不等于 - 比较两个对象是否不相等                              | (a != b) 返回 True。  |\n| >      | 大于 - 返回x是否大于y                                        | (a > b) 返回 False。  |\n| <      | 小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。 | (a < b) 返回 True。   |\n| >=     | 大于等于 - 返回x是否大于等于y。                              | (a >= b) 返回 False。 |\n| <=     | 小于等于 - 返回x是否小于等于y。                              | (a <= b) 返回 True。  |\n\n#### 赋值运算：\n\n| 运算符 | 描述             | 实例                                  |\n| :----- | :--------------- | :------------------------------------ |\n| =      | 简单的赋值运算符 | c = a + b 将 a + b 的运算结果赋值为 c |\n| +=     | 加法赋值运算符   | c += a 等效于 c = c + a               |\n| -=     | 减法赋值运算符   | c -= a 等效于 c = c - a               |\n| *=     | 乘法赋值运算符   | c *= a 等效于 c = c * a               |\n| /=     | 除法赋值运算符   | c /= a 等效于 c = c / a               |\n| %=     | 取模赋值运算符   | c %= a 等效于 c = c % a               |\n| **=    | 幂赋值运算符     | c **= a 等效于 c = c ** a             |\n| //=    | 取整除赋值运算符 | c //= a 等效于 c = c // a             |\n\n:::warning\n\n特别提醒！\npython中没有像c语言一样的自加运算！![image-20210402161704512](../images/PythonBasicGrammarImage/image-20210402161704512.png)\n\n:::\n\n#### 位运算符：（和c语言相同）\n\n| 运算符 | 描述:(下表中变量 a 为 60，b 为 13二进制格式如下：)           | 实例                                                         |\n| :----- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| &      | 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0 | (a & b) 输出结果 12 ，二进制解释： 0000 1100                 |\n| \\|     | 按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。 | (a \\| b) 输出结果 61 ，二进制解释： 0011 1101                |\n| ^      | 按位异或运算符：当两对应的二进位相异时，结果为1              | (a ^ b) 输出结果 49 ，二进制解释： 0011 0001                 |\n| ~      | 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。**~x** 类似于 **-x-1** | (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。 |\n| <<     | 左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。 | a << 2 输出结果 240 ，二进制解释： 1111 0000                 |\n| >>     | 右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数 | a >> 2 输出结果 15 ，二进制解释： 0000 1111                  |\n\n#### 逻辑运算符：\n\n| 运算符 | 逻辑表达式 | 描述（令a=10， b=20）                                        | 实例                                                         |\n| :----- | :--------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| and    | x and y    | 布尔\"与\" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。 | (a and b) 返回 20。![image-20210402163513449](../images/PythonBasicGrammarImage/image-20210402163513449.png) |\n| or     | x or y     | 布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。(与“与运算恰好相反”) | (a or b) 返回 10。                                           |\n| not    | not x      | 布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 | not(a and b) 返回 False                                      |\n\n> 补充说明：![image-20210402163342743](../images/PythonBasicGrammarImage/image-20210402163342743.png)![image-20210402163401305](../images/PythonBasicGrammarImage/image-20210402163401305.png)\n>\n\n#### 成员运算符：\n\n| 运算符 | 描述                                                    | 实例                                              |\n| :----- | :------------------------------------------------------ | :------------------------------------------------ |\n| in     | 如果在指定的序列中找到值返回 True，否则返回 False。     | x 在 y 序列中 , 如果 x 在 y 序列中返回 True。     |\n| not in | 如果在指定的序列中没有找到值返回 True，否则返回 False。 | x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。 |\n\n#### 身份运算符：\n\n（有种 == 和 != 的感觉，但是确实不一样！）\n\n*is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。*![image-20210402164253225](image-20210402164253225.png)\n\n| 运算符 | 描述（注：id () 函数用于获取对象内存地址。） | 实例                                                         |\n| :----- | :------------------------------------------- | :----------------------------------------------------------- |\n| is     | is 是判断两个标识符是不是引用自一个对象      | **x is y**, 类似 **id(x) == id(y)** , 如果引用的是同一个对象则返回 True，否则返回 False |\n| is not | is not 是判断两个标识符是不是引用自不同对象  | **x is not y** ， 类似 **id(a) != id(b)**。如果引用的不是同一个对象则返回结果 True，否则返回 False。 |\n\n![image-20210402163932528](../images/PythonBasicGrammarImage/image-20210402163932528.png)\n\n\n\n### Python运算符优先级\n\n以下表格列出了从最高到最低优先级的所有运算符：\n\n| 运算符                   | 描述                                                   |\n| :----------------------- | :----------------------------------------------------- |\n| **                       | 指数 (最高优先级)                                      |\n| ~ + -                    | 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) |\n| * / % //                 | 乘，除，求余数和取整除                                 |\n| + -                      | 加法减法                                               |\n| >> <<                    | 右移，左移运算符                                       |\n| &                        | 位 'AND'                                               |\n| ^ \\|                     | 位运算符                                               |\n| <= < > >=                | 比较运算符                                             |\n| == !=                    | 等于运算符                                             |\n| = %= /= //= -= += *= **= | 赋值运算符                                             |\n| is is not                | 身份运算符                                             |\n| in not in                | 成员运算符                                             |\n| not and or               | 逻辑运算符                                             |\n\n\n\n最后~~（传教）~~:我即使是死了，钉在棺材里了，也要在墓里，用这腐朽的声带喊出：“**vocaloid forever！！！**\"\n\n最后的最后：都看到这里了，不听支歌吗?(❁'◡'❁)\n\n<iframe src=\"//player.bilibili.com/player.html?aid=245852635&bvid=BV1Vv411t7Gb&cid=273023330&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n\n\n## 参考资料：\n\n1. [Python3 教程 | 菜鸟教程 (runoob.com)](https://www.runoob.com/python3/python3-tutorial.html)\n","slug":"basicGrammar","published":1,"updated":"2021-09-26T10:10:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckudindld00055smb12fscp1e","content":"<h1 id=\"Python-3-Basic-Grammar-Training\"><a href=\"#Python-3-Basic-Grammar-Training\" class=\"headerlink\" title=\"Python 3 Basic Grammar Training\"></a>Python 3 Basic Grammar Training</h1><h2 id=\"为什么是python？\"><a href=\"#为什么是python？\" class=\"headerlink\" title=\"为什么是python？\"></a>为什么是python？</h2><p>一个最重要的原因——简单，快速，容易上手：<img src=\"../images/PythonBasicGrammarImage/hello-world-in-python.png\"></p>\n<p>你也可以通过著名的开发语言排行榜TIOBE来直观感受Python有多么热门<a href=\"https://www.tiobe.com/tiobe-index/\">index | TIOBE - The Software Quality Company</a></p>\n<h3 id=\"python官网：Welcome-to-Python-org\"><a href=\"#python官网：Welcome-to-Python-org\" class=\"headerlink\" title=\"python官网：Welcome to Python.org\"></a>python官网：<a href=\"https://www.python.org/\">Welcome to Python.org</a></h3><h3 id=\"python社区（PYPI）：PyPI-·-The-Python-Package-Index\"><a href=\"#python社区（PYPI）：PyPI-·-The-Python-Package-Index\" class=\"headerlink\" title=\"python社区（PYPI）：PyPI · The Python Package Index\"></a>python社区（PYPI）：<a href=\"https://pypi.org/\">PyPI · The Python Package Index</a></h3><h3 id=\"python最大的优势：开发效率高\"><a href=\"#python最大的优势：开发效率高\" class=\"headerlink\" title=\"python最大的优势：开发效率高\"></a>python最大的优势：开发效率高</h3><h3 id=\"python最大的劣势：运行效率低\"><a href=\"#python最大的劣势：运行效率低\" class=\"headerlink\" title=\"python最大的劣势：运行效率低\"></a>python最大的劣势：运行效率低</h3><p><del>开发效率与运行效率间的取舍是动态语言不可能绕过的问题，Python选择了开发效率换运行效率。</del></p>\n<p><del>但是python支持嵌入c，c++等高效率的低级语言，可以在一定程度上缓解这个问题</del></p>\n<h2 id=\"配置你的电脑环境：\"><a href=\"#配置你的电脑环境：\" class=\"headerlink\" title=\"配置你的电脑环境：\"></a>配置你的电脑环境：</h2><p>安装Python 3.8（Python会自带一个编辑器”IDLE”，不过只提供了基础的代码编写功能）</p>\n<p>你可以通过我</p>\n<p>关于IDE，我会推荐推荐使用Jet Brains公司出品的Pycharm。当然，宇宙第一IDE——Visual Studio也是不错的选择</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于Python的版本：</p>\n<p>Python3中的更新与c/c++的新标准，Java的新版本等有相通之处；</p>\n<blockquote>\n<p>每次Python更新都会推出很多新的feature，3.7版本中更新了这些内容：<a href=\"https://docs.python.org/zh-cn/3.7/whatsnew/3.7.html%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E5%BD%93%E5%89%8D%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%8C%E6%9C%80%E5%A5%BD%E7%9A%84%E5%8A%9E%E6%B3%95%E5%BD%93%E7%84%B6%E6%98%AF%E5%8E%BB%E9%98%85%E8%AF%BBPython%E7%9A%84%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%8C%E5%BD%93%E7%84%B6%EF%BC%8C%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%9C%A8Python%E8%87%AA%E5%B8%A6%E7%9A%84ide%EF%BC%9Aidle%E6%9D%A5%E6%9F%A5%E9%98%85Python%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%98%E5%8C%96%E4%BF%A1%E6%81%AF%E3%80%82%E5%9C%A8idle%E4%B8%AD%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E6%8C%89%E7%85%A7Help\">https://docs.python.org/zh-cn/3.7/whatsnew/3.7.html，如果你需要了解当前版本更新了什么，最好的办法当然是去阅读Python的官方文档，当然，你也可以直接在Python自带的ide：idle来查阅Python的版本变化信息。在idle中，你可以按照Help</a> &gt;&gt;&gt; Python Docs &gt;&gt; What’s New In Python 3.7的路径来查看</p></blockquote>\n<p>简单来说，python的更新会添加新的语法，提升python的稳定性(一般)，少数情况下会删除旧的语法与功能<del>（3.10的兼容性差大概就是这么来的</del>）</p>\n<p><del>截止本文完成时，Python已经推出了发布3.11版本的计划，并且已经推出了Python3.11的文档：<a href=\"https://docs.python.org/3.11/whatsnew/3.11.html\">What’s New In Python 3.11 — Python 3.11.0a0 documentation</a></del></p>\n</blockquote>\n<h2 id=\"正式开始！\"><a href=\"#正式开始！\" class=\"headerlink\" title=\"正式开始！\"></a>正式开始！</h2><h3 id=\"从命令行开始！\"><a href=\"#从命令行开始！\" class=\"headerlink\" title=\"从命令行开始！\"></a>从命令行开始！</h3><p><img src=\"../images/PythonBasicGrammarImage/image-20210923234720280-16324120504921.png\" alt=\"image-20210923234720280\"></p>\n<p>这时，cmd就进入了python的编写模式，支持python 当前版本的所有语法，和python自带的编辑器</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当然，你也可以使用windows的powershell，不过相对于cmd而言，powershell更加复杂，而且有各种莫名其妙的限制</p></blockquote>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>注意，如果你在cmd中输入python后打开的是windows 商店，这是你操作系统的环境变量出了问题，请在edit the system environment variables下仔细检查Path中python条目下的环境变量指向的地址！</p>\n\n</div>\n<h4 id=\"现在尝试打印Hello-World吧\"><a href=\"#现在尝试打印Hello-World吧\" class=\"headerlink\" title=\"现在尝试打印Hello World吧\"></a>现在尝试打印Hello World吧</h4><p>所有你需要做的只是输入</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(&quot;Hello World&quot;)</code></pre>\n\n<p>cmd就会显示：</p>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210329193537197.png\" alt=\"image-20210329193537197\"></p>\n<p>简单吧！相信你一定会爱上python这门简单的语言的</p>\n<p>如果你要回到cmd的初始状态，只需要用 quit() 即可</p>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210329193638362.png\" alt=\"image-20210329193638362\"></p>\n<h4 id=\"什么时候需要使用到命令行？\"><a href=\"#什么时候需要使用到命令行？\" class=\"headerlink\" title=\"什么时候需要使用到命令行？\"></a>什么时候需要使用到命令行？</h4><p>比如我现在已经编写完成了一个基于python的脚本。在命令行中，我们甚至无需要进入python的编辑模式，只需输入python + 文件路径即可直接执行。一般来说，启动一个ide是很耗费时间的，而这就是我们节约时间的手段。</p>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210923235953188.png\" alt=\"image-20210923235953188\"></p>\n<h3 id=\"在pycharm中继续：\"><a href=\"#在pycharm中继续：\" class=\"headerlink\" title=\"在pycharm中继续：\"></a>在pycharm中继续：</h3><h4 id=\"PyCharm介绍\"><a href=\"#PyCharm介绍\" class=\"headerlink\" title=\"PyCharm介绍\"></a>PyCharm介绍</h4><p>官网：<a href=\"https://www.jetbrains.com/pycharm/\">PyCharm: the Python IDE for Professional Developers by JetBrains</a></p>\n<p>至于为什么选用它，建议逼乎一下😂</p>\n<h4 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h4><p><img src=\"../images/PythonBasicGrammarImage/image-20210329193807978.png\" alt=\"image-20210329193807978\"></p>\n<h4 id=\"对pycharm的一些初始设置：\"><a href=\"#对pycharm的一些初始设置：\" class=\"headerlink\" title=\"对pycharm的一些初始设置：\"></a>对pycharm的一些初始设置：</h4><ol>\n<li>设置编码：（都改为utf-8）<img src=\"../images/PythonBasicGrammarImage/image-20210329194151198.png\" alt=\"image-20210329194151198\"></li>\n<li>设置新建文件的默认代码和内容：<img src=\"../images/PythonBasicGrammarImage/image-20210330151608813.png\" alt=\"image-20210330151608813\"></li>\n</ol>\n<p>你可以在PyCharm的官网上找到所有的File template variables：<a href=\"https://www.jetbrains.com/help/pycharm/file-template-variables.html\">File template variables | PyCharm (jetbrains.com)</a></p>\n<h4 id=\"在console里执行命令：\"><a href=\"#在console里执行命令：\" class=\"headerlink\" title=\"在console里执行命令：\"></a>在console里执行命令：</h4><p>前面已经提到过在命令行中执行Python代码，这当然是运行已经编写好的Python程序或脚本的好办法。但是命令行中执行程序后就立刻输出结果并结束程序，那要是程序结束后我还想继续执行更多操作怎么办？</p>\n<p>这时候你可能需要用到Python Console功能<img src=\"../images/PythonBasicGrammarImage/image-20210330151923931.png\" alt=\"image-20210330151923931\"></p>\n<p>pycharm中的console就是一个pychon的直接运行环境，这里允许你以解释性的形式逐句输入并运行python代码。值得一提的是，在PyCharm中运行你的Python文件时，默认输出到Python Console中，这意味着你可以在程序结束完成之后接着输入更多内容</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>当你有不确定的代码需要验证的时候，不妨先复制到console里试一试！</p>\n</p>\n</div>\n<h3 id=\"数据类型：\"><a href=\"#数据类型：\" class=\"headerlink\" title=\"数据类型：\"></a>数据类型：</h3><p>在学习语法之前，你需要了解构成程序的要素是什么</p>\n<p>如果你有过其它语言的编程经验的话，你可能会说“数据结构+算法”</p>\n<p>但是如果你纯新手的话，那这可能难以理解。那么我会说，程序是由符合当前编程语言语法的语句依次执行生成的，构建程序的基本内容是数据的运算与处理</p>\n<p>很显然，就数据的处理而言，直接使用 1 + 2 等既定的数据常量是远远不够的——我们需要应付更多变的情况——这就要用到<strong>变量</strong></p>\n<h4 id=\"Python变量命名规则\"><a href=\"#Python变量命名规则\" class=\"headerlink\" title=\"Python变量命名规则\"></a>Python变量命名规则</h4><p>和其它语言一样，Python也有自己的变量命名规则</p>\n<ul>\n<li><p>第一个字符必须是字母表中字母或下划线 <strong>_</strong> </p>\n</li>\n<li><p>标识符的其他的部分由字母、数字和下划线组成</p>\n</li>\n<li><p>标识符对大小写敏感</p>\n</li>\n<li><p>注意避开python自己的保留字符</p>\n<p>你可以通过以下语句来查询Python保留的关键字符</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import keyword \nkeyword.kwlist</code></pre></li>\n</ul>\n<p>示例：<br><img src=\"../images/PythonBasicGrammarImage/image-20210330152927963.png\" alt=\"image-20210330152927963\"></p>\n<h4 id=\"关于变量的基本数据类型：\"><a href=\"#关于变量的基本数据类型：\" class=\"headerlink\" title=\"关于变量的基本数据类型：\"></a>关于变量的基本数据类型：</h4><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p>\n<p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不过Python中的确存在这些“基本数据类型”如：int，float之类的，并且它们之间都存在着严格的限制</p>\n<p>你可以使用 type() 函数来检查当前变量的数据类型：<img src=\"../images/PythonBasicGrammarImage/image-20210330153736850.png\" alt=\"image-20210330153736850\"></p></blockquote>\n<h4 id=\"标准数据类型：\"><a href=\"#标准数据类型：\" class=\"headerlink\" title=\"标准数据类型：\"></a>标准数据类型：</h4><ul>\n<li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li>\n<li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li>\n</ul>\n<p>共六种</p>\n<h5 id=\"关于可变与不可变数据：\"><a href=\"#关于可变与不可变数据：\" class=\"headerlink\" title=\"关于可变与不可变数据：\"></a>关于可变与不可变数据：</h5><p>什么是不可变数据？</p>\n<p>在Python中，我们可以设立变量 a = 1，之后我们可以对 a 的值做出改变，比如又执行语句 a = 2，这时 a 当然就不再指向1，但是1这个“内容”本身并没有改变。</p>\n<p>而可变数据则是可以改变数据的具体内容：如语句 a = [1, 2]，我们可以将 a 中的[0], [1]等数据单独拎出来并做出改变而并不改变 a 本身的指向</p>\n<p>这些“指向”，“内容”都是基于内存地址来说的。</p>\n<p>不可变数据类型： 当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。</p>\n<p>可变数据类型  ：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。</p>\n<p>你可以用 <code>id(变量名)</code>来查验对应变量的内存地址是否发生变化</p>\n<h5 id=\"数字：\"><a href=\"#数字：\" class=\"headerlink\" title=\"数字：\"></a>数字：</h5><p>int float…</p>\n<h5 id=\"列表：Python中功能最强大的数据类型\"><a href=\"#列表：Python中功能最强大的数据类型\" class=\"headerlink\" title=\"列表：Python中功能最强大的数据类型\"></a>列表：Python中功能最强大的数据类型</h5><p>用“[ ]”来定义列表！</p>\n<p>列表支持：</p>\n<ol>\n<li>列表间的拼接<img src=\"../images/PythonBasicGrammarImage/image-20210402172959101.png\" alt=\"image-20210402172959101\"></li>\n<li>定义以列表为元素的列表<img src=\"../images/PythonBasicGrammarImage/image-20210402172939650.png\" alt=\"image-20210402172939650\"></li>\n<li>将整个列表赋给新列表<img src=\"../images/PythonBasicGrammarImage/image-20210402172917361.png\" alt=\"image-20210402172917361\">（也可以使用copy()函数：<img src=\"../images/PythonBasicGrammarImage/image-20210402173226983.png\" alt=\"image-20210402173226983\">）</li>\n<li>通过append()，entend()，insert()，实现增</li>\n<li>通过pop()，remove()，实现删 </li>\n<li>支持通过截取来获取列表内容（截取参看字符串</li>\n</ol>\n<h5 id=\"元组：”常量列表“\"><a href=\"#元组：”常量列表“\" class=\"headerlink\" title=\"元组：”常量列表“\"></a>元组：”常量列表“</h5><p>不能改变元素个数的列表，列表中一切涉及改变元素个数改变的功能全部NG</p>\n<p>用 “( )” 来定义一个元组</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：</p>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210402174032001.png\" alt=\"image-20210402174032001\"></p>\n\n</div>\n<h5 id=\"字符串：特化列表\"><a href=\"#字符串：特化列表\" class=\"headerlink\" title=\"字符串：特化列表\"></a>字符串：特化列表</h5><ol>\n<li>python允许直接把字符/字符串存储到一个变量中</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; a &#x3D; &quot;bunjie&quot;\n&gt;&gt;&gt; a[-1]\n&#39;e&#39;\n&gt;&gt;&gt; a[0]\n&#39;b&#39;\n&gt;&gt;&gt; a[1]\n&#39;u&#39;\n&gt;&gt;&gt; a[:]\n&#39;bunjie&#39;\n&gt;&gt;&gt; a[0:1]\n&#39;b&#39;\n&gt;&gt;&gt; a[0:5]\n&#39;bunji&#39;\n&gt;&gt;&gt; a[0:6]\n&#39;bunjie&#39;\n&gt;&gt;&gt; a[0:7]\n&#39;bunjie&#39; #没有报错\n&gt;&gt;&gt; a[-1:-2]\n&#39;&#39;\n&gt;&gt;&gt; a[:-1]\n&#39;bunji&#39;\n&gt;&gt;&gt; a[:-6]\n&#39;&#39;\n&gt;&gt;&gt; a[:-5]\n&#39;b&#39;</code></pre>\n\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210402171810502.png\" alt=\"image-20210402171810502\"></p>\n<h5 id=\"字典：\"><a href=\"#字典：\" class=\"headerlink\" title=\"字典：\"></a>字典：</h5><p>使用键值对进行匹配，类似c语言中的“枚举类型”，以键值对构建数据内容 <code>&#123;key: value, ...&#125;</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">d &#x3D; &#123;key1 : value1, key2 : value2, key3 : value3 &#125;\nprint(d[key1])\n# 输出：value1\n\nD &#x3D; &#123;&#125; # 我们可以使用大括号来创建空字典</code></pre>\n\n<p>字典可能是所有数据类型中最高效的，因为取元素时直接采用key来定点查找而不是像是list等数据类型依次迭代查找</p>\n<h5 id=\"集合：\"><a href=\"#集合：\" class=\"headerlink\" title=\"集合：\"></a>集合：</h5><p>是的，就是集合论中的集合</p>\n<p>总体来说，集合这种数据类型我们使用得较少，做可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p>\n<p>创建格式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">parame1 &#x3D; &#123;value01, value02, ...&#125; # 注意格式\nparame2 &#x3D; set() # set只允许单个参数，我们一般使用set来创建空集合</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>根据我们中学时所学到的知识，我们知道：集合具有确定性、互异性、无序性</p>\n<p>根据这些性质，我们获知：单个确定数据只会出现一次。所以如果出现重复的值，集合会把相同的合并。</p></blockquote>\n<h3 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><h4 id=\"关于注释：\"><a href=\"#关于注释：\" class=\"headerlink\" title=\"关于注释：\"></a>关于注释：</h4><h5 id=\"什么是注释？\"><a href=\"#什么是注释？\" class=\"headerlink\" title=\"什么是注释？\"></a>什么是注释？</h5><p>注释是你在程序中插入的解释性的文字，单纯的只是为了方便别人和自己理解当前程序。程序在运行时会忽略所有被注释的部分，所以你留下的注释并不会对程序功能造成任何实际上的影响</p>\n<h5 id=\"python中的注释方式：\"><a href=\"#python中的注释方式：\" class=\"headerlink\" title=\"python中的注释方式：\"></a>python中的注释方式：</h5><ol>\n<li><p>以 <strong><code>#</code></strong> 作为单行注释，在pycharm中，你可以使用   <code>ctrl + /</code> 来快速注释一整行:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 这是一个单行注释</code></pre></li>\n<li><p>以一对三个连续的单引号**<code>&#39;&#39;&#39; &#39;&#39;&#39;</code><strong>，或一对三个连续的双引号</strong><code>&quot;&quot;&quot; &quot;&quot;&quot;</code>**来作为多行注释</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&quot;&quot;&quot;\n这是一个多行注释\n&quot;&quot;&quot;\n\n&#39;&#39;&#39;\n这也是一个多行注释\n&#39;&#39;&#39;</code></pre></li>\n</ol>\n<h4 id=\"关于缩进：\"><a href=\"#关于缩进：\" class=\"headerlink\" title=\"关于缩进：\"></a>关于缩进：</h4><p>Python没有 <code>&#123; &#125;</code>，它采用精确的缩进来确定控制语句的执行范围！</p>\n<p>一个项目里最好只采用 <em>tab</em> 和 <em>space</em> 两种中的一种缩进，如果在一个控制体里使用了两种缩进格式是会报错的</p>\n<p>个人建议使用 <em>tab</em> 作为缩进</p>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210330153314699.png\" alt=\"image-20210330153314699\"></p>\n<p>python没有分号：“ ; ”， 语句间几乎没有大括号，代价是精确的缩进！</p>\n<h4 id=\"条件控制语句\"><a href=\"#条件控制语句\" class=\"headerlink\" title=\"条件控制语句\"></a>条件控制语句</h4><h5 id=\"为什么使用条件控制？\"><a href=\"#为什么使用条件控制？\" class=\"headerlink\" title=\"为什么使用条件控制？\"></a>为什么使用条件控制？</h5><p>当然是为了以一个程序去应对多种可能性</p>\n<p>例如：我们解决除法运算时，我们当然需要以除数不为零来分类，但是我们不可能因为这一点就开发两个程序，并且要求用户根据除数是什么来选择运行那个程序——这就要求我们在设计程序的时候为某些特定情况运行特定代码</p>\n<h5 id=\"Python中的条件控制语句长什么样？\"><a href=\"#Python中的条件控制语句长什么样？\" class=\"headerlink\" title=\"Python中的条件控制语句长什么样？\"></a>Python中的条件控制语句长什么样？</h5><p>Python中if语句的一般形式如下所示：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">if condition_1:    \n    statement_block_1 \nelif condition_2:    \n    statement_block_2\n# 更多情况使用elif condiition_3: ... 并以此类推\nelse:\n    statement_block_3</code></pre>\n\n<ul>\n<li>如果 “condition_1” 为 True 将执行 “statement_block_1” 块语句</li>\n<li>如果 “condition_1” 为False，将<strong>判断</strong> “condition_2”</li>\n<li>如果”condition_2” 为 True 将执行 “statement_block_2” 块语句</li>\n<li>如果 “condition_1”与”condition_2”均为False，那么将执行”statement_block_3”块语句</li>\n</ul>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><p>1、每个条件后面要使用冒号 **:**，表示接下来是满足条件后要执行的语句块。</p>\n<p>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</p>\n<p>3、在Python中没有switch – case语句。</p>\n</p>\n</div>\n<h4 id=\"循环语句：\"><a href=\"#循环语句：\" class=\"headerlink\" title=\"循环语句：\"></a>循环语句：</h4><p>循环的意义有点类似于乘法之于加法，它提供了一种解出某一个条件下的最终结果的方式。借助循环，计算机能够非常高效的完成人很难或无法完成的事情，比如说，在大量文件中查找包含某个搜索词的文档，对几十万条销售数据进行统计汇总等。</p>\n<h5 id=\"while循环：\"><a href=\"#while循环：\" class=\"headerlink\" title=\"while循环：\"></a>while循环：</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">while 判断条件(condition)：    \n\t执行语句(statements)……\n# 每次循环之前都会进行一次condition是否为真的判断，如果结果为false，则立即停止循环</code></pre>\n\n<h5 id=\"for循环：\"><a href=\"#for循环：\" class=\"headerlink\" title=\"for循环：\"></a>for循环：</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for &lt;variable&gt; in &lt;sequence&gt;:\n    &lt;statements&gt;\nelse:\n    &lt;statements&gt;</code></pre>\n\n<p>例一：<img src=\"./006faQNTgw1f5wnm0mcxrg30ci07o47l.gif\"></p>\n<p>例二：<img src=\"../images/PythonBasicGrammarImage/image-20210402174928766.png\" alt=\"image-20210402174928766\"></p>\n<h2 id=\"基础语法到此结束！\"><a href=\"#基础语法到此结束！\" class=\"headerlink\" title=\"基础语法到此结束！\"></a>基础语法到此结束！</h2><h2 id=\"附录1：python包的获取和管理\"><a href=\"#附录1：python包的获取和管理\" class=\"headerlink\" title=\"附录1：python包的获取和管理\"></a>附录1：python包的获取和管理</h2><p>类似于Node的npm，Linux中的yum，apt等，python有自己的包管理工具——pip，这也是Python安装时自带的</p>\n<p>但是直接从pypi上获取包的速度太慢<del>长城防火墙</del>，所以我们要借用一些国内的镜像网站，比如<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple/\">清华大学的清华源镜像网站</a></p>\n<p>你可以从console(非python的编辑模式)里用python的pip语句指定国内的镜像源来直接安装包，如：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">pip install numpy -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;\n# -i代表当前安装操作使用后面的临时源</code></pre>\n\n<p>不过我们也可以通过 ctrl + shift + s 打开pycharm的 settings 进入 Project: (你当前的项目名) &gt;&gt; Python InterPreter 来直接安装包。记得在manage repository中添加国内的python源的地址</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>国内Python源建议使用清华源：<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple/\">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p></blockquote>\n<h2 id=\"附录2：Python运算符\"><a href=\"#附录2：Python运算符\" class=\"headerlink\" title=\"附录2：Python运算符\"></a>附录2：Python运算符</h2><p>运算符：（python的语法糖很大一部分集中在多种多样的运算符，这也是让书写python代码速度起飞的重要原因！）</p>\n<p><del>（虽然刚接触的时候会因为大量的运算符而痛苦😀）</del></p>\n<h3 id=\"运算符手册：\"><a href=\"#运算符手册：\" class=\"headerlink\" title=\"运算符手册：\"></a>运算符手册：</h3><h4 id=\"算数运算符：（相比c语言多了幂运算于取整运算）\"><a href=\"#算数运算符：（相比c语言多了幂运算于取整运算）\" class=\"headerlink\" title=\"算数运算符：（相比c语言多了幂运算于取整运算）\"></a>算数运算符：（相比c语言多了幂运算于取整运算）</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">加 - 两个对象相加</td>\n<td align=\"left\">a + b 输出结果 31</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">减 - 得到负数或是一个数减去另一个数</td>\n<td align=\"left\">a - b 输出结果 -11</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td align=\"left\">a * b 输出结果 210</td>\n</tr>\n<tr>\n<td align=\"left\">/</td>\n<td align=\"left\">除 - x 除以 y</td>\n<td align=\"left\">b / a 输出结果 2.1</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">取模 - 返回除法的余数</td>\n<td align=\"left\">b % a 输出结果 1</td>\n</tr>\n<tr>\n<td align=\"left\">**</td>\n<td align=\"left\">幂 - 返回x的y次幂</td>\n<td align=\"left\">a**b 为10的21次方</td>\n</tr>\n<tr>\n<td align=\"left\">//</td>\n<td align=\"left\">取整除 - 向下取接近商的整数</td>\n<td align=\"left\">&gt;&gt;&gt; 9//2 <br />4 <br/>&gt;&gt;&gt; -9//2<br/> -5</td>\n</tr>\n</tbody></table>\n<h4 id=\"比较运算符：（和c语言相同）\"><a href=\"#比较运算符：（和c语言相同）\" class=\"headerlink\" title=\"比较运算符：（和c语言相同）\"></a>比较运算符：（和c语言相同）</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">==</td>\n<td align=\"left\">等于 - 比较对象是否相等</td>\n<td align=\"left\">(a == b) 返回 False。</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">不等于 - 比较两个对象是否不相等</td>\n<td align=\"left\">(a != b) 返回 True。</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">大于 - 返回x是否大于y</td>\n<td align=\"left\">(a &gt; b) 返回 False。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>\n<td align=\"left\">(a &lt; b) 返回 True。</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;=</td>\n<td align=\"left\">大于等于 - 返回x是否大于等于y。</td>\n<td align=\"left\">(a &gt;= b) 返回 False。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;=</td>\n<td align=\"left\">小于等于 - 返回x是否小于等于y。</td>\n<td align=\"left\">(a &lt;= b) 返回 True。</td>\n</tr>\n</tbody></table>\n<h4 id=\"赋值运算：\"><a href=\"#赋值运算：\" class=\"headerlink\" title=\"赋值运算：\"></a>赋值运算：</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">简单的赋值运算符</td>\n<td align=\"left\">c = a + b 将 a + b 的运算结果赋值为 c</td>\n</tr>\n<tr>\n<td align=\"left\">+=</td>\n<td align=\"left\">加法赋值运算符</td>\n<td align=\"left\">c += a 等效于 c = c + a</td>\n</tr>\n<tr>\n<td align=\"left\">-=</td>\n<td align=\"left\">减法赋值运算符</td>\n<td align=\"left\">c -= a 等效于 c = c - a</td>\n</tr>\n<tr>\n<td align=\"left\">*=</td>\n<td align=\"left\">乘法赋值运算符</td>\n<td align=\"left\">c *= a 等效于 c = c * a</td>\n</tr>\n<tr>\n<td align=\"left\">/=</td>\n<td align=\"left\">除法赋值运算符</td>\n<td align=\"left\">c /= a 等效于 c = c / a</td>\n</tr>\n<tr>\n<td align=\"left\">%=</td>\n<td align=\"left\">取模赋值运算符</td>\n<td align=\"left\">c %= a 等效于 c = c % a</td>\n</tr>\n<tr>\n<td align=\"left\">**=</td>\n<td align=\"left\">幂赋值运算符</td>\n<td align=\"left\">c **= a 等效于 c = c ** a</td>\n</tr>\n<tr>\n<td align=\"left\">//=</td>\n<td align=\"left\">取整除赋值运算符</td>\n<td align=\"left\">c //= a 等效于 c = c // a</td>\n</tr>\n</tbody></table>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>特别提醒！<br>python中没有像c语言一样的自加运算！<img src=\"../images/PythonBasicGrammarImage/image-20210402161704512.png\" alt=\"image-20210402161704512\"></p>\n\n</div>\n<h4 id=\"位运算符：（和c语言相同）\"><a href=\"#位运算符：（和c语言相同）\" class=\"headerlink\" title=\"位运算符：（和c语言相同）\"></a>位运算符：（和c语言相同）</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述:(下表中变量 a 为 60，b 为 13二进制格式如下：)</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;</td>\n<td align=\"left\">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>\n<td align=\"left\">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>\n</tr>\n<tr>\n<td align=\"left\">|</td>\n<td align=\"left\">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>\n<td align=\"left\">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">按位异或运算符：当两对应的二进位相异时，结果为1</td>\n<td align=\"left\">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>\n</tr>\n<tr>\n<td align=\"left\">~</td>\n<td align=\"left\">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。**~x** 类似于 <strong>-x-1</strong></td>\n<td align=\"left\">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt;</td>\n<td align=\"left\">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td>\n<td align=\"left\">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt;</td>\n<td align=\"left\">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td>\n<td align=\"left\">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>\n</tr>\n</tbody></table>\n<h4 id=\"逻辑运算符：\"><a href=\"#逻辑运算符：\" class=\"headerlink\" title=\"逻辑运算符：\"></a>逻辑运算符：</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">逻辑表达式</th>\n<th align=\"left\">描述（令a=10， b=20）</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">and</td>\n<td align=\"left\">x and y</td>\n<td align=\"left\">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td>\n<td align=\"left\">(a and b) 返回 20。<img src=\"../images/PythonBasicGrammarImage/image-20210402163513449.png\" alt=\"image-20210402163513449\"></td>\n</tr>\n<tr>\n<td align=\"left\">or</td>\n<td align=\"left\">x or y</td>\n<td align=\"left\">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。(与“与运算恰好相反”)</td>\n<td align=\"left\">(a or b) 返回 10。</td>\n</tr>\n<tr>\n<td align=\"left\">not</td>\n<td align=\"left\">not x</td>\n<td align=\"left\">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>\n<td align=\"left\">not(a and b) 返回 False</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>补充说明：<img src=\"../images/PythonBasicGrammarImage/image-20210402163342743.png\" alt=\"image-20210402163342743\"><img src=\"../images/PythonBasicGrammarImage/image-20210402163401305.png\" alt=\"image-20210402163401305\"></p></blockquote>\n<h4 id=\"成员运算符：\"><a href=\"#成员运算符：\" class=\"headerlink\" title=\"成员运算符：\"></a>成员运算符：</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">in</td>\n<td align=\"left\">如果在指定的序列中找到值返回 True，否则返回 False。</td>\n<td align=\"left\">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>\n</tr>\n<tr>\n<td align=\"left\">not in</td>\n<td align=\"left\">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>\n<td align=\"left\">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>\n</tr>\n</tbody></table>\n<h4 id=\"身份运算符：\"><a href=\"#身份运算符：\" class=\"headerlink\" title=\"身份运算符：\"></a>身份运算符：</h4><p>（有种 == 和 != 的感觉，但是确实不一样！）</p>\n<p><em>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</em><img src=\"image-20210402164253225.png\" alt=\"image-20210402164253225\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述（注：id () 函数用于获取对象内存地址。）</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">is</td>\n<td align=\"left\">is 是判断两个标识符是不是引用自一个对象</td>\n<td align=\"left\"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td align=\"left\">is not</td>\n<td align=\"left\">is not 是判断两个标识符是不是引用自不同对象</td>\n<td align=\"left\"><strong>x is not y</strong> ， 类似 **id(a) != id(b)**。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>\n</tr>\n</tbody></table>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210402163932528.png\" alt=\"image-20210402163932528\"></p>\n<h3 id=\"Python运算符优先级\"><a href=\"#Python运算符优先级\" class=\"headerlink\" title=\"Python运算符优先级\"></a>Python运算符优先级</h3><p>以下表格列出了从最高到最低优先级的所有运算符：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">**</td>\n<td align=\"left\">指数 (最高优先级)</td>\n</tr>\n<tr>\n<td align=\"left\">~ + -</td>\n<td align=\"left\">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>\n</tr>\n<tr>\n<td align=\"left\">* / % //</td>\n<td align=\"left\">乘，除，求余数和取整除</td>\n</tr>\n<tr>\n<td align=\"left\">+ -</td>\n<td align=\"left\">加法减法</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt; &lt;&lt;</td>\n<td align=\"left\">右移，左移运算符</td>\n</tr>\n<tr>\n<td align=\"left\">&amp;</td>\n<td align=\"left\">位 ‘AND’</td>\n</tr>\n<tr>\n<td align=\"left\">^ |</td>\n<td align=\"left\">位运算符</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;= &lt; &gt; &gt;=</td>\n<td align=\"left\">比较运算符</td>\n</tr>\n<tr>\n<td align=\"left\">== !=</td>\n<td align=\"left\">等于运算符</td>\n</tr>\n<tr>\n<td align=\"left\">= %= /= //= -= += *= **=</td>\n<td align=\"left\">赋值运算符</td>\n</tr>\n<tr>\n<td align=\"left\">is is not</td>\n<td align=\"left\">身份运算符</td>\n</tr>\n<tr>\n<td align=\"left\">in not in</td>\n<td align=\"left\">成员运算符</td>\n</tr>\n<tr>\n<td align=\"left\">not and or</td>\n<td align=\"left\">逻辑运算符</td>\n</tr>\n</tbody></table>\n<p>最后<del>（传教）</del>:我即使是死了，钉在棺材里了，也要在墓里，用这腐朽的声带喊出：“<strong>vocaloid forever！！！</strong>“</p>\n<p>最后的最后：都看到这里了，不听支歌吗?(❁’◡’❁)</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=245852635&bvid=BV1Vv411t7Gb&cid=273023330&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n\n\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><ol>\n<li><a href=\"https://www.runoob.com/python3/python3-tutorial.html\">Python3 教程 | 菜鸟教程 (runoob.com)</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python-3-Basic-Grammar-Training\"><a href=\"#Python-3-Basic-Grammar-Training\" class=\"headerlink\" title=\"Python 3 Basic Grammar Training\"></a>Python 3 Basic Grammar Training</h1><h2 id=\"为什么是python？\"><a href=\"#为什么是python？\" class=\"headerlink\" title=\"为什么是python？\"></a>为什么是python？</h2><p>一个最重要的原因——简单，快速，容易上手：<img src=\"../images/PythonBasicGrammarImage/hello-world-in-python.png\"></p>\n<p>你也可以通过著名的开发语言排行榜TIOBE来直观感受Python有多么热门<a href=\"https://www.tiobe.com/tiobe-index/\">index | TIOBE - The Software Quality Company</a></p>\n<h3 id=\"python官网：Welcome-to-Python-org\"><a href=\"#python官网：Welcome-to-Python-org\" class=\"headerlink\" title=\"python官网：Welcome to Python.org\"></a>python官网：<a href=\"https://www.python.org/\">Welcome to Python.org</a></h3><h3 id=\"python社区（PYPI）：PyPI-·-The-Python-Package-Index\"><a href=\"#python社区（PYPI）：PyPI-·-The-Python-Package-Index\" class=\"headerlink\" title=\"python社区（PYPI）：PyPI · The Python Package Index\"></a>python社区（PYPI）：<a href=\"https://pypi.org/\">PyPI · The Python Package Index</a></h3><h3 id=\"python最大的优势：开发效率高\"><a href=\"#python最大的优势：开发效率高\" class=\"headerlink\" title=\"python最大的优势：开发效率高\"></a>python最大的优势：开发效率高</h3><h3 id=\"python最大的劣势：运行效率低\"><a href=\"#python最大的劣势：运行效率低\" class=\"headerlink\" title=\"python最大的劣势：运行效率低\"></a>python最大的劣势：运行效率低</h3><p><del>开发效率与运行效率间的取舍是动态语言不可能绕过的问题，Python选择了开发效率换运行效率。</del></p>\n<p><del>但是python支持嵌入c，c++等高效率的低级语言，可以在一定程度上缓解这个问题</del></p>\n<h2 id=\"配置你的电脑环境：\"><a href=\"#配置你的电脑环境：\" class=\"headerlink\" title=\"配置你的电脑环境：\"></a>配置你的电脑环境：</h2><p>安装Python 3.8（Python会自带一个编辑器”IDLE”，不过只提供了基础的代码编写功能）</p>\n<p>你可以通过我</p>\n<p>关于IDE，我会推荐推荐使用Jet Brains公司出品的Pycharm。当然，宇宙第一IDE——Visual Studio也是不错的选择</p>\n<blockquote>\n<p>关于Python的版本：</p>\n<p>Python3中的更新与c/c++的新标准，Java的新版本等有相通之处；</p>\n<blockquote>\n<p>每次Python更新都会推出很多新的feature，3.7版本中更新了这些内容：<a href=\"https://docs.python.org/zh-cn/3.7/whatsnew/3.7.html%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E5%BD%93%E5%89%8D%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%8C%E6%9C%80%E5%A5%BD%E7%9A%84%E5%8A%9E%E6%B3%95%E5%BD%93%E7%84%B6%E6%98%AF%E5%8E%BB%E9%98%85%E8%AF%BBPython%E7%9A%84%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%8C%E5%BD%93%E7%84%B6%EF%BC%8C%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%9C%A8Python%E8%87%AA%E5%B8%A6%E7%9A%84ide%EF%BC%9Aidle%E6%9D%A5%E6%9F%A5%E9%98%85Python%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%98%E5%8C%96%E4%BF%A1%E6%81%AF%E3%80%82%E5%9C%A8idle%E4%B8%AD%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E6%8C%89%E7%85%A7Help\">https://docs.python.org/zh-cn/3.7/whatsnew/3.7.html，如果你需要了解当前版本更新了什么，最好的办法当然是去阅读Python的官方文档，当然，你也可以直接在Python自带的ide：idle来查阅Python的版本变化信息。在idle中，你可以按照Help</a> &gt;&gt;&gt; Python Docs &gt;&gt; What’s New In Python 3.7的路径来查看</p>\n</blockquote>\n<p>简单来说，python的更新会添加新的语法，提升python的稳定性(一般)，少数情况下会删除旧的语法与功能<del>（3.10的兼容性差大概就是这么来的</del>）</p>\n<p><del>截止本文完成时，Python已经推出了发布3.11版本的计划，并且已经推出了Python3.11的文档：<a href=\"https://docs.python.org/3.11/whatsnew/3.11.html\">What’s New In Python 3.11 — Python 3.11.0a0 documentation</a></del></p>\n</blockquote>\n<h2 id=\"正式开始！\"><a href=\"#正式开始！\" class=\"headerlink\" title=\"正式开始！\"></a>正式开始！</h2><h3 id=\"从命令行开始！\"><a href=\"#从命令行开始！\" class=\"headerlink\" title=\"从命令行开始！\"></a>从命令行开始！</h3><p><img src=\"../images/PythonBasicGrammarImage/image-20210923234720280-16324120504921.png\" alt=\"image-20210923234720280\"></p>\n<p>这时，cmd就进入了python的编写模式，支持python 当前版本的所有语法，和python自带的编辑器</p>\n<blockquote>\n<p>当然，你也可以使用windows的powershell，不过相对于cmd而言，powershell更加复杂，而且有各种莫名其妙的限制</p>\n</blockquote>\n<p>:::warning</p>\n<p>注意，如果你在cmd中输入python后打开的是windows 商店，这是你操作系统的环境变量出了问题，请在edit the system environment variables下仔细检查Path中python条目下的环境变量指向的地址！</p>\n<p>:::</p>\n<h4 id=\"现在尝试打印Hello-World吧\"><a href=\"#现在尝试打印Hello-World吧\" class=\"headerlink\" title=\"现在尝试打印Hello World吧\"></a>现在尝试打印Hello World吧</h4><p>所有你需要做的只是输入</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(&quot;Hello World&quot;)</code></pre>\n\n<p>cmd就会显示：</p>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210329193537197.png\" alt=\"image-20210329193537197\"></p>\n<p>简单吧！相信你一定会爱上python这门简单的语言的</p>\n<p>如果你要回到cmd的初始状态，只需要用 quit() 即可</p>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210329193638362.png\" alt=\"image-20210329193638362\"></p>\n<h4 id=\"什么时候需要使用到命令行？\"><a href=\"#什么时候需要使用到命令行？\" class=\"headerlink\" title=\"什么时候需要使用到命令行？\"></a>什么时候需要使用到命令行？</h4><p>比如我现在已经编写完成了一个基于python的脚本。在命令行中，我们甚至无需要进入python的编辑模式，只需输入python + 文件路径即可直接执行。一般来说，启动一个ide是很耗费时间的，而这就是我们节约时间的手段。</p>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210923235953188.png\" alt=\"image-20210923235953188\"></p>\n<h3 id=\"在pycharm中继续：\"><a href=\"#在pycharm中继续：\" class=\"headerlink\" title=\"在pycharm中继续：\"></a>在pycharm中继续：</h3><h4 id=\"PyCharm介绍\"><a href=\"#PyCharm介绍\" class=\"headerlink\" title=\"PyCharm介绍\"></a>PyCharm介绍</h4><p>官网：<a href=\"https://www.jetbrains.com/pycharm/\">PyCharm: the Python IDE for Professional Developers by JetBrains</a></p>\n<p>至于为什么选用它，建议逼乎一下😂</p>\n<h4 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h4><p><img src=\"../images/PythonBasicGrammarImage/image-20210329193807978.png\" alt=\"image-20210329193807978\"></p>\n<h4 id=\"对pycharm的一些初始设置：\"><a href=\"#对pycharm的一些初始设置：\" class=\"headerlink\" title=\"对pycharm的一些初始设置：\"></a>对pycharm的一些初始设置：</h4><ol>\n<li>设置编码：（都改为utf-8）<img src=\"../images/PythonBasicGrammarImage/image-20210329194151198.png\" alt=\"image-20210329194151198\"></li>\n<li>设置新建文件的默认代码和内容：<img src=\"../images/PythonBasicGrammarImage/image-20210330151608813.png\" alt=\"image-20210330151608813\"></li>\n</ol>\n<p>你可以在PyCharm的官网上找到所有的File template variables：<a href=\"https://www.jetbrains.com/help/pycharm/file-template-variables.html\">File template variables | PyCharm (jetbrains.com)</a></p>\n<h4 id=\"在console里执行命令：\"><a href=\"#在console里执行命令：\" class=\"headerlink\" title=\"在console里执行命令：\"></a>在console里执行命令：</h4><p>前面已经提到过在命令行中执行Python代码，这当然是运行已经编写好的Python程序或脚本的好办法。但是命令行中执行程序后就立刻输出结果并结束程序，那要是程序结束后我还想继续执行更多操作怎么办？</p>\n<p>这时候你可能需要用到Python Console功能<img src=\"../images/PythonBasicGrammarImage/image-20210330151923931.png\" alt=\"image-20210330151923931\"></p>\n<p>pycharm中的console就是一个pychon的直接运行环境，这里允许你以解释性的形式逐句输入并运行python代码。值得一提的是，在PyCharm中运行你的Python文件时，默认输出到Python Console中，这意味着你可以在程序结束完成之后接着输入更多内容</p>\n<p>:::tip</p>\n<p>当你有不确定的代码需要验证的时候，不妨先复制到console里试一试！</p>\n<p>:::</p>\n<h3 id=\"数据类型：\"><a href=\"#数据类型：\" class=\"headerlink\" title=\"数据类型：\"></a>数据类型：</h3><p>在学习语法之前，你需要了解构成程序的要素是什么</p>\n<p>如果你有过其它语言的编程经验的话，你可能会说“数据结构+算法”</p>\n<p>但是如果你纯新手的话，那这可能难以理解。那么我会说，程序是由符合当前编程语言语法的语句依次执行生成的，构建程序的基本内容是数据的运算与处理</p>\n<p>很显然，就数据的处理而言，直接使用 1 + 2 等既定的数据常量是远远不够的——我们需要应付更多变的情况——这就要用到<strong>变量</strong></p>\n<h4 id=\"Python变量命名规则\"><a href=\"#Python变量命名规则\" class=\"headerlink\" title=\"Python变量命名规则\"></a>Python变量命名规则</h4><p>和其它语言一样，Python也有自己的变量命名规则</p>\n<ul>\n<li><p>第一个字符必须是字母表中字母或下划线 <strong>_</strong> </p>\n</li>\n<li><p>标识符的其他的部分由字母、数字和下划线组成</p>\n</li>\n<li><p>标识符对大小写敏感</p>\n</li>\n<li><p>注意避开python自己的保留字符</p>\n<p>你可以通过以下语句来查询Python保留的关键字符</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import keyword \nkeyword.kwlist</code></pre></li>\n</ul>\n<p>示例：<br><img src=\"../images/PythonBasicGrammarImage/image-20210330152927963.png\" alt=\"image-20210330152927963\"></p>\n<h4 id=\"关于变量的基本数据类型：\"><a href=\"#关于变量的基本数据类型：\" class=\"headerlink\" title=\"关于变量的基本数据类型：\"></a>关于变量的基本数据类型：</h4><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p>\n<p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>\n<blockquote>\n<p>不过Python中的确存在这些“基本数据类型”如：int，float之类的，并且它们之间都存在着严格的限制</p>\n<p>你可以使用 type() 函数来检查当前变量的数据类型：<img src=\"../images/PythonBasicGrammarImage/image-20210330153736850.png\" alt=\"image-20210330153736850\"></p>\n</blockquote>\n<h4 id=\"标准数据类型：\"><a href=\"#标准数据类型：\" class=\"headerlink\" title=\"标准数据类型：\"></a>标准数据类型：</h4><ul>\n<li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li>\n<li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li>\n</ul>\n<p>共六种</p>\n<h5 id=\"关于可变与不可变数据：\"><a href=\"#关于可变与不可变数据：\" class=\"headerlink\" title=\"关于可变与不可变数据：\"></a>关于可变与不可变数据：</h5><p>什么是不可变数据？</p>\n<p>在Python中，我们可以设立变量 a = 1，之后我们可以对 a 的值做出改变，比如又执行语句 a = 2，这时 a 当然就不再指向1，但是1这个“内容”本身并没有改变。</p>\n<p>而可变数据则是可以改变数据的具体内容：如语句 a = [1, 2]，我们可以将 a 中的[0], [1]等数据单独拎出来并做出改变而并不改变 a 本身的指向</p>\n<p>这些“指向”，“内容”都是基于内存地址来说的。</p>\n<p>不可变数据类型： 当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。</p>\n<p>可变数据类型  ：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。</p>\n<p>你可以用 <code>id(变量名)</code>来查验对应变量的内存地址是否发生变化</p>\n<h5 id=\"数字：\"><a href=\"#数字：\" class=\"headerlink\" title=\"数字：\"></a>数字：</h5><p>int float…</p>\n<h5 id=\"列表：Python中功能最强大的数据类型\"><a href=\"#列表：Python中功能最强大的数据类型\" class=\"headerlink\" title=\"列表：Python中功能最强大的数据类型\"></a>列表：Python中功能最强大的数据类型</h5><p>用“[ ]”来定义列表！</p>\n<p>列表支持：</p>\n<ol>\n<li>列表间的拼接<img src=\"../images/PythonBasicGrammarImage/image-20210402172959101.png\" alt=\"image-20210402172959101\"></li>\n<li>定义以列表为元素的列表<img src=\"../images/PythonBasicGrammarImage/image-20210402172939650.png\" alt=\"image-20210402172939650\"></li>\n<li>将整个列表赋给新列表<img src=\"../images/PythonBasicGrammarImage/image-20210402172917361.png\" alt=\"image-20210402172917361\">（也可以使用copy()函数：<img src=\"../images/PythonBasicGrammarImage/image-20210402173226983.png\" alt=\"image-20210402173226983\">）</li>\n<li>通过append()，entend()，insert()，实现增</li>\n<li>通过pop()，remove()，实现删 </li>\n<li>支持通过截取来获取列表内容（截取参看字符串</li>\n</ol>\n<h5 id=\"元组：”常量列表“\"><a href=\"#元组：”常量列表“\" class=\"headerlink\" title=\"元组：”常量列表“\"></a>元组：”常量列表“</h5><p>不能改变元素个数的列表，列表中一切涉及改变元素个数改变的功能全部NG</p>\n<p>用 “( )” 来定义一个元组</p>\n<p>:::warning</p>\n<p>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：</p>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210402174032001.png\" alt=\"image-20210402174032001\"></p>\n<p>:::</p>\n<h5 id=\"字符串：特化列表\"><a href=\"#字符串：特化列表\" class=\"headerlink\" title=\"字符串：特化列表\"></a>字符串：特化列表</h5><ol>\n<li>python允许直接把字符/字符串存储到一个变量中</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; a &#x3D; &quot;bunjie&quot;\n&gt;&gt;&gt; a[-1]\n&#39;e&#39;\n&gt;&gt;&gt; a[0]\n&#39;b&#39;\n&gt;&gt;&gt; a[1]\n&#39;u&#39;\n&gt;&gt;&gt; a[:]\n&#39;bunjie&#39;\n&gt;&gt;&gt; a[0:1]\n&#39;b&#39;\n&gt;&gt;&gt; a[0:5]\n&#39;bunji&#39;\n&gt;&gt;&gt; a[0:6]\n&#39;bunjie&#39;\n&gt;&gt;&gt; a[0:7]\n&#39;bunjie&#39; #没有报错\n&gt;&gt;&gt; a[-1:-2]\n&#39;&#39;\n&gt;&gt;&gt; a[:-1]\n&#39;bunji&#39;\n&gt;&gt;&gt; a[:-6]\n&#39;&#39;\n&gt;&gt;&gt; a[:-5]\n&#39;b&#39;</code></pre>\n\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210402171810502.png\" alt=\"image-20210402171810502\"></p>\n<h5 id=\"字典：\"><a href=\"#字典：\" class=\"headerlink\" title=\"字典：\"></a>字典：</h5><p>使用键值对进行匹配，类似c语言中的“枚举类型”，以键值对构建数据内容 <code>&#123;key: value, ...&#125;</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">d &#x3D; &#123;key1 : value1, key2 : value2, key3 : value3 &#125;\nprint(d[key1])\n# 输出：value1\n\nD &#x3D; &#123;&#125; # 我们可以使用大括号来创建空字典</code></pre>\n\n<p>字典可能是所有数据类型中最高效的，因为取元素时直接采用key来定点查找而不是像是list等数据类型依次迭代查找</p>\n<h5 id=\"集合：\"><a href=\"#集合：\" class=\"headerlink\" title=\"集合：\"></a>集合：</h5><p>是的，就是集合论中的集合</p>\n<p>总体来说，集合这种数据类型我们使用得较少，做可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p>\n<p>创建格式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">parame1 &#x3D; &#123;value01, value02, ...&#125; # 注意格式\nparame2 &#x3D; set() # set只允许单个参数，我们一般使用set来创建空集合</code></pre>\n\n<blockquote>\n<p>根据我们中学时所学到的知识，我们知道：集合具有确定性、互异性、无序性</p>\n<p>根据这些性质，我们获知：单个确定数据只会出现一次。所以如果出现重复的值，集合会把相同的合并。</p>\n</blockquote>\n<h3 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><h4 id=\"关于注释：\"><a href=\"#关于注释：\" class=\"headerlink\" title=\"关于注释：\"></a>关于注释：</h4><h5 id=\"什么是注释？\"><a href=\"#什么是注释？\" class=\"headerlink\" title=\"什么是注释？\"></a>什么是注释？</h5><p>注释是你在程序中插入的解释性的文字，单纯的只是为了方便别人和自己理解当前程序。程序在运行时会忽略所有被注释的部分，所以你留下的注释并不会对程序功能造成任何实际上的影响</p>\n<h5 id=\"python中的注释方式：\"><a href=\"#python中的注释方式：\" class=\"headerlink\" title=\"python中的注释方式：\"></a>python中的注释方式：</h5><ol>\n<li><p>以 <strong><code>#</code></strong> 作为单行注释，在pycharm中，你可以使用   <code>ctrl + /</code> 来快速注释一整行:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 这是一个单行注释</code></pre></li>\n<li><p>以一对三个连续的单引号**<code>&#39;&#39;&#39; &#39;&#39;&#39;</code><strong>，或一对三个连续的双引号</strong><code>&quot;&quot;&quot; &quot;&quot;&quot;</code>**来作为多行注释</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&quot;&quot;&quot;\n这是一个多行注释\n&quot;&quot;&quot;\n\n&#39;&#39;&#39;\n这也是一个多行注释\n&#39;&#39;&#39;</code></pre></li>\n</ol>\n<h4 id=\"关于缩进：\"><a href=\"#关于缩进：\" class=\"headerlink\" title=\"关于缩进：\"></a>关于缩进：</h4><p>Python没有 <code>&#123; &#125;</code>，它采用精确的缩进来确定控制语句的执行范围！</p>\n<p>一个项目里最好只采用 <em>tab</em> 和 <em>space</em> 两种中的一种缩进，如果在一个控制体里使用了两种缩进格式是会报错的</p>\n<p>个人建议使用 <em>tab</em> 作为缩进</p>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210330153314699.png\" alt=\"image-20210330153314699\"></p>\n<p>python没有分号：“ ; ”， 语句间几乎没有大括号，代价是精确的缩进！</p>\n<h4 id=\"条件控制语句\"><a href=\"#条件控制语句\" class=\"headerlink\" title=\"条件控制语句\"></a>条件控制语句</h4><h5 id=\"为什么使用条件控制？\"><a href=\"#为什么使用条件控制？\" class=\"headerlink\" title=\"为什么使用条件控制？\"></a>为什么使用条件控制？</h5><p>当然是为了以一个程序去应对多种可能性</p>\n<p>例如：我们解决除法运算时，我们当然需要以除数不为零来分类，但是我们不可能因为这一点就开发两个程序，并且要求用户根据除数是什么来选择运行那个程序——这就要求我们在设计程序的时候为某些特定情况运行特定代码</p>\n<h5 id=\"Python中的条件控制语句长什么样？\"><a href=\"#Python中的条件控制语句长什么样？\" class=\"headerlink\" title=\"Python中的条件控制语句长什么样？\"></a>Python中的条件控制语句长什么样？</h5><p>Python中if语句的一般形式如下所示：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">if condition_1:    \n    statement_block_1 \nelif condition_2:    \n    statement_block_2\n# 更多情况使用elif condiition_3: ... 并以此类推\nelse:\n    statement_block_3</code></pre>\n\n<ul>\n<li>如果 “condition_1” 为 True 将执行 “statement_block_1” 块语句</li>\n<li>如果 “condition_1” 为False，将<strong>判断</strong> “condition_2”</li>\n<li>如果”condition_2” 为 True 将执行 “statement_block_2” 块语句</li>\n<li>如果 “condition_1”与”condition_2”均为False，那么将执行”statement_block_3”块语句</li>\n</ul>\n<p>:::warning</p>\n<p>1、每个条件后面要使用冒号 **:**，表示接下来是满足条件后要执行的语句块。</p>\n<p>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</p>\n<p>3、在Python中没有switch – case语句。</p>\n<p>:::</p>\n<h4 id=\"循环语句：\"><a href=\"#循环语句：\" class=\"headerlink\" title=\"循环语句：\"></a>循环语句：</h4><p>循环的意义有点类似于乘法之于加法，它提供了一种解出某一个条件下的最终结果的方式。借助循环，计算机能够非常高效的完成人很难或无法完成的事情，比如说，在大量文件中查找包含某个搜索词的文档，对几十万条销售数据进行统计汇总等。</p>\n<h5 id=\"while循环：\"><a href=\"#while循环：\" class=\"headerlink\" title=\"while循环：\"></a>while循环：</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">while 判断条件(condition)：    \n\t执行语句(statements)……\n# 每次循环之前都会进行一次condition是否为真的判断，如果结果为false，则立即停止循环</code></pre>\n\n<h5 id=\"for循环：\"><a href=\"#for循环：\" class=\"headerlink\" title=\"for循环：\"></a>for循环：</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for &lt;variable&gt; in &lt;sequence&gt;:\n    &lt;statements&gt;\nelse:\n    &lt;statements&gt;</code></pre>\n\n<p>例一：<img src=\"./006faQNTgw1f5wnm0mcxrg30ci07o47l.gif\"></p>\n<p>例二：<img src=\"../images/PythonBasicGrammarImage/image-20210402174928766.png\" alt=\"image-20210402174928766\"></p>\n<h2 id=\"基础语法到此结束！\"><a href=\"#基础语法到此结束！\" class=\"headerlink\" title=\"基础语法到此结束！\"></a>基础语法到此结束！</h2><h2 id=\"附录1：python包的获取和管理\"><a href=\"#附录1：python包的获取和管理\" class=\"headerlink\" title=\"附录1：python包的获取和管理\"></a>附录1：python包的获取和管理</h2><p>类似于Node的npm，Linux中的yum，apt等，python有自己的包管理工具——pip，这也是Python安装时自带的</p>\n<p>但是直接从pypi上获取包的速度太慢<del>长城防火墙</del>，所以我们要借用一些国内的镜像网站，比如<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple/\">清华大学的清华源镜像网站</a></p>\n<p>你可以从console(非python的编辑模式)里用python的pip语句指定国内的镜像源来直接安装包，如：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">pip install numpy -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;\n# -i代表当前安装操作使用后面的临时源</code></pre>\n\n<p>不过我们也可以通过 ctrl + shift + s 打开pycharm的 settings 进入 Project: (你当前的项目名) &gt;&gt; Python InterPreter 来直接安装包。记得在manage repository中添加国内的python源的地址</p>\n<blockquote>\n<p>国内Python源建议使用清华源：<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple/\">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p>\n</blockquote>\n<h2 id=\"附录2：Python运算符\"><a href=\"#附录2：Python运算符\" class=\"headerlink\" title=\"附录2：Python运算符\"></a>附录2：Python运算符</h2><p>运算符：（python的语法糖很大一部分集中在多种多样的运算符，这也是让书写python代码速度起飞的重要原因！）</p>\n<p><del>（虽然刚接触的时候会因为大量的运算符而痛苦😀）</del></p>\n<h3 id=\"运算符手册：\"><a href=\"#运算符手册：\" class=\"headerlink\" title=\"运算符手册：\"></a>运算符手册：</h3><h4 id=\"算数运算符：（相比c语言多了幂运算于取整运算）\"><a href=\"#算数运算符：（相比c语言多了幂运算于取整运算）\" class=\"headerlink\" title=\"算数运算符：（相比c语言多了幂运算于取整运算）\"></a>算数运算符：（相比c语言多了幂运算于取整运算）</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">加 - 两个对象相加</td>\n<td align=\"left\">a + b 输出结果 31</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">减 - 得到负数或是一个数减去另一个数</td>\n<td align=\"left\">a - b 输出结果 -11</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td align=\"left\">a * b 输出结果 210</td>\n</tr>\n<tr>\n<td align=\"left\">/</td>\n<td align=\"left\">除 - x 除以 y</td>\n<td align=\"left\">b / a 输出结果 2.1</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">取模 - 返回除法的余数</td>\n<td align=\"left\">b % a 输出结果 1</td>\n</tr>\n<tr>\n<td align=\"left\">**</td>\n<td align=\"left\">幂 - 返回x的y次幂</td>\n<td align=\"left\">a**b 为10的21次方</td>\n</tr>\n<tr>\n<td align=\"left\">//</td>\n<td align=\"left\">取整除 - 向下取接近商的整数</td>\n<td align=\"left\">&gt;&gt;&gt; 9//2 <br />4 <br/>&gt;&gt;&gt; -9//2<br/> -5</td>\n</tr>\n</tbody></table>\n<h4 id=\"比较运算符：（和c语言相同）\"><a href=\"#比较运算符：（和c语言相同）\" class=\"headerlink\" title=\"比较运算符：（和c语言相同）\"></a>比较运算符：（和c语言相同）</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">==</td>\n<td align=\"left\">等于 - 比较对象是否相等</td>\n<td align=\"left\">(a == b) 返回 False。</td>\n</tr>\n<tr>\n<td align=\"left\">!=</td>\n<td align=\"left\">不等于 - 比较两个对象是否不相等</td>\n<td align=\"left\">(a != b) 返回 True。</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">大于 - 返回x是否大于y</td>\n<td align=\"left\">(a &gt; b) 返回 False。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>\n<td align=\"left\">(a &lt; b) 返回 True。</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;=</td>\n<td align=\"left\">大于等于 - 返回x是否大于等于y。</td>\n<td align=\"left\">(a &gt;= b) 返回 False。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;=</td>\n<td align=\"left\">小于等于 - 返回x是否小于等于y。</td>\n<td align=\"left\">(a &lt;= b) 返回 True。</td>\n</tr>\n</tbody></table>\n<h4 id=\"赋值运算：\"><a href=\"#赋值运算：\" class=\"headerlink\" title=\"赋值运算：\"></a>赋值运算：</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">=</td>\n<td align=\"left\">简单的赋值运算符</td>\n<td align=\"left\">c = a + b 将 a + b 的运算结果赋值为 c</td>\n</tr>\n<tr>\n<td align=\"left\">+=</td>\n<td align=\"left\">加法赋值运算符</td>\n<td align=\"left\">c += a 等效于 c = c + a</td>\n</tr>\n<tr>\n<td align=\"left\">-=</td>\n<td align=\"left\">减法赋值运算符</td>\n<td align=\"left\">c -= a 等效于 c = c - a</td>\n</tr>\n<tr>\n<td align=\"left\">*=</td>\n<td align=\"left\">乘法赋值运算符</td>\n<td align=\"left\">c *= a 等效于 c = c * a</td>\n</tr>\n<tr>\n<td align=\"left\">/=</td>\n<td align=\"left\">除法赋值运算符</td>\n<td align=\"left\">c /= a 等效于 c = c / a</td>\n</tr>\n<tr>\n<td align=\"left\">%=</td>\n<td align=\"left\">取模赋值运算符</td>\n<td align=\"left\">c %= a 等效于 c = c % a</td>\n</tr>\n<tr>\n<td align=\"left\">**=</td>\n<td align=\"left\">幂赋值运算符</td>\n<td align=\"left\">c **= a 等效于 c = c ** a</td>\n</tr>\n<tr>\n<td align=\"left\">//=</td>\n<td align=\"left\">取整除赋值运算符</td>\n<td align=\"left\">c //= a 等效于 c = c // a</td>\n</tr>\n</tbody></table>\n<p>:::warning</p>\n<p>特别提醒！<br>python中没有像c语言一样的自加运算！<img src=\"../images/PythonBasicGrammarImage/image-20210402161704512.png\" alt=\"image-20210402161704512\"></p>\n<p>:::</p>\n<h4 id=\"位运算符：（和c语言相同）\"><a href=\"#位运算符：（和c语言相同）\" class=\"headerlink\" title=\"位运算符：（和c语言相同）\"></a>位运算符：（和c语言相同）</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述:(下表中变量 a 为 60，b 为 13二进制格式如下：)</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&amp;</td>\n<td align=\"left\">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>\n<td align=\"left\">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td>\n</tr>\n<tr>\n<td align=\"left\">|</td>\n<td align=\"left\">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>\n<td align=\"left\">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td>\n</tr>\n<tr>\n<td align=\"left\">^</td>\n<td align=\"left\">按位异或运算符：当两对应的二进位相异时，结果为1</td>\n<td align=\"left\">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td>\n</tr>\n<tr>\n<td align=\"left\">~</td>\n<td align=\"left\">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。**~x** 类似于 <strong>-x-1</strong></td>\n<td align=\"left\">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&lt;</td>\n<td align=\"left\">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td>\n<td align=\"left\">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt;</td>\n<td align=\"left\">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td>\n<td align=\"left\">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td>\n</tr>\n</tbody></table>\n<h4 id=\"逻辑运算符：\"><a href=\"#逻辑运算符：\" class=\"headerlink\" title=\"逻辑运算符：\"></a>逻辑运算符：</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">逻辑表达式</th>\n<th align=\"left\">描述（令a=10， b=20）</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">and</td>\n<td align=\"left\">x and y</td>\n<td align=\"left\">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td>\n<td align=\"left\">(a and b) 返回 20。<img src=\"../images/PythonBasicGrammarImage/image-20210402163513449.png\" alt=\"image-20210402163513449\"></td>\n</tr>\n<tr>\n<td align=\"left\">or</td>\n<td align=\"left\">x or y</td>\n<td align=\"left\">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。(与“与运算恰好相反”)</td>\n<td align=\"left\">(a or b) 返回 10。</td>\n</tr>\n<tr>\n<td align=\"left\">not</td>\n<td align=\"left\">not x</td>\n<td align=\"left\">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>\n<td align=\"left\">not(a and b) 返回 False</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>补充说明：<img src=\"../images/PythonBasicGrammarImage/image-20210402163342743.png\" alt=\"image-20210402163342743\"><img src=\"../images/PythonBasicGrammarImage/image-20210402163401305.png\" alt=\"image-20210402163401305\"></p>\n</blockquote>\n<h4 id=\"成员运算符：\"><a href=\"#成员运算符：\" class=\"headerlink\" title=\"成员运算符：\"></a>成员运算符：</h4><table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">in</td>\n<td align=\"left\">如果在指定的序列中找到值返回 True，否则返回 False。</td>\n<td align=\"left\">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>\n</tr>\n<tr>\n<td align=\"left\">not in</td>\n<td align=\"left\">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>\n<td align=\"left\">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>\n</tr>\n</tbody></table>\n<h4 id=\"身份运算符：\"><a href=\"#身份运算符：\" class=\"headerlink\" title=\"身份运算符：\"></a>身份运算符：</h4><p>（有种 == 和 != 的感觉，但是确实不一样！）</p>\n<p><em>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</em><img src=\"image-20210402164253225.png\" alt=\"image-20210402164253225\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述（注：id () 函数用于获取对象内存地址。）</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">is</td>\n<td align=\"left\">is 是判断两个标识符是不是引用自一个对象</td>\n<td align=\"left\"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td align=\"left\">is not</td>\n<td align=\"left\">is not 是判断两个标识符是不是引用自不同对象</td>\n<td align=\"left\"><strong>x is not y</strong> ， 类似 **id(a) != id(b)**。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>\n</tr>\n</tbody></table>\n<p><img src=\"../images/PythonBasicGrammarImage/image-20210402163932528.png\" alt=\"image-20210402163932528\"></p>\n<h3 id=\"Python运算符优先级\"><a href=\"#Python运算符优先级\" class=\"headerlink\" title=\"Python运算符优先级\"></a>Python运算符优先级</h3><p>以下表格列出了从最高到最低优先级的所有运算符：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">**</td>\n<td align=\"left\">指数 (最高优先级)</td>\n</tr>\n<tr>\n<td align=\"left\">~ + -</td>\n<td align=\"left\">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>\n</tr>\n<tr>\n<td align=\"left\">* / % //</td>\n<td align=\"left\">乘，除，求余数和取整除</td>\n</tr>\n<tr>\n<td align=\"left\">+ -</td>\n<td align=\"left\">加法减法</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&gt; &lt;&lt;</td>\n<td align=\"left\">右移，左移运算符</td>\n</tr>\n<tr>\n<td align=\"left\">&amp;</td>\n<td align=\"left\">位 ‘AND’</td>\n</tr>\n<tr>\n<td align=\"left\">^ |</td>\n<td align=\"left\">位运算符</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;= &lt; &gt; &gt;=</td>\n<td align=\"left\">比较运算符</td>\n</tr>\n<tr>\n<td align=\"left\">== !=</td>\n<td align=\"left\">等于运算符</td>\n</tr>\n<tr>\n<td align=\"left\">= %= /= //= -= += *= **=</td>\n<td align=\"left\">赋值运算符</td>\n</tr>\n<tr>\n<td align=\"left\">is is not</td>\n<td align=\"left\">身份运算符</td>\n</tr>\n<tr>\n<td align=\"left\">in not in</td>\n<td align=\"left\">成员运算符</td>\n</tr>\n<tr>\n<td align=\"left\">not and or</td>\n<td align=\"left\">逻辑运算符</td>\n</tr>\n</tbody></table>\n<p>最后<del>（传教）</del>:我即使是死了，钉在棺材里了，也要在墓里，用这腐朽的声带喊出：“<strong>vocaloid forever！！！</strong>“</p>\n<p>最后的最后：都看到这里了，不听支歌吗?(❁’◡’❁)</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=245852635&bvid=BV1Vv411t7Gb&cid=273023330&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>\n\n\n\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><ol>\n<li><a href=\"https://www.runoob.com/python3/python3-tutorial.html\">Python3 教程 | 菜鸟教程 (runoob.com)</a></li>\n</ol>\n"},{"title":"美化你的GitHub主页！","date":"2021-09-07T15:58:53.000Z","<!--feature":"true-->","cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","_content":"一般来说，GitHub主页是很简陋枯燥又单调的：\n\n![image-20210907192522519](../images/image-20210907192522519.png)\n\n但是也许你也见过别人的完全不同的主页：\n\n![img](../images/blog20201003163321.png)\n\n欸？他的主页怎么有一个markdown文件作为公示栏来展示？怎么做到的？\n\n答案是GitHub的官方彩蛋~~（后门）~~：\n\n当↗当↗当↗当↘\n\n![image-20210907193059189](../images/image-20210907193059189.png)\n\n> 请注意：你需要创建一个公共仓库，这样才会被GitHub所捕捉到，如果这是私密仓库的话是不会在主页上出现的\n\n然后你会在这个新创建的仓库的页面右侧看到\n\n![image-20210907193619068](../images/image-20210907193619068.png)\n\n此时，这个“彩蛋”会立即生效\n\n![image-20210907194151912](../images/image-20210907194151912.png)\n\n如果想要有一个不一样的GitHub主页，就需要使用这个小小的“彩蛋”来定制你的主页\n\n\n\n当然，你也可以引入很多组件来深度定制你的GitHub主页：比如：\n\n[github-readme-stats/readme_cn.md at master · anuraghazra/github-readme-stats](https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md)","source":"_posts/beautifyGithubHome.md","raw":"---\ntitle: 美化你的GitHub主页！\ndate: 2021-09-7 23:58:53\ntags:\n  - GitHub\ncategories:\n  - 工具美化\n<!--feature: true-->\ncover: https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg\n---\n一般来说，GitHub主页是很简陋枯燥又单调的：\n\n![image-20210907192522519](../images/image-20210907192522519.png)\n\n但是也许你也见过别人的完全不同的主页：\n\n![img](../images/blog20201003163321.png)\n\n欸？他的主页怎么有一个markdown文件作为公示栏来展示？怎么做到的？\n\n答案是GitHub的官方彩蛋~~（后门）~~：\n\n当↗当↗当↗当↘\n\n![image-20210907193059189](../images/image-20210907193059189.png)\n\n> 请注意：你需要创建一个公共仓库，这样才会被GitHub所捕捉到，如果这是私密仓库的话是不会在主页上出现的\n\n然后你会在这个新创建的仓库的页面右侧看到\n\n![image-20210907193619068](../images/image-20210907193619068.png)\n\n此时，这个“彩蛋”会立即生效\n\n![image-20210907194151912](../images/image-20210907194151912.png)\n\n如果想要有一个不一样的GitHub主页，就需要使用这个小小的“彩蛋”来定制你的主页\n\n\n\n当然，你也可以引入很多组件来深度定制你的GitHub主页：比如：\n\n[github-readme-stats/readme_cn.md at master · anuraghazra/github-readme-stats](https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md)","slug":"beautifyGithubHome","published":1,"updated":"2021-09-17T11:32:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckudindll00065smb5w1kbisz","content":"<p>一般来说，GitHub主页是很简陋枯燥又单调的：</p>\n<p><img src=\"../images/image-20210907192522519.png\" alt=\"image-20210907192522519\"></p>\n<p>但是也许你也见过别人的完全不同的主页：</p>\n<p><img src=\"../images/blog20201003163321.png\" alt=\"img\"></p>\n<p>欸？他的主页怎么有一个markdown文件作为公示栏来展示？怎么做到的？</p>\n<p>答案是GitHub的官方彩蛋<del>（后门）</del>：</p>\n<p>当↗当↗当↗当↘</p>\n<p><img src=\"../images/image-20210907193059189.png\" alt=\"image-20210907193059189\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>请注意：你需要创建一个公共仓库，这样才会被GitHub所捕捉到，如果这是私密仓库的话是不会在主页上出现的</p></blockquote>\n<p>然后你会在这个新创建的仓库的页面右侧看到</p>\n<p><img src=\"../images/image-20210907193619068.png\" alt=\"image-20210907193619068\"></p>\n<p>此时，这个“彩蛋”会立即生效</p>\n<p><img src=\"../images/image-20210907194151912.png\" alt=\"image-20210907194151912\"></p>\n<p>如果想要有一个不一样的GitHub主页，就需要使用这个小小的“彩蛋”来定制你的主页</p>\n<p>当然，你也可以引入很多组件来深度定制你的GitHub主页：比如：</p>\n<p><a href=\"https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md\">github-readme-stats/readme_cn.md at master · anuraghazra/github-readme-stats</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一般来说，GitHub主页是很简陋枯燥又单调的：</p>\n<p><img src=\"../images/image-20210907192522519.png\" alt=\"image-20210907192522519\"></p>\n<p>但是也许你也见过别人的完全不同的主页：</p>\n<p><img src=\"../images/blog20201003163321.png\" alt=\"img\"></p>\n<p>欸？他的主页怎么有一个markdown文件作为公示栏来展示？怎么做到的？</p>\n<p>答案是GitHub的官方彩蛋<del>（后门）</del>：</p>\n<p>当↗当↗当↗当↘</p>\n<p><img src=\"../images/image-20210907193059189.png\" alt=\"image-20210907193059189\"></p>\n<blockquote>\n<p>请注意：你需要创建一个公共仓库，这样才会被GitHub所捕捉到，如果这是私密仓库的话是不会在主页上出现的</p>\n</blockquote>\n<p>然后你会在这个新创建的仓库的页面右侧看到</p>\n<p><img src=\"../images/image-20210907193619068.png\" alt=\"image-20210907193619068\"></p>\n<p>此时，这个“彩蛋”会立即生效</p>\n<p><img src=\"../images/image-20210907194151912.png\" alt=\"image-20210907194151912\"></p>\n<p>如果想要有一个不一样的GitHub主页，就需要使用这个小小的“彩蛋”来定制你的主页</p>\n<p>当然，你也可以引入很多组件来深度定制你的GitHub主页：比如：</p>\n<p><a href=\"https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md\">github-readme-stats/readme_cn.md at master · anuraghazra/github-readme-stats</a></p>\n"},{"title":"了解MD5算法！","date":"2021-09-17T08:38:42.000Z","<!--feature":"true-->","cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","_content":"# 简明Hash function教程\n\n:::warning\n\n请注意！这篇文档是关于散列函数Hash function的，如果需要了解Hash table相关内容请查阅“简明Hash table教程”等相关文章\n\n:::\n\n## 引子\n\n在各种下载站的资源页面下方，经常会有如下以SHA开头的特殊字段\n\n> **SHA1：**9B71AD5604B3816BCC7E9AFA3052AE7D823163E8\n\n或者是或MD5开头的特殊字段\n\n> MD5：124756ef340daf80196b4124686d651c\n\n这些特殊字段既非下载链接，也特定网址。那么这些特殊的字段都有什么用？\n\n想要解决这个问题，我们需要先了解一下什么是Hash算法\n\n## Hash算法\n### 什么是Hash？\n\n先简单介绍一下Hash算法\n\n> [散列函数](https://zh.wikipedia.org/wiki/散列函数)（Hash function）又称散列算法、哈希函数，是一种从任何一种数据中创建数字“指纹”的方法。\n\n:::tip\n\n请注意！Hash算法并非特指某一种算法，而是所有满足Hash算法的一整类算法的统称\n\n:::\n\nHash算法的实际效果为：对任意一组输入数据进行计算处理，并最终得到一个固定长度的输出摘要。\n\n经典的比如经MD5算法运算后的结果只有16位或者32位16进制字符，而SHA-1的结果为40位16进制字符\n\n### 试着去生成一个Hash Code与Hash算法的基本应用\n\n现在打开你的任何一款ide，通过MD5方法来对`你好啊`这串字符进行处理，如下是Python对之进行处理的例子\n\n```python\nimport hashlib\nstr1 = \"你好呀\" # 准备Hash算法需要处理的数据块\nm = hashlib.md5() # 确定特定的Hash算法\nm.update(str1.encode(\"utf8\")) # 执行该算法\nprint(m.hexdigest(), type(m.hexdigest())) # 查验输出结果\n```\n\n检查一下结果：`4f65fdb33e0f2bd0de6bd1b41fdea968 <class 'str'>`——一个32个字符，32Byte，128bit大小的字符串，和MD5算法规定的长度完全一致\n\n而当你的对应数据和具体算法确定以后，不管你是在本地，还是在别的任何设备上再次执行这串代码，它的结果是不会发生变化的。也就是说，一个特定的输入在既定的Hash算法中只会对应一个特定的输出\n\n根据这个特点，我们可以用某种特定的Hash算法来检验资源的完整性：当用户完成资源的下载后，如果本地资源使用对应的Hash算法得到的Hash code与下载网站上给出的Hash code不相符的话，就意味着你的本地资源有问题，需要进行修复或者重新下载\n\n### Hash算法还能干什么？\n\n事实上，Hash Code被大量使用于网站的密码加密中：当用户注册的时候，用户的密码通过某种Hash算法加密后得到一串Hash Code，服务器就将Hash Code代替明文密码存储到服务器的数据库中，用户登陆时输入的密码经过加密会再次得到相同的结果，这当然与数据库中存储的内容一致，这样子就完成了用户的验证。\n\n由于Hash算法总是进行<a href=\"#progress\">有损的压缩运算</a>，并且在实时的运算中损失了大部分原始数据，使得到原数据最直接的方式只有再次输入，想要破解一般只能够依靠穷举。故一般认为Hash算法是不可逆运算，所以即便是服务器数据库泄露也不必担心账号被别人盗取\n\n### 尝试使用Hash算法，并研究它的输出规律\n\n为了研究Hash算法的输出结果的规律，我们需要几个实例\n\n```java\npublic class HelloWorld {\n    public static void main(String []args) {\n\t\tSystem.out.println(\"hello, java\".hashCode());\n\t\tSystem.out.println(\"hello, java\".hashCode()); //相同数据输入，查看结果\n        \n        System.out.println(\"---------------------------\");\n\t\t\n\t\tSystem.out.println(\"hello, jav\".hashCode());\n\t\tSystem.out.println(\"hello, java\".hashCode());\n\t\tSystem.out.println(\"hello, javav\".hashCode());\n\t\tSystem.out.println(\"AaAaA\".hashCode());  \n\t\tSystem.out.println(\"AaAaAa\".hashCode());\n\t\tSystem.out.println(\"AaAaAaA\".hashCode()); // 不同数据输入，查看结果\n\t\t\n        System.out.println(\"---------------------------\");\n\t\t\n\t\tSystem.out.println(\"AaAaAa\".hashCode());\n\t\tSystem.out.println(\"BBAaBB\".hashCode()); // 仍然是不同数据输入，再次查看结果\n    }\n}\n\n/* outputs：\n2057144552\n2057144552 // 相同的输入经过散列表算法运算后得到了相同的输出\n---------------------------\n-1596208487\n2057144552\n-653028210\n62984129\n1952508096\n398208897 // 不同的输入“理所当然”地得到了完全不同的输出\n---------------------------\n1952508096\n1952508096 // 不同的输入居然得到了相同的输出！\n*/\n```\n\n从以上实例中我们可以发现虽然一般的不同字符经过运算后输出的结果是不同的，但是也存在不同字符串在经过运算后得到了相同的输出\n\n特别地，我们将这种两个不同的输入值经过运算后得到了相同的输入值的情况称作是**“Hash collision”**\n\n需要指出的是，发生collision并不可怕，当一个更大的数据集被映射到一个更小的数据集或容器时，一定会出现多对一的情况，这是一件不可避免的事，而算法的优劣只取决于出现collision的频率如何。如果collision出现频次过高，那么就意味着这个Hash算法生成的Hash Code可以在较短时间内被别人使用穷举等办法来破解其内容——也就是说，它不安全，所以用户需要设置更长更复杂组合的密码，而服务器需要使用更不容易被破解的Hash算法~~`或者对MD5加盐`~~。\n\n一般来讲**输出大小**越长的算法，安全性也就越高。只有安全度足够高的Hash算法，即没有任何人能够成功实现碰撞的哈希，才有资格被考虑用在加密场合\n\n![image-20210916211845148](../images/CommonHash.png)\n\n在**极限情况**下，传统的MD5算法可以保证最多340282366920938463463374607431768211456个数据与结果的一一对应，而SHA-1算法甚至可以保证最多1461501637330902918203684832716283019655932542976个数据，但是由于计算机算力的进步，算法自身的缺陷，现呈的彩虹表等的诸多原因存在，它们已经可以在短时间内被破解，为了保证数据的安全，我们需要使用更安全的Hash算法如SHA-2系列的Hash算法来做数据加密\n\n## 总结：\n\n1. 什么是Hash算法？\n\n   + Hash算法，一般译为哈希算法，摘要算法或者散列算法，它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。\n2. 哈希算法的特点？\n   - 相同的输入一定得到相同的输出；\n   - 不同的输入大概率得到不同的输出。\n\n3. 哈希加密的作用：\n   + 完整性校验：MD5，SHA-1\n   + 数据加密：SHA-2系列等\n\n\n\n`附录`\n\n### <span id=\"progress\">Hash算法是怎么实现的？</span>\n\nHash算法原理大同小异，大体上的流程包括对原数据块进行切片，再对切片进行细分，并利用每一细分小组的内容按预设算法进行破坏式压缩处理来得到最终的结果，下面以MD5算法为例介绍Hash算法流程\n\n#### MD5算法的原理：\n\n##### 原理概述：\n\nMD5算法先对数据块填充，将不合规的数据标准化。然后进行分组，标准是每512bit为大小分一组。在每一个分组中又进一步划分出16个32位的子分组。设立四个<a href=\"#variable\">标准幻数</a>，定义四个非线性函数，一个大小为64的常数数组，一个大小为64的位移常量数组。\n\n在计算过程中，根据512位分组的数据进行外循环，在这之中利用每个细分小组进行一轮16次循环一共4轮合64次的内循环。\n\n在单次内部循环中，根据正在进行的轮次运用四个非线性函数中的一个对子分组进行的数据进行处理，将处理的结果与标准幻数相加，并进行下一次循环。当主循环完成时，原标准幻数就与数据紧密联系起来，把所有标准幻数组合到一起，这就是一个基于MD5算法的Hash Code\n\n> <span id=\"variable\">什么是幻数？</span>\n>\n> 不同领域对于幻数这一名称有不同的定义，而MD5中的幻数其实就是在算法中被预设的4个32位的整数，对于一个128位的MD5 Hash Code来说，由4个32位的整数结果彼此组和来得到最终结果貌似是一个不错的选择，而这4个结果就是由这4个标准幻数A,B,C,D根据数据块的内容按照预定算法经过不断演变得到的\n\n实际使用的标准幻数：\n\n```python\nA = 0x67452301\nB = 0xEFCDAB89\nC = 0x98BADCFE\nD = 0x10325476 \n```\n\n注意，其实这四个标准幻数和ABCD四个字母全无关系，实际生效的只是他们后面的变量值，而这四个值只是被算法规定如此而已~~`也许这也算是一种另类的私货？`~~\n\n##### 流程介绍：\n\n###### 填充\n\n首先将原数据进行补长（长度的度量是bits）到一个对512取模的结果为448的数，在补长的过程中，我们先在原数据末尾append \"1\" bit to message，然后再append \"0\" bits until message length in bits ≡ 448 (mod 512)\n\n完成了补长之后，利用最后的64位（512-448=64）来记录**填充前**的长度(append original length in bits mod 2^64^ to message)\n\n当上述两个操作都完成以后，数据的总长度就是512的倍数了\n\n一定要补长(64+1~512)，内容为100…0（如若消息长448，则填充512+64）\n\n###### 计算\n\n首先把结果分割为N个512位的块：Y0，Y1，…（每一个512位块再细分为16个32比特子组） \n\n每个块都进行一次循环，在当前循环中，我们将整个块再次细分为16个32位的子块\n\n\n\n在正式开始循环之前，我们还需要这些东西：\n\n+ 设立四个标准幻数\n\n\n![image-20210917110650229](../images/Initialize.png)\n\n​\t虽然无需考究这四个数字的16进制内容有什么含义，但是规律明显得让人不禁发笑\n\n​\t我们分别以ABCD为名设立四个32位的整数变量，A=0x67452301,B=0xefcdab89,C=0x98badcfe,D=0x10325476，这就是实际使用到的标准幻数\n\n+ 定义四个非线性函数：\n\n   ![image-20210917103252897](../images/MD5's function.png)\n\n+ 定义常量数组(正弦函数表)：\n\n  ```python\n  for i in range(0, 64)\n      k[i] = math.floor(math.fabs(math.sin(i + 1)) * (2 ** 32))\n  # 或者直接赋值：\n  k = [\n       0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,\n        0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,\n        0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,\n        0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,\n        0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,\n        0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,\n        0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,\n        0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391\n  ]\n  ```\n  \n\n> 和为什么标准幻数被定义成那样子一样，解释为什么常量数组是这些东西的理由也只有“它是被定义成这样子的”。不过常量数组有一个优势：我们可以了解这些数字具体是怎么来的：\n>\n> 你应该已经看见了定义常量数组的第一种（即利用正弦函数实时生成的）办法，这就是这些数据产生的来源。\n\n+ 定义位移常量:\n\n  ```python\n  # md5转换用到的常量，数据都是算法本身规定的\n  r = [\n      7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,\n  \t5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,\n  \t4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,\n  \t6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21\n  ]\n  ```\n\n> 事实上：所有常量都是经由算法规定的，毕竟只有经过被“规定”的步骤才能保证结果的一致性\n\n循环计算\n\n循环分为内层和外层，外层是对512块进行循环，内层则对32位子块进行循环\n\n每次外层循环中，我们共会进行四轮内层循环，每次内层循环我们都会按顺序对单个32位子块进行处理\n\n```python\nfor i in outside: # 外层循环\n    for t in range(0, 64): # 内层总循环\n        if 0 ≤ i ≤ 15:\n            f = (b & c) | (~b & d) # 临时变量f，实际上是存储了当前轮次的非线性函数的结果\n            g = i # 存储当前轮次下的第几次\n        else if 16 ≤ i ≤ 31:\n            f = (d & b) | ((~d) & c)\n            g = (5×i + 1) % 16\n        else if 32 ≤ i ≤ 47:\n            f = b ^ c ^ d\n            g = (3×i + 5) % 16\n        else if 48 ≤ i ≤ 63:\n            f = c ^ (b | (~ d))\n            g = (7×i) % 16\n        temp = d\n        d = c\n        c = b\n        b = ((a + f + k[i] + w[g]) << r[i]) + b\n        # w[g]是当前顺序下的32位数据子块,k[i]是我们已经生成好的常量数组,r[i]则是当前轮次所使用到的左移量\n        a = temp\n    A = A + a\n    B = B + b \n    C = C + c\n    D = D + d\n```\n\n每次：一个输入128位，另一个输入512位，结果输出128位，用于下一轮输入 \n\n4. 结果\n\n```python\ndigest = str(A) + str(B) + str(C) + str(D)\n```\n\n //最后一步的输出即为散列结果，共128位。\n\n又如SHA-1等算法原理与MD5大同小异，主要的变化之处在于：增加初始的标准幻数个数，增加循环轮数与参与范围，改变变换的非线性函数等\n\n\n","source":"_posts/hashFunction.md","raw":"---\ntitle: 了解MD5算法！\ndate: 2021-09-17 16:38:42\ntags:\n  - Hash \ncategories:\n  - 算法\n<!--feature: true-->\ncover: https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg\n---\n# 简明Hash function教程\n\n:::warning\n\n请注意！这篇文档是关于散列函数Hash function的，如果需要了解Hash table相关内容请查阅“简明Hash table教程”等相关文章\n\n:::\n\n## 引子\n\n在各种下载站的资源页面下方，经常会有如下以SHA开头的特殊字段\n\n> **SHA1：**9B71AD5604B3816BCC7E9AFA3052AE7D823163E8\n\n或者是或MD5开头的特殊字段\n\n> MD5：124756ef340daf80196b4124686d651c\n\n这些特殊字段既非下载链接，也特定网址。那么这些特殊的字段都有什么用？\n\n想要解决这个问题，我们需要先了解一下什么是Hash算法\n\n## Hash算法\n### 什么是Hash？\n\n先简单介绍一下Hash算法\n\n> [散列函数](https://zh.wikipedia.org/wiki/散列函数)（Hash function）又称散列算法、哈希函数，是一种从任何一种数据中创建数字“指纹”的方法。\n\n:::tip\n\n请注意！Hash算法并非特指某一种算法，而是所有满足Hash算法的一整类算法的统称\n\n:::\n\nHash算法的实际效果为：对任意一组输入数据进行计算处理，并最终得到一个固定长度的输出摘要。\n\n经典的比如经MD5算法运算后的结果只有16位或者32位16进制字符，而SHA-1的结果为40位16进制字符\n\n### 试着去生成一个Hash Code与Hash算法的基本应用\n\n现在打开你的任何一款ide，通过MD5方法来对`你好啊`这串字符进行处理，如下是Python对之进行处理的例子\n\n```python\nimport hashlib\nstr1 = \"你好呀\" # 准备Hash算法需要处理的数据块\nm = hashlib.md5() # 确定特定的Hash算法\nm.update(str1.encode(\"utf8\")) # 执行该算法\nprint(m.hexdigest(), type(m.hexdigest())) # 查验输出结果\n```\n\n检查一下结果：`4f65fdb33e0f2bd0de6bd1b41fdea968 <class 'str'>`——一个32个字符，32Byte，128bit大小的字符串，和MD5算法规定的长度完全一致\n\n而当你的对应数据和具体算法确定以后，不管你是在本地，还是在别的任何设备上再次执行这串代码，它的结果是不会发生变化的。也就是说，一个特定的输入在既定的Hash算法中只会对应一个特定的输出\n\n根据这个特点，我们可以用某种特定的Hash算法来检验资源的完整性：当用户完成资源的下载后，如果本地资源使用对应的Hash算法得到的Hash code与下载网站上给出的Hash code不相符的话，就意味着你的本地资源有问题，需要进行修复或者重新下载\n\n### Hash算法还能干什么？\n\n事实上，Hash Code被大量使用于网站的密码加密中：当用户注册的时候，用户的密码通过某种Hash算法加密后得到一串Hash Code，服务器就将Hash Code代替明文密码存储到服务器的数据库中，用户登陆时输入的密码经过加密会再次得到相同的结果，这当然与数据库中存储的内容一致，这样子就完成了用户的验证。\n\n由于Hash算法总是进行<a href=\"#progress\">有损的压缩运算</a>，并且在实时的运算中损失了大部分原始数据，使得到原数据最直接的方式只有再次输入，想要破解一般只能够依靠穷举。故一般认为Hash算法是不可逆运算，所以即便是服务器数据库泄露也不必担心账号被别人盗取\n\n### 尝试使用Hash算法，并研究它的输出规律\n\n为了研究Hash算法的输出结果的规律，我们需要几个实例\n\n```java\npublic class HelloWorld {\n    public static void main(String []args) {\n\t\tSystem.out.println(\"hello, java\".hashCode());\n\t\tSystem.out.println(\"hello, java\".hashCode()); //相同数据输入，查看结果\n        \n        System.out.println(\"---------------------------\");\n\t\t\n\t\tSystem.out.println(\"hello, jav\".hashCode());\n\t\tSystem.out.println(\"hello, java\".hashCode());\n\t\tSystem.out.println(\"hello, javav\".hashCode());\n\t\tSystem.out.println(\"AaAaA\".hashCode());  \n\t\tSystem.out.println(\"AaAaAa\".hashCode());\n\t\tSystem.out.println(\"AaAaAaA\".hashCode()); // 不同数据输入，查看结果\n\t\t\n        System.out.println(\"---------------------------\");\n\t\t\n\t\tSystem.out.println(\"AaAaAa\".hashCode());\n\t\tSystem.out.println(\"BBAaBB\".hashCode()); // 仍然是不同数据输入，再次查看结果\n    }\n}\n\n/* outputs：\n2057144552\n2057144552 // 相同的输入经过散列表算法运算后得到了相同的输出\n---------------------------\n-1596208487\n2057144552\n-653028210\n62984129\n1952508096\n398208897 // 不同的输入“理所当然”地得到了完全不同的输出\n---------------------------\n1952508096\n1952508096 // 不同的输入居然得到了相同的输出！\n*/\n```\n\n从以上实例中我们可以发现虽然一般的不同字符经过运算后输出的结果是不同的，但是也存在不同字符串在经过运算后得到了相同的输出\n\n特别地，我们将这种两个不同的输入值经过运算后得到了相同的输入值的情况称作是**“Hash collision”**\n\n需要指出的是，发生collision并不可怕，当一个更大的数据集被映射到一个更小的数据集或容器时，一定会出现多对一的情况，这是一件不可避免的事，而算法的优劣只取决于出现collision的频率如何。如果collision出现频次过高，那么就意味着这个Hash算法生成的Hash Code可以在较短时间内被别人使用穷举等办法来破解其内容——也就是说，它不安全，所以用户需要设置更长更复杂组合的密码，而服务器需要使用更不容易被破解的Hash算法~~`或者对MD5加盐`~~。\n\n一般来讲**输出大小**越长的算法，安全性也就越高。只有安全度足够高的Hash算法，即没有任何人能够成功实现碰撞的哈希，才有资格被考虑用在加密场合\n\n![image-20210916211845148](../images/CommonHash.png)\n\n在**极限情况**下，传统的MD5算法可以保证最多340282366920938463463374607431768211456个数据与结果的一一对应，而SHA-1算法甚至可以保证最多1461501637330902918203684832716283019655932542976个数据，但是由于计算机算力的进步，算法自身的缺陷，现呈的彩虹表等的诸多原因存在，它们已经可以在短时间内被破解，为了保证数据的安全，我们需要使用更安全的Hash算法如SHA-2系列的Hash算法来做数据加密\n\n## 总结：\n\n1. 什么是Hash算法？\n\n   + Hash算法，一般译为哈希算法，摘要算法或者散列算法，它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。\n2. 哈希算法的特点？\n   - 相同的输入一定得到相同的输出；\n   - 不同的输入大概率得到不同的输出。\n\n3. 哈希加密的作用：\n   + 完整性校验：MD5，SHA-1\n   + 数据加密：SHA-2系列等\n\n\n\n`附录`\n\n### <span id=\"progress\">Hash算法是怎么实现的？</span>\n\nHash算法原理大同小异，大体上的流程包括对原数据块进行切片，再对切片进行细分，并利用每一细分小组的内容按预设算法进行破坏式压缩处理来得到最终的结果，下面以MD5算法为例介绍Hash算法流程\n\n#### MD5算法的原理：\n\n##### 原理概述：\n\nMD5算法先对数据块填充，将不合规的数据标准化。然后进行分组，标准是每512bit为大小分一组。在每一个分组中又进一步划分出16个32位的子分组。设立四个<a href=\"#variable\">标准幻数</a>，定义四个非线性函数，一个大小为64的常数数组，一个大小为64的位移常量数组。\n\n在计算过程中，根据512位分组的数据进行外循环，在这之中利用每个细分小组进行一轮16次循环一共4轮合64次的内循环。\n\n在单次内部循环中，根据正在进行的轮次运用四个非线性函数中的一个对子分组进行的数据进行处理，将处理的结果与标准幻数相加，并进行下一次循环。当主循环完成时，原标准幻数就与数据紧密联系起来，把所有标准幻数组合到一起，这就是一个基于MD5算法的Hash Code\n\n> <span id=\"variable\">什么是幻数？</span>\n>\n> 不同领域对于幻数这一名称有不同的定义，而MD5中的幻数其实就是在算法中被预设的4个32位的整数，对于一个128位的MD5 Hash Code来说，由4个32位的整数结果彼此组和来得到最终结果貌似是一个不错的选择，而这4个结果就是由这4个标准幻数A,B,C,D根据数据块的内容按照预定算法经过不断演变得到的\n\n实际使用的标准幻数：\n\n```python\nA = 0x67452301\nB = 0xEFCDAB89\nC = 0x98BADCFE\nD = 0x10325476 \n```\n\n注意，其实这四个标准幻数和ABCD四个字母全无关系，实际生效的只是他们后面的变量值，而这四个值只是被算法规定如此而已~~`也许这也算是一种另类的私货？`~~\n\n##### 流程介绍：\n\n###### 填充\n\n首先将原数据进行补长（长度的度量是bits）到一个对512取模的结果为448的数，在补长的过程中，我们先在原数据末尾append \"1\" bit to message，然后再append \"0\" bits until message length in bits ≡ 448 (mod 512)\n\n完成了补长之后，利用最后的64位（512-448=64）来记录**填充前**的长度(append original length in bits mod 2^64^ to message)\n\n当上述两个操作都完成以后，数据的总长度就是512的倍数了\n\n一定要补长(64+1~512)，内容为100…0（如若消息长448，则填充512+64）\n\n###### 计算\n\n首先把结果分割为N个512位的块：Y0，Y1，…（每一个512位块再细分为16个32比特子组） \n\n每个块都进行一次循环，在当前循环中，我们将整个块再次细分为16个32位的子块\n\n\n\n在正式开始循环之前，我们还需要这些东西：\n\n+ 设立四个标准幻数\n\n\n![image-20210917110650229](../images/Initialize.png)\n\n​\t虽然无需考究这四个数字的16进制内容有什么含义，但是规律明显得让人不禁发笑\n\n​\t我们分别以ABCD为名设立四个32位的整数变量，A=0x67452301,B=0xefcdab89,C=0x98badcfe,D=0x10325476，这就是实际使用到的标准幻数\n\n+ 定义四个非线性函数：\n\n   ![image-20210917103252897](../images/MD5's function.png)\n\n+ 定义常量数组(正弦函数表)：\n\n  ```python\n  for i in range(0, 64)\n      k[i] = math.floor(math.fabs(math.sin(i + 1)) * (2 ** 32))\n  # 或者直接赋值：\n  k = [\n       0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,\n        0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,\n        0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,\n        0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,\n        0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,\n        0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,\n        0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,\n        0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391\n  ]\n  ```\n  \n\n> 和为什么标准幻数被定义成那样子一样，解释为什么常量数组是这些东西的理由也只有“它是被定义成这样子的”。不过常量数组有一个优势：我们可以了解这些数字具体是怎么来的：\n>\n> 你应该已经看见了定义常量数组的第一种（即利用正弦函数实时生成的）办法，这就是这些数据产生的来源。\n\n+ 定义位移常量:\n\n  ```python\n  # md5转换用到的常量，数据都是算法本身规定的\n  r = [\n      7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,\n  \t5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,\n  \t4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,\n  \t6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21\n  ]\n  ```\n\n> 事实上：所有常量都是经由算法规定的，毕竟只有经过被“规定”的步骤才能保证结果的一致性\n\n循环计算\n\n循环分为内层和外层，外层是对512块进行循环，内层则对32位子块进行循环\n\n每次外层循环中，我们共会进行四轮内层循环，每次内层循环我们都会按顺序对单个32位子块进行处理\n\n```python\nfor i in outside: # 外层循环\n    for t in range(0, 64): # 内层总循环\n        if 0 ≤ i ≤ 15:\n            f = (b & c) | (~b & d) # 临时变量f，实际上是存储了当前轮次的非线性函数的结果\n            g = i # 存储当前轮次下的第几次\n        else if 16 ≤ i ≤ 31:\n            f = (d & b) | ((~d) & c)\n            g = (5×i + 1) % 16\n        else if 32 ≤ i ≤ 47:\n            f = b ^ c ^ d\n            g = (3×i + 5) % 16\n        else if 48 ≤ i ≤ 63:\n            f = c ^ (b | (~ d))\n            g = (7×i) % 16\n        temp = d\n        d = c\n        c = b\n        b = ((a + f + k[i] + w[g]) << r[i]) + b\n        # w[g]是当前顺序下的32位数据子块,k[i]是我们已经生成好的常量数组,r[i]则是当前轮次所使用到的左移量\n        a = temp\n    A = A + a\n    B = B + b \n    C = C + c\n    D = D + d\n```\n\n每次：一个输入128位，另一个输入512位，结果输出128位，用于下一轮输入 \n\n4. 结果\n\n```python\ndigest = str(A) + str(B) + str(C) + str(D)\n```\n\n //最后一步的输出即为散列结果，共128位。\n\n又如SHA-1等算法原理与MD5大同小异，主要的变化之处在于：增加初始的标准幻数个数，增加循环轮数与参与范围，改变变换的非线性函数等\n\n\n","slug":"hashFunction","published":1,"updated":"2021-09-17T11:32:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckudindly00075smbdb2ygsyh","content":"<h1 id=\"简明Hash-function教程\"><a href=\"#简明Hash-function教程\" class=\"headerlink\" title=\"简明Hash function教程\"></a>简明Hash function教程</h1><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><p>请注意！这篇文档是关于散列函数Hash function的，如果需要了解Hash table相关内容请查阅“简明Hash table教程”等相关文章</p>\n</p>\n</div>\n<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>在各种下载站的资源页面下方，经常会有如下以SHA开头的特殊字段</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>SHA1：</strong>9B71AD5604B3816BCC7E9AFA3052AE7D823163E8</p></blockquote>\n<p>或者是或MD5开头的特殊字段</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>MD5：124756ef340daf80196b4124686d651c</p></blockquote>\n<p>这些特殊字段既非下载链接，也特定网址。那么这些特殊的字段都有什么用？</p>\n<p>想要解决这个问题，我们需要先了解一下什么是Hash算法</p>\n<h2 id=\"Hash算法\"><a href=\"#Hash算法\" class=\"headerlink\" title=\"Hash算法\"></a>Hash算法</h2><h3 id=\"什么是Hash？\"><a href=\"#什么是Hash？\" class=\"headerlink\" title=\"什么是Hash？\"></a>什么是Hash？</h3><p>先简单介绍一下Hash算法</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0\">散列函数</a>（Hash function）又称散列算法、哈希函数，是一种从任何一种数据中创建数字“指纹”的方法。</p></blockquote>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>请注意！Hash算法并非特指某一种算法，而是所有满足Hash算法的一整类算法的统称</p>\n\n</div>\n<p>Hash算法的实际效果为：对任意一组输入数据进行计算处理，并最终得到一个固定长度的输出摘要。</p>\n<p>经典的比如经MD5算法运算后的结果只有16位或者32位16进制字符，而SHA-1的结果为40位16进制字符</p>\n<h3 id=\"试着去生成一个Hash-Code与Hash算法的基本应用\"><a href=\"#试着去生成一个Hash-Code与Hash算法的基本应用\" class=\"headerlink\" title=\"试着去生成一个Hash Code与Hash算法的基本应用\"></a>试着去生成一个Hash Code与Hash算法的基本应用</h3><p>现在打开你的任何一款ide，通过MD5方法来对<code>你好啊</code>这串字符进行处理，如下是Python对之进行处理的例子</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import hashlib\nstr1 &#x3D; &quot;你好呀&quot; # 准备Hash算法需要处理的数据块\nm &#x3D; hashlib.md5() # 确定特定的Hash算法\nm.update(str1.encode(&quot;utf8&quot;)) # 执行该算法\nprint(m.hexdigest(), type(m.hexdigest())) # 查验输出结果</code></pre>\n\n<p>检查一下结果：<code>4f65fdb33e0f2bd0de6bd1b41fdea968 &lt;class &#39;str&#39;&gt;</code>——一个32个字符，32Byte，128bit大小的字符串，和MD5算法规定的长度完全一致</p>\n<p>而当你的对应数据和具体算法确定以后，不管你是在本地，还是在别的任何设备上再次执行这串代码，它的结果是不会发生变化的。也就是说，一个特定的输入在既定的Hash算法中只会对应一个特定的输出</p>\n<p>根据这个特点，我们可以用某种特定的Hash算法来检验资源的完整性：当用户完成资源的下载后，如果本地资源使用对应的Hash算法得到的Hash code与下载网站上给出的Hash code不相符的话，就意味着你的本地资源有问题，需要进行修复或者重新下载</p>\n<h3 id=\"Hash算法还能干什么？\"><a href=\"#Hash算法还能干什么？\" class=\"headerlink\" title=\"Hash算法还能干什么？\"></a>Hash算法还能干什么？</h3><p>事实上，Hash Code被大量使用于网站的密码加密中：当用户注册的时候，用户的密码通过某种Hash算法加密后得到一串Hash Code，服务器就将Hash Code代替明文密码存储到服务器的数据库中，用户登陆时输入的密码经过加密会再次得到相同的结果，这当然与数据库中存储的内容一致，这样子就完成了用户的验证。</p>\n<p>由于Hash算法总是进行<a href=\"#progress\">有损的压缩运算</a>，并且在实时的运算中损失了大部分原始数据，使得到原数据最直接的方式只有再次输入，想要破解一般只能够依靠穷举。故一般认为Hash算法是不可逆运算，所以即便是服务器数据库泄露也不必担心账号被别人盗取</p>\n<h3 id=\"尝试使用Hash算法，并研究它的输出规律\"><a href=\"#尝试使用Hash算法，并研究它的输出规律\" class=\"headerlink\" title=\"尝试使用Hash算法，并研究它的输出规律\"></a>尝试使用Hash算法，并研究它的输出规律</h3><p>为了研究Hash算法的输出结果的规律，我们需要几个实例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloWorld &#123;\n    public static void main(String []args) &#123;\n\t\tSystem.out.println(&quot;hello, java&quot;.hashCode());\n\t\tSystem.out.println(&quot;hello, java&quot;.hashCode()); &#x2F;&#x2F;相同数据输入，查看结果\n        \n        System.out.println(&quot;---------------------------&quot;);\n\t\t\n\t\tSystem.out.println(&quot;hello, jav&quot;.hashCode());\n\t\tSystem.out.println(&quot;hello, java&quot;.hashCode());\n\t\tSystem.out.println(&quot;hello, javav&quot;.hashCode());\n\t\tSystem.out.println(&quot;AaAaA&quot;.hashCode());  \n\t\tSystem.out.println(&quot;AaAaAa&quot;.hashCode());\n\t\tSystem.out.println(&quot;AaAaAaA&quot;.hashCode()); &#x2F;&#x2F; 不同数据输入，查看结果\n\t\t\n        System.out.println(&quot;---------------------------&quot;);\n\t\t\n\t\tSystem.out.println(&quot;AaAaAa&quot;.hashCode());\n\t\tSystem.out.println(&quot;BBAaBB&quot;.hashCode()); &#x2F;&#x2F; 仍然是不同数据输入，再次查看结果\n    &#125;\n&#125;\n\n&#x2F;* outputs：\n2057144552\n2057144552 &#x2F;&#x2F; 相同的输入经过散列表算法运算后得到了相同的输出\n---------------------------\n-1596208487\n2057144552\n-653028210\n62984129\n1952508096\n398208897 &#x2F;&#x2F; 不同的输入“理所当然”地得到了完全不同的输出\n---------------------------\n1952508096\n1952508096 &#x2F;&#x2F; 不同的输入居然得到了相同的输出！\n*&#x2F;</code></pre>\n\n<p>从以上实例中我们可以发现虽然一般的不同字符经过运算后输出的结果是不同的，但是也存在不同字符串在经过运算后得到了相同的输出</p>\n<p>特别地，我们将这种两个不同的输入值经过运算后得到了相同的输入值的情况称作是<strong>“Hash collision”</strong></p>\n<p>需要指出的是，发生collision并不可怕，当一个更大的数据集被映射到一个更小的数据集或容器时，一定会出现多对一的情况，这是一件不可避免的事，而算法的优劣只取决于出现collision的频率如何。如果collision出现频次过高，那么就意味着这个Hash算法生成的Hash Code可以在较短时间内被别人使用穷举等办法来破解其内容——也就是说，它不安全，所以用户需要设置更长更复杂组合的密码，而服务器需要使用更不容易被破解的Hash算法<del><code>或者对MD5加盐</code></del>。</p>\n<p>一般来讲<strong>输出大小</strong>越长的算法，安全性也就越高。只有安全度足够高的Hash算法，即没有任何人能够成功实现碰撞的哈希，才有资格被考虑用在加密场合</p>\n<p><img src=\"../images/CommonHash.png\" alt=\"image-20210916211845148\"></p>\n<p>在<strong>极限情况</strong>下，传统的MD5算法可以保证最多340282366920938463463374607431768211456个数据与结果的一一对应，而SHA-1算法甚至可以保证最多1461501637330902918203684832716283019655932542976个数据，但是由于计算机算力的进步，算法自身的缺陷，现呈的彩虹表等的诸多原因存在，它们已经可以在短时间内被破解，为了保证数据的安全，我们需要使用更安全的Hash算法如SHA-2系列的Hash算法来做数据加密</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ol>\n<li><p>什么是Hash算法？</p>\n<ul>\n<li>Hash算法，一般译为哈希算法，摘要算法或者散列算法，它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。</li>\n</ul>\n</li>\n<li><p>哈希算法的特点？</p>\n<ul>\n<li>相同的输入一定得到相同的输出；</li>\n<li>不同的输入大概率得到不同的输出。</li>\n</ul>\n</li>\n<li><p>哈希加密的作用：</p>\n<ul>\n<li>完整性校验：MD5，SHA-1</li>\n<li>数据加密：SHA-2系列等</li>\n</ul>\n</li>\n</ol>\n<p><code>附录</code></p>\n<h3 id=\"Hash算法是怎么实现的？\"><a href=\"#Hash算法是怎么实现的？\" class=\"headerlink\" title=\"Hash算法是怎么实现的？\"></a><span id=\"progress\">Hash算法是怎么实现的？</span></h3><p>Hash算法原理大同小异，大体上的流程包括对原数据块进行切片，再对切片进行细分，并利用每一细分小组的内容按预设算法进行破坏式压缩处理来得到最终的结果，下面以MD5算法为例介绍Hash算法流程</p>\n<h4 id=\"MD5算法的原理：\"><a href=\"#MD5算法的原理：\" class=\"headerlink\" title=\"MD5算法的原理：\"></a>MD5算法的原理：</h4><h5 id=\"原理概述：\"><a href=\"#原理概述：\" class=\"headerlink\" title=\"原理概述：\"></a>原理概述：</h5><p>MD5算法先对数据块填充，将不合规的数据标准化。然后进行分组，标准是每512bit为大小分一组。在每一个分组中又进一步划分出16个32位的子分组。设立四个<a href=\"#variable\">标准幻数</a>，定义四个非线性函数，一个大小为64的常数数组，一个大小为64的位移常量数组。</p>\n<p>在计算过程中，根据512位分组的数据进行外循环，在这之中利用每个细分小组进行一轮16次循环一共4轮合64次的内循环。</p>\n<p>在单次内部循环中，根据正在进行的轮次运用四个非线性函数中的一个对子分组进行的数据进行处理，将处理的结果与标准幻数相加，并进行下一次循环。当主循环完成时，原标准幻数就与数据紧密联系起来，把所有标准幻数组合到一起，这就是一个基于MD5算法的Hash Code</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><span id=\"variable\">什么是幻数？</span></p>\n<p>不同领域对于幻数这一名称有不同的定义，而MD5中的幻数其实就是在算法中被预设的4个32位的整数，对于一个128位的MD5 Hash Code来说，由4个32位的整数结果彼此组和来得到最终结果貌似是一个不错的选择，而这4个结果就是由这4个标准幻数A,B,C,D根据数据块的内容按照预定算法经过不断演变得到的</p></blockquote>\n<p>实际使用的标准幻数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">A &#x3D; 0x67452301\nB &#x3D; 0xEFCDAB89\nC &#x3D; 0x98BADCFE\nD &#x3D; 0x10325476 </code></pre>\n\n<p>注意，其实这四个标准幻数和ABCD四个字母全无关系，实际生效的只是他们后面的变量值，而这四个值只是被算法规定如此而已<del><code>也许这也算是一种另类的私货？</code></del></p>\n<h5 id=\"流程介绍：\"><a href=\"#流程介绍：\" class=\"headerlink\" title=\"流程介绍：\"></a>流程介绍：</h5><h6 id=\"填充\"><a href=\"#填充\" class=\"headerlink\" title=\"填充\"></a>填充</h6><p>首先将原数据进行补长（长度的度量是bits）到一个对512取模的结果为448的数，在补长的过程中，我们先在原数据末尾append “1” bit to message，然后再append “0” bits until message length in bits ≡ 448 (mod 512)</p>\n<p>完成了补长之后，利用最后的64位（512-448=64）来记录<strong>填充前</strong>的长度(append original length in bits mod 2^64^ to message)</p>\n<p>当上述两个操作都完成以后，数据的总长度就是512的倍数了</p>\n<p>一定要补长(64+1~512)，内容为100…0（如若消息长448，则填充512+64）</p>\n<h6 id=\"计算\"><a href=\"#计算\" class=\"headerlink\" title=\"计算\"></a>计算</h6><p>首先把结果分割为N个512位的块：Y0，Y1，…（每一个512位块再细分为16个32比特子组） </p>\n<p>每个块都进行一次循环，在当前循环中，我们将整个块再次细分为16个32位的子块</p>\n<p>在正式开始循环之前，我们还需要这些东西：</p>\n<ul>\n<li>设立四个标准幻数</li>\n</ul>\n<p><img src=\"../images/Initialize.png\" alt=\"image-20210917110650229\"></p>\n<p>​    虽然无需考究这四个数字的16进制内容有什么含义，但是规律明显得让人不禁发笑</p>\n<p>​    我们分别以ABCD为名设立四个32位的整数变量，A=0x67452301,B=0xefcdab89,C=0x98badcfe,D=0x10325476，这就是实际使用到的标准幻数</p>\n<ul>\n<li><p>定义四个非线性函数：</p>\n<p> ![image-20210917103252897](../images/MD5’s function.png)</p>\n</li>\n<li><p>定义常量数组(正弦函数表)：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for i in range(0, 64)\n    k[i] &#x3D; math.floor(math.fabs(math.sin(i + 1)) * (2 ** 32))\n# 或者直接赋值：\nk &#x3D; [\n     0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,\n      0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,\n      0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,\n      0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,\n      0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,\n      0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,\n      0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,\n      0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391\n]</code></pre></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>和为什么标准幻数被定义成那样子一样，解释为什么常量数组是这些东西的理由也只有“它是被定义成这样子的”。不过常量数组有一个优势：我们可以了解这些数字具体是怎么来的：</p>\n<p>你应该已经看见了定义常量数组的第一种（即利用正弦函数实时生成的）办法，这就是这些数据产生的来源。</p></blockquote>\n<ul>\n<li><p>定义位移常量:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># md5转换用到的常量，数据都是算法本身规定的\nr &#x3D; [\n    7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,\n\t5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,\n\t4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,\n\t6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21\n]</code></pre></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>事实上：所有常量都是经由算法规定的，毕竟只有经过被“规定”的步骤才能保证结果的一致性</p></blockquote>\n<p>循环计算</p>\n<p>循环分为内层和外层，外层是对512块进行循环，内层则对32位子块进行循环</p>\n<p>每次外层循环中，我们共会进行四轮内层循环，每次内层循环我们都会按顺序对单个32位子块进行处理</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for i in outside: # 外层循环\n    for t in range(0, 64): # 内层总循环\n        if 0 ≤ i ≤ 15:\n            f &#x3D; (b &amp; c) | (~b &amp; d) # 临时变量f，实际上是存储了当前轮次的非线性函数的结果\n            g &#x3D; i # 存储当前轮次下的第几次\n        else if 16 ≤ i ≤ 31:\n            f &#x3D; (d &amp; b) | ((~d) &amp; c)\n            g &#x3D; (5×i + 1) % 16\n        else if 32 ≤ i ≤ 47:\n            f &#x3D; b ^ c ^ d\n            g &#x3D; (3×i + 5) % 16\n        else if 48 ≤ i ≤ 63:\n            f &#x3D; c ^ (b | (~ d))\n            g &#x3D; (7×i) % 16\n        temp &#x3D; d\n        d &#x3D; c\n        c &#x3D; b\n        b &#x3D; ((a + f + k[i] + w[g]) &lt;&lt; r[i]) + b\n        # w[g]是当前顺序下的32位数据子块,k[i]是我们已经生成好的常量数组,r[i]则是当前轮次所使用到的左移量\n        a &#x3D; temp\n    A &#x3D; A + a\n    B &#x3D; B + b \n    C &#x3D; C + c\n    D &#x3D; D + d</code></pre>\n\n<p>每次：一个输入128位，另一个输入512位，结果输出128位，用于下一轮输入 </p>\n<ol start=\"4\">\n<li>结果</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">digest &#x3D; str(A) + str(B) + str(C) + str(D)</code></pre>\n\n<p> //最后一步的输出即为散列结果，共128位。</p>\n<p>又如SHA-1等算法原理与MD5大同小异，主要的变化之处在于：增加初始的标准幻数个数，增加循环轮数与参与范围，改变变换的非线性函数等</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简明Hash-function教程\"><a href=\"#简明Hash-function教程\" class=\"headerlink\" title=\"简明Hash function教程\"></a>简明Hash function教程</h1><p>:::warning</p>\n<p>请注意！这篇文档是关于散列函数Hash function的，如果需要了解Hash table相关内容请查阅“简明Hash table教程”等相关文章</p>\n<p>:::</p>\n<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>在各种下载站的资源页面下方，经常会有如下以SHA开头的特殊字段</p>\n<blockquote>\n<p><strong>SHA1：</strong>9B71AD5604B3816BCC7E9AFA3052AE7D823163E8</p>\n</blockquote>\n<p>或者是或MD5开头的特殊字段</p>\n<blockquote>\n<p>MD5：124756ef340daf80196b4124686d651c</p>\n</blockquote>\n<p>这些特殊字段既非下载链接，也特定网址。那么这些特殊的字段都有什么用？</p>\n<p>想要解决这个问题，我们需要先了解一下什么是Hash算法</p>\n<h2 id=\"Hash算法\"><a href=\"#Hash算法\" class=\"headerlink\" title=\"Hash算法\"></a>Hash算法</h2><h3 id=\"什么是Hash？\"><a href=\"#什么是Hash？\" class=\"headerlink\" title=\"什么是Hash？\"></a>什么是Hash？</h3><p>先简单介绍一下Hash算法</p>\n<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0\">散列函数</a>（Hash function）又称散列算法、哈希函数，是一种从任何一种数据中创建数字“指纹”的方法。</p>\n</blockquote>\n<p>:::tip</p>\n<p>请注意！Hash算法并非特指某一种算法，而是所有满足Hash算法的一整类算法的统称</p>\n<p>:::</p>\n<p>Hash算法的实际效果为：对任意一组输入数据进行计算处理，并最终得到一个固定长度的输出摘要。</p>\n<p>经典的比如经MD5算法运算后的结果只有16位或者32位16进制字符，而SHA-1的结果为40位16进制字符</p>\n<h3 id=\"试着去生成一个Hash-Code与Hash算法的基本应用\"><a href=\"#试着去生成一个Hash-Code与Hash算法的基本应用\" class=\"headerlink\" title=\"试着去生成一个Hash Code与Hash算法的基本应用\"></a>试着去生成一个Hash Code与Hash算法的基本应用</h3><p>现在打开你的任何一款ide，通过MD5方法来对<code>你好啊</code>这串字符进行处理，如下是Python对之进行处理的例子</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import hashlib\nstr1 &#x3D; &quot;你好呀&quot; # 准备Hash算法需要处理的数据块\nm &#x3D; hashlib.md5() # 确定特定的Hash算法\nm.update(str1.encode(&quot;utf8&quot;)) # 执行该算法\nprint(m.hexdigest(), type(m.hexdigest())) # 查验输出结果</code></pre>\n\n<p>检查一下结果：<code>4f65fdb33e0f2bd0de6bd1b41fdea968 &lt;class &#39;str&#39;&gt;</code>——一个32个字符，32Byte，128bit大小的字符串，和MD5算法规定的长度完全一致</p>\n<p>而当你的对应数据和具体算法确定以后，不管你是在本地，还是在别的任何设备上再次执行这串代码，它的结果是不会发生变化的。也就是说，一个特定的输入在既定的Hash算法中只会对应一个特定的输出</p>\n<p>根据这个特点，我们可以用某种特定的Hash算法来检验资源的完整性：当用户完成资源的下载后，如果本地资源使用对应的Hash算法得到的Hash code与下载网站上给出的Hash code不相符的话，就意味着你的本地资源有问题，需要进行修复或者重新下载</p>\n<h3 id=\"Hash算法还能干什么？\"><a href=\"#Hash算法还能干什么？\" class=\"headerlink\" title=\"Hash算法还能干什么？\"></a>Hash算法还能干什么？</h3><p>事实上，Hash Code被大量使用于网站的密码加密中：当用户注册的时候，用户的密码通过某种Hash算法加密后得到一串Hash Code，服务器就将Hash Code代替明文密码存储到服务器的数据库中，用户登陆时输入的密码经过加密会再次得到相同的结果，这当然与数据库中存储的内容一致，这样子就完成了用户的验证。</p>\n<p>由于Hash算法总是进行<a href=\"#progress\">有损的压缩运算</a>，并且在实时的运算中损失了大部分原始数据，使得到原数据最直接的方式只有再次输入，想要破解一般只能够依靠穷举。故一般认为Hash算法是不可逆运算，所以即便是服务器数据库泄露也不必担心账号被别人盗取</p>\n<h3 id=\"尝试使用Hash算法，并研究它的输出规律\"><a href=\"#尝试使用Hash算法，并研究它的输出规律\" class=\"headerlink\" title=\"尝试使用Hash算法，并研究它的输出规律\"></a>尝试使用Hash算法，并研究它的输出规律</h3><p>为了研究Hash算法的输出结果的规律，我们需要几个实例</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloWorld &#123;\n    public static void main(String []args) &#123;\n\t\tSystem.out.println(&quot;hello, java&quot;.hashCode());\n\t\tSystem.out.println(&quot;hello, java&quot;.hashCode()); &#x2F;&#x2F;相同数据输入，查看结果\n        \n        System.out.println(&quot;---------------------------&quot;);\n\t\t\n\t\tSystem.out.println(&quot;hello, jav&quot;.hashCode());\n\t\tSystem.out.println(&quot;hello, java&quot;.hashCode());\n\t\tSystem.out.println(&quot;hello, javav&quot;.hashCode());\n\t\tSystem.out.println(&quot;AaAaA&quot;.hashCode());  \n\t\tSystem.out.println(&quot;AaAaAa&quot;.hashCode());\n\t\tSystem.out.println(&quot;AaAaAaA&quot;.hashCode()); &#x2F;&#x2F; 不同数据输入，查看结果\n\t\t\n        System.out.println(&quot;---------------------------&quot;);\n\t\t\n\t\tSystem.out.println(&quot;AaAaAa&quot;.hashCode());\n\t\tSystem.out.println(&quot;BBAaBB&quot;.hashCode()); &#x2F;&#x2F; 仍然是不同数据输入，再次查看结果\n    &#125;\n&#125;\n\n&#x2F;* outputs：\n2057144552\n2057144552 &#x2F;&#x2F; 相同的输入经过散列表算法运算后得到了相同的输出\n---------------------------\n-1596208487\n2057144552\n-653028210\n62984129\n1952508096\n398208897 &#x2F;&#x2F; 不同的输入“理所当然”地得到了完全不同的输出\n---------------------------\n1952508096\n1952508096 &#x2F;&#x2F; 不同的输入居然得到了相同的输出！\n*&#x2F;</code></pre>\n\n<p>从以上实例中我们可以发现虽然一般的不同字符经过运算后输出的结果是不同的，但是也存在不同字符串在经过运算后得到了相同的输出</p>\n<p>特别地，我们将这种两个不同的输入值经过运算后得到了相同的输入值的情况称作是<strong>“Hash collision”</strong></p>\n<p>需要指出的是，发生collision并不可怕，当一个更大的数据集被映射到一个更小的数据集或容器时，一定会出现多对一的情况，这是一件不可避免的事，而算法的优劣只取决于出现collision的频率如何。如果collision出现频次过高，那么就意味着这个Hash算法生成的Hash Code可以在较短时间内被别人使用穷举等办法来破解其内容——也就是说，它不安全，所以用户需要设置更长更复杂组合的密码，而服务器需要使用更不容易被破解的Hash算法<del><code>或者对MD5加盐</code></del>。</p>\n<p>一般来讲<strong>输出大小</strong>越长的算法，安全性也就越高。只有安全度足够高的Hash算法，即没有任何人能够成功实现碰撞的哈希，才有资格被考虑用在加密场合</p>\n<p><img src=\"../images/CommonHash.png\" alt=\"image-20210916211845148\"></p>\n<p>在<strong>极限情况</strong>下，传统的MD5算法可以保证最多340282366920938463463374607431768211456个数据与结果的一一对应，而SHA-1算法甚至可以保证最多1461501637330902918203684832716283019655932542976个数据，但是由于计算机算力的进步，算法自身的缺陷，现呈的彩虹表等的诸多原因存在，它们已经可以在短时间内被破解，为了保证数据的安全，我们需要使用更安全的Hash算法如SHA-2系列的Hash算法来做数据加密</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ol>\n<li><p>什么是Hash算法？</p>\n<ul>\n<li>Hash算法，一般译为哈希算法，摘要算法或者散列算法，它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。</li>\n</ul>\n</li>\n<li><p>哈希算法的特点？</p>\n<ul>\n<li>相同的输入一定得到相同的输出；</li>\n<li>不同的输入大概率得到不同的输出。</li>\n</ul>\n</li>\n<li><p>哈希加密的作用：</p>\n<ul>\n<li>完整性校验：MD5，SHA-1</li>\n<li>数据加密：SHA-2系列等</li>\n</ul>\n</li>\n</ol>\n<p><code>附录</code></p>\n<h3 id=\"Hash算法是怎么实现的？\"><a href=\"#Hash算法是怎么实现的？\" class=\"headerlink\" title=\"Hash算法是怎么实现的？\"></a><span id=\"progress\">Hash算法是怎么实现的？</span></h3><p>Hash算法原理大同小异，大体上的流程包括对原数据块进行切片，再对切片进行细分，并利用每一细分小组的内容按预设算法进行破坏式压缩处理来得到最终的结果，下面以MD5算法为例介绍Hash算法流程</p>\n<h4 id=\"MD5算法的原理：\"><a href=\"#MD5算法的原理：\" class=\"headerlink\" title=\"MD5算法的原理：\"></a>MD5算法的原理：</h4><h5 id=\"原理概述：\"><a href=\"#原理概述：\" class=\"headerlink\" title=\"原理概述：\"></a>原理概述：</h5><p>MD5算法先对数据块填充，将不合规的数据标准化。然后进行分组，标准是每512bit为大小分一组。在每一个分组中又进一步划分出16个32位的子分组。设立四个<a href=\"#variable\">标准幻数</a>，定义四个非线性函数，一个大小为64的常数数组，一个大小为64的位移常量数组。</p>\n<p>在计算过程中，根据512位分组的数据进行外循环，在这之中利用每个细分小组进行一轮16次循环一共4轮合64次的内循环。</p>\n<p>在单次内部循环中，根据正在进行的轮次运用四个非线性函数中的一个对子分组进行的数据进行处理，将处理的结果与标准幻数相加，并进行下一次循环。当主循环完成时，原标准幻数就与数据紧密联系起来，把所有标准幻数组合到一起，这就是一个基于MD5算法的Hash Code</p>\n<blockquote>\n<p><span id=\"variable\">什么是幻数？</span></p>\n<p>不同领域对于幻数这一名称有不同的定义，而MD5中的幻数其实就是在算法中被预设的4个32位的整数，对于一个128位的MD5 Hash Code来说，由4个32位的整数结果彼此组和来得到最终结果貌似是一个不错的选择，而这4个结果就是由这4个标准幻数A,B,C,D根据数据块的内容按照预定算法经过不断演变得到的</p>\n</blockquote>\n<p>实际使用的标准幻数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">A &#x3D; 0x67452301\nB &#x3D; 0xEFCDAB89\nC &#x3D; 0x98BADCFE\nD &#x3D; 0x10325476 </code></pre>\n\n<p>注意，其实这四个标准幻数和ABCD四个字母全无关系，实际生效的只是他们后面的变量值，而这四个值只是被算法规定如此而已<del><code>也许这也算是一种另类的私货？</code></del></p>\n<h5 id=\"流程介绍：\"><a href=\"#流程介绍：\" class=\"headerlink\" title=\"流程介绍：\"></a>流程介绍：</h5><h6 id=\"填充\"><a href=\"#填充\" class=\"headerlink\" title=\"填充\"></a>填充</h6><p>首先将原数据进行补长（长度的度量是bits）到一个对512取模的结果为448的数，在补长的过程中，我们先在原数据末尾append “1” bit to message，然后再append “0” bits until message length in bits ≡ 448 (mod 512)</p>\n<p>完成了补长之后，利用最后的64位（512-448=64）来记录<strong>填充前</strong>的长度(append original length in bits mod 2^64^ to message)</p>\n<p>当上述两个操作都完成以后，数据的总长度就是512的倍数了</p>\n<p>一定要补长(64+1~512)，内容为100…0（如若消息长448，则填充512+64）</p>\n<h6 id=\"计算\"><a href=\"#计算\" class=\"headerlink\" title=\"计算\"></a>计算</h6><p>首先把结果分割为N个512位的块：Y0，Y1，…（每一个512位块再细分为16个32比特子组） </p>\n<p>每个块都进行一次循环，在当前循环中，我们将整个块再次细分为16个32位的子块</p>\n<p>在正式开始循环之前，我们还需要这些东西：</p>\n<ul>\n<li>设立四个标准幻数</li>\n</ul>\n<p><img src=\"../images/Initialize.png\" alt=\"image-20210917110650229\"></p>\n<p>​    虽然无需考究这四个数字的16进制内容有什么含义，但是规律明显得让人不禁发笑</p>\n<p>​    我们分别以ABCD为名设立四个32位的整数变量，A=0x67452301,B=0xefcdab89,C=0x98badcfe,D=0x10325476，这就是实际使用到的标准幻数</p>\n<ul>\n<li><p>定义四个非线性函数：</p>\n<p> ![image-20210917103252897](../images/MD5’s function.png)</p>\n</li>\n<li><p>定义常量数组(正弦函数表)：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for i in range(0, 64)\n    k[i] &#x3D; math.floor(math.fabs(math.sin(i + 1)) * (2 ** 32))\n# 或者直接赋值：\nk &#x3D; [\n     0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,\n      0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,\n      0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,\n      0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,\n      0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,\n      0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,\n      0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,\n      0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391\n]</code></pre></li>\n</ul>\n<blockquote>\n<p>和为什么标准幻数被定义成那样子一样，解释为什么常量数组是这些东西的理由也只有“它是被定义成这样子的”。不过常量数组有一个优势：我们可以了解这些数字具体是怎么来的：</p>\n<p>你应该已经看见了定义常量数组的第一种（即利用正弦函数实时生成的）办法，这就是这些数据产生的来源。</p>\n</blockquote>\n<ul>\n<li><p>定义位移常量:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># md5转换用到的常量，数据都是算法本身规定的\nr &#x3D; [\n    7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,\n\t5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,\n\t4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,\n\t6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21\n]</code></pre></li>\n</ul>\n<blockquote>\n<p>事实上：所有常量都是经由算法规定的，毕竟只有经过被“规定”的步骤才能保证结果的一致性</p>\n</blockquote>\n<p>循环计算</p>\n<p>循环分为内层和外层，外层是对512块进行循环，内层则对32位子块进行循环</p>\n<p>每次外层循环中，我们共会进行四轮内层循环，每次内层循环我们都会按顺序对单个32位子块进行处理</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for i in outside: # 外层循环\n    for t in range(0, 64): # 内层总循环\n        if 0 ≤ i ≤ 15:\n            f &#x3D; (b &amp; c) | (~b &amp; d) # 临时变量f，实际上是存储了当前轮次的非线性函数的结果\n            g &#x3D; i # 存储当前轮次下的第几次\n        else if 16 ≤ i ≤ 31:\n            f &#x3D; (d &amp; b) | ((~d) &amp; c)\n            g &#x3D; (5×i + 1) % 16\n        else if 32 ≤ i ≤ 47:\n            f &#x3D; b ^ c ^ d\n            g &#x3D; (3×i + 5) % 16\n        else if 48 ≤ i ≤ 63:\n            f &#x3D; c ^ (b | (~ d))\n            g &#x3D; (7×i) % 16\n        temp &#x3D; d\n        d &#x3D; c\n        c &#x3D; b\n        b &#x3D; ((a + f + k[i] + w[g]) &lt;&lt; r[i]) + b\n        # w[g]是当前顺序下的32位数据子块,k[i]是我们已经生成好的常量数组,r[i]则是当前轮次所使用到的左移量\n        a &#x3D; temp\n    A &#x3D; A + a\n    B &#x3D; B + b \n    C &#x3D; C + c\n    D &#x3D; D + d</code></pre>\n\n<p>每次：一个输入128位，另一个输入512位，结果输出128位，用于下一轮输入 </p>\n<ol start=\"4\">\n<li>结果</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">digest &#x3D; str(A) + str(B) + str(C) + str(D)</code></pre>\n\n<p> //最后一步的输出即为散列结果，共128位。</p>\n<p>又如SHA-1等算法原理与MD5大同小异，主要的变化之处在于：增加初始的标准幻数个数，增加循环轮数与参与范围，改变变换的非线性函数等</p>\n"},{"title":"Hello World","date":"2021-09-07T14:09:05.000Z","_content":"\n先开个坑，过会儿再补\n\n\n<!--\nauthor:\n  name: JBR_Bunjie\n  link: https://space.bilibili.com/415377461\n  avatar: https://avatars.githubusercontent.com/u/90251718?v=4\n  description: \"仿生程序员会在光环上遇见乐正绫吗？\"\n  socials:\n    bilibili: https://space.bilibili.com/415377461\n\tgithub: https://github.com/JBR-Bunjie \n-->","source":"_posts/index.md","raw":"---\ntitle: Hello World\ndate: 2021-09-7 22:9:5\ntags:\n  - 使用hexo来搭建你的博客！\ncategories:\n  - 配置方法\n---\n\n先开个坑，过会儿再补\n\n\n<!--\nauthor:\n  name: JBR_Bunjie\n  link: https://space.bilibili.com/415377461\n  avatar: https://avatars.githubusercontent.com/u/90251718?v=4\n  description: \"仿生程序员会在光环上遇见乐正绫吗？\"\n  socials:\n    bilibili: https://space.bilibili.com/415377461\n\tgithub: https://github.com/JBR-Bunjie \n-->","slug":"index","published":1,"updated":"2021-09-17T11:33:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckudindmc000b5smb0xsx8twc","content":"<p>先开个坑，过会儿再补</p>\n<!--\nauthor:\n  name: JBR_Bunjie\n  link: https://space.bilibili.com/415377461\n  avatar: https://avatars.githubusercontent.com/u/90251718?v=4\n  description: \"仿生程序员会在光环上遇见乐正绫吗？\"\n  socials:\n    bilibili: https://space.bilibili.com/415377461\n    github: https://github.com/JBR-Bunjie \n-->","site":{"data":{}},"excerpt":"","more":"<p>先开个坑，过会儿再补</p>\n<!--\nauthor:\n  name: JBR_Bunjie\n  link: https://space.bilibili.com/415377461\n  avatar: https://avatars.githubusercontent.com/u/90251718?v=4\n  description: \"仿生程序员会在光环上遇见乐正绫吗？\"\n  socials:\n    bilibili: https://space.bilibili.com/415377461\n    github: https://github.com/JBR-Bunjie \n-->"},{"title":"更新你的Git版本","date":"2021-09-07T15:59:53.000Z","cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","_content":"那么现在，如果我的就电脑上已经安装了一个version为2.31.1的git\n\n问题来了，如何将它更新至最新版本呢，\n\n[How to upgrade Git on Windows to the latest version - Stack Overflow](https://stackoverflow.com/questions/13790592/how-to-upgrade-git-on-windows-to-the-latest-version)\n\n如果你迫切想要知道解决方法的话，那么，你可以直接运行这个命令\n\n> C:\\\\> git update-git-for-windows\n\n这个命令对于当前版本>2.16.1的Git有效\n\n对于Git版本在2.14到2.16.1之间的，请使用如下命令：\n\n> C;\\\\> git update\n\n![image-20210907170607746](../images/image-20210907170607746.png)\n\n至于更低的，就只能先卸载旧版本再重装了，它太古董了\n\n等待你的进程完成即可\n\n![image-20210907171745526](../images/image-20210907171745526.png)\n\n","source":"_posts/updateGit.md","raw":"---\ntitle: 更新你的Git版本\ndate: 2021-09-7 23:59:53\ntags:\n  - Git\ncategories:\n  - 配置方法\ncover: https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg\n---\n那么现在，如果我的就电脑上已经安装了一个version为2.31.1的git\n\n问题来了，如何将它更新至最新版本呢，\n\n[How to upgrade Git on Windows to the latest version - Stack Overflow](https://stackoverflow.com/questions/13790592/how-to-upgrade-git-on-windows-to-the-latest-version)\n\n如果你迫切想要知道解决方法的话，那么，你可以直接运行这个命令\n\n> C:\\\\> git update-git-for-windows\n\n这个命令对于当前版本>2.16.1的Git有效\n\n对于Git版本在2.14到2.16.1之间的，请使用如下命令：\n\n> C;\\\\> git update\n\n![image-20210907170607746](../images/image-20210907170607746.png)\n\n至于更低的，就只能先卸载旧版本再重装了，它太古董了\n\n等待你的进程完成即可\n\n![image-20210907171745526](../images/image-20210907171745526.png)\n\n","slug":"updateGit","published":1,"updated":"2021-09-17T11:33:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckudindne000u5smb6n3lgwh8","content":"<p>那么现在，如果我的就电脑上已经安装了一个version为2.31.1的git</p>\n<p>问题来了，如何将它更新至最新版本呢，</p>\n<p><a href=\"https://stackoverflow.com/questions/13790592/how-to-upgrade-git-on-windows-to-the-latest-version\">How to upgrade Git on Windows to the latest version - Stack Overflow</a></p>\n<p>如果你迫切想要知道解决方法的话，那么，你可以直接运行这个命令</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>C:\\&gt; git update-git-for-windows</p></blockquote>\n<p>这个命令对于当前版本&gt;2.16.1的Git有效</p>\n<p>对于Git版本在2.14到2.16.1之间的，请使用如下命令：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>C;\\&gt; git update</p></blockquote>\n<p><img src=\"../images/image-20210907170607746.png\" alt=\"image-20210907170607746\"></p>\n<p>至于更低的，就只能先卸载旧版本再重装了，它太古董了</p>\n<p>等待你的进程完成即可</p>\n<p><img src=\"../images/image-20210907171745526.png\" alt=\"image-20210907171745526\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>那么现在，如果我的就电脑上已经安装了一个version为2.31.1的git</p>\n<p>问题来了，如何将它更新至最新版本呢，</p>\n<p><a href=\"https://stackoverflow.com/questions/13790592/how-to-upgrade-git-on-windows-to-the-latest-version\">How to upgrade Git on Windows to the latest version - Stack Overflow</a></p>\n<p>如果你迫切想要知道解决方法的话，那么，你可以直接运行这个命令</p>\n<blockquote>\n<p>C:\\&gt; git update-git-for-windows</p>\n</blockquote>\n<p>这个命令对于当前版本&gt;2.16.1的Git有效</p>\n<p>对于Git版本在2.14到2.16.1之间的，请使用如下命令：</p>\n<blockquote>\n<p>C;\\&gt; git update</p>\n</blockquote>\n<p><img src=\"../images/image-20210907170607746.png\" alt=\"image-20210907170607746\"></p>\n<p>至于更低的，就只能先卸载旧版本再重装了，它太古董了</p>\n<p>等待你的进程完成即可</p>\n<p><img src=\"../images/image-20210907171745526.png\" alt=\"image-20210907171745526\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckudindkl00015smbao0c3tjz","category_id":"ckudindl300035smb5lkk2ykj","_id":"ckudindmi000d5smbd26t5t91"},{"post_id":"ckudindmc000b5smb0xsx8twc","category_id":"ckudindl300035smb5lkk2ykj","_id":"ckudindmp000g5smbh90ka6bg"},{"post_id":"ckudindkz00025smbhwpld4m6","category_id":"ckudindl300035smb5lkk2ykj","_id":"ckudindmt000j5smb341g730c"},{"post_id":"ckudindld00055smb12fscp1e","category_id":"ckudindmh000c5smb6vlk3z2o","_id":"ckudindmv000l5smbhgps0qax"},{"post_id":"ckudindll00065smb5w1kbisz","category_id":"ckudindmp000h5smb6zva3z5b","_id":"ckudindmy000p5smb5nw0ck9r"},{"post_id":"ckudindly00075smbdb2ygsyh","category_id":"ckudindmv000m5smb9ptq68pv","_id":"ckudindn0000s5smb992o40yy"},{"post_id":"ckudindne000u5smb6n3lgwh8","category_id":"ckudindl300035smb5lkk2ykj","_id":"ckudindnh000w5smbcoyq1chu"}],"PostTag":[{"post_id":"ckudindkl00015smbao0c3tjz","tag_id":"ckudindlb00045smba4527yib","_id":"ckudindmb000a5smbcx5h4h2y"},{"post_id":"ckudindkz00025smbhwpld4m6","tag_id":"ckudindm100095smb8nw25jhb","_id":"ckudindmk000f5smb7rf681tu"},{"post_id":"ckudindld00055smb12fscp1e","tag_id":"ckudindmj000e5smb44594t9r","_id":"ckudindmu000k5smb0vr9c2xg"},{"post_id":"ckudindll00065smb5w1kbisz","tag_id":"ckudindms000i5smbejap9fu5","_id":"ckudindmx000o5smbhhva0yht"},{"post_id":"ckudindly00075smbdb2ygsyh","tag_id":"ckudindmw000n5smb2jh4h9qn","_id":"ckudindmz000r5smbcm0f9tl0"},{"post_id":"ckudindmc000b5smb0xsx8twc","tag_id":"ckudindmy000q5smbgh3i0uv6","_id":"ckudindn1000t5smb7l9e13s2"},{"post_id":"ckudindne000u5smb6n3lgwh8","tag_id":"ckudindm100095smb8nw25jhb","_id":"ckudindnh000v5smb4g3v375r"}],"Tag":[{"name":"FTP","_id":"ckudindlb00045smba4527yib"},{"name":"Git","_id":"ckudindm100095smb8nw25jhb"},{"name":"Python","_id":"ckudindmj000e5smb44594t9r"},{"name":"GitHub","_id":"ckudindms000i5smbejap9fu5"},{"name":"Hash","_id":"ckudindmw000n5smb2jh4h9qn"},{"name":"使用hexo来搭建你的博客！","_id":"ckudindmy000q5smbgh3i0uv6"}]}}
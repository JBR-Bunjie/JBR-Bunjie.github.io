{"title":"Python编程入门","uid":"fc9433631750b4e2a27c5cd3c21a72be","slug":"Language Learning/Python/PythonBasicGrammar/PythonBasicGrammar","date":"2021-09-26T09:22:04.000Z","updated":"2023-03-10T09:09:55.000Z","comments":true,"path":"api/articles/Language Learning/Python/PythonBasicGrammar/PythonBasicGrammar.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"python-3-basic-grammar-training\">Python 3 Basic Grammar\r\nTraining</h1>\r\n<h2 id=\"为什么是python\">为什么是python？</h2>\r\n<p>一个最重要的原因——简单，快速，容易上手：<img src=\"../../../Language Learning/Python/PythonBasicGrammar/hello-world-in-python.png\"></p>\r\n<p>你也可以通过著名的开发语言排行榜TIOBE来直观感受Python有多么热门<a\r\nhref=\"https://www.tiobe.com/tiobe-index/\">index | TIOBE - The Software\r\nQuality Company</a></p>\r\n<h3 id=\"python官网welcome-to-python.org\">python官网：<a\r\nhref=\"https://www.python.org/\">Welcome to Python.org</a></h3>\r\n<h3\r\nid=\"python社区pypipypi-the-python-package-index\">python社区（PYPI）：<a\r\nhref=\"https://pypi.org/\">PyPI · The Python Package Index</a></h3>\r\n<h3 id=\"python最大的优势开发效率高\">python最大的优势：开发效率高</h3>\r\n<h3 id=\"python最大的劣势运行效率低\">python最大的劣势：运行效率低</h3>\r\n<p><del>开发效率与运行效率间的取舍是动态语言不可能绕过的问题，Python选择了开发效率换运行效率。</del></p>\r\n<p><del>但是python支持嵌入c，c++等高效率的低级语言，可以在一定程度上缓解这个问题</del></p>\r\n<h2 id=\"配置你的电脑环境\">配置你的电脑环境：</h2>\r\n<p>安装Python\r\n3.8（Python会自带一个编辑器\"IDLE\"，不过只提供了基础的代码编写功能）</p>\r\n<p>你可以通过我</p>\r\n<p>关于IDE，我会推荐推荐使用Jet\r\nBrains公司出品的Pycharm。当然，宇宙第一IDE——Visual\r\nStudio也是不错的选择</p>\r\n<blockquote>\r\n<p>关于Python的版本：</p>\r\n<p>Python3中的更新与c/c++的新标准，Java的新版本等有相通之处；</p>\r\n<blockquote>\r\n<p>每次Python更新都会推出很多新的feature，3.7版本中更新了这些内容：https://docs.python.org/zh-cn/3.7/whatsnew/3.7.html，如果你需要了解当前版本更新了什么，最好的办法当然是去阅读Python的官方文档，当然，你也可以直接在Python自带的ide：idle来查阅Python的版本变化信息。在idle中，你可以按照Help\r\n&gt;&gt;&gt; Python Docs &gt;&gt; What’s New In Python\r\n3.7的路径来查看</p>\r\n</blockquote>\r\n<p>简单来说，python的更新会添加新的语法，提升python的稳定性(一般)，少数情况下会删除旧的语法与功能<del>（3.10的兼容性差大概就是这么来的</del>）</p>\r\n<p><del>截止本文完成时，Python已经推出了发布3.11版本的计划，并且已经推出了Python3.11的文档：<a\r\nhref=\"https://docs.python.org/3.11/whatsnew/3.11.html\">What’s New In\r\nPython 3.11 — Python 3.11.0a0 documentation</a></del></p>\r\n</blockquote>\r\n<h2 id=\"正式开始\">正式开始！</h2>\r\n<h3 id=\"从命令行开始\">从命令行开始！</h3>\r\n<figure>\r\n<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210923234720280-16324120504921.png\"\r\nalt=\"image-20210923234720280\" />\r\n<figcaption aria-hidden=\"true\">image-20210923234720280</figcaption>\r\n</figure>\r\n<p>这时，cmd就进入了python的编写模式，支持python\r\n当前版本的所有语法，和python自带的编辑器</p>\r\n<blockquote>\r\n<p>当然，你也可以使用windows的powershell，不过相对于cmd而言，powershell更加复杂，而且有各种莫名其妙的限制</p>\r\n</blockquote>\r\n<div class=\"warning\">\r\n<p>注意，如果你在cmd中输入python后打开的是windows\r\n商店，这是你操作系统的环境变量出了问题，请在edit the system environment\r\nvariables下仔细检查Path中python条目下的环境变量指向的地址！</p>\r\n</div>\r\n<h4 id=\"现在尝试打印hello-world吧\">现在尝试打印Hello World吧</h4>\r\n<p>所有你需要做的只是输入</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(&quot;Hello World&quot;)</code></pre>\r\n<p>cmd就会显示：</p>\r\n<figure>\r\n<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210329193537197.png\"\r\nalt=\"image-20210329193537197\" />\r\n<figcaption aria-hidden=\"true\">image-20210329193537197</figcaption>\r\n</figure>\r\n<p>简单吧！相信你一定会爱上python这门简单的语言的</p>\r\n<p>如果你要回到cmd的初始状态，只需要用 quit() 即可</p>\r\n<figure>\r\n<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210329193638362.png\"\r\nalt=\"image-20210329193638362\" />\r\n<figcaption aria-hidden=\"true\">image-20210329193638362</figcaption>\r\n</figure>\r\n<p><img src=\"../../../Language Learning/Python/PythonBasicGrammar/image-20210329193638362.png\"></p>\r\n<h4 id=\"什么时候需要使用到命令行\">什么时候需要使用到命令行？</h4>\r\n<p>比如我现在已经编写完成了一个基于python的脚本。在命令行中，我们甚至无需要进入python的编辑模式，只需输入python\r\n+\r\n文件路径即可直接执行。一般来说，启动一个ide是很耗费时间的，而这就是我们节约时间的手段。</p>\r\n<figure>\r\n<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210923235953188.png\"\r\nalt=\"image-20210923235953188\" />\r\n<figcaption aria-hidden=\"true\">image-20210923235953188</figcaption>\r\n</figure>\r\n<h3 id=\"在pycharm中继续\">在pycharm中继续：</h3>\r\n<h4 id=\"pycharm介绍\">PyCharm介绍</h4>\r\n<p>官网：<a href=\"https://www.jetbrains.com/pycharm/\">PyCharm: the\r\nPython IDE for Professional Developers by JetBrains</a></p>\r\n<p>至于为什么选用它，建议逼乎一下😂</p>\r\n<h4 id=\"新建项目\">新建项目</h4>\r\n<figure>\r\n<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210329193807978.png\"\r\nalt=\"image-20210329193807978\" />\r\n<figcaption aria-hidden=\"true\">image-20210329193807978</figcaption>\r\n</figure>\r\n<h4 id=\"对pycharm的一些初始设置\">对pycharm的一些初始设置：</h4>\r\n<ol type=\"1\">\r\n<li>设置编码：（都改为utf-8）<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210329194151198.png\"\r\nalt=\"image-20210329194151198\" /></li>\r\n<li>设置新建文件的默认代码和内容：<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210330151608813.png\"\r\nalt=\"image-20210330151608813\" /></li>\r\n</ol>\r\n<p>你可以在PyCharm的官网上找到所有的File template variables：<a\r\nhref=\"https://www.jetbrains.com/help/pycharm/file-template-variables.html\">File\r\ntemplate variables | PyCharm (jetbrains.com)</a></p>\r\n<h4 id=\"在console里执行命令\">在console里执行命令：</h4>\r\n<p>前面已经提到过在命令行中执行Python代码，这当然是运行已经编写好的Python程序或脚本的好办法。但是命令行中执行程序后就立刻输出结果并结束程序，那要是程序结束后我还想继续执行更多操作怎么办？</p>\r\n<p>这时候你可能需要用到Python Console功能<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210330151923931.png\"\r\nalt=\"image-20210330151923931\" /></p>\r\n<p>pycharm中的console就是一个pychon的直接运行环境，这里允许你以解释性的形式逐句输入并运行python代码。值得一提的是，在PyCharm中运行你的Python文件时，默认输出到Python\r\nConsole中，这意味着你可以在程序结束完成之后接着输入更多内容</p>\r\n<div class=\"tip\">\r\n<p>当你有不确定的代码需要验证的时候，不妨先复制到console里试一试！</p>\r\n</div>\r\n<h3 id=\"数据类型\">数据类型：</h3>\r\n<p>在学习语法之前，你需要了解构成程序的要素是什么</p>\r\n<p>如果你有过其它语言的编程经验的话，你可能会说“数据结构+算法”</p>\r\n<p>但是如果你纯新手的话，那这可能难以理解。那么我会说，程序是由符合当前编程语言语法的语句依次执行生成的，构建程序的基本内容是数据的运算与处理</p>\r\n<p>很显然，就数据的处理而言，直接使用 1 + 2\r\n等既定的数据常量是远远不够的——我们需要应付更多变的情况——这就要用到<strong>变量</strong></p>\r\n<h4 id=\"python变量命名规则\">Python变量命名规则</h4>\r\n<p>和其它语言一样，Python也有自己的变量命名规则</p>\r\n<ul>\r\n<li><p>第一个字符必须是字母表中字母或下划线 **_**</p></li>\r\n<li><p>标识符的其他的部分由字母、数字和下划线组成</p></li>\r\n<li><p>标识符对大小写敏感</p></li>\r\n<li><p>注意避开python自己的保留字符</p>\r\n<p>你可以通过以下语句来查询Python保留的关键字符</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import keyword \nkeyword.kwlist</code></pre></li>\r\n</ul>\r\n<p>示例： <img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210330152927963.png\"\r\nalt=\"image-20210330152927963\" /></p>\r\n<h4 id=\"关于变量的基本数据类型\">关于变量的基本数据类型：</h4>\r\n<p>在 Python\r\n中，变量就是变量，它没有类型，我们所说的\"类型\"是变量所指的内存中对象的类型。</p>\r\n<p>Python\r\n中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>\r\n<blockquote>\r\n<p>不过Python中的确存在这些“基本数据类型”如：int，float之类的，并且它们之间都存在着严格的限制</p>\r\n<p>你可以使用 type() 函数来检查当前变量的数据类型：<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210330153736850.png\"\r\nalt=\"image-20210330153736850\" /></p>\r\n</blockquote>\r\n<h4 id=\"标准数据类型\">标准数据类型：</h4>\r\n<ul>\r\n<li><strong>不可变数据（3\r\n个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li>\r\n<li><strong>可变数据（3\r\n个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li>\r\n</ul>\r\n<p>共六种</p>\r\n<h5 id=\"关于可变与不可变数据\">关于可变与不可变数据：</h5>\r\n<p>什么是不可变数据？</p>\r\n<p>在Python中，我们可以设立变量 a = 1，之后我们可以对 a\r\n的值做出改变，比如又执行语句 a = 2，这时 a\r\n当然就不再指向1，但是1这个“内容”本身并没有改变。</p>\r\n<p>而可变数据则是可以改变数据的具体内容：如语句 a = [1, 2]，我们可以将 a\r\n中的[0], [1]等数据单独拎出来并做出改变而并不改变 a 本身的指向</p>\r\n<p>这些“指向”，“内容”都是基于内存地址来说的。</p>\r\n<p>不可变数据类型：\r\n当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。</p>\r\n<p>可变数据类型\r\n：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。</p>\r\n<p>你可以用\r\n<code>id(变量名)</code>来查验对应变量的内存地址是否发生变化</p>\r\n<h5 id=\"数字\">数字：</h5>\r\n<p>int float...</p>\r\n<h5\r\nid=\"列表python中功能最强大的数据类型\">列表：Python中功能最强大的数据类型</h5>\r\n<p>用“[ ]”来定义列表！</p>\r\n<p>列表支持：</p>\r\n<ol type=\"1\">\r\n<li>列表间的拼接<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210402172959101.png\"\r\nalt=\"image-20210402172959101\" /></li>\r\n<li>定义以列表为元素的列表<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210402172939650.png\"\r\nalt=\"image-20210402172939650\" /></li>\r\n<li>将整个列表赋给新列表<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210402172917361.png\"\r\nalt=\"image-20210402172917361\" />（也可以使用copy()函数：<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210402173226983.png\"\r\nalt=\"image-20210402173226983\" />)</li>\r\n<li>通过append()，entend()，insert()，实现增</li>\r\n<li>通过pop()，remove()，实现删</li>\r\n<li>支持通过截取来获取列表内容（截取参看字符串</li>\r\n</ol>\r\n<h5 id=\"元组常量列表\">元组：”常量列表“</h5>\r\n<p>不能改变元素个数的列表，列表中一切涉及改变元素个数改变的功能全部NG</p>\r\n<p>用 “( )\" 来定义一个元组</p>\r\n<div class=\"warning\">\r\n<p>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：</p>\r\n<figure>\r\n<img src=\"image-20210402174032001.png\" alt=\"image-20210402174032001\" />\r\n<figcaption aria-hidden=\"true\">image-20210402174032001</figcaption>\r\n</figure>\r\n</div>\r\n<h5 id=\"字符串特化列表\">字符串：特化列表</h5>\r\n<ol type=\"1\">\r\n<li>python允许直接把字符/字符串存储到一个变量中</li>\r\n</ol>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&gt;&gt;&gt; a &#x3D; &quot;bunjie&quot;\n&gt;&gt;&gt; a[-1]\n&#39;e&#39;\n&gt;&gt;&gt; a[0]\n&#39;b&#39;\n&gt;&gt;&gt; a[1]\n&#39;u&#39;\n&gt;&gt;&gt; a[:]\n&#39;bunjie&#39;\n&gt;&gt;&gt; a[0:1]\n&#39;b&#39;\n&gt;&gt;&gt; a[0:5]\n&#39;bunji&#39;\n&gt;&gt;&gt; a[0:6]\n&#39;bunjie&#39;\n&gt;&gt;&gt; a[0:7]\n&#39;bunjie&#39; #没有报错\n&gt;&gt;&gt; a[-1:-2]\n&#39;&#39;\n&gt;&gt;&gt; a[:-1]\n&#39;bunji&#39;\n&gt;&gt;&gt; a[:-6]\n&#39;&#39;\n&gt;&gt;&gt; a[:-5]\n&#39;b&#39;</code></pre>\r\n<figure>\r\n<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210402171810502.png\"\r\nalt=\"image-20210402171810502\" />\r\n<figcaption aria-hidden=\"true\">image-20210402171810502</figcaption>\r\n</figure>\r\n<h5 id=\"字典\">字典：</h5>\r\n<p>使用键值对进行匹配，类似c语言中的“枚举类型”，以键值对构建数据内容\r\n<code>&#123;key: value, ...&#125;</code></p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">d &#x3D; &#123;key1 : value1, key2 : value2, key3 : value3 &#125;\nprint(d[key1])\n# 输出：value1\n\nD &#x3D; &#123;&#125; # 我们可以使用大括号来创建空字典</code></pre>\r\n<p>字典可能是所有数据类型中最高效的，因为取元素时直接采用key来定点查找而不是像是list等数据类型依次迭代查找</p>\r\n<h5 id=\"集合\">集合：</h5>\r\n<p>是的，就是集合论中的集合</p>\r\n<p>总体来说，集合这种数据类型我们使用得较少，做可以使用大括号 <strong>{\r\n}</strong> 或者 <strong>set()</strong>\r\n函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是\r\n<strong>{ }</strong>，因为 <strong>{ }</strong>\r\n是用来创建一个空字典。</p>\r\n<p>创建格式：</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">parame1 &#x3D; &#123;value01, value02, ...&#125; # 注意格式\nparame2 &#x3D; set() # set只允许单个参数，我们一般使用set来创建空集合</code></pre>\r\n<blockquote>\r\n<p>根据我们中学时所学到的知识，我们知道：集合具有确定性、互异性、无序性</p>\r\n<p>根据这些性质，我们获知：单个确定数据只会出现一次。所以如果出现重复的值，集合会把相同的合并。</p>\r\n</blockquote>\r\n<h3 id=\"语法\">语法：</h3>\r\n<h4 id=\"关于注释\">关于注释：</h4>\r\n<h5 id=\"什么是注释\">什么是注释？</h5>\r\n<p>注释是你在程序中插入的解释性的文字，单纯的只是为了方便别人和自己理解当前程序。程序在运行时会忽略所有被注释的部分，所以你留下的注释并不会对程序功能造成任何实际上的影响</p>\r\n<h5 id=\"python中的注释方式\">python中的注释方式：</h5>\r\n<ol type=\"1\">\r\n<li><p>以 <strong><code>#</code></strong>\r\n作为单行注释，在pycharm中，你可以使用 <code>ctrl + /</code>\r\n来快速注释一整行:</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 这是一个单行注释</code></pre></li>\r\n<li><p>以一对三个连续的单引号<strong><code>''' '''</code></strong>，或一对三个连续的双引号<strong><code>\"\"\" \"\"\"</code></strong>来作为多行注释</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">&quot;&quot;&quot;\n这是一个多行注释\n&quot;&quot;&quot;\n\n&#39;&#39;&#39;\n这也是一个多行注释\n&#39;&#39;&#39;</code></pre></li>\r\n</ol>\r\n<h4 id=\"关于缩进\">关于缩进：</h4>\r\n<p>Python没有\r\n<code>&#123; &#125;</code>，它采用精确的缩进来确定控制语句的执行范围！</p>\r\n<p>一个项目里最好只采用 <em>tab</em> 和 <em>space</em>\r\n两种中的一种缩进，如果在一个控制体里使用了两种缩进格式是会报错的</p>\r\n<p>个人建议使用 <em>tab</em> 作为缩进</p>\r\n<figure>\r\n<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210330153314699.png\"\r\nalt=\"image-20210330153314699\" />\r\n<figcaption aria-hidden=\"true\">image-20210330153314699</figcaption>\r\n</figure>\r\n<p>python没有分号：“ ; ”， 语句间几乎没有大括号，代价是精确的缩进！</p>\r\n<h4 id=\"条件控制语句\">条件控制语句</h4>\r\n<h5 id=\"为什么使用条件控制\">为什么使用条件控制？</h5>\r\n<p>当然是为了以一个程序去应对多种可能性</p>\r\n<p>例如：我们解决除法运算时，我们当然需要以除数不为零来分类，但是我们不可能因为这一点就开发两个程序，并且要求用户根据除数是什么来选择运行那个程序——这就要求我们在设计程序的时候为某些特定情况运行特定代码</p>\r\n<h5\r\nid=\"python中的条件控制语句长什么样\">Python中的条件控制语句长什么样？</h5>\r\n<p>Python中if语句的一般形式如下所示：</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">if condition_1:    \n    statement_block_1 \nelif condition_2:    \n    statement_block_2\n# 更多情况使用elif condiition_3: ... 并以此类推\nelse:\n    statement_block_3</code></pre>\r\n<ul>\r\n<li>如果 \"condition_1\" 为 True 将执行 \"statement_block_1\" 块语句</li>\r\n<li>如果 \"condition_1\" 为False，将<strong>判断</strong>\r\n\"condition_2\"</li>\r\n<li>如果\"condition_2\" 为 True 将执行 \"statement_block_2\" 块语句</li>\r\n<li>如果\r\n\"condition_1\"与\"condition_2\"均为False，那么将执行\"statement_block_3\"块语句</li>\r\n</ul>\r\n<div class=\"warning\">\r\n<p>1、每个条件后面要使用冒号\r\n<strong>:</strong>，表示接下来是满足条件后要执行的语句块。</p>\r\n<p>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</p>\r\n<p>3、在Python中没有switch – case语句。</p>\r\n</div>\r\n<h4 id=\"循环语句\">循环语句：</h4>\r\n<p>循环的意义有点类似于乘法之于加法，它提供了一种解出某一个条件下的最终结果的方式。借助循环，计算机能够非常高效的完成人很难或无法完成的事情，比如说，在大量文件中查找包含某个搜索词的文档，对几十万条销售数据进行统计汇总等。</p>\r\n<h5 id=\"while循环\">while循环：</h5>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">while 判断条件(condition)：    \n\t执行语句(statements)……\n# 每次循环之前都会进行一次condition是否为真的判断，如果结果为false，则立即停止循环</code></pre>\r\n<h5 id=\"for循环\">for循环：</h5>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for &lt;variable&gt; in &lt;sequence&gt;:\n    &lt;statements&gt;\nelse:\n    &lt;statements&gt;</code></pre>\r\n<p>例一：<img src=\"../../../Language Learning/Python/PythonBasicGrammar/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif\"></p>\r\n<p>例二：<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210402174928766.png\"\r\nalt=\"image-20210402174928766\" /></p>\r\n<h2 id=\"基础语法到此结束\">基础语法到此结束！</h2>\r\n<h2 id=\"附录1python包的获取和管理\">附录1：python包的获取和管理</h2>\r\n<p>类似于Node的npm，Linux中的yum，apt等，python有自己的包管理工具——pip，这也是Python安装时自带的</p>\r\n<p>但是直接从pypi上获取包的速度太慢<del>长城防火墙</del>，所以我们要借用一些国内的镜像网站，比如<a\r\nhref=\"https://pypi.tuna.tsinghua.edu.cn/simple/\">清华大学的清华源镜像网站</a></p>\r\n<p>你可以从console(非python的编辑模式)里用python的pip语句指定国内的镜像源来直接安装包，如：</p>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">pip install numpy -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;\n# -i代表当前安装操作使用后面的临时源</code></pre>\r\n<p>不过我们也可以通过 ctrl + shift + s 打开pycharm的 settings 进入\r\nProject: (你当前的项目名) &gt;&gt; Python InterPreter\r\n来直接安装包。记得在manage repository中添加国内的python源的地址</p>\r\n<blockquote>\r\n<p>国内Python源建议使用清华源：https://pypi.tuna.tsinghua.edu.cn/simple/</p>\r\n</blockquote>\r\n<h2 id=\"附录2python运算符\">附录2：Python运算符</h2>\r\n<p>运算符：（python的语法糖很大一部分集中在多种多样的运算符，这也是让书写python代码速度起飞的重要原因！）</p>\r\n<p><del>（虽然刚接触的时候会因为大量的运算符而痛苦😀）</del></p>\r\n<h3 id=\"运算符手册\">运算符手册：</h3>\r\n<h4\r\nid=\"算数运算符相比c语言多了幂运算于取整运算\">算数运算符：（相比c语言多了幂运算于取整运算）</h4>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 6%\" />\r\n<col style=\"width: 51%\" />\r\n<col style=\"width: 42%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">运算符</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n<th style=\"text-align: left;\">实例</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">+</td>\r\n<td style=\"text-align: left;\">加 - 两个对象相加</td>\r\n<td style=\"text-align: left;\">a + b 输出结果 31</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">-</td>\r\n<td style=\"text-align: left;\">减 - 得到负数或是一个数减去另一个数</td>\r\n<td style=\"text-align: left;\">a - b 输出结果 -11</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">*</td>\r\n<td style=\"text-align: left;\">乘 -\r\n两个数相乘或是返回一个被重复若干次的字符串</td>\r\n<td style=\"text-align: left;\">a * b 输出结果 210</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">/</td>\r\n<td style=\"text-align: left;\">除 - x 除以 y</td>\r\n<td style=\"text-align: left;\">b / a 输出结果 2.1</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">%</td>\r\n<td style=\"text-align: left;\">取模 - 返回除法的余数</td>\r\n<td style=\"text-align: left;\">b % a 输出结果 1</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">**</td>\r\n<td style=\"text-align: left;\">幂 - 返回x的y次幂</td>\r\n<td style=\"text-align: left;\">a**b 为10的21次方</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">//</td>\r\n<td style=\"text-align: left;\">取整除 - 向下取接近商的整数</td>\r\n<td style=\"text-align: left;\">&gt;&gt;&gt; 9//2 <br />4\r\n<br/>&gt;&gt;&gt; -9//2<br/> -5</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 id=\"比较运算符和c语言相同\">比较运算符：（和c语言相同）</h4>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 6%\" />\r\n<col style=\"width: 68%\" />\r\n<col style=\"width: 24%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">运算符</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n<th style=\"text-align: left;\">实例</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">==</td>\r\n<td style=\"text-align: left;\">等于 - 比较对象是否相等</td>\r\n<td style=\"text-align: left;\">(a == b) 返回 False。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">!=</td>\r\n<td style=\"text-align: left;\">不等于 - 比较两个对象是否不相等</td>\r\n<td style=\"text-align: left;\">(a != b) 返回 True。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">&gt;</td>\r\n<td style=\"text-align: left;\">大于 - 返回x是否大于y</td>\r\n<td style=\"text-align: left;\">(a &gt; b) 返回 False。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">&lt;</td>\r\n<td style=\"text-align: left;\">小于 -\r\n返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td>\r\n<td style=\"text-align: left;\">(a &lt; b) 返回 True。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">&gt;=</td>\r\n<td style=\"text-align: left;\">大于等于 - 返回x是否大于等于y。</td>\r\n<td style=\"text-align: left;\">(a &gt;= b) 返回 False。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">&lt;=</td>\r\n<td style=\"text-align: left;\">小于等于 - 返回x是否小于等于y。</td>\r\n<td style=\"text-align: left;\">(a &lt;= b) 返回 True。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 id=\"赋值运算\">赋值运算：</h4>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">运算符</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n<th style=\"text-align: left;\">实例</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">=</td>\r\n<td style=\"text-align: left;\">简单的赋值运算符</td>\r\n<td style=\"text-align: left;\">c = a + b 将 a + b 的运算结果赋值为 c</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">+=</td>\r\n<td style=\"text-align: left;\">加法赋值运算符</td>\r\n<td style=\"text-align: left;\">c += a 等效于 c = c + a</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">-=</td>\r\n<td style=\"text-align: left;\">减法赋值运算符</td>\r\n<td style=\"text-align: left;\">c -= a 等效于 c = c - a</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">*=</td>\r\n<td style=\"text-align: left;\">乘法赋值运算符</td>\r\n<td style=\"text-align: left;\">c <em>= a 等效于 c = c </em> a</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">/=</td>\r\n<td style=\"text-align: left;\">除法赋值运算符</td>\r\n<td style=\"text-align: left;\">c /= a 等效于 c = c / a</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">%=</td>\r\n<td style=\"text-align: left;\">取模赋值运算符</td>\r\n<td style=\"text-align: left;\">c %= a 等效于 c = c % a</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">**=</td>\r\n<td style=\"text-align: left;\">幂赋值运算符</td>\r\n<td style=\"text-align: left;\">c <strong>= a 等效于 c = c </strong>\r\na</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">//=</td>\r\n<td style=\"text-align: left;\">取整除赋值运算符</td>\r\n<td style=\"text-align: left;\">c //= a 等效于 c = c // a</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class=\"warning\">\r\n<p>特别提醒！ python中没有像c语言一样的自加运算！<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210402161704512.png\"\r\nalt=\"image-20210402161704512\" /></p>\r\n</div>\r\n<h4 id=\"位运算符和c语言相同\">位运算符：（和c语言相同）</h4>\r\n<table style=\"width:100%;\">\r\n<colgroup>\r\n<col style=\"width: 4%\" />\r\n<col style=\"width: 47%\" />\r\n<col style=\"width: 47%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">运算符</th>\r\n<th style=\"text-align: left;\">描述:(下表中变量 a 为 60，b 为\r\n13二进制格式如下：)</th>\r\n<th style=\"text-align: left;\">实例</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">&amp;</td>\r\n<td\r\nstyle=\"text-align: left;\">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>\r\n<td style=\"text-align: left;\">(a &amp; b) 输出结果 12 ，二进制解释：\r\n0000 1100</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">|</td>\r\n<td\r\nstyle=\"text-align: left;\">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>\r\n<td style=\"text-align: left;\">(a | b) 输出结果 61 ，二进制解释： 0011\r\n1101</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">^</td>\r\n<td\r\nstyle=\"text-align: left;\">按位异或运算符：当两对应的二进位相异时，结果为1</td>\r\n<td style=\"text-align: left;\">(a ^ b) 输出结果 49 ，二进制解释： 0011\r\n0001</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">~</td>\r\n<td\r\nstyle=\"text-align: left;\">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。<strong>~x</strong>\r\n类似于 <strong>-x-1</strong></td>\r\n<td style=\"text-align: left;\">(~a ) 输出结果 -61 ，二进制解释： 1100\r\n0011， 在一个有符号二进制数的补码形式。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">&lt;&lt;</td>\r\n<td\r\nstyle=\"text-align: left;\">左移动运算符：运算数的各二进位全部左移若干位，由\"&lt;&lt;\"右边的数指定移动的位数，高位丢弃，低位补0。</td>\r\n<td style=\"text-align: left;\">a &lt;&lt; 2 输出结果 240 ，二进制解释：\r\n1111 0000</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">&gt;&gt;</td>\r\n<td\r\nstyle=\"text-align: left;\">右移动运算符：把\"&gt;&gt;\"左边的运算数的各二进位全部右移若干位，\"&gt;&gt;\"右边的数指定移动的位数</td>\r\n<td style=\"text-align: left;\">a &gt;&gt; 2 输出结果 15 ，二进制解释：\r\n0000 1111</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 id=\"逻辑运算符\">逻辑运算符：</h4>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 4%\" />\r\n<col style=\"width: 7%\" />\r\n<col style=\"width: 44%\" />\r\n<col style=\"width: 44%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">运算符</th>\r\n<th style=\"text-align: left;\">逻辑表达式</th>\r\n<th style=\"text-align: left;\">描述（令a=10， b=20）</th>\r\n<th style=\"text-align: left;\">实例</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">and</td>\r\n<td style=\"text-align: left;\">x and y</td>\r\n<td style=\"text-align: left;\">布尔\"与\" - 如果 x 为 False，x and y 返回 x\r\n的值，否则返回 y 的计算值。</td>\r\n<td style=\"text-align: left;\">(a and b) 返回 20。<img\r\nsrc=\"image-20210402163513449.png\" alt=\"image-20210402163513449\" /></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">or</td>\r\n<td style=\"text-align: left;\">x or y</td>\r\n<td style=\"text-align: left;\">布尔\"或\" - 如果 x 是 True，它返回 x\r\n的值，否则它返回 y 的计算值。(与“与运算恰好相反”)</td>\r\n<td style=\"text-align: left;\">(a or b) 返回 10。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">not</td>\r\n<td style=\"text-align: left;\">not x</td>\r\n<td style=\"text-align: left;\">布尔\"非\" - 如果 x 为 True，返回 False\r\n。如果 x 为 False，它返回 True。</td>\r\n<td style=\"text-align: left;\">not(a and b) 返回 False</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<blockquote>\r\n<p>补充说明：<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210402163342743.png\"\r\nalt=\"image-20210402163342743\" /><img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210402163401305.png\"\r\nalt=\"image-20210402163401305\" /></p>\r\n</blockquote>\r\n<h4 id=\"成员运算符\">成员运算符：</h4>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 5%\" />\r\n<col style=\"width: 50%\" />\r\n<col style=\"width: 44%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">运算符</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n<th style=\"text-align: left;\">实例</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">in</td>\r\n<td style=\"text-align: left;\">如果在指定的序列中找到值返回\r\nTrue，否则返回 False。</td>\r\n<td style=\"text-align: left;\">x 在 y 序列中 , 如果 x 在 y 序列中返回\r\nTrue。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">not in</td>\r\n<td style=\"text-align: left;\">如果在指定的序列中没有找到值返回\r\nTrue，否则返回 False。</td>\r\n<td style=\"text-align: left;\">x 不在 y 序列中 , 如果 x 不在 y 序列中返回\r\nTrue。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 id=\"身份运算符\">身份运算符：</h4>\r\n<p>（有种 == 和 != 的感觉，但是确实不一样！）</p>\r\n<p><em>is 用于判断两个变量引用对象是否为同一个， ==\r\n用于判断引用变量的值是否相等。</em><img\r\nsrc=\"image-20210402164253225.png\" alt=\"image-20210402164253225\" /></p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 5%\" />\r\n<col style=\"width: 40%\" />\r\n<col style=\"width: 54%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">运算符</th>\r\n<th style=\"text-align: left;\">描述（注：id ()\r\n函数用于获取对象内存地址。）</th>\r\n<th style=\"text-align: left;\">实例</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">is</td>\r\n<td style=\"text-align: left;\">is\r\n是判断两个标识符是不是引用自一个对象</td>\r\n<td style=\"text-align: left;\"><strong>x is y</strong>, 类似\r\n<strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回\r\nTrue，否则返回 False</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">is not</td>\r\n<td style=\"text-align: left;\">is not\r\n是判断两个标识符是不是引用自不同对象</td>\r\n<td style=\"text-align: left;\"><strong>x is not y</strong> ， 类似\r\n<strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果\r\nTrue，否则返回 False。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<figure>\r\n<img\r\nsrc=\"../../../Language%20Learning/Python/PythonBasicGrammar/image-20210402163932528.png\"\r\nalt=\"image-20210402163932528\" />\r\n<figcaption aria-hidden=\"true\">image-20210402163932528</figcaption>\r\n</figure>\r\n<h3 id=\"python运算符优先级\">Python运算符优先级</h3>\r\n<p>以下表格列出了从最高到最低优先级的所有运算符：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 30%\" />\r\n<col style=\"width: 69%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: left;\">运算符</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">**</td>\r\n<td style=\"text-align: left;\">指数 (最高优先级)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">~ + -</td>\r\n<td style=\"text-align: left;\">按位翻转, 一元加号和减号\r\n(最后两个的方法名为 +@ 和 -@)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">* / % //</td>\r\n<td style=\"text-align: left;\">乘，除，求余数和取整除</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">+ -</td>\r\n<td style=\"text-align: left;\">加法减法</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">&gt;&gt; &lt;&lt;</td>\r\n<td style=\"text-align: left;\">右移，左移运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">&amp;</td>\r\n<td style=\"text-align: left;\">位 'AND'</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">^ |</td>\r\n<td style=\"text-align: left;\">位运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">&lt;= &lt; &gt; &gt;=</td>\r\n<td style=\"text-align: left;\">比较运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">== !=</td>\r\n<td style=\"text-align: left;\">等于运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">= %= /= //= -= += *= **=</td>\r\n<td style=\"text-align: left;\">赋值运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">is is not</td>\r\n<td style=\"text-align: left;\">身份运算符</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: left;\">in not in</td>\r\n<td style=\"text-align: left;\">成员运算符</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: left;\">not and or</td>\r\n<td style=\"text-align: left;\">逻辑运算符</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>最后<del>（传教）</del>:我即使是死了，钉在棺材里了，也要在墓里，用这腐朽的声带喊出：“<strong>vocaloid\r\nforever！！！</strong>\"</p>\r\n<p>最后的最后：都看到这里了，不听支歌吗?(❁'◡'❁)</p>\r\n<iframe src=\"//player.bilibili.com/player.html?aid=245852635&amp;bvid=BV1Vv411t7Gb&amp;cid=273023330&amp;page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\">\r\n</iframe>\r\n<h2 id=\"参考资料\">参考资料：</h2>\r\n<ol type=\"1\">\r\n<li><a\r\nhref=\"https://www.runoob.com/python3/python3-tutorial.html\">Python3 教程\r\n| 菜鸟教程 (runoob.com)</a></li>\r\n</ol>\r\n","text":"Python 3 Basic Grammar Training 为什么是python？ 一个最重要的原因——简单，快速，容易上手： 你也可以通过著名的开发语言排行榜TIOBE来直观感受Python有多么热门index | TIOBE - The Software Quality ...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Programming Language Learning","slug":"Programming-Language-Learning","count":3,"path":"api/categories/Programming-Language-Learning.json"}],"tags":[{"name":"Python","slug":"Python","count":3,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#python-3-basic-grammar-training\"><span class=\"toc-text\">Python 3 Basic Grammar\r\nTraining</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AFpython\"><span class=\"toc-text\">为什么是python？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python%E5%AE%98%E7%BD%91welcome-to-python.org\"><span class=\"toc-text\">python官网：Welcome to Python.org</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python%E7%A4%BE%E5%8C%BApypipypi-the-python-package-index\"><span class=\"toc-text\">python社区（PYPI）：PyPI · The Python Package Index</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python%E6%9C%80%E5%A4%A7%E7%9A%84%E4%BC%98%E5%8A%BF%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87%E9%AB%98\"><span class=\"toc-text\">python最大的优势：开发效率高</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python%E6%9C%80%E5%A4%A7%E7%9A%84%E5%8A%A3%E5%8A%BF%E8%BF%90%E8%A1%8C%E6%95%88%E7%8E%87%E4%BD%8E\"><span class=\"toc-text\">python最大的劣势：运行效率低</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">配置你的电脑环境：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\">正式开始！</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\">从命令行开始！</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E5%9C%A8%E5%B0%9D%E8%AF%95%E6%89%93%E5%8D%B0hello-world%E5%90%A7\"><span class=\"toc-text\">现在尝试打印Hello World吧</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E5%88%B0%E5%91%BD%E4%BB%A4%E8%A1%8C\"><span class=\"toc-text\">什么时候需要使用到命令行？</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8pycharm%E4%B8%AD%E7%BB%A7%E7%BB%AD\"><span class=\"toc-text\">在pycharm中继续：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pycharm%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">PyCharm介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">新建项目</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9pycharm%E7%9A%84%E4%B8%80%E4%BA%9B%E5%88%9D%E5%A7%8B%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">对pycharm的一些初始设置：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8console%E9%87%8C%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">在console里执行命令：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">Python变量命名规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%8F%98%E9%87%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">关于变量的基本数据类型：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">标准数据类型：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">关于可变与不可变数据：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">数字：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8python%E4%B8%AD%E5%8A%9F%E8%83%BD%E6%9C%80%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">列表：Python中功能最强大的数据类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%BB%84%E5%B8%B8%E9%87%8F%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">元组：”常量列表“</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%89%B9%E5%8C%96%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">字符串：特化列表</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">字典：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88\"><span class=\"toc-text\">集合：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">关于注释：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">什么是注释？</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python%E4%B8%AD%E7%9A%84%E6%B3%A8%E9%87%8A%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">python中的注释方式：</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E7%BC%A9%E8%BF%9B\"><span class=\"toc-text\">关于缩进：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">条件控制语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">为什么使用条件控制？</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python%E4%B8%AD%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E9%95%BF%E4%BB%80%E4%B9%88%E6%A0%B7\"><span class=\"toc-text\">Python中的条件控制语句长什么样？</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">循环语句：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">while循环：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#for%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">for循环：</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%88%B0%E6%AD%A4%E7%BB%93%E6%9D%9F\"><span class=\"toc-text\">基础语法到此结束！</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%84%E5%BD%951python%E5%8C%85%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">附录1：python包的获取和管理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%84%E5%BD%952python%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">附录2：Python运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E6%89%8B%E5%86%8C\"><span class=\"toc-text\">运算符手册：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9B%B8%E6%AF%94c%E8%AF%AD%E8%A8%80%E5%A4%9A%E4%BA%86%E5%B9%82%E8%BF%90%E7%AE%97%E4%BA%8E%E5%8F%96%E6%95%B4%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">算数运算符：（相比c语言多了幂运算于取整运算）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8Cc%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%90%8C\"><span class=\"toc-text\">比较运算符：（和c语言相同）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">赋值运算：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8Cc%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%90%8C\"><span class=\"toc-text\">位运算符：（和c语言相同）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">成员运算符：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BA%AB%E4%BB%BD%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">身份运算符：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">Python运算符优先级</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料：</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"私有Git仓库搭建","uid":"f859a0dc217f052fa5c43eafb964028a","slug":"Deploy/SetupPrivateGitRepository/Setup Private Git Repository ","date":"2021-10-05T03:05:03.000Z","updated":"2023-03-15T15:41:07.791Z","comments":true,"path":"api/articles/Deploy/SetupPrivateGitRepository/Setup Private Git Repository .json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"云服务器上的私有Git仓库搭建 环境： 阿里云服务器CentOS7.6 部署Git 安装Git： 非CentOS安装Git： 绝大多数Linux发行版安装Git只需要一条命令——参看：Git官方指南 关于CentOS安装： 与绝大部分Linux系统不同，redhat发行的系统通过...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"配置方法","slug":"配置方法","count":4,"path":"api/categories/配置方法.json"}],"tags":[{"name":"Git","slug":"Git","count":2,"path":"api/tags/Git.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"更新你的Git版本","uid":"9ec39e11b1bab83a62560ea633cdc96a","slug":"Softwares/updateGit/updateGit","date":"2021-09-07T15:59:53.000Z","updated":"2023-03-08T02:18:46.527Z","comments":true,"path":"api/articles/Softwares/updateGit/updateGit.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"那么现在，如果我的就电脑上已经安装了一个version为2.31.1的git 问题来了，如何将它更新至最新版本呢， How to upgrade Git on Windows to the latest version - Stack Overflow 如果你迫切想要知道解决方法...","link":"","photos":[],"count_time":{"symbolsCount":389,"symbolsTime":"1 mins."},"categories":[{"name":"配置方法","slug":"配置方法","count":4,"path":"api/categories/配置方法.json"}],"tags":[{"name":"Git","slug":"Git","count":2,"path":"api/tags/Git.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
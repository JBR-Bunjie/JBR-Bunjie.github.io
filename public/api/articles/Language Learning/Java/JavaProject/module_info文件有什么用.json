{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Java/JavaProject/module_info文件有什么用","date":"2023-03-07T16:14:45.500Z","updated":"2021-10-02T16:49:38.000Z","comments":true,"path":"api/articles/Language Learning/Java/JavaProject/module_info文件有什么用.json","keywords":null,"cover":null,"content":"<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">module 本模块的名称&#123;\n\texports 对外暴露的包路径;\n\trequires 需要依赖的其他模块名称;\n&#125;</code></pre>\r\n<h2 id=\"一什么是java-module\">一、什么是Java module？</h2>\r\n<p>与Java\r\n中的package有些类似，module引入了Java代码分组的另一个级别。每个这样的分组（module）都包含许多子package包。通过在一个模块的源代码文件package的根部，添加文件module-info.java来声明该文件夹及其子文件夹为一个模块。该文件语法如下：</p>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">module xxx.yyy&#123;\n \t....\n&#125;</code></pre>\r\n<p>其中xxx.yyy是模块module声明的名称，不是package名称。</p>\r\n<h2 id=\"二模块导出package\">二、模块导出package</h2>\r\n<p>文件module-info.java可以指定该模块下面的哪些package对外可见、可访问。通过一个新的关键字<code>exports</code>来实现该功能。</p>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">module xxx.yyy&#123;\n\texports com.zimug.java9;\n&#125;</code></pre>\r\n<p><code>com.zimug.java9</code>代表一个package。</p>\r\n<blockquote>\r\n<p>需要注意的是：即使给定package包中的类是public的，如果未通过'exports'显式导出其程序包，则它们在模块外部也是不可见的（在编译时和运行时都是如此）。</p>\r\n</blockquote>\r\n<h2 id=\"三模块导入package\">三、模块导入package</h2>\r\n<p>如果另一个模块想要使用被导出的package包中的类，可以用<code>requires</code>关键字在其module-info.java文件中来导入（读取）目标模块的package包。</p>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">module def.stu&#123;\n\trequires xxx.yyy;\n&#125;</code></pre>\r\n<h2 id=\"四java-module的意义\">四、Java module的意义</h2>\r\n<p>在笔者看来，Java 9引入module\r\n模块化管理系统，更多的是从安全性的角度考虑。Java\r\n代码中90%以上的漏洞都是由反射和访问权限控制粒度不足引起的，Java\r\n9的模块化系统正好能解决这个问题。Java 9 module提供另一个级别的Java\r\n代码可见性、可访问性的控制。</p>\r\n<p>比如说：我们都知道当一个class被修饰为private的时候，意味着这个类是内部类。对于顶级类(外部类)来说，只有两种修饰符：public和默认(default)。这也就意味着一个问题，有些public\r\nclass我们本来是打算在jar包定义的范围内使用的，但是结果却是任何引入了这个jar的项目都可以使用这个jar里面所有的public\r\nclass代码。</p>\r\n<p>也就是我们的原意是在有限范围内提供公开访问，结果却是无限制的对外公开。在引入Java\r\n9模块化之后，可以实现<strong>有限范围内的代码public访问权限</strong>，将代码公开区分为：<strong>模块外部有限范围的公开访问</strong>和<strong>模块内部的公开访问</strong>。</p>\r\n<h2 id=\"五实例\">五、实例</h2>\r\n<p>在此示例中，我将创建两个模块“ common.widget”和“\r\ndata.widget”，并将它们放置在单个文件夹“ modules-examples/src”下。文件“\r\nmodule-info.java”将放置在每个模块的根文件夹下。 文件及目录格式如下：</p>\r\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">D:\\modules-example&gt;tree &#x2F;F &#x2F;A\n\\---src\n    +---common.widget\n    |   |   module-info.java\n    |   |   \n    |   +---com\n    |   |   \\---zimug\n    |   |           RendererSupport.java\n    |   |           \n    |   \\---org\n    |       \\---jwidgets\n    |               SimpleRenderer.java\n    |               \n    \\---data.widget\n        |   module-info.java\n        |   \n        \\---com\n            \\---example\n                    Component.java</code></pre>\r\n<h3 id=\"第一个模块\">第一个模块</h3>\r\n<p>本代码文件目录：modules-example/src/common.widget/org/jwidgets/SimpleRenderer.java。这个package在后文中没有被exports。</p>\r\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">package org.jwidgets;\n\npublic class SimpleRenderer &#123;\n  public void renderAsString(Object object) &#123;\n      System.out.println(object);\n  &#125;\n&#125;</code></pre>\r\n<p>本代码文件目录：modules-example/src/common.widget/com/zimug/RendererSupport.java。这个package在后文中被exports了。</p>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.zimug;\n\nimport org.jwidgets.SimpleRenderer;\n\npublic class RendererSupport &#123;\n\tpublic void render(Object object) &#123;\n        new SimpleRenderer().renderAsString(object);\n  \t&#125;\n&#125;</code></pre>\r\n<p>模块导出，本代码文件目录：modules-example/src/common.widget/module-info.java。只导出<code>com.zimug</code>包,没有导出\r\n<code>org.jwidgets</code>包。导出的模块名称为<code>common.widget</code></p>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">module common.widget&#123;\n  \texports com.zimug;\n&#125;</code></pre>\r\n<h3 id=\"第二个模块\">第二个模块</h3>\r\n<p>模块导入<code>common.widget</code>，本代码文件目录：modules-example/src/data.widget/module-info.java</p>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">module data.widget &#123;\n\trequires common.widget;\n&#125;</code></pre>\r\n<p>使用导入模块<code>common.widget</code>中的package:<code>com.zimug</code>。本代码文件路径：\r\nmodules-example/src/data.widget/com/example/Component.java</p>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.example;\n\nimport com.zimug.RendererSupport;\n\npublic class Component &#123;\n  \tpublic static void main(String[] args) &#123;\n     \tRendererSupport support &#x3D; new RendererSupport();\n      \tsupport.render(&quot;Test Object&quot;);\n  \t&#125;\n&#125;</code></pre>\r\n<p>正常编译执行，结果如下：</p>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Test Object</code></pre>\r\n<h3\r\nid=\"尝试使用未被exports的package代码\">尝试使用未被exports的package代码</h3>\r\n<p>由于包“ org.jwidgets”尚未通过“\r\ncommon.widget”模块导出，因此另一个模块“\r\ndata.widget”无法使用该package包下的类<code>SimpleRenderer</code>。我们做一个反例，看看会发生什么：</p>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.example;\nimport org.jwidgets.SimpleRenderer;\n\npublic class Component &#123;\n  \tpublic static void main(String[] args) &#123;\n    \tSimpleRenderer simpleRenderer &#x3D; new SimpleRenderer(); \n    \tsimpleRenderer.renderAsString(&quot;Test Object&quot;);\n  \t&#125;\n&#125;</code></pre>\r\n<p>编译报错信息如下：</p>\r\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">D:\\modules-example\\src\\data.widget\\com\\example\\Component.java:3: error: package org.jwidgets is not visible\nimport org.jwidgets.SimpleRenderer;\n          ^\n  (package org.jwidgets is declared in module common.widget, which does not export it)\n1 error</code></pre>\r\n<p>正如我们所看到的，未被exports的package下面的class即使是public的也不能被访问。</p>\r\n","text":"module 本模块的名称&#123; exports 对外暴露的包路径; requires 需要依赖的其他模块名称; &#125; 一、什么是Java module？ 与Java 中的package有些类似，module引入了Java代码分组的另一个级别。每个这样的分组（mod...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BB%80%E4%B9%88%E6%98%AFjava-module\"><span class=\"toc-text\">一、什么是Java module？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%87%BApackage\"><span class=\"toc-text\">二、模块导出package</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5package\"><span class=\"toc-text\">三、模块导入package</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9Bjava-module%E7%9A%84%E6%84%8F%E4%B9%89\"><span class=\"toc-text\">四、Java module的意义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">五、实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">第一个模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">第二个模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%9D%E8%AF%95%E4%BD%BF%E7%94%A8%E6%9C%AA%E8%A2%ABexports%E7%9A%84package%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">尝试使用未被exports的package代码</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/JavaScript/formdata使用攻略","date":"2023-03-07T16:14:45.510Z","updated":"2022-05-22T08:53:57.000Z","comments":true,"path":"api/articles/Language Learning/JavaScript/formdata使用攻略.json","keywords":null,"cover":null,"text":"FormData 对象的使用 - Web API 接口参考 | MDN (mozilla.org) FormData对象用以将数据编译成键值对，以便用XMLHttpRequest来发送数据。其主要用于发送表单数据，但亦可用于发送带键数据(keyed data)，而独立于表单使用。...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Language Learning/Java/JavaProject/eclipse","date":"2023-03-07T16:14:45.497Z","updated":"2021-10-02T17:00:16.000Z","comments":true,"path":"api/articles/Language Learning/Java/JavaProject/eclipse.json","keywords":null,"cover":null,"text":"Eclipse中有如下一些和运行调试相关的快捷键。 【Ctrl+Shift+B】：在当前行设置断点或取消设置的断点。 【F11】：调试最后一次执行的程序。 【Ctrl+F11】：运行最后一次执行的程序。 【F5】：跟踪到方法中，当程序执行到某方法时，可以按【F5】键跟踪到方法中。...","link":"","photos":[],"count_time":{"symbolsCount":150,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"learningOpenGl Chapter 1.4","uid":"4fc32846a71333fda5c166e6a4c0c980","slug":"Language Learning/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/03.Hello Triangle","date":"2023-03-08T02:23:08.000Z","updated":"2023-10-27T19:52:22.000Z","comments":true,"path":"api/articles/Language Learning/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/03.Hello Triangle.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"绘制三角形\">1.4 绘制三角形</h1>\r\n<blockquote>\r\n<p>在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>3D坐标转为2D坐标的处理过程是由OpenGL的图形渲染管线（Graphics\r\nPipeline，大多译为管线，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。</p>\r\n<p>图形渲染管线可以被划分为两个主要部分：</p>\r\n<ul>\r\n<li>第一部分把你的3D坐标转换为2D坐标；</li>\r\n<li>第二部分是把2D坐标转变为实际的有颜色的像素。</li>\r\n</ul>\r\n<p>这个教程里，我们会简单地讨论一下图形渲染管线，以及如何利用它创建一些漂亮的像素。</p>\r\n</blockquote>\r\n<blockquote>\r\n<hr />\r\n<p>注意：2D坐标和像素也是不同的，2D坐标精确表示一个点在2D空间中的位置，而2D像素是这个点的近似值，2D像素受到你的屏幕/窗口分辨率的限制。</p>\r\n<hr />\r\n</blockquote>\r\n<h2 id=\"浅谈图形渲染管线\">1.4.1 浅谈图形渲染管线</h2>\r\n<ul>\r\n<li>图形渲染管线接受一组3D坐标，然后把它们转变为屏幕上的有色2D像素输出。</li>\r\n<li>图形渲染管线可以分为多个阶段，每个阶段的输出都会用作下个阶段的输入</li>\r\n<li>管线的各个阶段很容易并行执行——这样能充分发挥GPU的效能。不同阶段有着不同的功能，这也意味着每个阶段所执行的程序都不同，这种在GPU的渲染管线上运行的程序即为Shader。</li>\r\n<li>并非是所有Shader都是可以配置的：\r\n<ul>\r\n<li><strong>Vertex Shader</strong></li>\r\n<li>Tessellation Shader</li>\r\n<li>Geometry Shader</li>\r\n<li><strong>Fragment Shader</strong></li>\r\n</ul></li>\r\n</ul>\r\n<h2 id=\"实现基本的管线\">1.4.2 实现基本的管线</h2>\r\n<h3 id=\"在管线处理之前\">1.4.2.0 在管线处理之前</h3>\r\n<blockquote>\r\n<p>标准化设备坐标</p>\r\n</blockquote>\r\n<p>在开始执行依次图形渲染管线之前，我们需要先向程序灌入可用的顶点</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLfloat vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">     <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>这样的顶点数据会被直接发送给我们渲染管线的第一个阶段：Vertex\r\nShader——它会在GPU上创建内存用于储存我们的顶点数据。当然我们还需要还要<strong>配置OpenGL如何解释这些内存</strong>，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。</p>\r\n<h3 id=\"数据类型\">1.4.2.1 数据类型</h3>\r\n<h4 id=\"vbo创建\">1.4.2.1.1 VBO创建</h4>\r\n<p>VBO: Vertex Buffer Objects, VBO, 顶点缓冲对象</p>\r\n<p>我们利用VBO来存储我们发送到GPU的大量顶点。</p>\r\n<ul>\r\n<li>顶点从CPU发送到GPU相对较慢，所以我们应该一次性且大量地将顶点数据从CPU传送到GPU上</li>\r\n<li>VS可以很快速地访问显存中的顶点数据</li>\r\n</ul>\r\n<p>与OpenGL中的其它对象一样，VBO对象也有一个独一无二的ID，所以我们可以使用<code>glGenBuffers</code>函数和一个ID组合一个VBO对象：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint VBO[<span class=\"number\">1</span>]; <span class=\"comment\">//这个缓冲有一个独一无二的ID</span></span><br><span class=\"line\">glGenBuffers(<span class=\"number\">1</span>, VBO);  <span class=\"comment\">//在对应位置上生成缓冲</span></span><br><span class=\"line\">glBindBuffer(GL_ARRAY_BUFFER, VBO[<span class=\"number\">0</span>]); <span class=\"comment\">//给缓冲指定类型</span></span><br><span class=\"line\">glBufferData(GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);<span class=\"comment\">//把已定义的顶点数据复制到VBO中</span></span><br></pre></td></tr></table></figure>\r\n<p>OpenGL有很多缓冲对象类型，<strong>顶点缓冲对象的缓冲类型是GL_ARRAY_BUFFER。</strong>OpenGL允许我们同时绑定多个缓冲，只要它们是不同的<strong>缓冲类型</strong>。</p>\r\n<p>我们可以使用glBindBuffer函数把新创建的缓冲绑定到GL_ARRAY_BUFFER目标(上下文)上。<strong>之后我们使用的任何在GL_ARRAY_BUFFER上的缓冲调用都会用来配置当前绑定的VBO</strong>。</p>\r\n<p>然后我们就可以调用glBufferData函数，它会把之前定义的顶点数据复制到缓冲的内存中：glBufferData是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。</p>\r\n<ul>\r\n<li><p>它的第一个参数是目标缓冲的类型：顶点缓冲对象当前绑定到GL_ARRAY_BUFFER目标上。</p></li>\r\n<li><p>第二个参数指定传输数据的大小(以字节为单位)；用一个简单的<code>sizeof</code>计算出顶点数据大小就行。</p></li>\r\n<li><p>第三个参数是我们希望发送的实际数据。</p></li>\r\n<li><p>第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：</p>\r\n<ul>\r\n<li><p>GL_STATIC_DRAW ：数据不会或几乎不会改变。</p></li>\r\n<li><p>GL_DYNAMIC_DRAW：数据会被改变很多。</p></li>\r\n<li><p>GL_STREAM_DRAW ：数据每次绘制时都会改变。</p></li>\r\n</ul>\r\n<p>三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是GL_STATIC_DRAW。如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是GL_DYNAMIC_DRAW或GL_STREAM_DRAW，这样就能确保显卡把数据放在能够高速写入的内存部分。</p></li>\r\n</ul>\r\n<h4 id=\"vbo调用\">1.4.2.1.2 VBO调用</h4>\r\n<p>顶点数据以VBO形式加载完成时，它是这样子的：</p>\r\n<figure>\r\n<img\r\nsrc=\"https://learnopengl-cn.readthedocs.io/zh/latest/img/01/04/vertex_attribute_pointer.png\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<ul>\r\n<li>位置数据被储存为32-bit（4字节）浮点值: 每个分量如\r\npoint1的x坐标：float类型，4Byte = 32bit;</li>\r\n<li>每个位置包含3个这样的值: 1个point共3个坐标值</li>\r\n<li>在这3个值之间没有空隙（或其他值）。这几个值在数组中紧密排列:\r\n见数组，我们写下point1的坐标后立即跟上的是point2而不是point1的其他如颜色等信息</li>\r\n<li>数据中第一个值在缓冲开始的位置: 也就是没有偏移量。</li>\r\n</ul>\r\n<p>根据以上信息：我们便可以着手解析VBO数据以供OpenGL使用了</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(GLfloat), (GLvoid*)<span class=\"number\">0</span>);</span><br><span class=\"line\">glEnableVertexAttribArray(<span class=\"number\">0</span>); <span class=\"comment\">// 启用这个顶点属性</span></span><br></pre></td></tr></table></figure>\r\n<p>glVertexAttribPointer函数的参数非常多，所以我会逐一介绍它们：</p>\r\n<ul>\r\n<li>第一个参数指定我们<strong>要配置的顶点属性</strong>，这关系着我们将要在具体哪里(哪个顶点属性上)存储这份数据。这关系到我们在VS里调用该数据时所用的数据位置即layout位置：<code>layout(location = 0)</code>即代表该数据的顶点属性的位置值为<code>0</code>。</li>\r\n<li>第二个参数指定<strong>顶点属性的大小</strong>。顶点属性是一个<code>vec3</code>，它由3个值组成，所以大小是3。</li>\r\n<li>第三个参数指定<strong>数据类型</strong>，这里是GL_FLOAT(GLSL中<code>vec*</code>都是由浮点数值组成的)。</li>\r\n<li>下个参数定义我们<strong>是否希望数据被标准化</strong>(Normalize)。如果我们设置为GL_TRUE，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为GL_FALSE。</li>\r\n<li>第五个参数叫做<strong>步长</strong>(Stride)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个<code>GLfloat</code>之后，我们把步长设置为<code>3 * sieof(GLfloat)</code>。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）。一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔，我们在后面会看到更多的例子(译注:\r\n这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节)。</li>\r\n<li>最后一个参数的类型是<code>GLvoid*</code>，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的<strong>偏移量</strong>(Offset)。由于位置数据在数组的开头，所以这里是0。</li>\r\n</ul>\r\n<blockquote>\r\n<p>现在我们已经定义了OpenGL该如何解释顶点数据，并启用了对应的顶点属性（顶点属性默认是禁用的）。</p>\r\n<p>自此，所有东西都已经设置好了：我们使用一个顶点缓冲对象将顶点数据初始化至缓冲中，建立了一个顶点和一个片段着色器，并告诉了OpenGL如何把顶点数据链接到顶点着色器的顶点属性上。在OpenGL中绘制一个物体，代码会像是这样：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"comment\">// 0. 复制顶点数组到缓冲中供OpenGL使用</span></span><br><span class=\"line\">&gt;glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">&gt;glBufferData(GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\">&gt;<span class=\"comment\">// 1. 设置顶点属性指针</span></span><br><span class=\"line\">&gt;glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(GLfloat), (GLvoid*)<span class=\"number\">0</span>);</span><br><span class=\"line\">&gt;glEnableVertexAttribArray(<span class=\"number\">0</span>);</span><br><span class=\"line\">&gt;<span class=\"comment\">// 2. 当我们渲染一个物体时要使用着色器程序</span></span><br><span class=\"line\">&gt;glUseProgram(shaderProgram);</span><br><span class=\"line\">&gt;<span class=\"comment\">// 3. 绘制物体</span></span><br><span class=\"line\">&gt;someOpenGLFunctionThatDrawsOurTriangle();</span><br></pre></td></tr></table></figure>\r\n<p>每当我们绘制一个物体的时候都必须重复这一过程。这看起来可能不多，但是如果有超过5个顶点属性，上百个不同物体呢（这其实并不罕见）。绑定正确的缓冲对象，为每个物体配置所有顶点属性很快就变成一件麻烦事。有没有一些方法可以使我们把所有这些状态配置储存在一个对象中，并且可以通过绑定这个对象来恢复状态呢？</p>\r\n</blockquote>\r\n<h4 id=\"vao\">1.4.2.1.3 VAO</h4>\r\n<blockquote>\r\n<p>顶点数组对象(Vertex Array Object,\r\nVAO)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中</p>\r\n<blockquote>\r\n<p>OpenGL的核心模式<strong>要求</strong>我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。</p>\r\n</blockquote>\r\n</blockquote>\r\n<p>一个<code>顶点数组对象</code>会储存以下这些内容：</p>\r\n<ul>\r\n<li><code>glEnableVertexAttribArray</code>和<code>glDisableVertexAttribArray</code>的调用。</li>\r\n<li>通过<code>glVertexAttribPointer</code>调用设置的顶点属性配置。</li>\r\n<li>通过<code>glVertexAttribPointer</code>调用进行的顶点缓冲对象与顶点属性链接。</li>\r\n</ul>\r\n<figure>\r\n<img\r\nsrc=\"https://learnopengl-cn.readthedocs.io/zh/latest/img/01/04/vertex_array_objects.png\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>创建一个VAO和创建一个VBO很类似：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint VAO; <span class=\"comment\">// ID</span></span><br><span class=\"line\">glGenVertexArrays(<span class=\"number\">1</span>, &amp;VAO); <span class=\"comment\">// 对象  </span></span><br></pre></td></tr></table></figure>\r\n<p>要想使用VAO，要做的只是使用glBindVertexArray绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 绑定VAO</span></span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">    <span class=\"comment\">// 2. 把顶点数组复制到缓冲中供OpenGL使用</span></span><br><span class=\"line\">    glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    glBufferData(GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 设置顶点属性指针</span></span><br><span class=\"line\">    glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(GLfloat), (GLvoid*)<span class=\"number\">0</span>);</span><br><span class=\"line\">    glEnableVertexAttribArray(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//4. 解绑VAO</span></span><br><span class=\"line\">glBindVertexArray(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ..:: 绘制代（游戏循环中） :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 5. 绘制物体</span></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">someOpenGLFunctionThatDrawsOurTriangle();</span><br><span class=\"line\">glBindVertexArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"ebo\">1.4.2.1.4 EBO</h4>\r\n<p>在渲染顶点这一话题上我们还有最有一个需要讨论的东西——索引缓冲对象(Element\r\nBuffer Object，EBO，也叫Index Buffer\r\nObject，IBO)。要解释索引缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLfloat vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">    <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>   <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>可以看到，有几个顶点叠加了。我们指定了<code>右下角</code>和<code>左上角</code>两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销。当我们有包括上千个三角形的模型之后这个问题会更糟糕，这会产生一大堆浪费。更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了。如果OpenGL提供这个功能就好了，对吧？</p>\r\n<p>很幸运，索引缓冲对象的工作方式正是这样的。和顶点缓冲对象一样，EBO也是一个缓冲，它专门储存索引，OpenGL调用这些顶点的索引来决定该绘制哪个顶点。所谓的索引绘制(Indexed\r\nDrawing)正是我们问题的解决方案。首先，我们先要定义（独一无二的）顶点，和绘制出矩形所需的索引：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLfloat vertices[] = &#123;</span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>,   <span class=\"comment\">// 右上角</span></span><br><span class=\"line\">    <span class=\"number\">0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>,  <span class=\"comment\">// 右下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">-0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// 左下角</span></span><br><span class=\"line\">    <span class=\"number\">-0.5f</span>, <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>   <span class=\"comment\">// 左上角</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">GLuint indices[] = &#123; <span class=\"comment\">// 注意索引从0开始! </span></span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"comment\">// 第一个三角形</span></span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>  <span class=\"comment\">// 第二个三角形</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<p>你可以看到，当时用索引的时候，我们只定义了4个顶点，而不是6个。下一步我们需要创建索引缓冲对象：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// almost as same as VBO; notice third and forth lines that use different_缓冲目标: GL_ELEMENT_ARRAY_BUFFER</span></span><br><span class=\"line\">GLuint EBO; </span><br><span class=\"line\">glGenBuffers(<span class=\"number\">1</span>, &amp;EBO);</span><br><span class=\"line\">glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\">glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(indices), indices, GL_STATIC_DRAW); </span><br></pre></td></tr></table></figure>\r\n<p>最后，用glDrawElements函数绘图：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>第一个参数指定了我们绘制的模式，这个和glDrawArrays的一样。</li>\r\n<li>第二个参数是我们打算绘制顶点的个数，这里填6，也就是说我们一共需要绘制6个顶点。</li>\r\n<li>第三个参数是索引的类型，这里是GL_UNSIGNED_INT。</li>\r\n<li>最后一个参数里我们可以指定EBO中的偏移量（或者传递一个索引数组，但是这是当你不在使用索引缓冲对象的时候），但是我们会在这里填写0。</li>\r\n</ul>\r\n<p>glDrawElements函数从当前绑定到GL_ELEMENT_ARRAY_BUFFER目标的EBO中获取索引。这意味着我们必须在每次要用索引渲染一个物体时绑定相应的EBO，这还是有点麻烦。不过顶点数组对象同样可以保存索引缓冲对象的绑定状态。VAO绑定时正在绑定的索引缓冲对象会被保存为VAO的元素缓冲对象。绑定VAO的同时也会自动绑定EBO。</p>\r\n<figure>\r\n<img\r\nsrc=\"https://learnopengl-cn.readthedocs.io/zh/latest/img/01/04/vertex_array_objects_ebo.png\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>最后的初始化和绘制代码现在看起来像这样：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ..:: 初始化代码 :: ..</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 绑定顶点数组对象</span></span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">    <span class=\"comment\">// 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用</span></span><br><span class=\"line\">    glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    glBufferData(GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用</span></span><br><span class=\"line\">    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class=\"line\">    glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(indices), indices, GL_STATIC_DRAW);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 设定顶点属性指针</span></span><br><span class=\"line\">    glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(GLfloat), (GLvoid*)<span class=\"number\">0</span>);</span><br><span class=\"line\">    glEnableVertexAttribArray(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 4. 解绑VAO（不是EBO！）</span></span><br><span class=\"line\">glBindVertexArray(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">[...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ..:: 绘制代码（游戏循环中） :: ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">glDrawElements(GL_TRIANGLES, <span class=\"number\">6</span>, GL_UNSIGNED_INT, <span class=\"number\">0</span>);</span><br><span class=\"line\">glBindVertexArray(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"vertex-shader\">1.4.2.2 Vertex Shader</h3>\r\n<h4 id=\"编写vs\">1.4.2.2.1 编写VS</h4>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core //版本信息声明，每个着色器都起始于一个版本声明</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">layout</span> (<span class=\"keyword\">location</span> = <span class=\"number\">0</span>) <span class=\"keyword\">in</span> <span class=\"type\">vec3</span> position; </span><br><span class=\"line\"><span class=\"comment\">//这里有两个要点</span></span><br><span class=\"line\"><span class=\"comment\">// 1* layout 关键字：指定了输入变量所在的“位置”</span></span><br><span class=\"line\"><span class=\"comment\">// 2* in 关键字 ：这声明了这是一个从app阶段传入的属性</span></span><br><span class=\"line\">\t<span class=\"comment\">//我们应在顶点着色器中声明所有的输入顶点属性(Input Vertex Attribute)，这里我们先只使用position</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()&#123; <span class=\"comment\">// shader程序主函数</span></span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = <span class=\"type\">vec4</span>(position.x, position.y, position.z, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//将3维的position转为了一个4维向量以用于矩阵变换</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 我们并没有利用out关键字定义gl_Position就可以直接使用的原因是：这是一个predefined variable</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"编译vs\">1.4.2.2.2 编译VS</h4>\r\n<p>为了在我们的opengl程序中使用这个VS，我们需要在main.c内读取这个VS并且编译执行它：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint vertexShader; <span class=\"comment\">//仍然优先创建ID</span></span><br><span class=\"line\">vertexShader = glCreateShader(GL_VERTEX_SHADER); <span class=\"comment\">//在ID上创建一个Shader“对象”。由于我们正在创建一个顶点着色器，传递的参数是GL_VERTEX_SHADER。</span></span><br><span class=\"line\">glShaderSource(vertexShader, <span class=\"number\">1</span>, &amp;vertexShaderSource, <span class=\"literal\">NULL</span>); <span class=\"comment\">// “转移代码”，“转存”</span></span><br><span class=\"line\"><span class=\"comment\">// 保存着色器源码的着色器对象作为第一个参数；Specifies the handle of the shader object whose source code is to be replaced</span></span><br><span class=\"line\"><span class=\"comment\">// 第二参数指定了传递的源码字符串数量，这里只有一个</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数是顶点着色器真正的源码; Specifies an array of pointers to strings containing the source code to be loaded into the shader</span></span><br><span class=\"line\"><span class=\"comment\">// 第四个参数我们先设置为NULL</span></span><br><span class=\"line\"></span><br><span class=\"line\">glCompileShader(vertexShader); <span class=\"comment\">// 最终编译</span></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"检验编译成果\">1.4.2.2.3 检验编译成果</h4>\r\n<blockquote>\r\n<p>你可能会希望检测在调用glCompileShader后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修复它们。检测编译时错误可以通过以下代码来实现：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;GLint success;</span><br><span class=\"line\">&gt;GLchar infoLog[<span class=\"number\">512</span>];</span><br><span class=\"line\">&gt;glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br></pre></td></tr></table></figure>\r\n<p>首先我们定义一个整型变量来表示是否成功编译，还定义了一个储存错误消息（如果有的话）的容器。然后我们用glGetShaderiv检查是否编译成功。如果编译失败，我们会用glGetShaderInfoLog获取错误消息，然后打印它。</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">if</span>(!success)</span><br><span class=\"line\">&gt;&#123;</span><br><span class=\"line\">   glGetShaderInfoLog(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">   <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&gt;&#125;</span><br></pre></td></tr></table></figure>\r\n<p>如果编译的时候没有检测到任何错误，顶点着色器就被编译成功了。</p>\r\n</blockquote>\r\n<h3 id=\"fragment-shader\">1.4.2.3 Fragment Shader</h3>\r\n<blockquote>\r\n<p>片段着色器(Fragment\r\nShader)是第二个也是最后一个我们打算创建的用于渲染三角形的着色器。片段着色器全是关于计算你的像素最后的颜色输出。为了让事情更简单，我们的片段着色器将会一直输出橘黄色。</p>\r\n<blockquote>\r\n<p>在计算机图形中颜色被表示为有4个元素的数组：红色、绿色、蓝色和alpha(透明度)分量，通常缩写为RGBA。当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间。比如说我们设置红为1.0f，绿为1.0f，我们会得到两个颜色的混合色，即黄色。这三种颜色分量的不同调配可以生成超过1600万种不同的颜色！</p>\r\n</blockquote>\r\n</blockquote>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#version 330 core // same as VS</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span> <span class=\"type\">vec4</span> color; <span class=\"comment\">// out，表示输出用向量；vec4，vec4类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    color = <span class=\"type\">vec4</span>(<span class=\"number\">1.0</span>f, <span class=\"number\">0.5</span>f, <span class=\"number\">0.2</span>f, <span class=\"number\">1.0</span>f); <span class=\"comment\">// 写死颜色；RGBA</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>编译片段着色器的过程与顶点着色器类似，只不过我们使用GL_FRAGMENT_SHADER常量作为着色器类型：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint fragmentShader; <span class=\"comment\">// ID</span></span><br><span class=\"line\">fragmentShader = glCreateShader(GL_FRAGMENT_SHADER); <span class=\"comment\">// 对象</span></span><br><span class=\"line\">glShaderSource(fragmentShader, <span class=\"number\">1</span>, &amp;fragmentShaderSource, null); <span class=\"comment\">// 转存</span></span><br><span class=\"line\">glCompileShader(fragmentShader); <span class=\"comment\">// 编译</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"着色器对象与连接\">1.4.2.4 着色器对象与连接</h3>\r\n<p>着色器程序对象(Shader Program\r\nObject)是多个着色器合并之后并最终链接完成的版本。<strong>如果要使用刚才编译的着色器我们必须把它们链接为一个着色器程序对象</strong>，然后在渲染对象的时候激活这个着色器程序。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。</p>\r\n<p>当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。</p>\r\n<p>创建一个程序对象流程如下：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLuint shaderProgram; <span class=\"comment\">// ID</span></span><br><span class=\"line\">shaderProgram = glCreateProgram(); <span class=\"comment\">// 对象</span></span><br><span class=\"line\">glAttachShader(shaderProgram, vertexShader); <span class=\"comment\">// 装载VS；</span></span><br><span class=\"line\">glAttachShader(shaderProgram, fragmentShader); <span class=\"comment\">// 装载FS</span></span><br><span class=\"line\">glLinkProgram(shaderProgram); <span class=\"comment\">// 使用glLinkProgram来连接这个program对象，这会对已装载的shader做一些处理并解锁一些功能</span></span><br></pre></td></tr></table></figure>\r\n<p>此时程序对象创建完毕，我们可以调用glUseProgram函数，用刚创建的程序对象作为它的参数，以激活这个程序对象：</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glUseProgram(shaderProgram);</span><br></pre></td></tr></table></figure>\r\n<p>在glUseProgram函数调用之后，每个着色器调用和渲染调用都会使用这个程序对象（也就是之前写的着色器)了。</p>\r\n<blockquote>\r\n<p>对了，在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;glDeleteShader(vertexShader);</span><br><span class=\"line\">&gt;glDeleteShader(fragmentShader);</span><br></pre></td></tr></table></figure>\r\n现在，我们已经把输入顶点数据发送给了GPU，并指示了GPU如何在顶点和片段着色器中处理它。就快要完成了，但还没结束，OpenGL还不知道它该如何解释内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉OpenGL怎么做。</p>\r\n</blockquote>\r\n<h3 id=\"完成绘制\">1.4.2.5 完成绘制</h3>\r\n<p>要想绘制我们想要的物体，OpenGL给我们提供了glDrawArrays函数，它使用当前激活的着色器，之前定义的顶点属性配置，和VBO的顶点数据（通过VAO间接绑定）来绘制图元。</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glUseProgram(shaderProgram);</span><br><span class=\"line\">glBindVertexArray(VAO);</span><br><span class=\"line\">glDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">glBindVertexArray(<span class=\"number\">0</span>);  </span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>glDrawArrays函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递GL_TRIANGLES给它。</li>\r\n<li>第二个参数指定了顶点数组的起始索引，我们这里填<code>0</code>。</li>\r\n<li>最后一个参数指定我们打算绘制多少个顶点，这里是3（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。</li>\r\n</ul>\r\n<p>完整的程序源码可以在<a\r\nhref=\"http://learnopengl.com/code_viewer.php?code=getting-started/hellotriangle\">这里</a>找到。</p>\r\n","text":"1.4 绘制三角形 在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。 3D坐标转为2D坐标的处理过程是由OpenGL的图形渲染管线（Graphics Pipeline，大多译为管线...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Opengl","slug":"Opengl","count":16,"path":"api/categories/Opengl.json"},{"name":"Shader","slug":"Opengl/Shader","count":16,"path":"api/categories/Opengl/Shader.json"}],"tags":[{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"},{"name":"Opengl","slug":"Opengl","count":16,"path":"api/tags/Opengl.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%98%E5%88%B6%E4%B8%89%E8%A7%92%E5%BD%A2\"><span class=\"toc-text\">1.4 绘制三角形</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%85%E8%B0%88%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF\"><span class=\"toc-text\">1.4.1 浅谈图形渲染管线</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%AE%A1%E7%BA%BF\"><span class=\"toc-text\">1.4.2 实现基本的管线</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E7%AE%A1%E7%BA%BF%E5%A4%84%E7%90%86%E4%B9%8B%E5%89%8D\"><span class=\"toc-text\">1.4.2.0 在管线处理之前</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.4.2.1 数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#vbo%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">1.4.2.1.1 VBO创建</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#vbo%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">1.4.2.1.2 VBO调用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#vao\"><span class=\"toc-text\">1.4.2.1.3 VAO</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ebo\"><span class=\"toc-text\">1.4.2.1.4 EBO</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vertex-shader\"><span class=\"toc-text\">1.4.2.2 Vertex Shader</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99vs\"><span class=\"toc-text\">1.4.2.2.1 编写VS</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91vs\"><span class=\"toc-text\">1.4.2.2.2 编译VS</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A3%80%E9%AA%8C%E7%BC%96%E8%AF%91%E6%88%90%E6%9E%9C\"><span class=\"toc-text\">1.4.2.2.3 检验编译成果</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fragment-shader\"><span class=\"toc-text\">1.4.2.3 Fragment Shader</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9D%80%E8%89%B2%E5%99%A8%E5%AF%B9%E8%B1%A1%E4%B8%8E%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">1.4.2.4 着色器对象与连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%88%90%E7%BB%98%E5%88%B6\"><span class=\"toc-text\">1.4.2.5 完成绘制</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"learningOpenGl Chapter 1.5","uid":"eb947faf7dc84fa49cb79bdd22ec183a","slug":"Language Learning/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/04Shaders","date":"2023-03-08T02:24:08.000Z","updated":"2023-10-27T19:52:26.000Z","comments":true,"path":"api/articles/Language Learning/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/04Shaders.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"1.5 Shaders 着色器(Shader)是运行在GPU上的小程序。这些小程序为图形渲染管线的某个特定部分而运行。 从基本意义上来说，着色器只是一种把输入转化为输出的程序。着色器也是一种非常独立的程序，因为它们之间不能相互通信；它们之间唯一的沟通只有通过输入和输出。 1.5....","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"Opengl","slug":"Opengl","count":16,"path":"api/categories/Opengl.json"},{"name":"Shader","slug":"Opengl/Shader","count":16,"path":"api/categories/Opengl/Shader.json"}],"tags":[{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"},{"name":"Opengl","slug":"Opengl","count":16,"path":"api/tags/Opengl.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Regex","uid":"fa3249ce619228ad8d74e7a819afc946","slug":"Algorithm/String Processing/Regex","date":"2023-03-08T02:22:54.000Z","updated":"2023-10-27T19:55:50.000Z","comments":true,"path":"api/articles/Algorithm/String Processing/Regex.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Regex 正则运用 当你使用多个捕获组时，请务必小心NULL！这是某个捕获组未能捕获任何内容的结果！ 验证：是否有bug 在线正则表达式测试 中文 (oschina.net) 在线正则验证 英文 regex101: build, test, and debug regex 在线...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Algorithm","slug":"Algorithm","count":31,"path":"api/tags/Algorithm.json"},{"name":"String Processing","slug":"String-Processing","count":5,"path":"api/tags/String-Processing.json"},{"name":"Regex","slug":"Regex","count":1,"path":"api/tags/Regex.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
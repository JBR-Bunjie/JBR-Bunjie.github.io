{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_1","date":"2023-03-07T16:14:46.261Z","updated":"2022-08-22T11:20:38.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_1.json","keywords":null,"cover":null,"content":"<h2 id=\"官网原教程\">官网原教程：</h2>\r\n<h3 id=\"part-1\">PART 1：</h3>\r\n<p><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/intro/tutorial01/\">Writing\r\nyour first Django app, part 1 | Django documentation | Django\r\n(djangoproject.com)</a></p>\r\n<h4 id=\"概述\">概述：</h4>\r\n<ul>\r\n<li>概述教程内容</li>\r\n<li>使用<code>startproject</code>命令创建的项目的基本内容介绍</li>\r\n<li>通过<code>mange.py</code>启动刚刚创建的新项目</li>\r\n<li>通过<code>startapp</code>命令新建应用，并对<code>project</code>与<code>app</code>作区分</li>\r\n<li>介绍url与view</li>\r\n</ul>\r\n<h4 id=\"复述\">复述：</h4>\r\n<h5 id=\"quick-the-installation-and-version-of-django\">1. quick the\r\ninstallation and version of django</h5>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">python -m django --version</code></pre>\r\n<p>If Django is installed, you should see the version of your\r\ninstallation. If it isn’t, you’ll get an error telling “No module named\r\ndjango”.</p>\r\n<h5 id=\"creating-a-project\">2. creating a project</h5>\r\n<p>Use the command line to auto-generate some code that establishes a\r\nDjango <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/glossary/#term-project\">project</a>\r\n– a collection of settings for an instance of Django, including database\r\nconfiguration, Django-specific options and application-specific settings\r\nto finish some initial setup.</p>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">django-admin startproject &lt;mysite&gt;</code></pre>\r\n<p>This will create a <code>mysite</code> directory in your current\r\ndirectory.</p>\r\n<blockquote>\r\n<p>And the folder created by startproject looks like:</p>\r\n<blockquote>\r\n<p>mysite/ manage.py mysite/ <strong>init</strong>.py settings.py\r\nurls.py asgi.py wsgi.py</p>\r\n</blockquote>\r\n<p>These files are:</p>\r\n<ul>\r\n<li>The outer <code>mysite/</code> root directory is a container for\r\nyour project. Its name doesn’t matter to Django; you can rename it to\r\nanything you like.</li>\r\n<li><code>manage.py</code>: A command-line utility that lets you\r\ninteract with this Django project in various ways. You can read all the\r\ndetails about <code>manage.py</code> in <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/django-admin/\">django-admin\r\nand manage.py</a>.</li>\r\n<li>The inner <code>mysite/</code> directory is the actual Python\r\npackage for your project. Its name is the Python package name you’ll\r\nneed to use to import anything inside it (e.g.\r\n<code>mysite.urls</code>).</li>\r\n<li><code>mysite/__init__.py</code>: An empty file that tells Python\r\nthat this directory should be considered a Python package. If you’re a\r\nPython beginner, read <a\r\nhref=\"https://docs.python.org/3/tutorial/modules.html#tut-packages\">more\r\nabout packages</a> in the official Python docs.</li>\r\n<li><code>mysite/settings.py</code>: Settings/configuration for this\r\nDjango project. <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/topics/settings/\">Django\r\nsettings</a> will tell you all about how settings work.</li>\r\n<li><code>mysite/urls.py</code>: The URL declarations for this Django\r\nproject; a “table of contents” of your Django-powered site. You can read\r\nmore about URLs in <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/topics/http/urls/\">URL\r\ndispatcher</a>.</li>\r\n<li><code>mysite/asgi.py</code>: An entry-point for ASGI-compatible web\r\nservers to serve your project. See <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/howto/deployment/asgi/\">How\r\nto deploy with ASGI</a> for more details.</li>\r\n<li><code>mysite/wsgi.py</code>: An entry-point for WSGI-compatible web\r\nservers to serve your project. See <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/howto/deployment/wsgi/\">How\r\nto deploy with WSGI</a> for more details.</li>\r\n</ul>\r\n</blockquote>\r\n<h5 id=\"start-your-project\">3. start your project</h5>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">python manage.py runserver\n# you can pass server&#39;s port and so on as a command-line argument behind &#39;runserver&#39;</code></pre>\r\n<p>You'll see the output which includes:</p>\r\n<blockquote>\r\n<p>... Starting development server at http://127.0.0.1:8000/ Quit the\r\nserver with CONTROL-C.</p>\r\n</blockquote>\r\n<h5 id=\"create-new-app\">4. create new app</h5>\r\n<blockquote>\r\n<p>What’s the difference between a project and an app? An app is a web\r\napplication that does something – e.g., a blog system, a database of\r\npublic records or a small poll app. A project is a collection of\r\nconfiguration and apps for a particular website. A project can contain\r\nmultiple apps. An app can be in multiple projects.</p>\r\n</blockquote>\r\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">py manage.py startapp polls</code></pre>\r\n<p>That will create a new directory like:</p>\r\n<blockquote>\r\n<p>polls/ <strong>init</strong>.py admin.py apps.py migrations/\r\n<strong>init</strong>.py models.py tests.py views.py</p>\r\n</blockquote>\r\n<p>This directory structure will house the poll application.</p>\r\n<h5 id=\"write-your-own-view-and-set-it-url\">5. write your own view and\r\nset it url</h5>\r\n<p>Open the file <code>polls/views.py</code> and put the following\r\nPython code in it:</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(&quot;Hello, world. You&#39;re at the polls index.&quot;)</code></pre>\r\n<p>This is the simplest view possible in Django. To call the view, we\r\nneed to map it to a URL - and for this we need a URLconf.</p>\r\n<p>To create a URLconf in the polls directory, create a file called\r\n<code>urls.py</code>. Your app directory should now look like:</p>\r\n<blockquote>\r\n<p>polls/ <strong>init</strong>.py admin.py apps.py migrations/\r\n<strong>init</strong>.py models.py tests.py urls.py views.py</p>\r\n</blockquote>\r\n<p>In the <code>polls/urls.py</code> file include the following\r\ncode:</p>\r\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">from django.urls import path\nfrom . import views\n\nurlpatterns &#x3D; [path(&#39;&#39;, views.index, name&#x3D;&#39;index&#39;),]</code></pre>\r\n<p>The next step is to <strong>point the root URLconf at the\r\n<code>polls.urls</code> module.</strong> In <code>mysite/urls.py</code>,\r\nadd an import for <code>django.urls.include</code> and insert an <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/urls/#django.urls.include\"><code>include()</code></a>\r\nin the <code>urlpatterns</code> list, so you have:</p>\r\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns &#x3D; [\n    path(&#39;polls&#x2F;&#39;, include(&#39;polls.urls&#39;)),\n    path(&#39;admin&#x2F;&#39;, admin.site.urls),\n]</code></pre>\r\n<p>The <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/urls/#django.urls.include\"><code>include()</code></a>\r\nfunction allows referencing other URLconfs. Whenever Django encounters\r\n<a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/urls/#django.urls.include\"><code>include()</code></a>,\r\nit chops off whatever part of the URL matched up to that point and sends\r\nthe remaining string to the included URLconf for further processing. See\r\nmore about -&gt; <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/urls/#django.urls.include\"><code>include()</code></a></p>\r\n<p>You should always use <code>include()</code> when you include other\r\nURL patterns. <code>admin.site.urls</code> is the only exception to\r\nthis.</p>\r\n<p>Now restart your server and go to http://localhost:8000/polls/ in\r\nyour browser, and you should see the text “<em>Hello, world. You’re at\r\nthe polls index.</em>”, which you defined in the <code>index</code>\r\nview.</p>\r\n<p>See more about <code>path()</code></p>\r\n<blockquote>\r\n<p><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/urls/#django.urls.path\"><code>path()</code></a>\r\nargument: <code>route</code><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/intro/tutorial01/#path-argument-route\">¶</a></p>\r\n<p><code>route</code> is a string that contains a URL pattern. When\r\nprocessing a request, Django starts at the first pattern in\r\n<code>urlpatterns</code> and makes its way down the list, comparing the\r\nrequested URL against each pattern until it finds one that matches.</p>\r\n<p>Patterns don’t search GET and POST parameters, or the domain name.\r\nFor example, in a request to\r\n<code>https://www.example.com/myapp/</code>, the URLconf will look for\r\n<code>myapp/</code>. In a request to\r\n<code>https://www.example.com/myapp/?page=3</code>, the URLconf will\r\nalso look for <code>myapp/</code>.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/urls/#django.urls.path\"><code>path()</code></a>\r\nargument: <code>view</code><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/intro/tutorial01/#path-argument-view\">¶</a></p>\r\n<p>When Django finds a matching pattern, it calls the specified view\r\nfunction with an <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/request-response/#django.http.HttpRequest\"><code>HttpRequest</code></a>\r\nobject as the first argument and any “captured” values from the route as\r\nkeyword arguments. We’ll give an example of this in a bit.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/urls/#django.urls.path\"><code>path()</code></a>\r\nargument: <code>kwargs</code><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/intro/tutorial01/#path-argument-kwargs\">¶</a></p>\r\n<p>Arbitrary keyword arguments can be passed in a dictionary to the\r\ntarget view. We aren’t going to use this feature of Django in the\r\ntutorial.</p>\r\n</blockquote>\r\n<blockquote>\r\n<p><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/ref/urls/#django.urls.path\"><code>path()</code></a>\r\nargument: <code>name</code><a\r\nhref=\"https://docs.djangoproject.com/en/4.0/intro/tutorial01/#path-argument-name\">¶</a></p>\r\n<p>Naming your URL lets you refer to it unambiguously from elsewhere in\r\nDjango, especially from within templates. This powerful feature allows\r\nyou to make global changes to the URL patterns of your project while\r\nonly touching a single file.</p>\r\n<p>When you’re comfortable with the basic request and response flow,\r\nread <a\r\nhref=\"https://docs.djangoproject.com/en/4.0/intro/tutorial02/\">part 2 of\r\nthis tutorial</a> to start working with the database.</p>\r\n</blockquote>\r\n<ul>\r\n<li></li>\r\n</ul>\r\n","text":"官网原教程： PART 1： Writing your first Django app, part 1 | Django documentation | Django (djangoproject.com) 概述： 概述教程内容 使用startproject命令创建的项目的基本...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%98%E7%BD%91%E5%8E%9F%E6%95%99%E7%A8%8B\"><span class=\"toc-text\">官网原教程：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#part-1\"><span class=\"toc-text\">PART 1：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E8%BF%B0\"><span class=\"toc-text\">复述：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#quick-the-installation-and-version-of-django\"><span class=\"toc-text\">1. quick the\r\ninstallation and version of django</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#creating-a-project\"><span class=\"toc-text\">2. creating a project</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#start-your-project\"><span class=\"toc-text\">3. start your project</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#create-new-app\"><span class=\"toc-text\">4. create new app</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#write-your-own-view-and-set-it-url\"><span class=\"toc-text\">5. write your own view and\r\nset it url</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_2","date":"2023-03-07T16:14:46.264Z","updated":"2022-08-24T08:17:47.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_2.json","keywords":null,"cover":null,"text":"官网原教程： PART 2： Writing your first Django app, part 2 | Django documentation | Django (djangoproject.com) 概述： 建立数据库：基于sqlite数据库，介绍project mod...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Back End/django/使用当前目录里venv中的python","date":"2023-03-07T16:14:46.254Z","updated":"2022-09-08T09:07:40.000Z","comments":true,"path":"api/articles/Web Dev/Back End/django/使用当前目录里venv中的python.json","keywords":null,"cover":null,"text":"Python 虚拟环境 Python 之所以强大，除了语言本身的特性外，更重要的是拥有无所不及的第三方库。 依赖问题？ 包 python 包库 包库或者叫软件源是 Python 第三方软件的库的集合，或者市场，可以发布、下载和管理软件包，其中 pypi (Python Packa...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
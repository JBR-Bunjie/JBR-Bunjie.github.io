{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Front End/VUE/父子组件交互","date":"2023-03-07T16:14:46.450Z","updated":"2021-11-04T14:34:53.000Z","comments":true,"path":"api/articles/Web Dev/Front End/VUE/父子组件交互.json","keywords":null,"cover":[],"content":"<h1 id=\"vue父子组件之间的传值\">vue父子组件之间的传值</h1>\r\n<blockquote>\r\n<p>本章主要说下父子组件的传值。 Github：<a\r\nhref=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FEwall1106%2Fmall\">https://github.com/Ewall1106/mall</a></p>\r\n</blockquote>\r\n<h2 id=\"父组件向子组件传值\">父组件向子组件传值</h2>\r\n<ul>\r\n<li>第一个就是要明白怎么在父页面中向子组件中传值？你可以给子组件传入一个静态的值：</li>\r\n</ul>\r\n<figure>\r\n<img\r\nsrc=\"https://upload-images.jianshu.io/upload_images/2891127-60092a004be0dbba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/602\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>图片来自vue官网</p>\r\n<ul>\r\n<li>但我们一般都是需要传动态的值，所以需要<code>v-bind</code>绑定，当然，你传的值可以是数字、对象、数组等等，<a\r\nhref=\"https://links.jianshu.com/go?to=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fcomponents-props.html\">参见vue官网</a>。</li>\r\n</ul>\r\n<figure>\r\n<img\r\nsrc=\"https://upload-images.jianshu.io/upload_images/2891127-aaf51402e79ff193.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/599\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>图片来自vue官网</p>\r\n<ul>\r\n<li>第二个就是要知道如何在子组件中接受父页面传过来的值，有几点需要了解：\r\n<ul>\r\n<li>组件实例的作用域是孤立的。</li>\r\n<li>子组件要显式的用<code>props</code>选项声明它预期的数据，如：</li>\r\n</ul></li>\r\n</ul>\r\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 某个子组件中：\nexport default &#123;\n  props: &#123;\n    title: &#123;\n      type: String,\n      default: &#39;hello world&#39;\n    &#125;\n  &#125;\n&#125;</code></pre>\r\n<blockquote>\r\n<p>以上就是<code>单向数据流</code>的一般表现了： 父级 prop\r\n的更新会向下流动到子组件中，但是反过来则不行。</p>\r\n</blockquote>\r\n<h2 id=\"子组件向父组件传值\">子组件向父组件传值</h2>\r\n<p>那么我们延伸一下，子组件怎么向父组件传值？</p>\r\n<h3 id=\"基本概念\">1. 基本概念</h3>\r\n<ul>\r\n<li>在vue中，父子组件的关系可以总结为<code>prop</code>向下传递，<code>事件</code>向上传递。父组件通过<code>prop</code>给子组件下发数据，子组件通过<code>事件</code>给父组件发送信息。</li>\r\n</ul>\r\n<figure>\r\n<img\r\nsrc=\"https://upload-images.jianshu.io/upload_images/2891127-591b88f49fb05f19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/246\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>props down , events up</p>\r\n<ul>\r\n<li>每个Vue实例都实现了事件接口：使用<code>$on(evntName)</code>监听事件；使用<code>$emit(eventName,optionalPayload)</code>触发事件。另外，父组件可以在使用子组件的地方直接用<code>v-on</code>来监听子组件触发的事件。</li>\r\n</ul>\r\n<h3 id=\"举例说明\">2. 举例说明</h3>\r\n<ul>\r\n<li>父组件在组件上定义了一个自定义事件<code>childFn</code>，事件名为<code>parentFn</code>用于接受子组件传过来的<code>message</code>值。</li>\r\n</ul>\r\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 父组件 --&gt;\n&lt;template&gt;\n    &lt;div class&#x3D;&quot;test&quot;&gt;\n      &lt;test-com @childFn&#x3D;&quot;parentFn&quot;&gt;&lt;&#x2F;test-com&gt;\n      &lt;br&#x2F;&gt; \n      子组件传来的值 : &#123;&#123;message&#125;&#125;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n    &#x2F;&#x2F; ...\n    data() &#123;\n        return &#123;\n             message: &#39;&#39;\n        &#125;\n    &#125;,\n    methods: &#123;\n       parentFn(payload) &#123;\n        this.message &#x3D; payload;\n      &#125;\n    &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\r\n<ul>\r\n<li>子组件是一个<code>buttton</code>按钮，并为其添加了一个<code>click</code>事件，当点击的时候使用<code>$emit()</code>触发事件，把<code>message</code>传给父组件。</li>\r\n</ul>\r\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 子组件 --&gt;\n&lt;template&gt; \n&lt;div class&#x3D;&quot;testCom&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot; &#x2F;&gt;\n    &lt;button @click&#x3D;&quot;click&quot;&gt;Send&lt;&#x2F;button&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\nexport default &#123;\n    &#x2F;&#x2F; ...\n    data() &#123;\n        return &#123;\n          &#x2F;&#x2F; 默认\n          message: &#39;我是来自子组件的消息&#39;\n        &#125;\n    &#125;,\n    methods: &#123;\n      click() &#123;\n            this.$emit(&#39;childFn&#39;, this.message);\n        &#125;\n    &#125;    \n&#125;\n&lt;&#x2F;script&gt;</code></pre>\r\n<ul>\r\n<li><p>这样我们就基本实现了子组件向父组件发送值了:</p>\r\n<figure>\r\n<img\r\nsrc=\"https://upload-images.jianshu.io/upload_images/2891127-c5db663c172ea735.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/388\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>点击send发送</p></li>\r\n</ul>\r\n<figure>\r\n<img\r\nsrc=\"https://upload-images.jianshu.io/upload_images/2891127-129823130a431ace.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/391\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>父组件接收组件传过来的值</p>\r\n<h2 id=\"小结\">小结</h2>\r\n<ul>\r\n<li>通过<code>\"props down , events up\"</code>我们就简单的实现了父子组件之间的双向传值，这是很基本的知识点，其它还有$invoke等等方法，大家可以去官网好好看看。</li>\r\n<li>关于通信和状态管理就必须了解<code>vuex</code>了，后面我们在项目中当涉及了再好好讲。</li>\r\n</ul>\r\n<h1 id=\"vue中-关于emit的用法\">vue中 关于$emit的用法</h1>\r\n<p>1、父组件可以使用 props 把数据传给子组件。 2、子组件可以使用 $emit\r\n触发父组件的自定义事件。</p>\r\n<p>vm.$emit( event, arg ) //触发当前实例上的事件</p>\r\n<p>vm.$on( event, fn );//监听event事件后运行 fn；</p>\r\n<p>图一：点击之前例如：子组件：</p>\r\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;train-city&quot;&gt;\n    &lt;h3&gt;父组件传给子组件的toCity:&#123;&#123;sendData&#125;&#125;&lt;&#x2F;h3&gt; \n    &lt;br&#x2F;&gt;&lt;button @click&#x3D;&#39;select(&#96;大连&#96;)&#39;&gt;点击此处将‘大连’发射给父组件&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\n  export default &#123;\n    name:&#39;trainCity&#39;,\n    props:[&#39;sendData&#39;], &#x2F;&#x2F; 用来接收父组件传给子组件的数据\n    methods:&#123;\n      select(val) &#123;\n        let data &#x3D; &#123;\n          cityname: val\n        &#125;;\n        this.$emit(&#39;showCityName&#39;,data);&#x2F;&#x2F;select事件触发后，自动触发showCityName事件\n      &#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\r\n<p>父组件：</p>\r\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n    &lt;div&gt;\n        &lt;div&gt;父组件的toCity&#123;&#123;toCity&#125;&#125;&lt;&#x2F;div&gt;\n        &lt;train-city @showCityName&#x3D;&quot;updateCity&quot; :sendData&#x3D;&quot;toCity&quot;&gt;&lt;&#x2F;train-city&gt;\n    &lt;&#x2F;div&gt;\n&lt;template&gt;\n&lt;script&gt;\n  import TrainCity from &quot;.&#x2F;train-city&quot;;\n  export default &#123;\n    name:&#39;index&#39;,\n    components: &#123;TrainCity&#125;,\n    data () &#123;\n      return &#123;\n        toCity:&quot;北京&quot;\n      &#125;\n    &#125;,\n    methods:&#123;\n      updateCity(data)&#123;&#x2F;&#x2F;触发子组件城市选择-选择城市的事件\n        this.toCity &#x3D; data.cityname;&#x2F;&#x2F;改变了父组件的值\n        console.log(&#39;toCity:&#39;+this.toCity)\n      &#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\r\n<p>图一：点击之前的数据的数据</p>\r\n<figure>\r\n<img src=\"https://img-blog.csdn.net/20180530102959789\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>图二：点击之后的数据</p>\r\n<figure>\r\n<img src=\"https://img-blog.csdn.net/20180530103028525\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n","text":"vue父子组件之间的传值 本章主要说下父子组件的传值。 Github：https://github.com/Ewall1106/mall 父组件向子组件传值 第一个就是要明白怎么在父页面中向子组件中传值？你可以给子组件传入一个静态的值： img 图片来自vue官网 但我们一般都是...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">vue父子组件之间的传值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%88%B6%E7%BB%84%E4%BB%B6%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">父组件向子组件传值</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%91%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC\"><span class=\"toc-text\">子组件向父组件传值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">2. 举例说明</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue%E4%B8%AD-%E5%85%B3%E4%BA%8Eemit%E7%9A%84%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">vue中 关于$emit的用法</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Front End/VUE/生命周期","date":"2023-03-07T16:14:46.453Z","updated":"2021-10-30T12:55:15.000Z","comments":true,"path":"api/articles/Web Dev/Front End/VUE/生命周期.json","keywords":null,"cover":null,"text":" img img beforeCreate( 创建前 ) 在实例初始化之后，数据观测和事件配置之前被调用，此时组件的选项对象还未创建，el 和 data 并未初始化，因此无法访问methods， data， computed等上的方法和数据。 created ( 创建后 ） 实例...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"Web Dev/Front End/VUE/Vue入门","date":"2023-03-07T16:14:46.448Z","updated":"2021-09-22T06:44:19.000Z","comments":true,"path":"api/articles/Web Dev/Front End/VUE/Vue入门.json","keywords":null,"cover":null,"text":" ","link":"","photos":[],"count_time":{"symbolsCount":2,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
{"title":"Setup A Flask Application","uid":"a9c12b026b9f323fd06103f80893c3ae","slug":"Dev/Back End/flask/setup_your_flask","date":"2022-04-23T04:23:23.000Z","updated":"2023-10-27T19:10:26.000Z","comments":true,"path":"api/articles/Dev/Back End/flask/setup_your_flask.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"setup-a-flask-application\">Setup A Flask Application</h1>\r\n<h3 id=\"一个简单但完整的示例\">一个简单但完整的示例</h3>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, jsonify</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/api&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_microservice</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;<span class=\"string\">&#x27;Hello&#x27;</span>: <span class=\"string\">&#x27;World!&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\r\n<p>此时，当我们访问<code>/api</code>时，应用会返回一个 JSON 映射。</p>\r\n<ol type=\"1\">\r\n<li>变量__name__</li>\r\n</ol>\r\n<blockquote>\r\n<p>变量__name__是这个应用软件包的名称，而当运行一个单独的 Python\r\n模块时，变量__name__会赋值为__main__</p>\r\n<p>Flask\r\n会使用这个变量实例化一个新的日志日志记录器(logger)，并在磁盘上定位这个模块所在文件的路径。</p>\r\n<p>Flask\r\n将使用该文件的目录作为助手程序的根目录(例如与应用程序相关的配置文件)，并根据此目录确定静态文件目录(static)与模板目录(templates)的默认存放位置</p>\r\n</blockquote>\r\n<p>在 shell 中运行当前模块时，Flask 会运行其中的内置 Web\r\n服务器，并在默认在 5000 端口监听传入的请求</p>\r\n<ol start=\"2\" type=\"1\">\r\n<li>访问/api</li>\r\n</ol>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@BUNJIESP8:/mnt/c/Users/m1518/Project/flask# curl -v http://127.0.0.1:5000/api</span><br><span class=\"line\">*   Trying 127.0.0.1:5000...</span><br><span class=\"line\">* Connected to 127.0.0.1 (127.0.0.1) port 5000 (#0)</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">GET /api HTTP/1.1</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">Host: 127.0.0.1:5000</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">User-Agent: curl/7.81.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">Accept: */*</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">* Mark bundle as not supporting multiuse</span></span><br><span class=\"line\">&lt; HTTP/1.1 200 OK</span><br><span class=\"line\">&lt; Server: Werkzeug/2.2.2 Python/3.10.4</span><br><span class=\"line\">&lt; Date: Sat, 10 Sep 2022 11:43:02 GMT</span><br><span class=\"line\">&lt; Content-Type: application/json</span><br><span class=\"line\">&lt; Content-Length: 19</span><br><span class=\"line\">&lt; Connection: close</span><br><span class=\"line\">&lt;</span><br><span class=\"line\">&#123;&quot;Hello&quot;:&quot;World!&quot;&#125;</span><br><span class=\"line\">* Closing connection 0</span><br></pre></td></tr></table></figure>\r\n<p>可以发现，我们得到了一个合法的 JSON 响应和正确的消息头。</p>\r\n<ol start=\"3\" type=\"1\">\r\n<li>jsonity 函数</li>\r\n</ol>\r\n<p>该函数会将 Python 字典类型转换为合法的 JSON 响应，并在添加适当的\r\nContent-Type 消息头后，将映射信息存储到响应体中</p>\r\n<h3 id=\"request-对象\">request 对象</h3>\r\n<p>与大多数 Web 框架不同，flask 不需要显示地将 request\r\n对象传递到代码中——它隐式地提供了一个全局的 request\r\n变量，并用该全局的变量来指向当前的 request 对象。Flask 把传入的 HTTP\r\n请求解析为 WSGI 环境字典，并利用它来创建这个对象</p>\r\n<p>这样：当服务器的响应不依赖请求的内容时，就没必要处理它。视图只需要确保返回了客户端应该获取的内容，并确保内容能够被\r\nFlask 序列化即可</p>\r\n<h3 id=\"了解底层到底发生了什么\">了解底层到底发生了什么</h3>\r\n<p>增加 print 方法，了解 curl 访问具体过程</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, jsonify, request</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/api&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_microservice</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(request)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(request.environ)</span><br><span class=\"line\">    response = jsonify(&#123;<span class=\"string\">&#x27;Hello&#x27;</span>: <span class=\"string\">&#x27;World!&#x27;</span>&#125;)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(response)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(response.data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(app.url_map)</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\r\n<p>有：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) root@BUNJIESP8:/mnt/c/Users/m1518/Project/flask/chapter2# python app.py</span><br><span class=\"line\">Map([&lt;Rule &#x27;/static/&lt;filename&gt;&#x27; (OPTIONS, GET, HEAD) -&gt; static&gt;,</span><br><span class=\"line\"> &lt;Rule &#x27;/api&#x27; (OPTIONS, GET, HEAD) -&gt; my_microservice&gt;])</span><br><span class=\"line\"> * Serving Flask app &#x27;app&#x27;</span><br><span class=\"line\"> * Debug mode: off</span><br><span class=\"line\">WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.</span><br><span class=\"line\"> * Running on http://127.0.0.1:5000</span><br><span class=\"line\">Press CTRL+C to quit</span><br><span class=\"line\">&lt;Request &#x27;http://127.0.0.1:5000/api&#x27; [GET]&gt;</span><br><span class=\"line\">&#123;&#x27;wsgi.version&#x27;: (1, 0), &#x27;wsgi.url_scheme&#x27;: &#x27;http&#x27;, &#x27;wsgi.input&#x27;: &lt;_io.BufferedReader name=4&gt;, &#x27;wsgi.errors&#x27;: &lt;_io.TextIOWrapper name=&#x27;&lt;stderr&gt;&#x27; mode=&#x27;w&#x27; encoding=&#x27;utf-8&#x27;&gt;, &#x27;wsgi.multithread&#x27;: True, &#x27;wsgi.multiprocess&#x27;: False, &#x27;wsgi.run_once&#x27;: False, &#x27;werkzeug.socket&#x27;: &lt;socket.socket fd=4, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=(&#x27;127.0.0.1&#x27;, 5000), raddr=(&#x27;127.0.0.1&#x27;, 54614)&gt;, &#x27;SERVER_SOFTWARE&#x27;: &#x27;Werkzeug/2.2.2&#x27;, &#x27;REQUEST_METHOD&#x27;: &#x27;GET&#x27;, &#x27;SCRIPT_NAME&#x27;: &#x27;&#x27;, &#x27;PATH_INFO&#x27;: &#x27;/api&#x27;, &#x27;QUERY_STRING&#x27;: &#x27;&#x27;, &#x27;REQUEST_URI&#x27;: &#x27;/api&#x27;, &#x27;RAW_URI&#x27;: &#x27;/api&#x27;, &#x27;REMOTE_ADDR&#x27;: &#x27;127.0.0.1&#x27;, &#x27;REMOTE_PORT&#x27;: 54614, &#x27;SERVER_NAME&#x27;: &#x27;127.0.0.1&#x27;, &#x27;SERVER_PORT&#x27;: &#x27;5000&#x27;, &#x27;SERVER_PROTOCOL&#x27;: &#x27;HTTP/1.1&#x27;, &#x27;HTTP_HOST&#x27;: &#x27;127.0.0.1:5000&#x27;, &#x27;HTTP_USER_AGENT&#x27;: &#x27;curl/7.81.0&#x27;, &#x27;HTTP_ACCEPT&#x27;: &#x27;*/*&#x27;, &#x27;werkzeug.request&#x27;: &lt;Request &#x27;http://127.0.0.1:5000/api&#x27; [GET]&gt;&#125;</span><br><span class=\"line\">&lt;Response 19 bytes [200 OK]&gt;</span><br><span class=\"line\">b&#x27;&#123;&quot;Hello&quot;:&quot;World!&quot;&#125;\\n&#x27;</span><br><span class=\"line\">127.0.0.1 - - [10/Sep/2022 22:55:47] &quot;GET /api HTTP/1.1&quot; 200 -</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"路由匹配\">路由匹配</h4>\r\n<p>路由匹配发生在 app.url_map 中，这是 Werzeug 中 Map\r\n类的一个实例。<code>Map([&lt;Rule '/static/&lt;filename&gt;' (OPTIONS, GET, HEAD) -&gt; static&gt;, &lt;Rule '/api' (OPTIONS, GET, HEAD) -&gt; my_microservice&gt;])</code></p>\r\n<p>该类使用正则表达式来判定被<code>@app.route</code>装饰的函数时候与传入的请求匹配，路由匹配只会姜茶\r\nroute\r\n调用里的路径参数来判断函数时候匹配客户端的请求，默认情况下，声明式路由只支持<code>GET</code>,\r\n<code>OPTIONS</code>, <code>HEAD</code>方法的调用，如果使用了不支持的\r\nHTTP 方法，则会出现 405Method Not Allowed 响应，并在 Allow\r\n响应头中返回其所支持的 HTTP 方法列表（正常访问不会出现 Allow\r\n响应头）</p>\r\n<p>当需要支持指定 HTTP 请求方式时，我们需要给装饰器增加额外的参数：</p>\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/api&#x27;</span>, method=[<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;DELETE&#x27;</span>, <span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br></pre></td></tr></table></figure>\r\n<p>不过，</p>\r\n<h5 id=\"变量与转换器\">变量与转换器</h5>\r\n<p>路由系统支持变量如：<code>/person/&lt;person_id&gt;</code></p>\r\n<h4 id=\"请求\">请求</h4>\r\n<h4 id=\"响应\">响应</h4>\r\n<h2 id=\"flask-的内置特性\">Flask 的内置特性</h2>\r\n<h2 id=\"微服务骨架\">微服务骨架</h2>\r\n<p>拓展：</p>\r\n<p>这个 <strong>name</strong> 变量可能取什么值？</p>\r\n<p>当你直接执行一段脚本的时候，这段脚本的 <strong>name</strong>变量等于\r\n<strong>'main'</strong>，当这段脚本被导入其他程序的时候，<strong>name</strong>\r\n变量等于脚本本身的名字。</p>\r\n<p>这个 <strong>name</strong> 拿来做什么的？</p>\r\n<p>作为 Python\r\n的内置变量，<strong>name</strong>变量（前后各有两个下划线）还是挺特殊的。它是每个\r\nPython 模块必备的属性，但它的值取决于你是如何执行这段代码的。</p>\r\n<p>在许多情况下，你的代码不可能全部都放在同一个文件里，或者你在这个文件里写的函数，在其他地方也可以用到。为了更高效地重用这些代码，你需要在\r\nPython 程序中导入来自其他文件的代码。</p>\r\n<p>所以，在<strong>name</strong>\r\n变量的帮助下，你可以判断出这时代码是被直接运行，还是被导入到其他程序中去了。</p>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/57309137\">Python 的\r\n<strong>name</strong> 变量，到底是个什么东西？ - 知乎\r\n(zhihu.com)</a></p>\r\n<h2 id=\"部署\">部署</h2>\r\n<ul>\r\n<li><a\r\nhref=\"https://dormousehole.readthedocs.io/en/latest/deploying/index.html\">部署方式</a>\r\n。</li>\r\n<li><a\r\nhref=\"https://www.rosehosting.com/blog/how-to-deploy-flask-application-with-nginx-and-gunicorn-on-ubuntu-20-04/\">How\r\nto Deploy Flask Application with Nginx and Gunicorn on Ubuntu 20.04 -\r\nRoseHosting</a></li>\r\n</ul>\r\n","text":"Setup A Flask Application 一个简单但完整的示例 123456789101112from flask import Flask, jsonifyapp = Flask(__name__)@app.route(&#x27;/api&#x27;)def my_...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"Python","slug":"Python","count":9,"path":"api/categories/Python.json"}],"tags":[{"name":"Python","slug":"Python","count":10,"path":"api/tags/Python.json"},{"name":"flask","slug":"flask","count":1,"path":"api/tags/flask.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#setup-a-flask-application\"><span class=\"toc-text\">Setup A Flask Application</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E4%BD%86%E5%AE%8C%E6%95%B4%E7%9A%84%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">一个简单但完整的示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#request-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">request 对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%86%E8%A7%A3%E5%BA%95%E5%B1%82%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">了解底层到底发生了什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">路由匹配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BD%AC%E6%8D%A2%E5%99%A8\"><span class=\"toc-text\">变量与转换器</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">请求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">响应</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#flask-%E7%9A%84%E5%86%85%E7%BD%AE%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">Flask 的内置特性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AA%A8%E6%9E%B6\"><span class=\"toc-text\">微服务骨架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">部署</span></a></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Download SVG Element As A Pic","uid":"b0ae4fbedb34b36c8057186eece784bd","slug":"Dev/Front End/download svg pic","date":"2022-05-12T19:23:23.000Z","updated":"2023-10-27T19:06:23.000Z","comments":true,"path":"api/articles/Dev/Front End/download svg pic.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Download SVG Element As A Pic THE DEFFERENCE BETWEEN SVG ELEMENT(CODE) AND SVG FILE reference: How can I save svg code as a .svg image? - St...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"Javascripts","slug":"Javascripts","count":2,"path":"api/categories/Javascripts.json"}],"tags":[{"name":"Javascripts","slug":"Javascripts","count":3,"path":"api/tags/Javascripts.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Python装饰器","uid":"7c3d41f90666b48d6b76a1cfaa71f837","slug":"Language Learning/Python/装饰器","date":"2022-02-13T04:07:03.000Z","updated":"2023-10-27T20:01:50.000Z","comments":true,"path":"api/articles/Language Learning/Python/装饰器.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Python装饰器 1、闭包 要想了解装饰器，首先要了解一个概念，闭包。 什么是闭包，一句话说就是，在函数中再嵌套一个函数，并且引用外部函数的变量，这就是一个闭包了。光说没有概念，直接上一个例子。 12345678def outer(x): def inner(y): retur...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Python","slug":"Python","count":9,"path":"api/categories/Python.json"},{"name":"Language Learning","slug":"Python/Language-Learning","count":8,"path":"api/categories/Python/Language-Learning.json"}],"tags":[{"name":"Language Learning","slug":"Language-Learning","count":16,"path":"api/tags/Language-Learning.json"},{"name":"Python","slug":"Python","count":10,"path":"api/tags/Python.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
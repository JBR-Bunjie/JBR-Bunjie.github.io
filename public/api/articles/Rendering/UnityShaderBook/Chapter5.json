{"title":"Unity Shader入门精要笔记 - Chapter5","uid":"a9ca2d76681f03e5325e9c1e5a8365f0","slug":"Rendering/UnityShaderBook/Chapter5","date":"2023-03-08T13:27:04.000Z","updated":"2023-10-27T19:33:59.000Z","comments":true,"path":"api/articles/Rendering/UnityShaderBook/Chapter5.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"unity-shader入门精要笔记---chapter5\">Unity Shader入门精要笔记 -\r\nChapter5</h1>\r\n<h2 id=\"对texcoord的解释\">对texcoord的解释</h2>\r\n<h3 id=\"什么是texcoord\">什么是TEXCOORD</h3>\r\n<p><a\r\nhref=\"https://forum.unity.com/threads/what-are-the-texcoords-and-how-can-i-get-them-in-a-computeshader.573385/\">What\r\nare the TEXCOORDs and how can I get them in a ComputeShader? - Unity\r\nForum</a></p>\r\n<h3\r\nid=\"明明没有输入texcoord怎么会有初始值\">明明没有输入texcoord，怎么会有初始值？</h3>\r\n<p>texcoord和position等一样，是保存于模型顶点(应该不是VAO，但是可用VAO来理解)上的一类数据</p>\r\n<p><a href=\"https://www.lfzxb.top/unity-shader-base-texcoordn/\">Unity\r\nShader基础篇：浅谈TEXCOORDn | 烟雨迷离半世殇的成长之路\r\n(lfzxb.top)</a></p>\r\n<blockquote>\r\n<ul>\r\n<li>简单来说texcoord就是存在顶点里的一组数据，我们可以通过这组数据在渲染的时候进行贴图采样，比如我们常用的<code>第一套uv作为基础纹理，通常基础纹理我们可以根据需求进行一些区域的uv重用（比如左右脸贴图一样，可以映射到统一贴图区域），第二套uv经常用于光照贴图，光照贴图要求是uv不可以重复，所以通常不能用第一套uv，第三套uv用于更加奇特的需求，以此类推...</code></li>\r\n<li>texcoord应该是更加标准的名称，不过因为这个坐标系里面用uvw作为三个轴名称，所以美术那边普遍称作uv</li>\r\n</ul>\r\n</blockquote>\r\n<h2 id=\"在unity-shader中编写时有以下报错\">在Unity\r\nShader中，编写时有以下报错：</h2>\r\n<h3 id=\"定义struct报错\">1. 定义Struct报错</h3>\r\n<p>Struct定义好后的结尾应该加上分号:</p>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct a2v &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;; <span class=\"comment\">// ; 必须加上</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"定义properties过程中出错\">2. 定义Properties过程中出错</h3>\r\n<p>定义Properties时的初始值中，不应该加上\"f\":</p>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Color(&quot;Color Tint&quot;, Color) = (<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>)  <span class=\"comment\">// √</span></span><br><span class=\"line\">_Color(&quot;Color Tint&quot;, Color) = (<span class=\"number\">1.0</span>f, <span class=\"number\">1.0</span>f, <span class=\"number\">1.0</span>f, <span class=\"number\">1.0</span>f)  <span class=\"comment\">// ×</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"unity-shaderlab-function\">Unity ShaderLab Function</h2>\r\n<p>我们在可视化纹理坐标的小数部分时，用到了如下语句：</p>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o.color = frac(v.texcoord);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">any</span>(saturate(v.texcoord)) - v.texcoord) &#123;</span><br><span class=\"line\">    o.color.b = <span class=\"number\">0.5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><a href=\"https://zhuanlan.zhihu.com/p/366143272\">2.3 HLSL常用函数介绍\r\n- 知乎 (zhihu.com)</a></p>\r\n<h3 id=\"frac函数\">frac函数</h3>\r\n<p>这是HLSL的内置函数，其作用是去取x的小数部分</p>\r\n<p>逻辑为：</p>\r\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> frac(<span class=\"type\">float</span> v) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v - <span class=\"built_in\">floor</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>可以参考：<a\r\nhref=\"https://zhuanlan.zhihu.com/p/158462351\">Shader实验室：frac函数 -\r\n知乎 (zhihu.com)</a></p>\r\n<blockquote>\r\n<p>它在坐标轴上的效果如下：</p>\r\n<figure>\r\n<img\r\nsrc=\"https://pic2.zhimg.com/80/v2-bfd711ced58f0334e8303ff820593c1d_720w.webp\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>**周期性：而如果我们将对x*2，则可以将该图像的周期翻倍**</p>\r\n</blockquote>\r\n<h4 id=\"length\">length</h4>\r\n<p>这是上述参考内容中引用的其他HLSL函数，其功能为：</p>\r\n<p><a\r\nhref=\"https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-length\">length\r\n- Win32 apps | Microsoft Learn</a></p>\r\n<blockquote>\r\n<p>Returns the length of the specified floating-point vector.</p>\r\n</blockquote>\r\n<p>示例：</p>\r\n<p><a\r\nhref=\"https://stackoverflow.com/questions/48370604/glsl-length-function\">shader\r\n- GLSL - length function - Stack Overflow</a></p>\r\n<h3 id=\"saturate函数\">saturate函数</h3>\r\n<p><a\r\nhref=\"https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-saturate?redirectedfrom=MSDN\">saturate\r\n(HLSL reference) - Win32 apps | Microsoft Learn</a></p>\r\n<p>saturate（x） 返回将x钳制到[0,1]范围之间的值；</p>\r\n<h3 id=\"any函数\">any函数</h3>\r\n<p><a\r\nhref=\"https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-any\">any\r\n- Win32 apps | Microsoft Learn</a></p>\r\n<blockquote>\r\n<p>Determines if any components of the specified value are non-zero.</p>\r\n<p>Return <strong>true</strong> if any components of the <em>x</em>\r\nparameter are non-zero; otherwise, <strong>false</strong>.</p>\r\n</blockquote>\r\n","text":"Unity Shader入门精要笔记 - Chapter5 对texcoord的解释 什么是TEXCOORD What are the TEXCOORDs and how can I get them in a ComputeShader? - Unity Forum 明明没有输...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Unity","slug":"Unity","count":17,"path":"api/categories/Unity.json"}],"tags":[{"name":"Unity","slug":"Unity","count":17,"path":"api/tags/Unity.json"},{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#unity-shader%E5%85%A5%E9%97%A8%E7%B2%BE%E8%A6%81%E7%AC%94%E8%AE%B0---chapter5\"><span class=\"toc-text\">Unity Shader入门精要笔记 -\r\nChapter5</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9texcoord%E7%9A%84%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">对texcoord的解释</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFtexcoord\"><span class=\"toc-text\">什么是TEXCOORD</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%8E%E6%98%8E%E6%B2%A1%E6%9C%89%E8%BE%93%E5%85%A5texcoord%E6%80%8E%E4%B9%88%E4%BC%9A%E6%9C%89%E5%88%9D%E5%A7%8B%E5%80%BC\"><span class=\"toc-text\">明明没有输入texcoord，怎么会有初始值？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8unity-shader%E4%B8%AD%E7%BC%96%E5%86%99%E6%97%B6%E6%9C%89%E4%BB%A5%E4%B8%8B%E6%8A%A5%E9%94%99\"><span class=\"toc-text\">在Unity\r\nShader中，编写时有以下报错：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89struct%E6%8A%A5%E9%94%99\"><span class=\"toc-text\">1. 定义Struct报错</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89properties%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E9%94%99\"><span class=\"toc-text\">2. 定义Properties过程中出错</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#unity-shaderlab-function\"><span class=\"toc-text\">Unity ShaderLab Function</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#frac%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">frac函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#length\"><span class=\"toc-text\">length</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#saturate%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">saturate函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#any%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">any函数</span></a></li></ol></li></ol></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Unity Shader入门精要笔记 - Chapter0. 在一切开始之前！","uid":"3db882bf7fb70ea2d6999c8bcc582857","slug":"Rendering/UnityShaderBook/Chapter0","date":"2023-03-08T13:27:04.000Z","updated":"2023-10-27T20:22:33.000Z","comments":true,"path":"api/articles/Rendering/UnityShaderBook/Chapter0.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Chapter 0: 开始 - 准备工作 在开始阅读本书之前可以提前准备的资料： 彩图：《Unity Shader入门精要》随书彩色插图 (candycat1992.github.io) 实例工程仓库：candycat1992/Unity_Shaders_Book: 书籍《Uni...","link":"","photos":[],"count_time":{"symbolsCount":344,"symbolsTime":"1 mins."},"categories":[{"name":"Unity","slug":"Unity","count":17,"path":"api/categories/Unity.json"}],"tags":[{"name":"Unity","slug":"Unity","count":17,"path":"api/tags/Unity.json"},{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"高级光照","uid":"8f44e2f23c42716c29e08931dd66d3e9","slug":"Language Learning/Opengl/learnopengl-cn.readthedocs.io/05Advanced Lighting/General","date":"2023-03-08T02:34:08.000Z","updated":"2023-10-27T19:57:07.000Z","comments":true,"path":"api/articles/Language Learning/Opengl/learnopengl-cn.readthedocs.io/05Advanced Lighting/General.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Shadow Mapping 基本的 Shadow 算法思想： 阴影就是光所不及的地方，也就是说，我只要能获取到哪些地方是光照不到的，那么就能推断出阴影位置。 而一般来说，物体间产生的遮挡关系就是阴影的直接来源，而这个遮挡关系，正好可以用深度关系推测出来。 也就是说，我们以各个光...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"Opengl","slug":"Opengl","count":16,"path":"api/categories/Opengl.json"},{"name":"Shader","slug":"Opengl/Shader","count":16,"path":"api/categories/Opengl/Shader.json"}],"tags":[{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"},{"name":"Opengl","slug":"Opengl","count":16,"path":"api/tags/Opengl.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
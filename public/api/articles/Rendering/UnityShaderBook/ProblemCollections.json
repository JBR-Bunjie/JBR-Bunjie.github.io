{"title":"Shader Book Github Issue Collections","uid":"41644c3248ea1210fc5e02792aa4d4c9","slug":"Rendering/UnityShaderBook/ProblemCollections","date":"2023-03-08T13:29:45.000Z","updated":"2023-10-27T19:29:31.000Z","comments":true,"path":"api/articles/Rendering/UnityShaderBook/ProblemCollections.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","content":"<h1 id=\"shader-book-github-issue-collections\">Shader Book Github Issue\r\nCollections</h1>\r\n<p><a\r\nhref=\"https://github.com/candycat1992/Unity_Shaders_Book/issues/198\">saturate\r\n和 max · Issue #198 · candycat1992/Unity_Shaders_Book\r\n(github.com)</a></p>\r\n<p>为什么后来从 sature 改到了 max？</p>\r\n<blockquote>\r\n<blockquote>\r\n<p>Q: 在基础光照那一章中，我看到计算 worldNormal 与 worldLightDir\r\n的时候用的是 saturate，而后面章节使用的是\r\nmax（0，…），这两个方法在计算结果上会产生什么差异吗？</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>A: 对于那些值范围在-1 到 1\r\n的变量，两个方法在计算结果上没有区别。不过，saturate 在 Unity\r\n里通常会编译成两个指令，大致是 min(max(val, 0.0),\r\n1.0)，如果自己知道值的范围可以直接使用 max 来节省一条运算指令。</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>AQ: 我在 Unity 里面，点 Shader 属性中 “Compile and show\r\ncode”按钮，看到</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);</span><br><span class=\"line\">u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);</span><br></pre></td></tr></table></figure>\r\n<p>对应的是\r\n<code>saturate(dot(lightDir, worldNormal));</code>。所以应该不是解析成\r\n<code>min(max(val, 0.0), 1.0)</code>吧？</p>\r\n<p>因为今天看到《Real-time Rendering 3rd》5.5 节 115 页 中提到</p>\r\n<blockquote>\r\n<p><strong>staturate</strong> is faster than the more general\r\n<strong>max</strong> function on most hardware.</p>\r\n</blockquote>\r\n<p>所以有点奇怪。</p>\r\n</blockquote>\r\n<blockquote>\r\n<p>AA: <a href=\"https://github.com/alasja\"><span class=\"citation\"\r\ndata-cites=\"alasja\">@alasja</span></a>\r\n我之前的回答的确说得很模糊，这里补充下。</p>\r\n<p>在 Unity 里，同一份 ShaderLab\r\n代码在不同目标平台上、甚至不同设备上编译结果都是不同的。比如同样一份\r\nfragment shader：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fixed4 frag (v2f i) : SV_Target</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfixed4 col = i.uv.xyxy;</span><br><span class=\"line\">\tcol = saturate(col);</span><br><span class=\"line\">\treturn col;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>在 DX9 下，编译出来就是：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Fragment shader for &quot;d3d9&quot;:</span><br><span class=\"line\">// Stats: 1 math</span><br><span class=\"line\">Shader Disassembly:</span><br><span class=\"line\">//</span><br><span class=\"line\">// Generated by Microsoft (R) HLSL Shader Compiler 10.1</span><br><span class=\"line\">    ps_3_0</span><br><span class=\"line\">    dcl_texcoord_pp v0.xy</span><br><span class=\"line\">    mov_sat_pp oC0, v0.xyxy</span><br><span class=\"line\"></span><br><span class=\"line\">// approximately 1 instruction slot used</span><br></pre></td></tr></table></figure>\r\n<p>DX11 下就是：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Fragment shader for &quot;d3d11&quot;:</span><br><span class=\"line\">Shader Disassembly:</span><br><span class=\"line\">//</span><br><span class=\"line\">// Generated by Microsoft (R) D3D Shader Disassembler</span><br><span class=\"line\">//</span><br><span class=\"line\">//</span><br><span class=\"line\">// Input signature:</span><br><span class=\"line\">//</span><br><span class=\"line\">// Name                 Index   Mask Register SysValue  Format   Used</span><br><span class=\"line\">// -------------------- ----- ------ -------- -------- ------- ------</span><br><span class=\"line\">// TEXCOORD                 0   xy          0     NONE   float   xy</span><br><span class=\"line\">// SV_POSITION              0   xyzw        1      POS   float</span><br><span class=\"line\">//</span><br><span class=\"line\">//</span><br><span class=\"line\">// Output signature:</span><br><span class=\"line\">//</span><br><span class=\"line\">// Name                 Index   Mask Register SysValue  Format   Used</span><br><span class=\"line\">// -------------------- ----- ------ -------- -------- ------- ------</span><br><span class=\"line\">// SV_Target                0   xyzw        0   TARGET   float   xyzw</span><br><span class=\"line\">//</span><br><span class=\"line\">      ps_4_0</span><br><span class=\"line\">      dcl_input_ps linear v0.xy</span><br><span class=\"line\">      dcl_output o0.xyzw</span><br><span class=\"line\">   0: mov_sat o0.xyzw, v0.xyxy</span><br><span class=\"line\">   1: ret</span><br><span class=\"line\">// Approximately 0 instruction slots used</span><br></pre></td></tr></table></figure>\r\n<p>OpenGL ES2.0 下是：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifdef FRAGMENT</span><br><span class=\"line\">varying highp vec2 xlv_TEXCOORD0;</span><br><span class=\"line\">void main ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  lowp vec4 col_1;</span><br><span class=\"line\">  highp vec4 tmpvar_2;</span><br><span class=\"line\">  tmpvar_2 = xlv_TEXCOORD0.xyxy;</span><br><span class=\"line\">  col_1 = tmpvar_2;</span><br><span class=\"line\">  lowp vec4 tmpvar_3;</span><br><span class=\"line\">  tmpvar_3 = clamp (col_1, 0.0, 1.0);</span><br><span class=\"line\">  col_1 = tmpvar_3;</span><br><span class=\"line\">  gl_FragData[0] = tmpvar_3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>OpenGLES 3.0 下是：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifdef FRAGMENT</span><br><span class=\"line\">#version 300 es</span><br><span class=\"line\"></span><br><span class=\"line\">precision highp int;</span><br><span class=\"line\">in highp vec2 vs_TEXCOORD0;</span><br><span class=\"line\">layout(location = 0) out mediump vec4 SV_Target0;</span><br><span class=\"line\">void main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SV_Target0 = vs_TEXCOORD0.xyxy;</span><br><span class=\"line\">#ifdef UNITY_ADRENO_ES3</span><br><span class=\"line\">    SV_Target0 = min(max(SV_Target0, 0.0), 1.0);</span><br><span class=\"line\">#else</span><br><span class=\"line\">    SV_Target0 = clamp(SV_Target0, 0.0, 1.0);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\r\n<p>Metal 下是：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- Fragment shader for &quot;metal&quot;:</span><br><span class=\"line\">Shader Disassembly:</span><br><span class=\"line\">#include &lt;metal_stdlib&gt;</span><br><span class=\"line\">#include &lt;metal_texture&gt;</span><br><span class=\"line\">using namespace metal;</span><br><span class=\"line\">struct Mtl_FragmentIn</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Mtl_FragmentOut</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    float4 SV_Target0 [[ color(0) ]];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">fragment Mtl_FragmentOut xlatMtlMain(</span><br><span class=\"line\">    Mtl_FragmentIn input [[ stage_in ]])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Mtl_FragmentOut output;</span><br><span class=\"line\">    output.SV_Target0 = input.TEXCOORD0.xyxy;</span><br><span class=\"line\">    output.SV_Target0 = clamp(output.SV_Target0, 0.0f, 1.0f);</span><br><span class=\"line\">    return output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>Vulkan 太长了我就不粘贴了……</p>\r\n<p>你可以看出来在一些平台下，比如 DX9、DX11 下，编译出来的确是使用真正的\r\nsaturate 运算操作，而在大多数移动平台上，比如 ES 2.0、Metal\r\n等，是编译成了 clamp，而在 ES 3.0\r\n下跟设备还有关系。至于为什么要分这么多种情况，Unity\r\n应该是根据各个平台每种操作耗时的平衡，<strong>选择同等运算结果下最优的等价操作来代替\r\nsaturate</strong>。</p>\r\n</blockquote>\r\n</blockquote>\r\n<p><a\r\nhref=\"https://github.com/candycat1992/Unity_Shaders_Book/issues/59\">关于屏幕后处理效果的疑问\r\n· Issue #59 · candycat1992/Unity_Shaders_Book (github.com)</a></p>\r\n<blockquote>\r\n<p>的确，屏幕后处理本身本质上是在近裁剪平面处又渲染了一个四边形，这个四边形使用的是我们自定义的材质和\r\nshader，它的确本身会走一遍流水管线。</p>\r\n<p>网上说的它是“流水线的最后阶段”，是想指明我们操作的顺序，也就是说我们会在进行完其他物体的渲染后，最后进行这个操作。</p>\r\n</blockquote>\r\n<p><a\r\nhref=\"https://github.com/candycat1992/Unity_Shaders_Book/issues/194\">高斯模糊代码化简建议\r\n· Issue #194 · candycat1992/Unity_Shaders_Book (github.com)</a></p>\r\n","text":"Shader Book Github Issue Collections saturate 和 max · Issue #198 · candycat1992/Unity_Shaders_Book (github.com) 为什么后来从 sature 改到了 max？ Q: 在基...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Unity","slug":"Unity","count":17,"path":"api/categories/Unity.json"}],"tags":[{"name":"Unity","slug":"Unity","count":17,"path":"api/tags/Unity.json"},{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#shader-book-github-issue-collections\"><span class=\"toc-text\">Shader Book Github Issue\r\nCollections</span></a></li></ol>","author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}},"mapped":true,"prev_post":{"title":"Advanced CSharp","uid":"36e65544b0ba9be0c7ba1f8cd3f769cc","slug":"Language Learning/AdvancedCSharp","date":"2023-03-19T04:23:23.000Z","updated":"2023-10-27T20:05:51.000Z","comments":true,"path":"api/articles/Language Learning/AdvancedCSharp.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Advanced CSharp readonly, const &amp; static Virtual, Interface &amp; Abstract Delegate, Action, Func &amp; Event Delegate Quick Start 用实例快速...","link":"","photos":[],"count_time":{"symbolsCount":"26k","symbolsTime":"23 mins."},"categories":[{"name":"C#","slug":"C","count":2,"path":"api/categories/C.json"},{"name":"Language Learning","slug":"C/Language-Learning","count":2,"path":"api/categories/C/Language-Learning.json"}],"tags":[{"name":"C#","slug":"C","count":2,"path":"api/tags/C.json"},{"name":"Language Learning","slug":"Language-Learning","count":16,"path":"api/tags/Language-Learning.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}},"next_post":{"title":"Unity Shader入门精要笔记 - Chapter12","uid":"2451d72464fab185c69a4d12737f61d9","slug":"Rendering/UnityShaderBook/Chapter12","date":"2023-03-08T13:29:25.000Z","updated":"2023-10-27T19:27:32.000Z","comments":true,"path":"api/articles/Rendering/UnityShaderBook/Chapter12.json","keywords":null,"cover":"https://raw.githubusercontent.com/JBR-Bunjie/JBR-Bunjie/main/back.jpg","text":"Unity Shader入门精要笔记 - Chapter12 If you are doing a series of post-processing \"blits\", it's best for performance to get and release a temporar...","link":"","photos":[],"count_time":{"symbolsCount":473,"symbolsTime":"1 mins."},"categories":[{"name":"Unity","slug":"Unity","count":17,"path":"api/categories/Unity.json"}],"tags":[{"name":"Unity","slug":"Unity","count":17,"path":"api/tags/Unity.json"},{"name":"Shader","slug":"Shader","count":33,"path":"api/tags/Shader.json"}],"author":{"name":"JBR_Bunjie","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/90251718?v=4","link":"/","description":"仿生程序员会在光环上遇见AI乐正绫吗？","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili-fill.svg","link":"https://space.bilibili.com/415377461"},"github":{"icon":"/svg/social_github.svg","link":"https://github.com/JBR-Bunjie"}}}}}}
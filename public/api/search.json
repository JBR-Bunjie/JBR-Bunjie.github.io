[{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Achive\r\n插值寄存器 -\r\n\r\nSHADOW_COORDS(2)就意味着占用TEXCOORD2所在的寄存器声明并用于存储一个**_ShadowCoord**变量。\r\n\r\n插值寄存器的基础问题\r\n· Issue #71 · candycat1992/Unity_Shaders_Book (github.com)\r\n","slug":"Technical Artist/Unity/UnityShaderTutorial/NeedToAchive","date":"2023-03-10T14:38:22.553Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"28628807207c5d741f03a4d375071dd1","title":"Unity Built-in Shader源码分析 - 综述","content":"Unity Built-in\r\nShader源码分析 - 综述\r\n依赖信息：\r\n\r\nEditor版本：2021.1.3f1 LTS\r\nShader版本：2021.1.3f1 LTS内置Shader，对应Github页面在: GitHub\r\n- chsxf/unity-built-in-shaders at\r\n305bae3e84d49ffe4b0632533f336921c6e28097\r\n\r\n分析内容：\r\n","slug":"Technical Artist/Unity/SourceCodeAnalysis/General","date":"2023-03-10T13:10:05.000Z","categories_index":"Unity","tags_index":"Shader,Unity","author_index":"JBR_Bunjie"},{"id":"56562ce640a8509a88d7ae0465a97a36","title":"Unity Shader入门精要笔记 - Chapter9","content":"Chapter 9:\r\n更复杂的光照 - more complex lights\r\n\r\nLast Changed: 3/10/2023\r\n\r\n1. 渲染路径\r\nUnity渲染路径文档：\r\n\r\nUnity -\r\nManual: Rendering paths in the Built-in Render Pipeline\r\n(unity3d.com)\r\n\r\n关于书中提及的与编译指令 pragma multi_compile_fwdbase\r\n类似的官方文档：Unity\r\n- Manual: Declaring and using shader keywords in HLSL\r\n(unity3d.com)\r\n\r\n关于 shader variant，可以参考这篇文章：unity ShaderVariants处理 -\r\n知乎 (zhihu.com)\r\n\r\nYou can write shader snippets that share common\r\ncode, but have different functionality when a given keyword is enabled\r\nor disabled.\r\nWhen Unity compiles these shader snippets, it creates separate shader\r\nprograms for the different combinations of enabled and disabled\r\nkeywords. These individual shader programs are called shader\r\nvariants.\r\n\r\n\r\n简单来说，这种操作类似于，我们通过在Shader运行时动态的改变宏(这里是\r\nKeyword)的方式来动态得到我们需要的结果。\r\n\r\n利用Inspector来快速检测以及debug：[Unity]各种Debug方法笔记_unity\r\ndebug_HytMiao的博客-CSDN博客\r\n\r\nForward\r\n\r\nUnity\r\n- Manual: Forward rendering path (unity3d.com)\r\n\r\n\r\n\r\n\r\n\r\n\r\nforward_rendering.png-175.5kB\r\n\r\nDeferred\r\n\r\nUnity\r\n- Manual: Deferred Shading rendering path (unity3d.com)\r\n\r\nOverview\r\nWhen using deferred shading, there is no limit on the number of\r\nlights that can affect a GameObject. All lights are\r\nevaluated per-pixel, which means that they all interact correctly with\r\nnormal maps, etc. Additionally, all lights can have\r\ncookies and shadows.\r\nDeferred shading has the advantage that the processing overhead\r\nof lighting is proportional to the number of pixels the\r\nlight shines on. This is determined by the size of the light volume in\r\nthe Scene regardless of how many GameObjects it\r\nilluminates. Therefore, performance can be improved by keeping\r\nlights small. Deferred shading also has highly consistent and\r\npredictable behaviour. The effect of each light is computed per-pixel,\r\nso there are no lighting computations that break down on large\r\ntriangles.\r\nOn the downside, deferred shading has no real support for\r\nanti-aliasing and can’t handle semi-transparent GameObjects (these are\r\nrendered using forward\r\nrendering). There is also no support for the Mesh\r\nRenderer’s Receive Shadows flag and culling masks are\r\nonly supported in a limited way. You can only use up to four culling\r\nmasks. That is, your culling layer mask must at least\r\ncontain all layers minus four arbitrary layers, so 28 of the 32 layers\r\nmust be set. Otherwise you get graphical artifacts.\r\n\r\n\r\n2. 光源种类\r\n\r\n每一个光源有五个属性：\r\n\r\n位置\r\n方向\r\n颜色\r\n强度\r\n衰减\r\n\r\n\r\n平行光\r\n\r\n最简单的光源：\r\n\r\n影响范围无限大，因此，平行光光源的位置属性没有意义——它的几何属性只有方向\r\n光照强度没有衰减\r\n\r\n\r\n在场景中，一般只有太阳会作为平行光存在。Unity中默认场景中的初始光源即为Directional\r\nLight\r\n\r\n\r\ndirectional_ligth.png-51.6kB\r\n\r\n点光源\r\n\r\n\r\npoint_ligtht.png-89.4kB\r\n\r\n\r\n可以注意到场景中的 Sun 变为了一个 Lamp\r\n\r\n\r\n需要开启Scene视图中的光照才能看到效果\r\n\r\n聚光灯\r\n\r\n\r\nspot_light.png-74.5kB\r\n\r\n面光源\r\n仅用于烘培，\r\n光照衰减\r\n阴影\r\nUnity采用\"Screenspace Shadow\r\nMap\"即\"屏幕空间的阴影映射技术\"来实现阴影采样——Unity先调用\r\nLightMode 为 ShadowCaster\r\n的Pass来得到可投射阴影的光源的可投射阴影的光源的\r\n阴影映射纹理 以及摄像机的 深度纹理，根据光源的\r\n阴影映射纹理 和摄像机的 深度纹理\r\n来得到屏幕空间的 阴影图——如摄像机的 深度\r\n图中记录的表面深度大于转换到 阴影映射纹理\r\n中的深度值，就说明该表面虽然是可见的，但是却处于该光源的阴影中。\r\n当开始涉及阴影的计算时，我们会同时涉及到两方面的处理：\r\n\r\n一个物体接收别人投射的阴影——我们在Shader中对阴影映射纹理进行采样，并把采样结果与最后的光照结果相乘来得到最终的阴影效果\r\n一个物体向别的物体投射阴影——将当前物体加入对应光源的生成阴影映射纹理的计算过程中，从而让其他物体在对阴影纹理采样时可以得到相关信息\r\n\r\n\r\nunity中的坐标系：\r\nunity在模型空间和世界空间中使用的是左手坐标系，但在观察空间当中，unity改用右手坐标系——此时摄像机的前向为-z方向，而之前则对应+z方向；当最后变化到屏幕空间时，unity采用NDC坐标系——重新使用左手坐标系\r\n\r\n一个完整的Foward路径Shader\r\n\r\n\r\n有参考：\r\n\r\n【Unity\r\nShaders】Shader中的光照 - 王大王 - 博客园 (cnblogs.com)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","slug":"Technical Artist/Unity/UnityShaderTutorial/Chapter9/Chapter9","date":"2023-03-08T13:29:05.000Z","categories_index":"Unity","tags_index":"Shader,Unity","author_index":"JBR_Bunjie"},{"id":"2bc7a87b3796f4bb992e3de5b4dfef67","title":"Unity Shader入门精要笔记 - Chapter8","content":"Alpha Test\r\n只要没通过透明度测试，就舍弃该片元\r\nImportant HLSL Functions\r\nClip Function\r\n\r\nhttps://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-clip\r\n&gt; Discards the current pixel if the specified value is less than\r\nzero. &gt; &#x2F;&#x2F; HLSL\nclip(x)\r\n\r\nSubShader Tags\r\n\r\nUnity\r\n- Manual: ShaderLab: assigning tags to a SubShader (unity3d.com)\r\n\r\nPass Command\r\n一个Pass块就已经定义了一次完整的渲染流程。不过有时候在使用Shader时,\r\n会发现只进行一次渲染是不够的：还要在它的基础上在加上一次或者多次才行，这就是多Pass的渲染的由来。\r\n当运行一个SubShader时，Unity会从头开始，顺序地运行所有Pass块\r\n\r\n但如果Pass的数目过多，往往会造成性能下降。因此，我们应当尽量使用最小数目的Pass\r\n\r\nAlpha Blend\r\n我们利用Alpha Blend来真正实现透明效果\r\n","slug":"Technical Artist/Unity/UnityShaderTutorial/Chapter8","date":"2023-03-08T13:28:45.000Z","categories_index":"Unity","tags_index":"Shader,Unity","author_index":"JBR_Bunjie"},{"id":"874669ee5557de0847d70a81a2b48640","title":"Unity Shader入门精要笔记 - Chapter7","content":"纹理\r\nAlbedo Texture\r\n纹理中最常见的类型，我们用来取代单纯的_Diffuse颜色\r\nBump Mapping\r\n法线纹理，我们有两种具体的存储方式： - 高度纹理/高度图 - 记录相对高度\r\n- 法线纹理(Default) - 模型空间存储 - 绝对法线信息 -\r\n切线空间存储(Default) - 法线扰动(相对法线信息) -\r\n直接在切线空间中计算相关结果 - 转换到世界空间后再计算结果 -\r\n可以通过高度图转化而来：-&gt;Normal Map-&gt;Create From\r\nGrayScale，之后Unity会根据高度图生成一张在切线空间下的法线纹理 &gt;\r\n在使用法线纹理前，请先将其Texture Type属性设置为Normal\r\nMap，这样我们才能调用Unity中的build-in function来快速解析Normal\r\nMap(内置函数能帮我们根据不同的压缩模式来针对性地加载贴图数据) &gt;\r\n另：关于贴图的压缩模式，可见：http://wiki.polycount.com/wiki/Normal_Map_Compression\r\n切线空间\r\n\r\n切线空间定义于每一个顶点之上\r\n\r\n切线与副切线及其计算\r\n切线\r\n在一开始仅有Normal既定的情况下，一点上的切线是存在无数条的\r\n在这所有的切线之中，我们选择与当下点的uv坐标中，u轴同向的那条切线作为我们的T轴或x轴\r\n副切线\r\n当我们定好了T轴与N轴后，我们就可以通过cross运算得到我们的B轴：Binormal了\r\n但是我们完成cross运算后得到的副切线存在两个可选的方向，这时，利用Unity在tangent的w分量下预留的值来决定\r\nfixed3 worldNormal &#x3D; UnityObjectToWorldNormal(v.normal);\nfixed3 worldTangent &#x3D; UnityObjectToWorldDir(v.tangent.xyz);\n\nfixed tangentSign &#x3D; v.tangent.w; &#x2F;&#x2F; * unity_WorldTransformParams.w; &#x2F;&#x2F; Shader入门精要中未采用，但官方示例中存在\n&#x2F;&#x2F; unity_WorldTransformParams.w，定义于unityShaderVariables.cginc中\n&#x2F;&#x2F; 模型的Scale值是三维向量，即vec3，当这三个值中有奇数个值为负时（1个或者3个值全为负时），unity_WorldTransformParams.w &#x3D; -1，否则为1.\n\nfixed3 worldBinormal &#x3D; cross(worldNormal, worldTangent) * tangentSign;\r\nTBN矩阵\r\n用于在 Object Space 和 Tangent Space\r\n间进行转换\r\n这在实际上类似于view矩阵的变换：\r\n\r\n参见文档Technical Artist\\Opengl\\learnopengl-cn.readthedocs.io\\01GettingStarted\\06Transform.md\\1.7.1.2.2.1 View/Camera transformation\r\n\r\n结论为：做将原点移动至当前顶点位置的变换，其中由于切线空间更多为向量服务，所以我们更关心坐标轴上的rotation，而非原点到顶点上的transform\r\n注意区分变换的方向，搞明白当前是从切线空间变换到世界空间还是相反\r\n可参考资料：\r\n\r\n切线空间（Tangent\r\nSpace）完全解析 - 知乎 (zhihu.com)\r\nU3D内建着色器源码剖析 110页下4.2.8中相关内容\r\n关于顶点的法线、切线、副切线\r\n- 知乎 (zhihu.com)\r\nUnity\r\n- Scripting API: Mesh.tangents (unity3d.com)\r\nCHAI'S BLOG »\r\n切线的tangent.w的值1或-1的意义 (warmcat.org)\r\n\r\n番外：\r\nDCC Software\r\n\r\n所谓DCC，就是Digital Content\r\nCreation的缩写，即数字内容创作。DCC的范围包括二维/三维、音频/视频剪辑合成、动态/互动内容创作、图像编辑等。\r\n2.1\r\nDCC工具链与引擎工具链 - 知乎 (zhihu.com)\r\n\r\n随记 - 计算光方向\r\n我们开始使用如下built-in函数来取代先前章节用来计算光线向量的方法：\r\n&#x2F;&#x2F;fixed3 world_light &#x3D; normalize(_WorldSpaceLightPos0.xyz);\n&#x2F;&#x2F; &#x3D;&gt;\nfixed3 world_light &#x3D; UnityWorldSpaceLightDir(i.worldPos);\r\n查看该函数源码，可以看到： inline float3 UnityWorldSpaceLightDir( in float3 worldPos )\n&#123;\n    #ifndef USING_LIGHT_MULTI_COMPILE\n        return _WorldSpaceLightPos0.xyz - worldPos * _WorldSpaceLightPos0.w;\n    #else\n        #ifndef USING_DIRECTIONAL_LIGHT &#x2F;&#x2F;务必注意，这里是&#96;#if n def&#96;，不要误以为平行光会进入该分支！\n        return _WorldSpaceLightPos0.xyz - worldPos;\n        #else &#x2F;&#x2F;如果是平行光，则直接返回该点位置\n        return _WorldSpaceLightPos0.xyz;\n        #endif\n    #endif\n&#125; ## 随记 - 遮罩纹理 Mask\r\nTexture\r\nAO - Ambient Occlusion -\r\n环境光遮蔽\r\n随记 - Texture种类\r\n\r\n用来定义模型反射率的Tex(MainTex) - Albedo\r\n用来定义表面法线的Normal Map - Normal\r\n用来控制模型漫反射光照色调的渐变纹理：RampTex diffuseColor &#x3D; tex2D(_RampTex, fixed2(halfLambert, halfLambert)).rgb * _Color.rgb \r\n用来控制模型\r\n\r\nPROBLEM 1:\r\n\r\nNone of the overloads accepts 2 arguments\r\n\r\nPay attention to your vars type &#x2F;&#x2F;float4 _MainTex\n&#x2F;&#x2F;&#x2F;&#x2F; &#x3D;&gt;\nsampler2D _MainTex\r\n优化\r\n节约插值寄存器，当两个纹理的操作相同时，仅保留其中一个float4\r\nST向量\r\n","slug":"Technical Artist/Unity/UnityShaderTutorial/Chapter7","date":"2023-03-08T13:28:36.000Z","categories_index":"Unity","tags_index":"Shader,Unity","author_index":"JBR_Bunjie"},{"id":"a89249a3d5a65fa935d2ff8b3c1ccd10","title":"Unity Shader入门精要笔记 - Chapter6","content":"_WorldSpaceLightPos0\r\n\r\nlighting.cginc\r\nhttps://docs.unity3d.com/Manual/SL-UnityShaderVariables.html\r\n\r\ntype: float4\r\n\r\nDirectional lights: (world space direction, 0).\r\nOther lights: (world space position, 1).\r\n\r\n","slug":"Technical Artist/Unity/UnityShaderTutorial/Chapter6","date":"2023-03-08T13:28:06.000Z","categories_index":"Unity","tags_index":"Shader,Unity","author_index":"JBR_Bunjie"},{"id":"a9ca2d76681f03e5325e9c1e5a8365f0","title":"Unity Shader入门精要笔记 - Chapter5","content":"对texcoord的解释\r\n什么是TEXCOORD\r\nWhat\r\nare the TEXCOORDs and how can I get them in a ComputeShader? - Unity\r\nForum\r\n明明没有输入texcoord，怎么会有初始值？\r\ntexcoord和position等一样，是保存于模型顶点(应该不是VAO，但是可用VAO来理解)上的一类数据\r\nUnity\r\nShader基础篇：浅谈TEXCOORDn | 烟雨迷离半世殇的成长之路\r\n(lfzxb.top)\r\n\r\n\r\n简单来说texcoord就是存在顶点里的一组数据，我们可以通过这组数据在渲染的时候进行贴图采样，比如我们常用的第一套uv作为基础纹理，通常基础纹理我们可以根据需求进行一些区域的uv重用（比如左右脸贴图一样，可以映射到统一贴图区域），第二套uv经常用于光照贴图，光照贴图要求是uv不可以重复，所以通常不能用第一套uv，第三套uv用于更加奇特的需求，以此类推...\r\ntexcoord应该是更加标准的名称，不过因为这个坐标系里面用uvw作为三个轴名称，所以美术那边普遍称作uv\r\n\r\n\r\n在Unity\r\nShader中，编写时有以下报错：\r\n1. 定义Struct报错\r\nStruct定义好后的结尾应该加上分号:\r\nstruct a2v &#123;\n    ...\n&#125;; &#x2F;&#x2F; ; 必须加上\r\n2. 定义Properties过程中出错\r\n定义Properties时的初始值中，不应该加上\"f\":\r\n_Color(&quot;Color Tint&quot;, Color) &#x3D; (1.0, 1.0, 1.0, 1.0)  &#x2F;&#x2F; √\n_Color(&quot;Color Tint&quot;, Color) &#x3D; (1.0f, 1.0f, 1.0f, 1.0f)  &#x2F;&#x2F; ×\r\nUnity ShaderLab Function\r\n我们在可视化纹理坐标的小数部分时，用到了如下语句：\r\no.color &#x3D; frac(v.texcoord);\nif(any(saturate(v.texcoord)) - v.texcoord) &#123;\n    o.color.b &#x3D; 0.5;\n&#125;\r\n2.3 HLSL常用函数介绍\r\n- 知乎 (zhihu.com)\r\nfrac函数\r\n这是HLSL的内置函数，其作用是去取x的小数部分\r\n逻辑为：\r\nfloat frac(float v) &#123;\n  return v - floor(v);\n&#125;\r\n可以参考：Shader实验室：frac函数 -\r\n知乎 (zhihu.com)\r\n\r\n它在坐标轴上的效果如下：\r\n\r\n\r\nimg\r\n\r\n**周期性：而如果我们将对x*2，则可以将该图像的周期翻倍**\r\n\r\nlength\r\n这是上述参考内容中引用的其他HLSL函数，其功能为：\r\nlength\r\n- Win32 apps | Microsoft Learn\r\n\r\nReturns the length of the specified floating-point vector.\r\n\r\n示例：\r\nshader\r\n- GLSL - length function - Stack Overflow\r\nsaturate函数\r\nsaturate\r\n(HLSL reference) - Win32 apps | Microsoft Learn\r\nsaturate（x） 返回将x钳制到[0,1]范围之间的值；\r\nany函数\r\nany\r\n- Win32 apps | Microsoft Learn\r\n\r\nDetermines if any components of the specified value are non-zero.\r\nReturn true if any components of the x\r\nparameter are non-zero; otherwise, false.\r\n\r\n","slug":"Technical Artist/Unity/UnityShaderTutorial/Chapter5","date":"2023-03-08T13:27:04.000Z","categories_index":"Unity","tags_index":"Shader,Unity","author_index":"JBR_Bunjie"},{"id":"5df7e3074dc79c2eb902043de092d6ad","title":"Sai快捷键配置及小键盘键位记录","content":"小键盘设置\r\n\r\n文档见/JBR-Bunjie.github.io/extra_resources\r\n\r\n默认快捷键\r\n工具\r\n基本画笔工具\r\n铅笔：n\r\n水彩笔：c\r\n画笔：v\r\n喷枪：b\r\n橡皮擦：e\r\n选区工具\r\n框选：m\r\n套索工具：l\r\n魔术棒：w\r\n工具调整\r\n画笔大小与浓度快速调节：ctrl + alt\r\n视图编辑\r\n抓手：[space]\r\n快速移动整个图层：ctrl\r\n切换颜色：x\r\n水平翻转：h\r\n当前图层全选：ctrl + a\r\n取消选中内容：ctrl + d\r\n","slug":"DrawingRecordings/SAI2的基本操作与默认快捷键","date":"2023-03-08T04:23:03.000Z","categories_index":"Drawing Experience","tags_index":"Drawing","author_index":"JBR_Bunjie"},{"id":"38c975c13d700e0f4a358527ea875949","title":"learningOpenGl Chapter 2.5","content":"Light Casters - 投光物\r\n\r\nAll the lighting we've used so far came from a single source that is\r\na single point in space. It gives good results, but in the real world we\r\nhave several types of light that each act different. A light source that\r\ncasts light upon objects is called a light caster. In this\r\nchapter we'll discuss several different types of light casters. Learning\r\nto simulate different light sources is yet another tool in your toolbox\r\nto further enrich your environments.\r\nWe'll first discuss a directional light, then a point light which is\r\nan extension of what we had before, and lastly we'll discuss spotlights.\r\nIn the next chapter\r\nwe'll combine several of these different light types into one scene.\r\n\r\nDirectional Light\r\n\r\n示例：太阳光\r\n\r\n光源的作用效果只受光源摆放角度的影响，摆放的具体位置一般不会对Directional\r\nLight造成影响\r\n\r\n只有一个点的Directional Light和Point Light的区别：\r\nPoint Light的效果会随着距离而衰减，但Directional\r\nLight不会，这也是它们效果不同的直接成因\r\n\r\nPoint Lights\r\n\r\n示例：无罩电灯泡\r\n\r\n光源的作用效果同时受摆放的角度和位置的影响\r\nAttenuation\r\nChoosing the right values\r\nImplementing attenuation\r\nSpotlight\r\n\r\n示例：舞台聚光灯\r\n\r\n光源的作用效果同时受摆放的角度和位置的影响\r\nFlashlight\r\nSmooth/Soft edges\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/04.Light casters","date":"2023-03-08T02:32:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"ad9f08ec3444afaa1c2eddcf989f6462","title":"learningOpenGl Chapter 2.4","content":"使用：“光照贴图”\r\nProblem 4:\r\n\r\nAlso add something they call an emission map which is a texture that\r\nstores emission values per fragment. Emission values are colors an\r\nobject may emit as if it contains a light source itself; this\r\nway an object can glow regardless of the light conditions. Emission maps\r\nare often what you see when objects in a game glow (like eyes\r\nof a robot, or light\r\nstrips on a container). Add the following\r\ntexture (by creativesam) as an emission map onto the container as if the\r\nletters emit light: solution;\r\nresult:\r\n\r\n\r\nimg\r\n\r\n\r\n重点：Matrix贴图并没有出现在铁边上！也就是说，这并不是直接读入并应用一个贴图那么简单。\r\n为了实现这点，我们需要做“判断”。但是！在glsl中使用分支会直接导致极低的运行效率，而且if语句在早期GPU上是不受支持的——我们应当尽量避免使用if语句，此处我们将这个if语句变成了三个step和一次计算：\r\nvec3 emission &#x3D; texture(material.emission, Texcoord).rgb * diff * max(light.diffuse, vec3(0.7f));\nfloat temp &#x3D; step(spec_tex.r, 0.0f);  &#x2F;&#x2F; if spec_tex.r &gt; 0.0f, then return 0 else 1\ntemp &#x3D; min(step(spec_tex.g, 0.0f), temp);\ntemp &#x3D; min(step(spec_tex.b, 0.0f), temp); &#x2F;&#x2F; temp &#x3D;&#x3D; 0: spec_tex is not black; 1: black;\n\n&#x2F;&#x2F; we complete the problem four without using if sentence.\nemission &#x3D; emission * temp;\r\nstep\r\n- OpenGL 4 Reference Pages (khronos.org)\r\nOpenGL\r\nshader性能优化策略（一）：减少分支语句 - 腾讯云开发者社区-腾讯云\r\n(tencent.com)\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/03.Lighting maps","date":"2023-03-08T02:31:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"77ec7ccacfb72fa4bd2436c5873c81ff","title":"learningOpenGl Chapter 2.3","content":"一个场景中，我们可能同时使用多个物体，而这些物体对光的特性各不相同——我们需要建立“材质”属性，统一地管理物体的三种光照关系\r\n构建思路：\r\n我们利用struct来管理物体的对应情况下的“颜色“来代替笼统的”objectColor“\r\nstruct Material&#123;\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n&#125;\nuniform Material material;\r\n\r\n我们为每个冯氏光照模型的元素都定义一个颜色向量。\r\n\r\nambient材质向量定义了在环境光照下这个物体反射的是什么颜色；通常这是和物体颜色相同的颜色。\r\ndiffuse材质向量定义了在漫反射光照下物体的颜色。漫反射颜色被设置为(和环境光照一样)我们需要的物体颜色。\r\nspecular材质向量设置的是物体受到的镜面光照的影响的颜色(或者可能是反射一个物体特定的镜面高光颜色)。\r\nshininess则影响镜面高光的散射/半径。\r\n\r\n这四个元素定义了一个物体的材质，通过它们我们能够模拟很多真实世界的材质。\r\n\r\n定义了物体本身的材质的同时，我们还有一件事情要做：定义光源对物体材质的各个内容上的强度——光源对环境、漫反射和镜面元素，应该同时具有不同的强度：\r\n这样，我们还需要一个struct来管理光线强度，这样我们就可以在不改变物体材质(物体的真实颜色)的条件下，通过改变光源的颜色去改变物体各个元素的强度，来产生很多的效果\r\nstruct Light\n&#123;\n    vec3 position;\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n&#125;;\nuniform Light light;\r\n\r\n一个光源的ambient、diffuse和specular光都有不同的亮度。\r\n\r\n环境光通常设置为一个比较低的亮度，因为我们不希望环境色太过显眼。\r\n光源的diffuse元素通常设置为我们希望光所具有的颜色；经常是一个明亮的白色。\r\nspecular元素通常被设置为vec3(1.0f)类型的全强度发光。\r\n要记住的是我们同样把光的位置添加到结构体中。\r\n\r\n\r\n参考：\r\nhttp://devernay.free.fr/cours/opengl/materials.html\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/02.Materials","date":"2023-03-08T02:30:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"e4e32fc3ec80a57afe53517f515d2f2d","title":"learningOpenGl Chapter 2.2","content":"Phong lighting model\r\n裴祥风提出的标准光照模型背后的理念。\r\n\r\n把进入到摄像机内的光线分为4个部分：\r\n\r\nemissive -\r\n自发光部分，用于描述当给定一个方向时，一个表面本身回向该方向发射多少辐射量。\r\nspecular -\r\n高光反射部分，用于描述当光线从光源照射到模型表面时，该表面会在完全镜面反射方向散射多少辐射量\r\ndiffuse -\r\n漫反射部分，用于描述当光线从光环照射到模型表面时，该表面会向每个方向散射多少辐射量\r\nambient - 环境光部分，用于描述其他所有的间接光照\r\n\r\n\r\n\r\n值得注意的是，如果没有使用全局光照(global\r\nillumination)的话，自发光的表面并不会真的照亮周围物体，只是它本身看起来更亮了而已\r\n着色\r\n逐顶点光照 - Gouraud\r\nShading - 高洛德着色\r\n逐片元着色 - Phong\r\nShading - 冯氏着色\r\n兰伯特\r\n番外 1：Global Light -\r\n全局光照\r\n《Real-Time Rendering 3rd》 提炼总结 第九章\r\n全局光照:光线追踪、路径追踪与GI技术进化编年史 - 毛星云的文章 - 知乎\r\nhttps://zhuanlan.zhihu.com/p/29418992\r\n番外 2：Fresnel - 菲涅尔效应\r\n现象表述：\r\n当视线垂直于表面时，反射较弱，而当视线与表面呈一定夹角时，夹角越小，反射就越明显。\r\n\r\n\r\n同一个地方的湖面，在不同的位置去观察它，总能看到它在不同位置所呈现的效果是不一样的，近处看可以看到清澈见底的湖水，远处看却是波光粼粼的湖面。\r\n\r\n应用\r\n菲涅尔反射是什么？ - BurningMountion的回答 - 知乎\r\nhttps://www.zhihu.com/question/53022233/answer/399310332\r\nShader实验室:菲涅尔效应 - Shader实验室的文章 - 知乎\r\nhttps://zhuanlan.zhihu.com/p/151375798\r\n【Blender教程】刻晴丝袜效果案例_哔哩哔哩_bilibili\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/01.Basic Lighting","date":"2023-03-08T02:29:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"a30ae670e7580d885c145007ff8514b4","title":"learningOpenGl Chapter 2.1","content":"Define a rule\r\n如果我要使用向量A(1.0, 0.8, 0.6)来乘以B(0.8, 0.6, 0.4)，我定义：\r\n\r\n这与点积的区别在于：该运算的结果是向量，而点积的结果是一个具体数据。\r\n利用这个关系，我们可以计算光照关系： \r\nWhat we need to do in this\r\nsection\r\n在本节中，我们要实现一个光照场景来为后续步骤提供便利。这会用到我们定义的规则。\r\n此时，我们需要做的包括：\r\n\r\n制作一个light source(LS)\r\n制作一个object(OB)\r\n\r\n此时，为了方便以后的更多操作，我们需要区别LS和OB的Shader：\r\n分别为LS和OB搭起一套Shader程序，依次调用他们的shader.use并且投入相应的数据，最终确保：\r\n\r\nColor of LS hardly change\r\nColor of OB will changed because of our rules\r\n\r\nFinally, we can get a pic like:\r\n\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/02Lighting/00.Colors","date":"2023-03-08T02:28:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"09d4101db265eb203c19a059d113fd7c","title":"learningOpenGl Chapter 1.8","content":"Coordinate Systems\r\ncategories\r\n请主要注意这中间的MVP变换与最后的视口变换\r\n\r\n\r\ncoordinate_systems\r\n\r\n&#x2F;&#x2F; final tranformation looks like:\nlayout (location &#x3D; 0) in vec3 Position;\n...\ngl_Position &#x3D; Project * View * Model * Move * Rotate * Translate * vec4(Position, 1.0f);\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/07Coordinate Systems","date":"2023-03-08T02:27:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"59ead1496baa87513e343c88c9a506ed","title":"learningOpenGl Chapter 1.7","content":"1.7 Transform\r\n欢迎！\r\n欢迎来到这里，有关数学的一节。\r\n这里会结合Games 101与Unity Shader入门精要的相关内容进行。\r\n\r\nGames 101：Lecture\r\n03 Transformation\r\n\r\n1.7.1 GAMES 101\r\n1.7.1.1 GAMES 101 Lecture\r\n03 Transformation\r\n线性变换适用范围：缩放、旋转  但当加入平移变换时，线性变换就无能为力： \r\n为了能在一个矩阵中表示这些变换，我们选择引入齐次坐标(Homogeneous Coordinates)：\r\n &gt; 此时： \r\n\r\n为什么向量添置的是0而点是1？\r\n\r\n通过简单的运算我们可以发现，如果w分量是0，则平移变换对该对象不造成任何影响——我们对向量的w分量置0是为了保护向量的“不随“平移变换”的这种性质，而Point的w为1则正是为了采用这种性质\r\n\r\n基于w分量的原理，我们可以得到：\r\n\r\n\r\n\r\n当Point +\r\nPoint时，w分量为2了，这能代表什么？——我们人为地定义w用于均分： \r\n\r\n我们把形如上方的运算方式称为仿射变换，Affine Transformations，它采用齐次坐标\r\n此时，缩放、旋转和平移三种操作会变为：  但是，矩阵乘法中虽然没有交换律但是有结合律\r\n我们按照顺序： 平移矩阵旋转矩阵缩放矩阵\r\n进行运算时，我们是可以将前三个矩阵先计算然后集结合为一个矩阵再与目标左乘的\r\n当然，这个顺序并不是定死的，需要注意，我们只会关于原点的操作：关于原点的平移、旋转与缩放，如需必要，我们得把目标“先平移到原点上”\r\n1.7.1.2 GAMES 101\r\nLecture 04 Transformation Count.\r\n对于原Rotation矩阵： \r\n即对于旋转矩阵，有逆矩阵等于转置矩阵——这是一个正交矩阵\r\n\r\n正交矩阵定义：\r\n若一个矩阵满足：ATA = AAT =\r\nE，则A矩阵是正交矩阵\r\n此时A有如下性质：  正交矩阵有哪些性质？ -\r\n知乎 (zhihu.com)\r\n\r\n1.7.1.2.1 3D transformations\r\n类同1.7.1.1中的二维变换，只是我们需要将2D变换所用的三维齐次坐标改为四维齐次坐标：\r\n 此时的三种变换的矩阵会变为：  而旋转则分为三种，分别应用于绕x, y, z三轴旋转的情况： \r\n有了基础的绕三轴的旋转，我们可以通过组合，将物体旋转到任意方向上去：\r\n 例：飞机的运动：roll, yaw, pitch\r\n\r\n在三维空间中任意的旋转，我们都可以通过将它分解到三个轴上\r\n\r\n将旋转轴平移到经过原点\r\n分解该旋转过程\r\n\r\n公式：Rodrigues' Rotation Formula:\r\nRotation by angle α around axis n \r\n\r\n简明推导过程：\r\n\r\n罗德里格斯公式，给个轴和角度就能转\r\n向量叉乘与叉乘矩阵\r\n- neu博 - 博客园 (cnblogs.com)\r\n\r\n1.7.1.2.2 Viewing transformation\r\n\r\n以拍照片为例：\r\n\r\nFind a good place and arrange people (Model transformation)\r\nFind a good \"angle\" to put the camera (View transformation)\r\nCheese! (Projection transformation)\r\n\r\n即MVP变换——模型-视图-投影变换\r\n相应的，我们也有MVP矩阵。当然，这里是View transformation\r\n\r\n1.7.1.2.2.1 View/Camera\r\ntransformation\r\n目的：将摄像头移动至世界中心\r\n过程：做“将原点移动至当前摄像头位置的“的逆变换\r\n原因：我们很难直接求出从世界空间转换到摄像机空间的旋转矩阵，那么鉴于\r\n\r\n旋转矩阵本身的特殊性\r\n旋转后最终结果必定为 x: (1, 0, 0); y: (0, 1, 0); z: (0, 0,\r\n1)\r\n旋转前(世界空间下的)摄像机的x, y, z轴已知\r\n\r\n那么，我们可以利用以上信息构建出从摄像机空间变换到世界空间的旋转矩阵，再将该矩阵转置得到目标矩阵\r\n\r\n利用R_view.rotate，我们将世界空间变换到摄像机空间\r\n同时我们也可以相反地利用**R-1_view.rotate**矩阵实现从摄像机空间到世界空间的逆变换\r\n\r\n\r\n这样，便有完整的变换如下： \r\n1.7.1.2.2.2 Projection\r\ntransformation - 投影变换\r\n1.7.1.2.2.2.1 Orthographic\r\nprojection - 正交变换\r\nmap a cuboid: [l, r], [b, t], [f,\r\nn] to the \"canonical\" cube [-1, 1]3\r\n使用的手段包括：位移、缩放等 \r\n1.7.1.2.2.2.2 Perspective\r\nprojection - 透视变换\r\nGAMES101：\r\n\r\n将Perspective projection先挤压为Orthographic\r\nprojection，然后再依照正交变换的思路做projection\r\n\r\n\r\n1.7.2 利用GLM变换\r\nGLM版本：\r\n\r\n从0.9.9版本开始，GLM创建矩阵的默认值为零矩阵；在此之前的版本则是单位矩阵。使用语句初始化：\r\nglm::mat4 mat = glm::mat4(1.0f);\r\n\r\n现在的情况：\r\n在CPU侧提前完成变换矩阵的计算，然后将该结果传递到shader处用于position的计算\r\n// main.cpp处\n// 1. 计算好变换矩阵\nglm::mat4 trans = glm::mat4(1.0f);\ntrans = glm::rorate(trans, glm::radians(90.0f), glm::vec3(0.0f, 0.0f, 1.0f));\ntrans = glm::scale(trans, glm::vec3(0.5f, 0.5f, 0.5f));\n\n// 2. 传递值 - uniform手段\nGluint transformLoc = glGetUniformLocation(...);\nglUniformMatrix4fv(transformLoc, 1, GL_FALSE, trans);\r\n// vertex shader处\n// 3. 实际使用\nuniform mat4 transform;\n...\ngl_Position = transform * vec4(position, 1.0f);\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/06Transform","date":"2023-03-08T02:26:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"59e0ee426fc499572e79ecdf9cee6601","title":"learningOpenGl Chapter 1.6","content":"1.6 Texture\r\n1.6.1 纹理坐标与纹理的应用\r\n1.6.1.1 定义纹理坐标\r\n\r\n我们已经了解到，我们可以为每个顶点添加颜色来增加图形的细节，从而创建出有趣的图像。但是，如果想让图形看起来更真实，我们就必须有足够多的顶点，从而指定足够多的颜色。这将会产生很多额外开销，因为每个模型都会需求更多的顶点，每个顶点又需求一个颜色属性。\r\n艺术家和程序员更喜欢使用纹理(Texture)。纹理是一个2D图片（不过也有1D&amp;3D的纹理），它可以用来添加物体的细节；你可以想象纹理是一张绘有砖块的纸，无缝折叠贴合到你的3D的房子上，这样你的房子看起来就像有砖墙外表了。因为我们可以在一张图片上插入非常多的细节，这样就可以让物体非常精细而不用指定额外的顶点。\r\n\r\n现在我们利用纹理，给三角形贴上一张砖墙图片。\r\n\r\n\r\nimg\r\n\r\n为了能够把纹理映射(Map)到该三角形上，我们需要指定三角形的每个顶点各自对应纹理的哪个部分。这样每个顶点就会关联着一个纹理坐标(Texture\r\nCoordinate)，用来标明该从纹理图像的哪个部分采样。之后在图形的其它片段上进行片段插值(Fragment\r\nInterpolation)。\r\n纹理坐标在x和y轴上，范围为0到1之间（注意我们使用的是2D纹理图像）。使用纹理坐标获取纹理颜色叫做采样(Sampling)。纹理坐标起始于(0,\r\n0)，也就是纹理图片的左下角，终始于(1,\r\n1)，即纹理图片的右上角。下面的图片展示了我们是如何把纹理坐标映射到三角形上的。\r\n\r\n\r\nimg\r\n\r\n我们为三角形指定了3个纹理坐标点。如上图所示：\r\n\r\n我们希望三角形的左下角对应纹理的左下角，因此我们把三角形左下角顶点的纹理坐标设置为(0,\r\n0)；\r\n三角形的上顶点对应于图片的上中位置所以我们把它的纹理坐标设置为(0.5,\r\n1.0)；\r\n同理右下方的顶点设置为(1, 0)。\r\n\r\n我们只要给顶点着色器传递这三个纹理坐标就行了，接下来它们会被传片段着色器中，它会为每个片段进行纹理坐标的插值。\r\n纹理坐标看起来就像这样：\r\nGLfloat texCoords[] &#x3D; &#123;\n    0.0f, 0.0f, &#x2F;&#x2F; 左下角\n    1.0f, 0.0f, &#x2F;&#x2F; 右下角\n    0.5f, 1.0f &#x2F;&#x2F; 上中\n&#125;;\r\n1.6.1.2 使用纹理\r\n类似于Shader程序，使用纹理之前我们应该先把它们加载到我们的（main.c\r\nCPU部分）应用中。\r\n纹理图像可能被储存为各种各样的格式，每种都有自己特别的数据结构和排列，为了方便地将图像加载到应用中，一个可行的解决方案是选一个需要的文件格式，比如.PNG，然后自己写一个图像加载器，把图像转化为字节序列。这里又会涉及到很多问题，比如文件格式的选择甚至设计，图像加载器的性能？多格式支持？而且鉴于纹理使用的广泛程度，这些东西的设计和项目的成败都可以说是息息相关。\r\n不过，这里为避免麻烦，我们选择直接借用参考答案：使用一个支持多种流行格式的图像加载库来为我们解决这个问题。比如：\r\n1.6.1.2.1: Use\r\nstb_image.h to load image：\r\n\r\nstb_image.h is a very popular single header image\r\nloading library by Sean\r\nBarrett that is able to load most popular file formats and is easy\r\nto integrate in your project(s). stb_image.h can be\r\ndownloaded from here.\r\nSimply download the single header file, add it to your project as\r\nstb_image.h, and create an additional C++ file with the\r\nfollowing code:\r\n\r\n在stb_image.h中，可以发现使用该头文件所需要的引用与定义：\r\n#define STB_IMAGE_IMPLEMENTATION\n#include &quot;stb_image.h&quot;\r\nBy defining STB_IMAGE_IMPLEMENTATION the preprocessor modifies the\r\nheader file such that it only contains the relevant definition source\r\ncode, effectively turning the header file into a .cpp file,\r\nand that's about it. Now simply include stb_image.h\r\nsomewhere in your program and compile.\r\nFor the following texture sections we're going to use an image of a\r\nwooden\r\ncontainer. To load an image using stb_image.h we use\r\nits stbi_load function:\r\nint width, height, nrChannels;\nunsigned char *data &#x3D; stbi_load(&quot;container.jpg&quot;, &amp;width, &amp;height, &amp;nrChannels, 0); \r\nThe function first takes as input the location of an image file. It\r\nthen expects you to give three ints as its second, third\r\nand fourth argument that stb_image.h will fill with the\r\nresulting image's width, height and number of\r\ncolor channels. We need the image's width and height for generating\r\ntextures later on.\r\n1.6.1.2.2: Generate Texture\r\n在前面，我们已经完成了对图片数据的读取，此时就应该回到OpenGL上来——开始准备生成纹理了\r\nGLuint texture; &#x2F;&#x2F; ID\nglGenTexture(1, &amp;texture); &#x2F;&#x2F; The glGenTextures function first takes as input how many textures we want to generate and stores them in a unsigned int array given as its second argument (in our case just a single unsigned int). \n\n&#x2F;&#x2F; Just like other objects we need to bind it, so any subsequent texture commands will configure the currently bound texture:\nglBindTexture(GL_TEXTURE_2D, texture[0]);\n\n&#x2F;&#x2F; 为当前绑定的纹理对象设置环绕、过滤方式\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n\n&#x2F;&#x2F; 生成纹理\nglTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);\nglGenerateMipmap(GL_TEXTURE_2D); &#x2F;&#x2F; 多层渐变纹理\r\nglTexImage2D参数不少：\r\n\r\n第一个参数指定了纹理目标(Target)。设置为GL_TEXTURE_2D意味着会生成与当前绑定的纹理对象在同一个目标上的纹理（任何绑定到GL_TEXTURE_1D和GL_TEXTURE_3D的纹理不会受到影响）。\r\n第二个参数为纹理指定多级渐远纹理的级别，如果你希望单独手动设置每个多级渐远纹理的级别的话。这里我们填0，也就是基本级别。\r\n第三个参数告诉OpenGL我们希望把纹理储存为何种格式。我们的图像只有RGB值，因此我们也把纹理储存为RGB值。\r\n第四个和第五个参数设置最终的纹理的宽度和高度。我们之前加载图像的时候储存了它们，所以我们使用对应的变量。\r\n下个参数应该总是被设为0（历史遗留问题）。\r\n第七第八个参数定义了源图的格式和数据类型。我们使用RGB值加载这个图像，并把它们储存为char(byte)数组，我们将会传入对应值。\r\n最后一个参数是真正的图像数据。\r\n\r\n当调用glTexImage2D时，当前绑定的纹理对象就会被附加上纹理图像。然而，目前只有基本级别(Base-level)的纹理图像被加载了，如果要使用多级渐远纹理，我们必须手动设置所有不同的图像（不断递增第二个参数）。或者，直接在生成纹理之后调glGenerateMipmap。这会为当前绑定的纹理自动生成所有需要的多级渐远纹理。\r\nAfter we're done generating the texture and its corresponding\r\nmipmaps, it is good practice to free the image memory:\r\nstbi_image_free(data);\nglBindTexture(GL_TEXTURE_2D, 0);\r\n1.6.2 纹理采样方式\r\n\r\n纹理坐标的范围通常是从(0, 0)到(1,\r\n1)，那如果我们把纹理坐标设置在范围之外会发生什么？OpenGL默认的行为是重复这个纹理图像（我们基本上忽略浮点纹理坐标的整数部分），但OpenGL提供了更多的选择：\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n环绕方式(Wrapping)\r\n描述\r\n\r\n\r\n\r\n\r\nGL_REPEAT\r\n对纹理的默认行为。重复纹理图像。\r\n\r\n\r\nGL_MIRRORED_REPEAT\r\n和GL_REPEAT一样，但每次重复图片是镜像放置的。\r\n\r\n\r\nGL_CLAMP_TO_EDGE\r\n纹理坐标会被约束在0到1之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。\r\n\r\n\r\nGL_CLAMP_TO_BORDER\r\n超出的坐标为用户指定的边缘颜色。\r\n\r\n\r\n\r\n当纹理坐标超出默认范围时，每个选项都有不同的视觉效果输出。我们来看看这些纹理图像的例子：\r\n\r\n\r\nimg\r\n\r\n\r\n\r\nglTexParameter\r\n- OpenGL 4 Reference Pages (khronos.org)\r\nopengl\r\n- What does changing GL_TEXTURE_WRAP)_(S/T) do? - Game Development Stack\r\nExchange\r\n\r\n前面提到的每个选项都可以使用glTexParameter*函数对单独的一个坐标轴设置（s、t（如果是使用3D纹理那么还有一个r）它们和x、y、z是等价的）：\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);\r\n\r\n第一个参数指定了纹理目标；我们使用的是2D纹理，因此纹理目标是GL_TEXTURE_2D。\r\n第二个参数需要我们指定，设置的选项 与\r\n应用的纹理轴。我们打算配置的是WRAP选项，并且指定S和T轴。\r\n最后一个参数需要我们传递一个环绕方式，在这个例子中OpenGL会给当前激活的纹理设定纹理环绕方式为GL_MIRRORED_REPEAT。\r\n\r\n\r\n如果我们选择GL_CLAMP_TO_BORDER选项，我们需要执行的步骤是这些：指定一个边缘的颜色，使用glTexParameter函数的fv后缀形式，用GL_TEXTURE_BORDER_COLOR作为它的选项：\r\n&gt;float borderColor[] &#x3D; &#123; 1.0f, 1.0f, 0.0f, 1.0f &#125;;\n&gt;glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);\r\n\r\n1.6.3 纹理过滤\r\n\r\n插值办法\r\n\r\nOpenGL需要知道怎样将纹理像素（Texture\r\nPixel、Texel、纹素）映射到纹理坐标。这在物体较大而纹理的分辨率较低时十分重要。\r\n\r\nTexture\r\nPixel也叫Texel，你可以想象你打开一张.jpg格式图片，不断放大你会发现它是由无数像素点组成的，这个点就是纹理像素；注意不要和纹理坐标搞混，纹理坐标是你给模型顶点设置的那个数组，OpenGL以这个顶点的纹理坐标数据去查找纹理图像上的像素，然后进行采样提取纹理像素的颜色。\r\n\r\nGL_NEAREST（也叫邻近过滤，Nearest Neighbor\r\nFiltering）是OpenGL默认的纹理过滤方式。当设置为GL_NEAREST的时候，OpenGL会选择中心点最接近纹理坐标的那个像素。下图中你可以看到四个像素，加号代表纹理坐标。左上角那个纹理像素的中心距离纹理坐标最近，所以它会被选择为样本颜色：\r\n\r\n\r\nimg\r\n\r\nGL_LINEAR（也叫线性过滤，(Bi)linear\r\nFiltering）它会基于纹理坐标附近的纹理像素，计算出一个插值，近似出这些纹理像素之间的颜色。一个纹理像素的中心距离纹理坐标越近，那么这个纹理像素的颜色对最终的样本颜色的贡献越大。下图中你可以看到返回的颜色是邻近像素的混合色：\r\n\r\n\r\nimg\r\n\r\n那么这两种纹理过滤方式有怎样的视觉效果呢？让我们看看在一个很大的物体上应用一张低分辨率的纹理会发生什么吧（纹理被放大了，每个纹理像素都能看到）：\r\n\r\n\r\nimg\r\n\r\nGL_NEAREST产生了颗粒状的图案，我们能够清晰看到组成纹理的像素，而GL_LINEAR能够产生更平滑的图案，很难看出单个的纹理像素。GL_LINEAR可以产生更真实的输出，但有些开发者更喜欢8-bit风格，所以他们会用GL_NEAREST选项。\r\n当进行放大(Magnify)和缩小(Minify)操作的时候可以设置纹理过滤的选项，比如你可以在纹理被缩小的时候使用邻近过滤，被放大时使用线性过滤。我们需要使用glTexParameter*函数为放大和缩小指定过滤方式。这段代码看起来会和纹理环绕方式的设置很相似：\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\r\n1.6.4 多级渐远纹理\r\n想象一下，假设我们有一个包含着上千物体的大房间，每个物体上都有纹理。有些物体会很远，但其纹理会拥有与近处物体同样高的分辨率。由于远处的物体可能只产生很少的片段，OpenGL从高分辨率纹理中为这些片段获取正确的颜色值就很困难，因为它需要对一个跨过纹理很大部分的片段只拾取一个纹理颜色，这在小物体上这会产生不真实的感觉，更不用说对它们使用高分辨率纹理浪费内存的问题了。\r\nOpenGL使用一种叫做多级渐远纹理(Mipmap)的概念来解决这个问题，它简单来说就是一系列的纹理图像，后一个纹理图像是前一个的二分之一。多级渐远纹理背后的理念很简单：距观察者的距离超过一定的阈值，OpenGL会使用不同的多级渐远纹理，即最适合物体的距离的那个。由于距离远，解析度不高也不会被用户注意到。同时，多级渐远纹理另一加分之处是它的性能非常好。让我们看一下多级渐远纹理是什么样子的：\r\n\r\n\r\nimg\r\n\r\n手工为每个纹理图像创建一系列多级渐远纹理很麻烦，幸好OpenGL有一个glGenerateMipmaps函数，在创建完一个纹理后调用它OpenGL就会承担接下来的所有工作了。后面的教程中你会看到该如何使用它。\r\n在渲染中切换多级渐远纹理级别(Level)时，OpenGL在两个不同级别的多级渐远纹理层之间会产生不真实的生硬边界。就像普通的纹理过滤一样，切换多级渐远纹理级别时你也可以在两个不同多级渐远纹理级别之间使用NEAREST和LINEAR过滤。为了指定不同多级渐远纹理级别之间的过滤方式，你可以使用下面四个选项中的一个代替原有的过滤方式：\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n过滤方式\r\n描述\r\n\r\n\r\n\r\n\r\nGL_NEAREST_MIPMAP_NEAREST\r\n使用最邻近的多级渐远纹理来匹配像素大小，并使用邻近插值进行纹理采样\r\n\r\n\r\nGL_LINEAR_MIPMAP_NEAREST\r\n使用最邻近的多级渐远纹理级别，并使用线性插值进行采样\r\n\r\n\r\nGL_NEAREST_MIPMAP_LINEAR\r\n在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用邻近插值进行采样\r\n\r\n\r\nGL_LINEAR_MIPMAP_LINEAR\r\n在两个邻近的多级渐远纹理之间使用线性插值，并使用线性插值进行采样\r\n\r\n\r\n\r\n就像纹理过滤一样，我们可以使用glTexParameteri将过滤方式设置为前面四种提到的方法之一：\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\r\n一个常见的错误是，将放大过滤的选项设置为多级渐远纹理过滤选项之一。这样没有任何效果，因为多级渐远纹理主要是使用在纹理被缩小的情况下的：纹理放大不会使用多级渐远纹理，为放大过滤设置多级渐远纹理的选项会产生一个GL_INVALID_ENUM错误代码。\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/05Texture","date":"2023-03-08T02:25:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"eb947faf7dc84fa49cb79bdd22ec183a","title":"learningOpenGl Chapter 1.5","content":"1.5 Shaders\r\n\r\n着色器(Shader)是运行在GPU上的小程序。这些小程序为图形渲染管线的某个特定部分而运行。\r\n从基本意义上来说，着色器只是一种把输入转化为输出的程序。着色器也是一种非常独立的程序，因为它们之间不能相互通信；它们之间唯一的沟通只有通过输入和输出。\r\n\r\n1.5.1 GLSL\r\nOpenGL中的Shader是用一种叫GLSL的类C语言写成的。GLSL是为图形计算量身定制的，它包含一些针对向量和矩阵操作的有用特性。\r\n着色器的开头总是要声明版本，接着是输入和输出变量、uniform和main函数。每个着色器的入口点都是main函数，在这个函数中我们处理所有的输入变量，并将结果输出到输出变量中。一个典型的着色器有下面的结构：\r\n#version version_number\n\nin type in_variable_name;\nin type in_variable_name;\n\nout type out_variable_name;\n\nuniform type uniform_name;\n\nint main()\n&#123;\n  &#x2F;&#x2F; 处理输入并进行一些图形操作\n  ...\n  &#x2F;&#x2F; 输出处理过的结果到输出变量\n  out_variable_name &#x3D; weird_stuff_we_processed;\n&#125;\r\n特别的，当我们特别谈论到顶点着色器的时候，每个输入变量也叫顶点属性(Vertex\r\nAttribute)。我们能声明的顶点属性是有上限的，它一般由硬件来决定。OpenGL确保至少有16个包含4分量的顶点属性可用，但是有些硬件或许允许更多的顶点属性，你可以查询GL_MAX_VERTEX_ATTRIBS来获取具体的上限：\r\nGLint nrAttributes;\nglGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &amp;nrAttributes);\nstd::cout &lt;&lt; &quot;Maximum nr of vertex attributes supported: &quot; &lt;&lt; nrAttributes &lt;&lt; std::endl;\r\n通常情况下它至少会返回16个，大部分情况下是够用了。\r\n1.5.2 数据类型\r\nGLSL有数据类型可以来指定变量的种类。\r\nGLSL中包含C等其它语言大部分的默认基础数据类型：int、float、double、uint和bool。\r\nGLSL也有两种特殊的但是容器类型，分别是向量(Vector)和矩阵(Matrix)\r\n1.5.2.1 向量容器\r\n\r\n向量是一种灵活的数据类型，我们可以把用在各种输入和输出上。\r\n\r\n1.5.2.1.1 向量容器的存在形式\r\n\r\nGLSL中的向量是一个可以包含有1、2、3或者4个分量的容器，分量的类型可以是前面默认基础类型的任意一个。\r\n\r\n在GLSL中，向量容器中可以容纳的基本内容可以是：\r\n\r\n\r\n\r\n类型\r\n含义\r\n\r\n\r\n\r\n\r\nvecn\r\n包含n个float分量的默认向量\r\n\r\n\r\nbvecn\r\n包含n个bool分量的向量\r\n\r\n\r\nivecn\r\n包含n个int分量的向量\r\n\r\n\r\nuvecn\r\n包含n个unsigned int分量的向量\r\n\r\n\r\ndvecn\r\n包含n个double分量的向量\r\n\r\n\r\n\r\n1.5.2.1.2 向量容器内容获取\r\n以vec4类型的向量\"test\"为例，想要获取其中的各个分量，可以使用：\r\ntest.x; test.y; test.z;\r\ntest.w （位置坐标）\r\n这种分量的获取方式，完全等同于 rgba（颜色值） 与\r\nstpq（纹理坐标），但是为了维护程序良好的可读性，请务必根据具体数据类型选择分量的获取方式\r\n1.5.2.1.3 Swizzling:\r\n向量容器内容的“重组”\r\n向量这一数据类型也允许一些有趣而灵活的分量选择方式，叫做重组(Swizzling)。重组允许这样的语法：\r\nvec2 someVec;\nvec4 differentVec &#x3D; someVec.xyxx;\nvec3 anotherVec &#x3D; differentVec.zyw;\nvec4 otherVec &#x3D; someVec.xxxx + anotherVec.yxzy;\r\n你可以使用上面4个字母任意组合来创建一个和原来向量一样长的（同类型）新向量，只要原来向量有那些分量即可；然而，你不允许在一个vec2向量中去获取.z元素。我们也可以把一个向量作为一个参数传给不同的向量构造函数，以减少需求参数的数量：\r\nvec2 vect &#x3D; vec2(0.5f, 0.7f);\nvec4 result &#x3D; vec4(vect, 0.0f, 0.0f);\nvec4 otherResult &#x3D; vec4(result.xyz, 1.0f);\r\n1.5.2.2 矩阵\r\n1.5.3 数据输入与输出\r\n\r\n虽然Shader是各自独立的小程序，但是它们都是渲染管线上的一小部分，出于这样的原因，我们希望每个Shader都有输入和输出，这样才能进行数据交流和传递。GLSL定义了in和out关键字专门来实现这个目的。每个着色器使用这两个关键字设定输入和输出，只要一个输出变量与下一个着色器阶段的输入匹配，它就会传递下去。但在顶点和片段着色器中会有点不同。\r\n\r\n顶点着色器应该接收的是一种特殊形式的输入，否则就会效率低下。顶点着色器的输入特殊在，它从顶点数据中直接接收输入。为了定义顶点数据该如何管理，我们使用location这一元数据指定输入变量，这样我们才可以在CPU上配置顶点属性。我们已经在前面的教程看过这个了，layout (location = 0)。顶点着色器需要为它的输入提供一个额外的layout标识，这样我们才能把它链接到顶点数据。\r\n\r\nVertex\r\nShader - OpenGL Wiki (khronos.org)\r\nFragment\r\nShader - OpenGL Wiki (khronos.org)\r\nopengl\r\n- How does the fragment shader know what variable to use for the color\r\nof a pixel? - Stack Overflow\r\n\r\n如果我们打算从一个着色器向另一个着色器发送数据，我们必须在发送方着色器中声明一个输出，在接收方着色器中声明一个类似的输入。当类型和名字都一样的时候，OpenGL就会把两个变量链接到一起，它们之间就能发送数据了（这是在链接程序对象时完成的）。\r\n示例如下：\r\n&#x2F;&#x2F; 顶点着色器\n#version 330 core\nlayout (location &#x3D; 0) in vec3 position; &#x2F;&#x2F; position变量的属性位置值为0\nout vec4 vertexColor; &#x2F;&#x2F; 为片段着色器指定一个颜色输出\nvoid main() &#123;\n    gl_Position &#x3D; vec4(position, 1.0); &#x2F;&#x2F; 注意我们如何把一个vec3作为vec4的构造器的参数\n    vertexColor &#x3D; vec4(0.5f, 0.0f, 0.0f, 1.0f); &#x2F;&#x2F; 把输出变量设置为暗红色\n&#125;\n\n&#x2F;&#x2F; 片段着色器\n#version 330 core\nin vec4 vertexColor; &#x2F;&#x2F; 从顶点着色器传来的输入变量（名称相同、类型相同）\nout vec4 color; &#x2F;&#x2F; 片段着色器输出的变量名可以任意命名，但类型必须是vec4\nvoid main() &#123;\n    color &#x3D; vertexColor;\n&#125;\r\n1.5.4 Uniform\r\n\r\nUniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，但uniform和顶点属性有些不同。首先，uniform是全局的(Global)，这意味着它可以被着色器程序的任意着色器在任意阶段访问。在完成一次设置（赋值）后，无论你把uniform值设置成什么，uniform会一直保存它们的数据，直到它们被重置或更新。\r\n\r\n我们可以在一个着色器中添加uniform关键字至类型和变量名前来声明一个GLSL的uniform。\r\n示例如下：我在片段着色器中声明一个uniform\r\nvec4的变量，并把片段着色器的输出颜色设置为该变量的值。\r\n#version 330 core\nout vec4 color;\n\nuniform vec4 ourColor; &#x2F;&#x2F; 在OpenGL程序代码中设定这个变量\n\nvoid main() &#123;\n    color &#x3D; ourColor;\n&#125;  \r\n由于uniform变量是全局变量，因此我们可以在任何shader中定义它们，而无需像1.5.3那样用in\r\nout作为中介来传递到目标Shader中。因此，既然顶点着色器中不需要这个uniform，那我们便不在那里定义它。\r\n:warning:如果你声明了一个uniform却在GLSL代码中没用过，编译器会静默移除这个变量\r\n而在shader中写下的ourColor，只是一个声明/定义，这个uniform现在还是空的，我们还没有给它添加任何数据。还记得吗：“Uniform是一种从CPU中的应用向GPU中的着色器发送数据的方式”，也就是说，Uniform的具体定义及实现应该在CPU也就是main.c里完成而不是Shader中\r\n我们可以这样：\r\n...(game loop); &#x2F;&#x2F; 做底色等等\n\nGLint vertexColorLocation &#x3D; glGetUniformLocation(shaderProgram, &quot;ourColor&quot;); &#x2F;&#x2F; 在CPU阶段，查找对应Uniform定义\n&#x2F;&#x2F; 拿到该Uniform变量后，我们就可以对其进行处理。\n\nGLfloat timeValue &#x3D; glfwGetTime(); &#x2F;&#x2F; 获取时间\nGLfloat greenValue &#x3D; (sin(timeValue) &#x2F; 2) + 0.5; &#x2F;&#x2F; 对时间求sin，结果在(-1, 1)，值在(0, 1)波动\n\nglUseProgram(shaderProgram); &#x2F;&#x2F; 先激活着色器(Use)，再更新Uniform\nglUniform4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);\n\n...(draw&amp;call); &#x2F;&#x2F; draw call在这之后\r\n1.5.5 解决更多属性\r\n\r\n如有必要，请重新回看1.4部分\r\n\r\n在前面的教程中，我们了解了如何填充VBO、配置顶点属性指针以及如何把它们都储存到一个VAO里。这次，我们同样打算把颜色数据加进顶点数据中。我们将把颜色数据添加为3个float值至vertices数组。我们将把三角形的三个角分别指定为红色、绿色和蓝色：\r\nGLfloat vertices[] &#x3D; &#123;\n    &#x2F;&#x2F; 位置              &#x2F;&#x2F; 颜色\n     0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,   &#x2F;&#x2F; 右下\n    -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   &#x2F;&#x2F; 左下\n     0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f    &#x2F;&#x2F; 顶部\n&#125;;\r\n根据我们的数据，我们需要做的修改如下：\r\n\r\nVS，接收新的Color信息\r\nFS，接受该Color信息\r\nmain.c，对该数据进行解析，配置VAO指针等\r\n\r\n特别注意，glVertexAttribPointer函数有两处修改：\r\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);\nglVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));\n&#x2F;&#x2F; 1. 修改了步长\n&#x2F;&#x2F; 2. 修改了偏移量，注意偏移量的具体格式与计算思路（对于每个顶点来说，位置顶点属性在前，所以它的偏移量是0。颜色属性紧随位置数据之后，所以偏移量就是3 * sizeof(GLfloat)，用字节来计算就是12字节）\r\n这个图片可能不是你所期望的\"只有3个颜色\"(因为我们只提供了3个颜色)，这是一个大调色板——这是在片段着色器中进行的所谓片段插值(Fragment\r\nInterpolation)的结果。\r\n\r\n当渲染一个三角形时，光栅化(Rasterization)阶段通常会造成比原指定顶点更多的片段。光栅会根据每个片段在三角形形状上所处相对位置决定这些片段的位置。基于这些位置，它会插值(Interpolate)所有片段着色器的输入变量。比如说，我们有一个线段，上面的端点是绿色的，下面的端点是蓝色的。如果一个片段着色器在线段的70%的位置运行，它的颜色输入属性就会是一个绿色和蓝色的线性结合；更精确地说就是30%蓝\r\n+ 70%绿。\r\n这正是在这个三角形中发生了什么。我们有3个顶点，和相应的3个颜色，从这个三角形的像素来看它可能包含50000左右的片段，片段着色器为这些像素进行插值颜色。如果你仔细看这些颜色就应该能明白了：红首先变成到紫再变为蓝色。片段插值会被应用到片段着色器的所有输入属性上。\r\n\r\n1.5.6 我们自己的着色器类\r\n\r\n编写、编译、管理着色器是件麻烦事。在着色器主题的最后，我们会写一个类来让我们的生活轻松一点，它可以从硬盘读取着色器，然后编译并链接它们，并对它们进行错误检测，这就变得很好用了。这也会让你了解该如何封装目前所学的知识到一个抽象对象中。\r\n我们会把着色器类全部放在在头文件里，主要是为了学习用途，当然也方便移植。我们先来添加必要的include，并定义类结构：\r\n&gt;#ifndef SHADER_H\n&gt;#define SHADER_H\n\n&gt;#include &lt;string&gt;\n&gt;#include &lt;fstream&gt;\n&gt;#include &lt;sstream&gt;\n&gt;#include &lt;iostream&gt;\n\n&gt;#include &lt;GL&#x2F;glew.h&gt;; &#x2F;&#x2F; 包含glew来获取所有的必须OpenGL头文件\n\n&gt;class Shader\n&gt;&#123;\n&gt;public:\n   &#x2F;&#x2F; 程序ID\n   GLuint Program;\n   &#x2F;&#x2F; 构造器读取并构建着色器\n   Shader(const GLchar* vertexPath, const GLchar* fragmentPath);\n   &#x2F;&#x2F; 使用程序\n   void Use();\n&gt;&#125;;\n\n&gt;#endif\r\n:warning:在上面，我们在头文件顶部使用了几个预处理指令(Preprocessor\r\nDirectives)。这些预处理指令会告知你的编译器只在它没被包含过的情况下才包含和编译这个头文件，即使多个文件都包含了这个着色器头文件。它是用来防止链接冲突的。\r\n着色器类储存了着色器程序的ID。它的构造器需要顶点和片段着色器源代码的文件路径，这样我们就可以把源码的文本文件储存在硬盘上了。我们还添加了一个Use函数，它其实不那么重要，但是能够显示这个自造类如何让我们的生活变得轻松（虽然只有一点）。\r\n从文件读取\r\n我们使用C++文件流读取着色器内容，储存到几个string对象里：\r\n&gt;Shader(const GLchar* vertexPath, const GLchar* fragmentPath)\n&gt;&#123;\n   &#x2F;&#x2F; 1. 从文件路径中获取顶点&#x2F;片段着色器\n   std::string vertexCode;\n   std::string fragmentCode;\n   std::ifstream vShaderFile;\n   std::ifstream fShaderFile;\n   &#x2F;&#x2F; 保证ifstream对象可以抛出异常：\n   vShaderFile.exceptions(std::ifstream::badbit);\n   fShaderFile.exceptions(std::ifstream::badbit);\n   try \n   &#123;\n       &#x2F;&#x2F; 打开文件\n       vShaderFile.open(vertexPath);\n       fShaderFile.open(fragmentPath);\n       std::stringstream vShaderStream, fShaderStream;\n       &#x2F;&#x2F; 读取文件的缓冲内容到流中\n       vShaderStream &lt;&lt; vShaderFile.rdbuf();\n       fShaderStream &lt;&lt; fShaderFile.rdbuf();       \n       &#x2F;&#x2F; 关闭文件\n       vShaderFile.close();\n       fShaderFile.close();\n       &#x2F;&#x2F; 转换流至GLchar数组\n       vertexCode &#x3D; vShaderStream.str();\n       fragmentCode &#x3D; fShaderStream.str();     \n   &#125;\n   catch(std::ifstream::failure e)\n   &#123;\n       std::cout &lt;&lt; &quot;ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ&quot; &lt;&lt; std::endl;\n   &#125;\n   const GLchar* vShaderCode &#x3D; vertexCode.c_str();\n   const GLchar* fShaderCode &#x3D; fragmentCode.c_str();\n   [...]\r\n下一步，我们需要编译和链接着色器。注意，我们也将检查编译/链接是否失败，如果失败则打印编译时错误，调试的时候这些错误输出会及其重要（你总会需要这些错误日志的）：\r\n&gt;&#x2F;&#x2F; 2. 编译着色器\n&gt;GLuint vertex, fragment;\n&gt;GLint success;\n&gt;GLchar infoLog[512];\n\n&gt;&#x2F;&#x2F; 顶点着色器\n&gt;vertex &#x3D; glCreateShader(GL_VERTEX_SHADER);\n&gt;glShaderSource(vertex, 1, &amp;vShaderCode, NULL);\n&gt;glCompileShader(vertex);\n&gt;&#x2F;&#x2F; 打印编译错误（如果有的话）\n&gt;glGetShaderiv(vertex, GL_COMPILE_STATUS, &amp;success);\n&gt;if(!success)\n&gt;&#123;\n   glGetShaderInfoLog(vertex, 512, NULL, infoLog);\n   std::cout &lt;&lt; &quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot; &lt;&lt; infoLog &lt;&lt; std::endl;\n&gt;&#125;;\n\n&gt;&#x2F;&#x2F; 片段着色器也类似\n&gt;[...]\n\n&gt;&#x2F;&#x2F; 着色器程序\n&gt;this-&gt;Program &#x3D; glCreateProgram();\n&gt;glAttachShader(this-&gt;Program, vertex);\n&gt;glAttachShader(this-&gt;Program, fragment);\n&gt;glLinkProgram(this-&gt;Program);\n&gt;&#x2F;&#x2F; 打印连接错误（如果有的话）\n&gt;glGetProgramiv(this-&gt;Program, GL_LINK_STATUS, &amp;success);\n&gt;if(!success)\n&gt;&#123;\n   glGetProgramInfoLog(this-&gt;Program, 512, NULL, infoLog);\n   std::cout &lt;&lt; &quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\\n&quot; &lt;&lt; infoLog &lt;&lt; std::endl;\n&gt;&#125;\n\n&gt;&#x2F;&#x2F; 删除着色器，它们已经链接到我们的程序中了，已经不再需要了\n&gt;glDeleteShader(vertex);\n&gt;glDeleteShader(fragment);\r\n最后我们也会实现Use函数：\r\n&gt;void Use()\n&gt;&#123;\n   glUseProgram(this-&gt;Program);\n&gt;&#125;\r\n现在我们就写完了一个完整的着色器类。使用这个着色器类很简单；只要创建一个着色器对象，从那一点开始我们就可以开始使用了：\r\n&gt;Shader ourShader(&quot;path&#x2F;to&#x2F;shaders&#x2F;shader.vs&quot;, &quot;path&#x2F;to&#x2F;shaders&#x2F;shader.frag&quot;);\n&gt;...\n&gt;while(...)\n&gt;&#123;\n   ourShader.Use();\n   glUniform1f(glGetUniformLocation(ourShader.Program, &quot;someUniform&quot;), 1.0f);\n   DrawStuff();\n&gt;&#125;\r\n我们把顶点和片段着色器储存为两个叫做shader.vs和shader.frag的文件。你可以使用自己喜欢的名字命名着色器文件；我自己觉得用.vs和.frag作为扩展名很直观。\r\n源码：使用新着色器类的程序，着色器类，顶点着色器，和片段着色器。\r\n\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/04Shaders","date":"2023-03-08T02:24:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"4fc32846a71333fda5c166e6a4c0c980","title":"learningOpenGl Chapter 1.4","content":"1.4 绘制三角形\r\n\r\n在OpenGL中，任何事物都在3D空间中，而屏幕和窗口却是2D像素数组，这导致OpenGL的大部分工作都是关于把3D坐标转变为适应你屏幕的2D像素。\r\n\r\n\r\n3D坐标转为2D坐标的处理过程是由OpenGL的图形渲染管线（Graphics\r\nPipeline，大多译为管线，实际上指的是一堆原始图形数据途经一个输送管道，期间经过各种变化处理最终出现在屏幕的过程）管理的。\r\n图形渲染管线可以被划分为两个主要部分：\r\n\r\n第一部分把你的3D坐标转换为2D坐标；\r\n第二部分是把2D坐标转变为实际的有颜色的像素。\r\n\r\n这个教程里，我们会简单地讨论一下图形渲染管线，以及如何利用它创建一些漂亮的像素。\r\n\r\n\r\n\r\n注意：2D坐标和像素也是不同的，2D坐标精确表示一个点在2D空间中的位置，而2D像素是这个点的近似值，2D像素受到你的屏幕/窗口分辨率的限制。\r\n\r\n\r\n1.4.1 浅谈图形渲染管线\r\n\r\n图形渲染管线接受一组3D坐标，然后把它们转变为屏幕上的有色2D像素输出。\r\n图形渲染管线可以分为多个阶段，每个阶段的输出都会用作下个阶段的输入\r\n管线的各个阶段很容易并行执行——这样能充分发挥GPU的效能。不同阶段有着不同的功能，这也意味着每个阶段所执行的程序都不同，这种在GPU的渲染管线上运行的程序即为Shader。\r\n并非是所有Shader都是可以配置的：\r\n\r\nVertex Shader\r\nTessellation Shader\r\nGeometry Shader\r\nFragment Shader\r\n\r\n\r\n1.4.2 实现基本的管线\r\n1.4.2.0 在管线处理之前\r\n\r\n标准化设备坐标\r\n\r\n在开始执行依次图形渲染管线之前，我们需要先向程序灌入可用的顶点\r\nGLfloat vertices[] &#x3D; &#123;\n    -0.5f, -0.5f, 0.0f,\n     0.5f, -0.5f, 0.0f,\n     0.0f,  0.5f, 0.0f\n&#125;;\r\n这样的顶点数据会被直接发送给我们渲染管线的第一个阶段：Vertex\r\nShader——它会在GPU上创建内存用于储存我们的顶点数据。当然我们还需要还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点。\r\n1.4.2.1 数据类型\r\n1.4.2.1.1 VBO创建\r\nVBO: Vertex Buffer Objects, VBO, 顶点缓冲对象\r\n我们利用VBO来存储我们发送到GPU的大量顶点。\r\n\r\n顶点从CPU发送到GPU相对较慢，所以我们应该一次性且大量地将顶点数据从CPU传送到GPU上\r\nVS可以很快速地访问显存中的顶点数据\r\n\r\n与OpenGL中的其它对象一样，VBO对象也有一个独一无二的ID，所以我们可以使用glGenBuffers函数和一个ID组合一个VBO对象：\r\nGLuint VBO[1]; &#x2F;&#x2F;这个缓冲有一个独一无二的ID\nglGenBuffers(1, VBO);  &#x2F;&#x2F;在对应位置上生成缓冲\nglBindBuffer(GL_ARRAY_BUFFER, VBO[0]); &#x2F;&#x2F;给缓冲指定类型\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);&#x2F;&#x2F;把已定义的顶点数据复制到VBO中\r\nOpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是GL_ARRAY_BUFFER。OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。\r\n我们可以使用glBindBuffer函数把新创建的缓冲绑定到GL_ARRAY_BUFFER目标(上下文)上。之后我们使用的任何在GL_ARRAY_BUFFER上的缓冲调用都会用来配置当前绑定的VBO。\r\n然后我们就可以调用glBufferData函数，它会把之前定义的顶点数据复制到缓冲的内存中：glBufferData是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。\r\n\r\n它的第一个参数是目标缓冲的类型：顶点缓冲对象当前绑定到GL_ARRAY_BUFFER目标上。\r\n第二个参数指定传输数据的大小(以字节为单位)；用一个简单的sizeof计算出顶点数据大小就行。\r\n第三个参数是我们希望发送的实际数据。\r\n第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：\r\n\r\nGL_STATIC_DRAW ：数据不会或几乎不会改变。\r\nGL_DYNAMIC_DRAW：数据会被改变很多。\r\nGL_STREAM_DRAW ：数据每次绘制时都会改变。\r\n\r\n三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是GL_STATIC_DRAW。如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是GL_DYNAMIC_DRAW或GL_STREAM_DRAW，这样就能确保显卡把数据放在能够高速写入的内存部分。\r\n\r\n1.4.2.1.2 VBO调用\r\n顶点数据以VBO形式加载完成时，它是这样子的：\r\n\r\n\r\nimg\r\n\r\n\r\n位置数据被储存为32-bit（4字节）浮点值: 每个分量如\r\npoint1的x坐标：float类型，4Byte = 32bit;\r\n每个位置包含3个这样的值: 1个point共3个坐标值\r\n在这3个值之间没有空隙（或其他值）。这几个值在数组中紧密排列:\r\n见数组，我们写下point1的坐标后立即跟上的是point2而不是point1的其他如颜色等信息\r\n数据中第一个值在缓冲开始的位置: 也就是没有偏移量。\r\n\r\n根据以上信息：我们便可以着手解析VBO数据以供OpenGL使用了\r\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);\nglEnableVertexAttribArray(0); &#x2F;&#x2F; 启用这个顶点属性\r\nglVertexAttribPointer函数的参数非常多，所以我会逐一介绍它们：\r\n\r\n第一个参数指定我们要配置的顶点属性，这关系着我们将要在具体哪里(哪个顶点属性上)存储这份数据。这关系到我们在VS里调用该数据时所用的数据位置即layout位置：layout(location = 0)即代表该数据的顶点属性的位置值为0。\r\n第二个参数指定顶点属性的大小。顶点属性是一个vec3，它由3个值组成，所以大小是3。\r\n第三个参数指定数据类型，这里是GL_FLOAT(GLSL中vec*都是由浮点数值组成的)。\r\n下个参数定义我们是否希望数据被标准化(Normalize)。如果我们设置为GL_TRUE，所有数据都会被映射到0（对于有符号型signed数据是-1）到1之间。我们把它设置为GL_FALSE。\r\n第五个参数叫做步长(Stride)，它告诉我们在连续的顶点属性组之间的间隔。由于下个组位置数据在3个GLfloat之后，我们把步长设置为3 * sieof(GLfloat)。要注意的是由于我们知道这个数组是紧密排列的（在两个顶点属性之间没有空隙）我们也可以设置为0来让OpenGL决定具体步长是多少（只有当数值是紧密排列时才可用）。一旦我们有更多的顶点属性，我们就必须更小心地定义每个顶点属性之间的间隔，我们在后面会看到更多的例子(译注:\r\n这个参数的意思简单说就是从这个属性第二次出现的地方到整个数组0位置之间有多少字节)。\r\n最后一个参数的类型是GLvoid*，所以需要我们进行这个奇怪的强制类型转换。它表示位置数据在缓冲中起始位置的偏移量(Offset)。由于位置数据在数组的开头，所以这里是0。\r\n\r\n\r\n现在我们已经定义了OpenGL该如何解释顶点数据，并启用了对应的顶点属性（顶点属性默认是禁用的）。\r\n自此，所有东西都已经设置好了：我们使用一个顶点缓冲对象将顶点数据初始化至缓冲中，建立了一个顶点和一个片段着色器，并告诉了OpenGL如何把顶点数据链接到顶点着色器的顶点属性上。在OpenGL中绘制一个物体，代码会像是这样：\r\n&gt;&#x2F;&#x2F; 0. 复制顶点数组到缓冲中供OpenGL使用\n&gt;glBindBuffer(GL_ARRAY_BUFFER, VBO);\n&gt;glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n&gt;&#x2F;&#x2F; 1. 设置顶点属性指针\n&gt;glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);\n&gt;glEnableVertexAttribArray(0);\n&gt;&#x2F;&#x2F; 2. 当我们渲染一个物体时要使用着色器程序\n&gt;glUseProgram(shaderProgram);\n&gt;&#x2F;&#x2F; 3. 绘制物体\n&gt;someOpenGLFunctionThatDrawsOurTriangle();\r\n每当我们绘制一个物体的时候都必须重复这一过程。这看起来可能不多，但是如果有超过5个顶点属性，上百个不同物体呢（这其实并不罕见）。绑定正确的缓冲对象，为每个物体配置所有顶点属性很快就变成一件麻烦事。有没有一些方法可以使我们把所有这些状态配置储存在一个对象中，并且可以通过绑定这个对象来恢复状态呢？\r\n\r\n1.4.2.1.3 VAO\r\n\r\n顶点数组对象(Vertex Array Object,\r\nVAO)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中\r\n\r\nOpenGL的核心模式要求我们使用VAO，所以它知道该如何处理我们的顶点输入。如果我们绑定VAO失败，OpenGL会拒绝绘制任何东西。\r\n\r\n\r\n一个顶点数组对象会储存以下这些内容：\r\n\r\nglEnableVertexAttribArray和glDisableVertexAttribArray的调用。\r\n通过glVertexAttribPointer调用设置的顶点属性配置。\r\n通过glVertexAttribPointer调用进行的顶点缓冲对象与顶点属性链接。\r\n\r\n\r\n\r\nimg\r\n\r\n创建一个VAO和创建一个VBO很类似：\r\nGLuint VAO; &#x2F;&#x2F; ID\nglGenVertexArrays(1, &amp;VAO); &#x2F;&#x2F; 对象  \r\n要想使用VAO，要做的只是使用glBindVertexArray绑定VAO。从绑定之后起，我们应该绑定和配置对应的VBO和属性指针，之后解绑VAO供之后使用。当我们打算绘制一个物体的时候，我们只要在绘制物体前简单地把VAO绑定到希望使用的设定上就行了。这段代码应该看起来像这样：\r\n&#x2F;&#x2F; ..:: 初始化代码（只运行一次 (除非你的物体频繁改变)） :: ..\n&#x2F;&#x2F; 1. 绑定VAO\nglBindVertexArray(VAO);\n    &#x2F;&#x2F; 2. 把顶点数组复制到缓冲中供OpenGL使用\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n    &#x2F;&#x2F; 3. 设置顶点属性指针\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);\n    glEnableVertexAttribArray(0);\n&#x2F;&#x2F;4. 解绑VAO\nglBindVertexArray(0);\n\n[...]\n\n&#x2F;&#x2F; ..:: 绘制代（游戏循环中） :: ..\n&#x2F;&#x2F; 5. 绘制物体\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nsomeOpenGLFunctionThatDrawsOurTriangle();\nglBindVertexArray(0);\r\n1.4.2.1.4 EBO\r\n在渲染顶点这一话题上我们还有最有一个需要讨论的东西——索引缓冲对象(Element\r\nBuffer Object，EBO，也叫Index Buffer\r\nObject，IBO)。要解释索引缓冲对象的工作方式最好还是举个例子：假设我们不再绘制一个三角形而是绘制一个矩形。我们可以绘制两个三角形来组成一个矩形（OpenGL主要处理三角形）。这会生成下面的顶点的集合：\r\nGLfloat vertices[] &#x3D; &#123;\n    &#x2F;&#x2F; 第一个三角形\n    0.5f, 0.5f, 0.0f,   &#x2F;&#x2F; 右上角\n    0.5f, -0.5f, 0.0f,  &#x2F;&#x2F; 右下角\n    -0.5f, 0.5f, 0.0f,  &#x2F;&#x2F; 左上角\n    &#x2F;&#x2F; 第二个三角形\n    0.5f, -0.5f, 0.0f,  &#x2F;&#x2F; 右下角\n    -0.5f, -0.5f, 0.0f, &#x2F;&#x2F; 左下角\n    -0.5f, 0.5f, 0.0f   &#x2F;&#x2F; 左上角\n&#125;;\r\n可以看到，有几个顶点叠加了。我们指定了右下角和左上角两次！一个矩形只有4个而不是6个顶点，这样就产生50%的额外开销。当我们有包括上千个三角形的模型之后这个问题会更糟糕，这会产生一大堆浪费。更好的解决方案是只储存不同的顶点，并设定绘制这些顶点的顺序。这样子我们只要储存4个顶点就能绘制矩形了，之后只要指定绘制的顺序就行了。如果OpenGL提供这个功能就好了，对吧？\r\n很幸运，索引缓冲对象的工作方式正是这样的。和顶点缓冲对象一样，EBO也是一个缓冲，它专门储存索引，OpenGL调用这些顶点的索引来决定该绘制哪个顶点。所谓的索引绘制(Indexed\r\nDrawing)正是我们问题的解决方案。首先，我们先要定义（独一无二的）顶点，和绘制出矩形所需的索引：\r\nGLfloat vertices[] &#x3D; &#123;\n    0.5f, 0.5f, 0.0f,   &#x2F;&#x2F; 右上角\n    0.5f, -0.5f, 0.0f,  &#x2F;&#x2F; 右下角\n    -0.5f, -0.5f, 0.0f, &#x2F;&#x2F; 左下角\n    -0.5f, 0.5f, 0.0f   &#x2F;&#x2F; 左上角\n&#125;;\n\nGLuint indices[] &#x3D; &#123; &#x2F;&#x2F; 注意索引从0开始! \n    0, 1, 3, &#x2F;&#x2F; 第一个三角形\n    1, 2, 3  &#x2F;&#x2F; 第二个三角形\n&#125;;\r\n你可以看到，当时用索引的时候，我们只定义了4个顶点，而不是6个。下一步我们需要创建索引缓冲对象：\r\n&#x2F;&#x2F; almost as same as VBO; notice third and forth lines that use different_缓冲目标: GL_ELEMENT_ARRAY_BUFFER\nGLuint EBO; \nglGenBuffers(1, &amp;EBO);\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW); \r\n最后，用glDrawElements函数绘图：\r\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\r\n\r\n第一个参数指定了我们绘制的模式，这个和glDrawArrays的一样。\r\n第二个参数是我们打算绘制顶点的个数，这里填6，也就是说我们一共需要绘制6个顶点。\r\n第三个参数是索引的类型，这里是GL_UNSIGNED_INT。\r\n最后一个参数里我们可以指定EBO中的偏移量（或者传递一个索引数组，但是这是当你不在使用索引缓冲对象的时候），但是我们会在这里填写0。\r\n\r\nglDrawElements函数从当前绑定到GL_ELEMENT_ARRAY_BUFFER目标的EBO中获取索引。这意味着我们必须在每次要用索引渲染一个物体时绑定相应的EBO，这还是有点麻烦。不过顶点数组对象同样可以保存索引缓冲对象的绑定状态。VAO绑定时正在绑定的索引缓冲对象会被保存为VAO的元素缓冲对象。绑定VAO的同时也会自动绑定EBO。\r\n\r\n\r\nimg\r\n\r\n最后的初始化和绘制代码现在看起来像这样：\r\n&#x2F;&#x2F; ..:: 初始化代码 :: ..\n&#x2F;&#x2F; 1. 绑定顶点数组对象\nglBindVertexArray(VAO);\n    &#x2F;&#x2F; 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用\n    glBindBuffer(GL_ARRAY_BUFFER, VBO);\n    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n    &#x2F;&#x2F; 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用\n    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\n    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n    &#x2F;&#x2F; 3. 设定顶点属性指针\n    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);\n    glEnableVertexAttribArray(0);\n&#x2F;&#x2F; 4. 解绑VAO（不是EBO！）\nglBindVertexArray(0);\n\n[...]\n\n&#x2F;&#x2F; ..:: 绘制代码（游戏循环中） :: ..\n\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\nglBindVertexArray(0);\r\n1.4.2.2 Vertex Shader\r\n1.4.2.2.1 编写VS\r\n#version 330 core &#x2F;&#x2F;版本信息声明，每个着色器都起始于一个版本声明\n\nlayout (location &#x3D; 0) in vec3 position; \n&#x2F;&#x2F;这里有两个要点\n&#x2F;&#x2F; 1* layout 关键字：指定了输入变量所在的“位置”\n&#x2F;&#x2F; 2* in 关键字 ：这声明了这是一个从app阶段传入的属性\n\t&#x2F;&#x2F;我们应在顶点着色器中声明所有的输入顶点属性(Input Vertex Attribute)，这里我们先只使用position\n\nvoid main()&#123; &#x2F;&#x2F; shader程序主函数\n    gl_Position &#x3D; vec4(position.x, position.y, position.z, 1.0);\n    &#x2F;&#x2F;将3维的position转为了一个4维向量以用于矩阵变换\n    \n    &#x2F;&#x2F; 我们并没有利用out关键字定义gl_Position就可以直接使用的原因是：这是一个predefined variable\n&#125;\r\n1.4.2.2.2 编译VS\r\n为了在我们的opengl程序中使用这个VS，我们需要在main.c内读取这个VS并且编译执行它：\r\nGLuint vertexShader; &#x2F;&#x2F;仍然优先创建ID\nvertexShader &#x3D; glCreateShader(GL_VERTEX_SHADER); &#x2F;&#x2F;在ID上创建一个Shader“对象”。由于我们正在创建一个顶点着色器，传递的参数是GL_VERTEX_SHADER。\nglShaderSource(vertexShader, 1, &amp;vertexShaderSource, NULL); &#x2F;&#x2F; “转移代码”，“转存”\n&#x2F;&#x2F; 保存着色器源码的着色器对象作为第一个参数；Specifies the handle of the shader object whose source code is to be replaced\n&#x2F;&#x2F; 第二参数指定了传递的源码字符串数量，这里只有一个\n&#x2F;&#x2F; 第三个参数是顶点着色器真正的源码; Specifies an array of pointers to strings containing the source code to be loaded into the shader\n&#x2F;&#x2F; 第四个参数我们先设置为NULL\n\nglCompileShader(vertexShader); &#x2F;&#x2F; 最终编译\r\n1.4.2.2.3 检验编译成果\r\n\r\n你可能会希望检测在调用glCompileShader后编译是否成功了，如果没成功的话，你还会希望知道错误是什么，这样你才能修复它们。检测编译时错误可以通过以下代码来实现：\r\n&gt;GLint success;\n&gt;GLchar infoLog[512];\n&gt;glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);\r\n首先我们定义一个整型变量来表示是否成功编译，还定义了一个储存错误消息（如果有的话）的容器。然后我们用glGetShaderiv检查是否编译成功。如果编译失败，我们会用glGetShaderInfoLog获取错误消息，然后打印它。\r\n&gt;if(!success)\n&gt;&#123;\n   glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);\n   std::cout &lt;&lt; &quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n&quot; &lt;&lt; infoLog &lt;&lt; std::endl;\n&gt;&#125;\r\n如果编译的时候没有检测到任何错误，顶点着色器就被编译成功了。\r\n\r\n1.4.2.3 Fragment Shader\r\n\r\n片段着色器(Fragment\r\nShader)是第二个也是最后一个我们打算创建的用于渲染三角形的着色器。片段着色器全是关于计算你的像素最后的颜色输出。为了让事情更简单，我们的片段着色器将会一直输出橘黄色。\r\n\r\n在计算机图形中颜色被表示为有4个元素的数组：红色、绿色、蓝色和alpha(透明度)分量，通常缩写为RGBA。当在OpenGL或GLSL中定义一个颜色的时候，我们把颜色每个分量的强度设置在0.0到1.0之间。比如说我们设置红为1.0f，绿为1.0f，我们会得到两个颜色的混合色，即黄色。这三种颜色分量的不同调配可以生成超过1600万种不同的颜色！\r\n\r\n\r\n#version 330 core &#x2F;&#x2F; same as VS\n\nout vec4 color; &#x2F;&#x2F; out，表示输出用向量；vec4，vec4类型\n\nvoid main()\n&#123;\n    color &#x3D; vec4(1.0f, 0.5f, 0.2f, 1.0f); &#x2F;&#x2F; 写死颜色；RGBA\n&#125;\r\n编译片段着色器的过程与顶点着色器类似，只不过我们使用GL_FRAGMENT_SHADER常量作为着色器类型：\r\nGLuint fragmentShader; &#x2F;&#x2F; ID\nfragmentShader &#x3D; glCreateShader(GL_FRAGMENT_SHADER); &#x2F;&#x2F; 对象\nglShaderSource(fragmentShader, 1, &amp;fragmentShaderSource, null); &#x2F;&#x2F; 转存\nglCompileShader(fragmentShader); &#x2F;&#x2F; 编译\r\n1.4.2.4 着色器对象与连接\r\n着色器程序对象(Shader Program\r\nObject)是多个着色器合并之后并最终链接完成的版本。如果要使用刚才编译的着色器我们必须把它们链接为一个着色器程序对象，然后在渲染对象的时候激活这个着色器程序。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。\r\n当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误。\r\n创建一个程序对象流程如下：\r\nGLuint shaderProgram; &#x2F;&#x2F; ID\nshaderProgram &#x3D; glCreateProgram(); &#x2F;&#x2F; 对象\nglAttachShader(shaderProgram, vertexShader); &#x2F;&#x2F; 装载VS；\nglAttachShader(shaderProgram, fragmentShader); &#x2F;&#x2F; 装载FS\nglLinkProgram(shaderProgram); &#x2F;&#x2F; 使用glLinkProgram来连接这个program对象，这会对已装载的shader做一些处理并解锁一些功能\r\n此时程序对象创建完毕，我们可以调用glUseProgram函数，用刚创建的程序对象作为它的参数，以激活这个程序对象：\r\nglUseProgram(shaderProgram);\r\n在glUseProgram函数调用之后，每个着色器调用和渲染调用都会使用这个程序对象（也就是之前写的着色器)了。\r\n\r\n对了，在把着色器对象链接到程序对象以后，记得删除着色器对象，我们不再需要它们了：\r\n&gt;glDeleteShader(vertexShader);\n&gt;glDeleteShader(fragmentShader);\r\n现在，我们已经把输入顶点数据发送给了GPU，并指示了GPU如何在顶点和片段着色器中处理它。就快要完成了，但还没结束，OpenGL还不知道它该如何解释内存中的顶点数据，以及它该如何将顶点数据链接到顶点着色器的属性上。我们需要告诉OpenGL怎么做。\r\n\r\n1.4.2.5 完成绘制\r\n要想绘制我们想要的物体，OpenGL给我们提供了glDrawArrays函数，它使用当前激活的着色器，之前定义的顶点属性配置，和VBO的顶点数据（通过VAO间接绑定）来绘制图元。\r\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawArrays(GL_TRIANGLES, 0, 3);\nglBindVertexArray(0);  \r\n\r\nglDrawArrays函数第一个参数是我们打算绘制的OpenGL图元的类型。由于我们在一开始时说过，我们希望绘制的是一个三角形，这里传递GL_TRIANGLES给它。\r\n第二个参数指定了顶点数组的起始索引，我们这里填0。\r\n最后一个参数指定我们打算绘制多少个顶点，这里是3（我们只从我们的数据中渲染一个三角形，它只有3个顶点长）。\r\n\r\n完整的程序源码可以在这里找到。\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/03.Hello Triangle","date":"2023-03-08T02:23:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"fa3249ce619228ad8d74e7a819afc946","title":"Regex","content":"Regex\r\n正则运用\r\n当你使用多个捕获组时，请务必小心NULL！这是某个捕获组未能捕获任何内容的结果！\r\n验证：是否有bug\r\n在线正则表达式测试 中文\r\n(oschina.net)\r\n在线正则验证 英文 regex101: build,\r\ntest, and debug regex\r\n在线验证正则表达式结构：Regexper\r\nregex_match\r\n- C++ Reference (cplusplus.com)\r\n第\r\n6 章 正则表达式 现代 C++ 教程: 高速上手 C++ 11/14/17/20 - Modern C++\r\nTutorial: C++ 11/14/17/20 On the Fly (changkun.de)\r\nc++\r\n正则表达式 高性能 - Bing\r\nc++\r\nlocale - Bing\r\n（为什么Fuck Locale）\r\n[‐\\-a-zA-Z0-9\\.]+\r\n正则提速\r\n\r\n让匹配更快失败，尤其是匹配很长的字符串时，匹配失败的位置要比成功的位置多得多。\r\n以简单、必须的字元开始，排除明显不匹配的位置，如锚点(^或$)，特殊字符(x或63A)字符类([a-z]或)，和单词边界(；尽量避免使用分组、选择、重复量词开头，如/one|two/、、等。\r\n使用量词模式时，尽量让重复部分具体化，让字元互斥，如用”[^\"\\r\\n]”代替”.?”（这个依赖回溯）。\r\n减少分支数量、缩小分支范围，用字符集和选项组件来减少分支的出现，或把分支在正则上出现的位置推后，把分支中最常出现的情况放在分支的最前面。\r\ncat|bat -&gt; [cb]at;red|read -&gt; rea?d;red|raw -&gt; r(?:ed|aw); \n\n(.|\\r|\\n) -&gt; [\\s\\S]\r\n精确匹配需要的文本以减少后续的处理，如果需要引用匹配的一部分，可使用捕获，然后通过反向引用来处理。\r\n暴露必需的字元，用/^(ab|cd)/而不是/(^ab|^cd)/。\r\n使用合适的量词，基于预期的回溯数量，使用合适的量词类型。\r\n把正则表达式赋值给变量以便复用和提升提升性能，这样可以让正则减少不必要的编译过程。while\r\n(/regex1/.test(str1)) {/regex2/.exec(str2);…}用下面的代替上面的 var\r\nregex1 = /regex1/,regex2 = /regex2/;while (regex1.test(str1))\r\n{regex2.exec(str2);…}\r\n将复杂的正则表达式拆分成简单的片段，每个正则只在上一个成功的匹配中查找，更高效，而且可以减少回溯。\r\n使用非捕获组，因为捕获组需要消耗时间和内存来记录反向引用，并不断更新，如果不需要反向引用，可用非捕获组(?:…)代替捕获组(…)；当需要全文匹配的反向引用时，可用regex.exec()返回的结果或者在替换字符串是使用$&amp;。\r\n此优化在firefox中效果较小，但其他浏览器中处理长字符串时有较大影响\r\n\r\nAnd More？\r\n觉得正则表达式太慢？这里有一个提速100倍的方案！\r\n- 知乎 (zhihu.com)\r\n项目地址\r\nvi3k6i5/flashtext:\r\nExtract Keywords from sentence or Replace keywords in sentences.\r\n(github.com)\r\n","slug":"Algorithm/String Processing/Regex","date":"2023-03-08T02:22:54.000Z","categories_index":"Algorithm","tags_index":"String Processing,Regex","author_index":"JBR_Bunjie"},{"id":"840d5a833aff18f2fbd4e2e8f83d93a6","title":"learningOpenGl Chapter 1.3","content":"1.3 你好，窗口\r\n1.3.1 引入库，并作基本初始化\r\nLet's see if we can get GLFW up and running. First, create a\r\n.cpp file and add the following includes to the top of your\r\nnewly created file.\r\n#include &lt;glad&#x2F;glad.h&gt;\n#include &lt;GLFW&#x2F;glfw3.h&gt;\r\n\r\n请确认在包含GLFW的头文件之前包含了GLEW的头文件。在包含glew.h头文件时会引入许多OpenGL必要的头文件（例如GL/gl.h），所以你需要在包含其它依赖于OpenGL的头文件之前先包含GLEW\r\n\r\nNext, we create the main function where we will instantiate the GLFW\r\nwindow:\r\nint main()\n&#123;\n    glfwInit();\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    &#x2F;&#x2F;glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);\n  \n    glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);\n    \n    return 0;\n&#125;\r\nIn the main function\r\n\r\nwe first initialize GLFW with glfwInit,\r\nafter which we can configure GLFW using glfwWindowHint.\r\n\r\nThe first argument of glfwWindowHint tells us what option we want to\r\nconfigure, where we can select the option from a large enum of possible\r\noptions prefixed with GLFW_.\r\nThe second argument is an integer that sets the value of our option.\r\nA list of all the possible options and its corresponding values can be\r\nfound at GLFW's\r\nwindow handling documentation.\r\n\r\nIf you try to run the application now and it gives a lot of\r\nundefined reference errors it means you didn't successfully\r\nlink the GLFW library.\r\n\r\nSince the focus of this book is on OpenGL version 3.3 we'd like to\r\ntell GLFW that 3.3 is the OpenGL version we want to use. This way GLFW\r\ncan make the proper arrangements when creating the OpenGL context. This\r\nensures that when a user does not have the proper OpenGL version GLFW\r\nfails to run. We set the major and minor version both to 3.\r\nWe also tell GLFW we want to explicitly use the\r\ncore-profile, 并且不允许用户调整窗口的大小。Telling\r\nGLFW we want to use the core-profile means we'll get access to a smaller\r\nsubset of OpenGL features without backwards-compatible features we no\r\nlonger need.\r\n1.3.2\r\n创建窗口对象并设为进程的主要上下文\r\n接下来我们创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被GLFW的其他函数频繁地用到。\r\nGLFWwindow* window &#x3D; glfwCreateWindow(800, 600, &quot;LearnOpenGL&quot;, nullptr, nullptr);\nif (window &#x3D;&#x3D; nullptr)\n&#123;\n    std::cout &lt;&lt; &quot;Failed to create GLFW window&quot; &lt;&lt; std::endl;\n    glfwTerminate();\n    return -1;\n&#125;\nglfwMakeContextCurrent(window);\r\nThe glfwCreateWindow function requires\r\n\r\nthe window width and height as its first two arguments\r\nrespectively.\r\nThe third argument allows us to create a name for the window; for\r\nnow we call it \"LearnOpenGL\" but you're allowed to name it\r\nhowever you like.\r\nWe can ignore the last 2 parameters.\r\nThe function returns a GLFWwindow object that we'll later need for\r\nother GLFW operations. After that we tell GLFW to make the context of\r\nour window the main context on the current thread\r\n(glfwMakeContextCurrent()).\r\n\r\n1.3.3 初始化GLEW\r\n\r\n在之前的教程中已经提到过，GLEW是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前我们需要初始化GLEW。\r\n\r\nglewExperimental &#x3D; GL_TRUE;\nif (glewInit() !&#x3D; GLEW_OK)\n&#123;\n    std::cout &lt;&lt; &quot;Failed to initialize GLEW&quot; &lt;&lt; std::endl;\n    return -1;\n&#125;\r\n这样我们在后面就可以跳过对OpenGL的函数的查找过程快速调用了\r\n\r\n请注意，我们在初始化GLEW之前设置glewExperimental变量的值为GL_TRUE，这样做能让GLEW在管理OpenGL的函数指针时更多地使用现代化的技术，如果把它设置为GL_FALSE的话可能会在使用OpenGL的核心模式时出现一些问题。\r\n\r\n1.3.4 设置视口(Viewport)？\r\n你需要知道，在你已经创建好的窗口里，不是所有内容都是可以用来作画的，对于该window的实际可用来渲染的区域的大小，我们必须手动指定。\r\n注：视口的起点与窗口起点总是一致的。\r\n在我们开始渲染之前还有一件重要的事情要做，我们必须告诉OpenGL渲染窗口的尺寸大小，这样OpenGL才只能知道怎样相对于窗口大小显示数据和坐标。我们可以通过调用glViewport函数来设置窗口的维度(Dimension)：\r\nint width, height;\nglfwGetFramebufferSize(window, &amp;width, &amp;height);\n\nglViewport(0, 0, width, height);\r\nglViewport函数前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素），这里我们是直接从GLFW中获取的。我们从GLFW中获取视口的维度而不设置为800*600是为了让它在高DPI的屏幕上（比如说Apple的视网膜显示屏）也能正常工作。\r\n我们实际上也可以将视口的维度设置为比GLFW的维度小，这样子之后所有的OpenGL渲染将会在一个更小的窗口中显示，这样子的话我们也可以将一些其它元素显示在OpenGL视口之外。\r\n1.3.5 准备好你的引擎\r\n我们总是希望程序在明确地被关闭之前，能不断绘制图像并能够接受用户输入。因此我们需要一个while循环——让它在GLFW退出前一直保持运行，我们可以把它称之为游戏循环(Game\r\nLoop)。下面几行的代码就实现了一个简单的游戏循环：\r\nwhile(!glfwWindowShouldClose(window))\n&#123;\n    glfwPollEvents();\n    glfwSwapBuffers(window);\n&#125;\r\n\r\nglfwWindowShouldClose函数在我们每次循环的开始前检查一次GLFW是否被要求退出，如果是的话该函数返回true然后游戏循环便结束了，之后为我们就可以关闭应用程序了。\r\nglfwPollEvents函数检查有没有触发什么事件（比如键盘输入、鼠标移动等），然后调用对应的回调函数（可以通过回调方法手动设置）。我们一般在游戏循环的开始调用事件处理函数。\r\nglfwSwapBuffers函数会交换颜色缓冲（它是一个储存着GLFW窗口每一个像素颜色的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。\r\n\r\n1.3.6 最后一件事\r\n当游戏循环结束后我们需要正确释放/删除之前的分配的所有资源。我们可以在main函数的最后调用glfwTerminate函数来释放GLFW分配的内存。\r\nglfwTerminate();\nreturn 0;\r\n这样便能清理所有的资源并正确地退出应用程序。这时运行这份代码，你可以看到一个黑窗口。\r\n1.3.7 输入\r\n通过GLFW的回调函数(Callback Function)，我们可以实现一些用户控制。\r\n回调函数事实上是一个函数指针，当我们设置好后，GLWF会在合适的时候调用它。其中，\r\n按键回调(KeyCallback)是众多回调函数中的一种。当我们设置了按键回调之后，GLFW会在用户有键盘交互时调用它。该回调函数的原型如下所示：\r\nvoid key_callback(GLFWwindow* window, int key, int scancode, int action, int mode);\r\n按键回调函数接受\r\n\r\n一个GLFWwindow指针作为它的第一个参数；\r\n第二个整形参数用来表示按下的按键；\r\naction参数表示这个按键是被按下还是释放；\r\n最后一个整形参数表示是否有Ctrl、Shift、Alt、Super等按钮的操作。\r\n\r\nGLFW会在合适的时候调用它，并为各个参数传入适当的值。\r\nvoid key_callback(GLFWwindow* window, int key, int scancode, int action, int mode)\n&#123;\n    &#x2F;&#x2F; 当用户按下ESC键,我们设置window窗口的WindowShouldClose属性为true\n    &#x2F;&#x2F; 关闭应用程序\n    if(key &#x3D;&#x3D; GLFW_KEY_ESCAPE &amp;&amp; action &#x3D;&#x3D; GLFW_PRESS)\n        glfwSetWindowShouldClose(window, GL_TRUE);\n&#125;\r\n在我们（新创建的）key_callback函数中，我们检测了键盘是否按下了Escape键。如果键的确按下了(不释放)，我们使用glfwSetwindowShouldClose函数设定WindowShouldClose属性为true从而关闭GLFW。main函数的while循环下一次的检测将为失败，程序就关闭了。\r\n最后一件事就是通过GLFW注册我们的函数至合适的回调，代码是这样的:\r\nglfwSetKeyCallback(window, key_callback);  \r\n除了按键回调函数之外，我们还能我们自己的函数注册其它的回调。例如，我们可以注册一个回调函数来处理窗口尺寸变化、处理一些错误信息等。我们可以在创建窗口之后，开始游戏循环之前注册各种回调函数。\r\n1.3.8 渲染\r\n我们要把所有的渲染(Rendering)操作放到游戏循环中，因为我们想让这些渲染指令在每次游戏循环迭代的时候都能被执行。代码将会是这样的：\r\n&#x2F;&#x2F; 程序循环\nwhile(!glfwWindowShouldClose(window))\n&#123;\n    &#x2F;&#x2F; 检查事件\n    glfwPollEvents();\n\n    &#x2F;&#x2F; 渲染指令\n    ...\n\n    &#x2F;&#x2F; 交换缓冲\n    glfwSwapBuffers(window);\n&#125;\r\n为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕。在每个新的渲染迭代开始的时候我们总是希望清屏，否则我们仍能看见上一次迭代的渲染结果（这可能是你想要的效果，但通常这不是）。我们可以通过调用glClear函数来清空屏幕的颜色缓冲，它接受一个缓冲位(Buffer\r\nBit)来指定要清空的缓冲，可能的缓冲位有GL_COLOR_BUFFER_BIT，GL_DEPTH_BUFFER_BIT和GL_STENCIL_BUFFER_BIT。由于现在我们只关心颜色值，所以我们只清空颜色缓冲。\r\nglClearColor(0.2f, 0.3f, 0.3f, 1.0f);\nglClear(GL_COLOR_BUFFER_BIT);\r\n注意，除了glClear之外，我们还调用了glClearColor来设置清空屏幕所用的颜色。当调用glClear函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为glClearColor里所设置的颜色。在这里，我们将屏幕设置为了类似黑板的深蓝绿色。\r\n附录：完整代码：\r\n#include &lt;iostream&gt;\n\n&#x2F;&#x2F; GLEW\n#define GLEW_STATIC\n#include &lt;GL&#x2F;glew.h&gt;\n\n&#x2F;&#x2F; GLFW\n#include &lt;GLFW&#x2F;glfw3.h&gt;\n\n\n&#x2F;&#x2F; Function prototypes\nvoid key_callback(GLFWwindow* window, int key, int scancode, int action, int mode);\n\n&#x2F;&#x2F; Window dimensions\nconst GLuint WIDTH &#x3D; 800, HEIGHT &#x3D; 600;\n\n&#x2F;&#x2F; The MAIN function, from here we start the application and run the game loop\nint main()\n&#123;\n    std::cout &lt;&lt; &quot;Starting GLFW context, OpenGL 3.3&quot; &lt;&lt; std::endl;\n    &#x2F;&#x2F; Init GLFW\n    glfwInit();\n    &#x2F;&#x2F; Set all the required options for GLFW\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);\n    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);\n    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);\n    glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);\n\n    &#x2F;&#x2F; Create a GLFWwindow object that we can use for GLFW&#39;s functions\n    GLFWwindow* window &#x3D; glfwCreateWindow(WIDTH, HEIGHT, &quot;LearnOpenGL&quot;, nullptr, nullptr);    \n    if (window &#x3D;&#x3D; nullptr)\n    &#123;\n        std::cout &lt;&lt; &quot;Failed to create GLFW window&quot; &lt;&lt; std::endl;\n        glfwTerminate();\n        return -1;\n    &#125;\n    glfwMakeContextCurrent(window);\n    &#x2F;&#x2F; Set the required callback functions\n    glfwSetKeyCallback(window, key_callback);\n\n    &#x2F;&#x2F; Set this to true so GLEW knows to use a modern approach to retrieving function pointers and extensions\n    glewExperimental &#x3D; GL_TRUE;\n    &#x2F;&#x2F; Initialize GLEW to setup the OpenGL Function pointers\n    if (glewInit() !&#x3D; GLEW_OK)\n    &#123;\n        std::cout &lt;&lt; &quot;Failed to initialize GLEW&quot; &lt;&lt; std::endl;\n        return -1;\n    &#125;    \n\n    &#x2F;&#x2F; Define the viewport dimensions\n    int width, height;\n    glfwGetFramebufferSize(window, &amp;width, &amp;height);  \n    glViewport(0, 0, width, height);\n\n    &#x2F;&#x2F; Game loop\n    while (!glfwWindowShouldClose(window))\n    &#123;\n        &#x2F;&#x2F; Check if any events have been activiated (key pressed, mouse moved etc.) and call corresponding response functions\n        glfwPollEvents();\n\n        &#x2F;&#x2F; Render\n        &#x2F;&#x2F; Clear the colorbuffer\n        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);\n        glClear(GL_COLOR_BUFFER_BIT);\n\n        &#x2F;&#x2F; Swap the screen buffers\n        glfwSwapBuffers(window);\n    &#125;\n\n    &#x2F;&#x2F; Terminate GLFW, clearing any resources allocated by GLFW.\n    glfwTerminate();\n    return 0;\n&#125;\n\n&#x2F;&#x2F; Is called whenever a key is pressed&#x2F;released via GLFW\nvoid key_callback(GLFWwindow* window, int key, int scancode, int action, int mode)\n&#123;\n    std::cout &lt;&lt; key &lt;&lt; std::endl;\n    if (key &#x3D;&#x3D; GLFW_KEY_ESCAPE &amp;&amp; action &#x3D;&#x3D; GLFW_PRESS)\n        glfwSetWindowShouldClose(window, GL_TRUE);\n&#125;\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/02.Hello Window","date":"2023-03-08T02:22:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"d309579445aab8e475b1a200f76bbffc","title":"learningOpenGl 0","content":"OpenGL学习记录\r\n这份笔记对应的教程来自网站：LearnOpenGL-CN，是Learn OpenGL, extensive tutorial\r\nresource for learning Modern OpenGL的早期译文\r\n同时辅以视频教程：\r\n\r\n[傅老師/OpenGL教學\r\n第一章] OpenGL自製3D遊戲引擎 (已更畢)_哔哩哔哩_bilibili\r\n[傅老師/OpenGL教學\r\n第二章][10/16晚間更新] OpenGL自製3D遊戲引擎_哔哩哔哩_bilibili\r\n[傅老師/OpenGL教學\r\n第三章] [01/08晚間更新]\r\nOpenGL自製3D遊戲引擎(已更畢)_哔哩哔哩_bilibili\r\n\r\n当然，现在是21/12/2022，就现在而言，这份教程已经有些老了。\r\n该仓库已经停止维护，并且对应的英文站点已经更新了更多额外的内容，对于这些内容，有做一定的穿插。\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/ReadMe","date":"2023-03-08T02:21:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"fc711215d7019d15e7fa23ec8cb6e4d7","title":"learningOpenGl Chapter 1.2","content":"1.2 Creating A Window\r\n\r\nThe first thing we need to do before we start creating stunning\r\ngraphics is to create an OpenGL context and an application window to\r\ndraw in. However, those operations are specific per operating system and\r\nOpenGL purposefully tries to abstract itself from these operations. This\r\nmeans we have to create a window, define a context, and handle user\r\ninput all by ourselves.\r\nLuckily, there are quite a few libraries out there that provide the\r\nfunctionality we seek, some specifically aimed at OpenGL. Those\r\nlibraries save us all the operation-system specific work and give us a\r\nwindow and an OpenGL context to render in. Some of the more popular\r\nlibraries are GLUT, SDL, SFML and GLFW. On LearnOpenGL we will be using\r\nGLFW. Feel free to use any of the other libraries, the\r\nsetup for most is similar to GLFW's setup.\r\n在我们画出出色的效果之前，首先要做的就是创建一个OpenGL上下文(Context)和一个用于显示的窗口。然而，这些操作在每个系统上都是不一样的，OpenGL有目的地从这些操作抽象(Abstract)出去。这意味着我们不得不自己处理创建窗口，定义OpenGL上下文以及处理用户输入。\r\n幸运的是，有一些库已经提供了我们所需的功能，其中一部分是特别针对OpenGL的。这些库节省了我们书写操作系统相关代码的时间，提供给我们一个窗口和上下文用来渲染。最流行的几个库有GLUT，SDL，SFML和GLFW。在教程里我们将使用GLFW。\r\n\r\n1.2.1 Using GLFW\r\n\r\nGLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文，定义窗口参数以及处理用户输入，这正是我们需要的。\r\n\r\n\r\n配置教程可以参考傅老师视频\r\n\r\n1.2.2 Using GLEW\r\n到这里，我们仍然有一件事要做。因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法因平台而异，在Windows上会是类似这样：\r\n&#x2F;&#x2F; 定义函数原型\ntypedef void (*GL_GENBUFFERS) (GLsizei, GLuint*);\n&#x2F;&#x2F; 找到正确的函数并赋值给函数指针\nGL_GENBUFFERS glGenBuffers  &#x3D; (GL_GENBUFFERS)wglGetProcAddress(&quot;glGenBuffers&quot;);\n&#x2F;&#x2F; 现在函数可以被正常调用了\nGLuint buffer;\nglGenBuffers(1, &amp;buffer);\r\n你可以看到代码非常复杂，而且很繁琐，我们需要对每个可能使用的函数都要重复这个过程。幸运的是，有些库能简化此过程，其中GLEW是目前最新，也是最流行的库。\r\n编译和链接GLEW\r\nGLEW是OpenGL Extension Wrangler\r\nLibrary的缩写，它能解决我们上面提到的那个繁琐的问题。因为GLEW也是一个库，我们同样需要构建并将其链接进工程。GLEW可以从这里下载，你同样可以选择下载二进制版本，如果你的目标平台列在上面的话，或者下载源码编译，步骤和编译GLFW时差不多。记住，如果不确定的话，选择32位的二进制版本。\r\n我们使用GLEW的静态版本glew32s.lib（注意这里的“s”），将库文件添加到你的库目录，将include内容添加到你的include目录。接下来，在VS的链接器选项里加上glew32s.lib。注意GLFW3（默认）也是编译成了一个静态库。\r\n\r\n静态(Static)链接是指编译时就将库代码里的内容整合进你的二进制文件。优点就是你不需要管理额外的文件了，只需要发布你单独的一个二进制文件就行了。缺点就是你的可执行文件会变得更大，另外当库有升级版本时，你必须重新进行编译整个程序。\r\n动态(Dynamic)链接是指一个库通过.dll或.so的方式存在，它的代码与你的二进制文件的代码是分离的。优点是使你的二进制文件大小变小并且更容易升级，缺点是你最终发布程序时必须带上这些DLL。\r\n\r\n\r\n如果你希望静态链接GLEW，必须在包含GLEW头文件之前定义预处理器宏GLEW_STATIC：\r\n&gt;#define GLEW_STATIC\n&gt;#include &lt;GL&#x2F;glew.h&gt;\r\n如果你希望动态链接，那么你可以省略这个宏。但是记住使用动态链接的话你需要拷贝一份.DLL文件到你的应用程序目录。\r\n\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/01.CreateAWindow","date":"2023-03-08T02:21:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"84a91876a3b2e3a40cf47c0b0209858c","title":"learningOpenGl Chapter 1.1","content":"当你使用多个捕获组时，请务必小心NULL！这是某个捕获组未能捕获任何内容的结果！\r\n验证：是否有bug\r\n在线正则表达式测试 中文\r\n(oschina.net)\r\n在线正则验证 英文 regex101: build,\r\ntest, and debug regex\r\n在线验证正则表达式结构：Regexper\r\nregex_match\r\n- C++ Reference (cplusplus.com)\r\n第\r\n6 章 正则表达式 现代 C++ 教程: 高速上手 C++ 11/14/17/20 - Modern C++\r\nTutorial: C++ 11/14/17/20 On the Fly (changkun.de)\r\nc++\r\n正则表达式 高性能 - Bing\r\nc++\r\nlocale - Bing\r\n（为什么Fuck Locale）\r\n[‐-a-zA-Z0-9.]+\r\n1.1 Getting Started - OpenGL\r\n1.1.1 OpenGL\r\n\r\n\r\n什么是opengl？\r\n\r\n\r\n是一个API(Application Programming Interface, 应用程序编程接口)\r\n包含了一系列可以操作图形、图像的函数\r\n然而，OpenGL本身并不是一个API，它仅仅是一个由Khronos组织制定并维护的规范。也就是说，OpenGL并非是一个“唯一的”框架，它在不同系统、平台、设备上都可能有不同的表现——因为OpenGL规范并没有规定实现的细节。具体的OpenGL库允许使用不同的实现，只要其功能和结果与规范相匹配。OpenGL规范只规定了每个函数该如何执行，以及它们的输出值。至于内部具体每个函数是如何实现(Implement)的，将由OpenGL库的开发者自行决定。\r\n\r\n实际的OpenGL库的开发者通常是显卡的生产商。你购买的显卡所支持的OpenGL版本都为这个系列的显卡专门开发的。当你使用Apple系统的时候，OpenGL库是由Apple自身维护的。在Linux下，有显卡生产商提供的OpenGL库，也有一些爱好者改编的版本。这也意味着任何时候OpenGL库表现的行为与规范规定的不一致时，基本都是库的开发者留下的bug。\r\nSince most implementations are built by graphics card manufacturers,\r\nwhenever there is a bug in the implementation this is usually solved by\r\nupdating your video card drivers; those drivers include the newest\r\nversions of OpenGL that your card supports. This is one of the reasons\r\nwhy it's always advised to occasionally update your graphic drivers.\r\n\r\nKhronos publicly hosts all specification documents for all the OpenGL\r\nversions. The interested reader can find the OpenGL specification of\r\nversion 3.3 (which is what we'll be using) here\r\nwhich is a good read if you want to delve into the details of OpenGL\r\n(note how they mostly just describe results and not implementations).\r\nThe specifications also provide a great reference for finding the\r\nexact workings of its functions.\r\n\r\n\r\n有点c之于编译器的意思\r\n编程时主要按c标准编写，厂商提供编译器，等到实际在执行的时候，再考虑“实际内容”（如1.1.3\r\n拓展）\r\n\r\n\r\n1.1.2 Core-profile vs Immediate\r\nmode\r\n\r\n核心模式与立即渲染模式\r\n\r\n\r\nImmediate mode - 固定管线 - 早期\r\nCore-profile - 可编程管线 - 现代 - 灵活、高效、\r\n\r\n\r\n注意兼容性：\r\nWhen using functionality from the most recent version of OpenGL, only\r\nthe most modern graphics cards will be able to run your application.\r\nThis is often why most developers generally target lower versions of\r\nOpenGL and optionally enable higher version functionality.\r\n\r\n1.1.3 Extensions\r\nOpenGL的一大特性就是对扩展(Extension)的支持，当一个显卡公司提出一个新特性或者渲染上的大优化，通常会以扩展的方式在驱动中实现。如果一个程序在支持这个扩展的显卡上运行，开发者可以使用这个扩展提供的一些更先进更有效的图形功能。通过这种方式，开发者不必等待一个新的OpenGL规范面世，就可以使用这些新的渲染特性了，只需要简单地检查一下显卡是否支持此扩展。通常，当一个扩展非常流行或者非常有用的时候，它将最终成为未来的OpenGL规范的一部分。\r\nThe developer has to query whether any of these extensions are\r\navailable before using them (or use an OpenGL extension library). This\r\nallows the developer to do things better or more efficient, based on\r\nwhether an extension is available:\r\nif(GL_ARB_extension_name) &#123;\n    &#x2F;&#x2F; Do cool new and modern stuff supported by hardware\n&#125; else &#123;\n    &#x2F;&#x2F; Extension not supported: do it the old way\n&#125;\r\n1.1.4 State machine\r\nOpenGL自身是一个巨大的状态机：一系列的变量描述OpenGL此刻应当如何运行。OpenGL的状态通常被称为OpenGL上下文(Context)。我们通常使用如下途径去更改OpenGL状态：设置选项，操作缓冲。最后，我们使用当前OpenGL上下文来渲染。\r\nWhenever we tell OpenGL that we now want to draw lines instead of\r\ntriangles for example, we change the state of OpenGL by changing some\r\ncontext variable that sets how OpenGL should draw. As soon as we change\r\nthe context by telling OpenGL it should draw lines, the next drawing\r\ncommands will now draw lines instead of triangles.\r\nWhen working in OpenGL we will come across several state-changing\r\nfunctions that change the context and several state-using functions that\r\nperform some operations based on the current state of OpenGL. As long as\r\nyou keep in mind that OpenGL is basically one large state machine, most\r\nof its functionality will make more sense.\r\n1.1.5 Objects\r\nOpenGL库是用C语言写的，同时也支持多种语言的派生，但其内核仍是一个C库。由于C的一些语言结构不易被翻译到其它的高级语言，因此OpenGL开发的时候引入了一些抽象层。“对象(Object)”就是其中一个。\r\nAn object in OpenGL is a collection of options that represents a\r\nsubset of OpenGL's state.\r\nFor example, we could have an object that represents the settings of\r\nthe drawing window; we could then\r\n\r\nset its size,\r\nhow many colors it supports\r\nand so on.\r\n\r\nOne could visualize an object as a C-like struct:\r\nstruct object_name &#123;\n    float  option1;\n    int    option2;\n    char[] name;\n&#125;;\r\n\r\n基元类型(Primitive Type)\r\n使用OpenGL时，建议使用OpenGL定义的基元类型。比如使用float时我们加上前缀GL（因此写作GLfloat）。int、uint、char、bool等等也类似。OpenGL定义的这些GL基元类型的内存布局是与平台无关的，而int等基元类型在不同操作系统上可能有不同的内存布局。使用GL基元类型可以保证你的程序在不同的平台上工作一致。\r\n\r\n1.1.6 使用OpenGL的大致方法\r\n当我们使用一个对象时，通常看起来像如下一样（把OpenGL上下文看作一个大的结构体）：\r\n&#x2F;&#x2F; OpenGL的状态\nstruct OpenGL_Context \n&#123;\n    ...\n    object* object_Window_Target;\n    ...     \n&#125;;\n\n&#x2F;&#x2F; 创建对象\nGLuint objectId &#x3D; 0;\nglGenObject(1, &amp;objectId);\n&#x2F;&#x2F; 绑定对象至上下文\nglBindObject(GL_WINDOW_TARGET, objectId);\n&#x2F;&#x2F; 设置当前绑定到 GL_WINDOW_TARGET 的对象的一些选项\nglSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_WIDTH, 800);\nglSetObjectOption(GL_WINDOW_TARGET, GL_OPTION_WINDOW_HEIGHT, 600);\n&#x2F;&#x2F; 将上下文对象设回默认\nglBindObject(GL_WINDOW_TARGET, 0);\r\n这一小段代码展现了你以后使用OpenGL时常见的工作流。\r\n\r\n我们首先创建一个对象，然后用一个id保存它的引用（实际数据被储存在后台）。\r\n然后我们将对象绑定至上下文的目标位置（例子中窗口对象目标的位置被定义成GL_WINDOW_TARGET）。\r\n接下来我们设置窗口的选项。\r\n最后我们将目标位置的对象id设回0，解绑这个对象。\r\n\r\n设置的选项将被保存在objectId所引用的对象中，一旦我们重新绑定这个对象到GL_WINDOW_TARGET位置，这些选项就会重新生效。\r\n\r\n使用对象的一个好处是在程序中，我们不止可以定义一个对象，并设置它们的选项，每个对象都可以是不同的设置。在我们执行一个使用OpenGL状态的操作的时候，只需要绑定含有需要的设置的对象即可。比如说我们有一些作为3D模型数据（一栋房子或一个人物）的容器对象，在我们想绘制其中任何一个模型的时候，只需绑定一个包含对应模型数据的对象就可以了（当然，我们需要先创建并设置对象的选项）。拥有数个这样的对象允许我们指定多个模型，在想画其中任何一个的时候，直接将对应的对象绑定上去，便不需要再重复设置选项了。\r\n\r\n1.1.7 epilogue - 尾声\r\n\r\n让我们开始吧\r\n你现在已经知道一些OpenGL的相关知识了，OpenGL规范和库，OpenGL幕后大致的运作流程，以及OpenGL使用的一些传统技巧。不要担心你还没有完全消化它们，后面的教程我们会仔细地讲解每一个步骤，你会通过足够的例子来真正掌握OpenGL。如果你已经做好了开始下一步的准备，我们可以在这里开始创建OpenGL上下文以及我们的第一个窗口了。\r\n附加资源\r\n\r\nopengl.org：OpenGL官方网站。\r\nOpenGL\r\nregistry：包含OpenGL各版本的规范和扩展。\r\n\r\n\r\n","slug":"Technical Artist/Opengl/learnopengl-cn.readthedocs.io/01GettingStarted/00.OpenGL","date":"2023-03-08T02:20:08.000Z","categories_index":"TA","tags_index":"Opengl,Shader","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"日志规范\r\n日志格式\r\n通用前缀 class.method LEVEL | KEY | SUB_KEY | param1=x;param2=x;... |\r\nrs=JSON | traceId=xxx[ | 其它自定义日志]\r\nKEY：标示业务领域，如“领券”\r\nSUBKEY：标示业务领域中具体的逻辑，如“策略决策”、“权益决策”、“调用UMP”等\r\nLEVEL：DEBUG/TRACE/MONITOR/WARN\r\n要求：\r\n查找日志时，再一次查询中可以顺利通过一个或多个关键字的组合，找到一条完整的业务处理链路。\r\n如通过一个userId和KEY，可以完整的找到这个用户的领券全过程。\r\n调试日志\r\n仅在调试阶段需要输出，线上一般不输出。\r\n日志可以包括每次请求的详细出入参等信息。\r\n线上必须有开关可以控制这类日志的打印。\r\nlevel=DEBUG\r\n普通日志\r\n用户追踪必要的代码执行记录，线上一般打印出来，大促时可以降级。\r\n日志可以包括每次外部请求的详细出入参，以及内部请求的关键参数。\r\n请求出入参较长时，可考虑只打印关键参数。\r\nlevel=TRACE\r\n业务指标项日志\r\n记录必要的业务活动，通过sls或sunfire产出业务大盘\r\nlevel=MONITOR\r\n监控报警项日志\r\n通过sunfire产出报警\r\nlevel=WARN\r\n自定义日志\r\n不做格式要求，自行打印，注意避免过量日志造成线上磁盘资源紧张\r\n","slug":"WhatWeNeedToLearnLater/日志规范","date":"2023-03-07T16:14:46.495Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"切片：SpringAOP\r\n请不要使用小写加下划线来命名你的变量，使用驼峰规则来命名\r\n将判断用的等式改为调用.equals()，并且在采用.equals()前使用常量，括号里装填变量即：\r\n&quot;abc&quot;.equals(var) ;\n&#x2F;&#x2F; 或者使用 .equals(&quot;abc&quot;, var);\r\n的调用方式，来避免当var.equals(\"const\")如var ==\r\nnull时可能会出现的error\r\n防御性编程\r\n尽量减少代码块的嵌套，把你的代码改简洁，把它们拉平直\r\n注意代码的简洁度，一个function尽力做到在30行内实现你的需求或者完成一个特定的任务\r\n将Mapper的操作从循环写入改为批量写入，以此来\r\n","slug":"WhatWeNeedToLearnLater/如何合理地构建你的Java项目","date":"2023-03-07T16:14:46.493Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n","slug":"WhatWeNeedToLearnLater/出现问题收录","date":"2023-03-07T16:14:46.491Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"代码工程结构规范\r\n工程模块\r\nxxx为工程名称\r\n\r\nxxx-api\r\n\r\n此模块最终打包jar，仅提供模型定义和接口定义等需要对二方提供的定义内容，不包含任何实现。二方系统依赖本模块，不应当对其造成任何影响。\r\n\r\nxxx-client/fatclient\r\n\r\n此模块最终打包jar，是对二方提供的富客户端，包含了特定功能的具体实现。富客户端可以依赖稳定的中间件，对特殊业务场景需要引入特殊中间件或二方库的，需要单独打包。\r\n\r\nxxx-dal\r\n\r\n提供数据访问的实现，如TDDL、LIndorm或其它存储。\r\n\r\nxxx-base\r\n\r\n工程内公共逻辑的实现，如通用的Utils和服务等。\r\n\r\nxxx-service\r\n\r\n各个业务场景的具体实现。\r\n\r\nxxx-task\r\n\r\n异步链路的实现，如MQ和DTS等。\r\n\r\nxxx-start\r\n\r\n工程启动代码。\r\n模块依赖\r\n\r\nxxx-api\r\n\r\n对外发布，除common等公共的依赖外，api包不能引入任何依赖。\r\n\r\nxxx-client/fatclient\r\n\r\n对外发布，仅依赖api和稳定的中间件。\r\n\r\nxxx-dal\r\n\r\n严禁对外发布，依赖数据层的相关中间件，如tddl等\r\n\r\nxxx-base\r\n\r\n严禁对外发布，依赖api和dal，同时可以引入必要的二方和三方依赖\r\n\r\nxxx-service\r\n\r\n严禁对外发布，依赖basei，同时可以引入必要的二方和三方依赖\r\n\r\nxxx-task\r\n\r\n严禁对外发布，依赖base，依赖相关中间件如MQ和DTS等，同时可以引入必要的二方和三方依赖。\r\n\r\nxxx-start\r\n\r\n严禁对外发布，工程启动代码。\r\n代码包命名和组织规范\r\n\r\napi\r\n\r\n公共部分统一放在common下；\r\n以具体功能作为划分依据，同一个功能需要在同一个包下，每个包下，按需设置model、param、enums等子包，分别用于定义DTO等模型、参数和枚举常量等\r\n例如：\r\nxxx-api\r\n- common\r\n​ - model\r\n​ - param\r\n​ - enums\r\n​ - errorcodes\r\n​ - constants\r\n- \r\n​ - model\r\n​ - param\r\n​ - enums\r\n​ xxxxService\r\n\r\nservice\r\n\r\n与api对应，提供对应的实现\r\n\r\ntask\r\n\r\n异步链路的具体处理逻辑，统一放到handler或process包，按功能区分不同子包。\r\nMQ消费者统一定义在mq包，DTS的处理器，统一定义在dts下。\r\n框架层代码，统一放在除上述包外的独立包中。\r\n例如：\r\nxxx-task\r\n- process\r\n​ - \r\n​ XXXMqHandler\r\n​ XXXDtsHandler\r\n- mq\r\n​ XXXConsumer\r\n​ XXXConsumer\r\n- dts\r\n​ XXXProcessor\r\n","slug":"WhatWeNeedToLearnLater/代码工程结构规范","date":"2023-03-07T16:14:46.488Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Python 运行效率为何低\r\n当我们提到一门编程语言的效率时：通常有两层意思，第一是开发效率，这是对程序员而言，完成编码所需要的时间；另一个是运行效率，这是对计算机而言，完成计算任务所需要的时间。编码效率和运行效率往往是鱼与熊掌的关系，是很难同时兼顾的。不同的语言会有不同的侧重，python语言毫无疑问更在乎编码效率，life\r\nis short，we use python。\r\n虽然使用python的编程人员都应该接受其运行效率低的事实，但python在越多越来的领域都有广泛应用，比如科学计算\r\n、web服务器等。程序员当然也希望python能够运算得更快，希望python可以更强大。\r\n首先，python相比其他语言具体有多慢，这个不同场景和测试用例，结果肯定是不一样的。这个网址给出了不同语言在各种case下的性能对比，这一页是python3和C++的对比，下面是两个case：\r\n\r\n\r\nimg\r\n\r\n从上图可以看出，不同的case，python比C++慢了几倍到几十倍。\r\npython运算效率低，具体是什么原因呢，下列罗列一些：\r\n第一：python是动态语言\r\n一个变量所指向对象的类型在运行时才确定，编译器做不了任何预测，也就无从优化。举一个简单的例子：　r\r\n= a +\r\nb。　a和b相加，但a和b的类型在运行时才知道，对于加法操作，不同的类型有不同的处理，所以每次运行的时候都会去判断a和b的类型，然后执行对应的操作。而在静态语言如C++中，编译的时候就确定了运行时的代码。\r\n另外一个例子是属性查找，关于具体的查找顺序在《python属性查找》中有详细介绍。简而言之，访问对象的某个属性是一个非常复杂的过程，而且通过同一个变量访问到的python对象还都可能不一样（参见Lazy\r\nproperty的例子）。而在C语言中，访问属性用对象的地址加上属性的偏移就可以了。\r\n第二：python是解释执行，但是不支持JIT（just in time\r\ncompiler）。虽然大名鼎鼎的google曾经尝试Unladen Swallow\r\n这个项目，但最终也折了。\r\n第三：python中一切都是对象，每个对象都需要维护引用计数，增加了额外的工作。\r\n第四：python\r\nGIL，GIL是Python最为诟病的一点，因为GIL，python中的多线程并不能真正的并发。如果是在IO\r\nbound的业务场景，这个问题并不大，但是在CPU\r\nBOUND的场景，这就很致命了。所以笔者在工作中使用python多线程的情况并不多，一般都是使用多进程（pre\r\nfork），或者在加上协程。即使在单线程，GIL也会带来很大的性能影响，因为python每执行100个opcode（默认，可以通过sys.setcheckinterval()设置）就会尝试线程的切换，具体的源代码在ceval.c::PyEval_EvalFrameEx。\r\n第五：垃圾回收，这个可能是所有具有垃圾回收的编程语言的通病。python采用标记和分代的垃圾回收策略，每次垃圾回收的时候都会中断正在执行的程序，造成所谓的顿卡。infoq上有一篇文章，提到禁用Python的GC机制后，Instagram性能提升了10%。感兴趣的读者可以去细读。\r\n","slug":"WhatWeNeedToLearnLater/为什么Python的运行效率低","date":"2023-03-07T16:14:46.485Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n序列化及其逆过程要解决的核心问题是\r\n实现相同的数据在不同格式间的转化；\r\n持久化要解决的则是内存中数据结构到硬盘上数据的转化\r\n，比如比特流或者xml格式的文件；分布式系统数据层都需要做持久化的工作，要么存到数据库中、要么直接以文件形式保存到硬盘上；\r\nmarshalling要解决的问题和serialization类似，但它更加关注网络间数据传输、另有种说法认为marshalling包括跟数据转化有关的codebase;\r\n\r\nFirst，What is Serialization\r\n引用C#文档中对serialization的定义：\r\n\r\nSerialization is the process of converting an object into a\r\nstream of bytes to store the object or transmit it to memory, a\r\ndatabase, or a file. Its main purpose is to save the state\r\nof an object in order to be able to recreate it when needed.\r\nThe reverse process is called deserialization.\r\nHow serialization works\r\nThis illustration shows the overall process of serialization:\r\n\r\n\r\nSerialization graphic\r\n\r\nThe object is serialized to a stream that carries the data. The\r\nstream may also have information about the object's type, such as its\r\nversion, culture, and assembly name. From that stream, the object can be\r\nstored in a database, a file, or memory.\r\nUses for serialization\r\nSerialization allows the developer to save the state of an object and\r\nre-create it as needed, providing storage of objects as well as data\r\nexchange. Through serialization, a developer can perform actions such\r\nas:\r\n\r\nSending the object to a remote application by using a web\r\nservice\r\nPassing an object from one domain to another\r\nPassing an object through a firewall as a JSON or XML string\r\nMaintaining security or user-specific information across\r\napplications\r\n\r\n\r\nSerialization\r\n(C#) | Microsoft Docs\r\n序列化(serialization)过程就是复杂数据在空间上的降维，最终结果是将一个数据结构或者包含对象状态的数据转换为一种可以在计算机文件系统或者内存缓存中被存储或者在计算机网络上被传输的数据格式，当它根据序列化格式被解析时，计算机就能生成一个语义上与原始数据相同的克隆。\r\n数据序列化不是数据持久化！数据序列化只是\r\n“可以作为数据持久化的中间过程” 而已\r\n数据复杂度的降维\r\n几个数据序列化标准介绍与比较\r\n【Netty入门】几种序列化协议的介绍_白夜行-CSDN博客_netty序列化协议\r\nMarshalling\r\nThe\r\ndifference between Serialization and Marshalling\r\nterminology\r\n- What is the difference between Serialization and Marshaling? - Stack\r\nOverflow\r\n补充材料\r\nhttps://en.wikipedia.org/wiki/Marshalling_(computer_science)\r\nhttps://zh.wikipedia.org/wiki/Marshalling_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\r\nrfc2713\r\n(ietf.org)\r\n序列化理解起来很简单\r\n- 知乎 (zhihu.com)\r\n","slug":"WhatWeNeedToLearnLater/Serialization、Persistence and Marshalling","date":"2023-03-07T16:14:46.482Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\nfatal: Not a valid object name: 'master'.\r\nfatal: refusing to merge unrelated histories\r\ngit init时指定分支名\r\nfatal: couldn't find remote ref\r\ngit\r\n克隆指定分支代码_wudinaniya的博客-CSDN博客_克隆指定分支代码\r\nGitalk评论插件使用教程\r\n- SegmentFault 思否\r\n插件\r\n| Hexo Aurora (tridiamond.tech)\r\nwindows vpn (pptp) couldn't establish the connection\r\n\r\n新式数据序列化技术：Protocol buffers\r\nOverview\r\n| Protocol Buffers | Google Developers\r\n","slug":"WhatWeNeedToLearnLater/fast note","date":"2023-03-07T16:14:46.479Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"CR细则\r\n必须打回的情形\r\n\r\n违反代码规约\r\n\r\n直接违反阿里巴巴代码规约的要求，开发时可通过插件自动检测。\r\n\r\n明显的逻辑漏洞\r\n\r\n如前面声明了一个对象，并赋值为null，中间未做赋值，后面直接调用对象的方法等明显代码漏洞。\r\n\r\n代码晦涩且缺少必要的注释，CR同学无法理解代码意图\r\n\r\n如提供了一个方法，代码中全部用abcd等作为变量名，夹杂各种数学运算，且没有必要的文档和注释表达这段代码的算法逻辑。\r\n\r\n新加逻辑缺少开关或灰度等可以控制代码执行的手段\r\n对父类进行修改，但无法保证对其它场景无影响\r\n必要的防NPE判定缺失\r\n未对参数进行判空和必要的合法校验\r\n对外提供的HSF服务，未做异常捕获\r\n违反工程结构和依赖规范，引入不合理的依赖\r\n发布的对外提供的二方库版本为SNAPSHOT\r\n违反日志规范，缺失关键日志\r\n项目中存在无意义的文件等无关内容\r\n\r\n可以通过，但后续需要优化的情形\r\n\r\n当前功能可以满足，但性能有提升的空间。\r\n复杂业务流程中，单个方法的较为冗长。\r\n分支较多的情形，代码中存在过多的if判断。\r\n超过三层的嵌套循环。\r\n代码可读性较弱，注释较少。\r\n代码中的日志记录较多且有冗余。\r\n存在单元测试代码、用于测试时手动编写的main方法等无关代码。\r\n\r\n","slug":"WhatWeNeedToLearnLater/CR细则","date":"2023-03-07T16:14:46.477Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"用idea创建前后端分离的Java项目\r\nidea创建带springboot框架的项目\r\n使用maven管理项目\r\n","slug":"Web Dev/Vue与SpringBoot/用idea创建项目","date":"2023-03-07T16:14:46.468Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"YARN\r\nyarn介绍：\r\n\r\n类型——包管理工具，类同npm\r\n出品方：脸书\r\n\r\n安装yarn\r\nnpm install -g yarn\r\n查看并配置：\r\nyarn -v # 查看yarn版本\nyarn config list # 查看所有yarn配置\nyarn config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F; # 设为淘宝源\nyarn config set registry https:&#x2F;&#x2F;registry.yarnpkg.com # 设为默认源\nyarn config set global-folder &quot;D:\\RTE\\Yarn\\global&quot; # 请修改具体目录\nyarn config set prefix &quot;D:\\RTE\\Yarn\\global\\&quot; # 但是好像prefix作为全局变量保存地无法使用？注意global-folder中也有保存cmd文件的文件夹，还可以使用后者\nyarn config set cache-folder &quot;D:\\RTE\\Yarn\\cache&quot; # 请修改具体目录\nyarn global dir # 查看全局安装目录\nyarn global bin # 查看全局bin位置\r\n显示命令列表：\r\nyarn help            \r\n官网\r\nhttps://www.yarnpkg.cn/getting-started/usage\r\n可参考地址\r\nhttps://www.cnblogs.com/hellomrr/p/13237653.html\r\nhttps://zhuanlan.zhihu.com/p/108370177\r\n","slug":"Web Dev/Front End/Yarn/基本命令与配置","date":"2023-03-07T16:14:46.461Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n\r\nimg\r\n\r\n\r\n\r\nimg\r\n\r\nbeforeCreate( 创建前 )\r\n在实例初始化之后，数据观测和事件配置之前被调用，此时组件的选项对象还未创建，el\r\n和 data 并未初始化，因此无法访问methods， data，\r\ncomputed等上的方法和数据。\r\ncreated ( 创建后 ）\r\n实例已经创建完成之后被调用，在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data\r\n数据的初始化，el没有。 然而，挂在阶段还没有开始,\r\n$el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取computed中的计算属性等等，通常我们可以在这里对实例进行预处理，也有一些童鞋喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成\r\nbeforeMount\r\n挂在开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置：\r\n编译模板，把data里面的数据和模板生成html，完成了el和data\r\n初始化，注意此时还没有挂在html到页面上。\r\nmounted\r\n挂在完成，也就是模板中的HTML渲染到HTML页面中，此时一般可以做一些ajax操作，mounted只会执行一次。\r\nbeforeUpdate\r\n在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子中进一步地更改状态，不会触发附加地重渲染过程\r\nupdated（更新后）\r\n在由于数据更改导致地虚拟DOM重新渲染和打补丁只会调用，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环，该钩子在服务器端渲染期间不被调用\r\nbeforeDestroy（销毁前）\r\n在实例销毁之前调用，实例仍然完全可用，\r\n这一步还可以用this来获取实例，\r\n一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和\r\n监听的dom事件\r\ndestroyed（销毁后）\r\n在实例销毁之后调用，调用后，所以的事件监听器会被移出，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用\r\n","slug":"Web Dev/Front End/VUE/生命周期","date":"2023-03-07T16:14:46.453Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"vue父子组件之间的传值\r\n\r\n本章主要说下父子组件的传值。 Github：https://github.com/Ewall1106/mall\r\n\r\n父组件向子组件传值\r\n\r\n第一个就是要明白怎么在父页面中向子组件中传值？你可以给子组件传入一个静态的值：\r\n\r\n\r\n\r\nimg\r\n\r\n图片来自vue官网\r\n\r\n但我们一般都是需要传动态的值，所以需要v-bind绑定，当然，你传的值可以是数字、对象、数组等等，参见vue官网。\r\n\r\n\r\n\r\nimg\r\n\r\n图片来自vue官网\r\n\r\n第二个就是要知道如何在子组件中接受父页面传过来的值，有几点需要了解：\r\n\r\n组件实例的作用域是孤立的。\r\n子组件要显式的用props选项声明它预期的数据，如：\r\n\r\n\r\n&#x2F;&#x2F; 某个子组件中：\nexport default &#123;\n  props: &#123;\n    title: &#123;\n      type: String,\n      default: &#39;hello world&#39;\n    &#125;\n  &#125;\n&#125;\r\n\r\n以上就是单向数据流的一般表现了： 父级 prop\r\n的更新会向下流动到子组件中，但是反过来则不行。\r\n\r\n子组件向父组件传值\r\n那么我们延伸一下，子组件怎么向父组件传值？\r\n1. 基本概念\r\n\r\n在vue中，父子组件的关系可以总结为prop向下传递，事件向上传递。父组件通过prop给子组件下发数据，子组件通过事件给父组件发送信息。\r\n\r\n\r\n\r\nimg\r\n\r\nprops down , events up\r\n\r\n每个Vue实例都实现了事件接口：使用$on(evntName)监听事件；使用$emit(eventName,optionalPayload)触发事件。另外，父组件可以在使用子组件的地方直接用v-on来监听子组件触发的事件。\r\n\r\n2. 举例说明\r\n\r\n父组件在组件上定义了一个自定义事件childFn，事件名为parentFn用于接受子组件传过来的message值。\r\n\r\n&lt;!-- 父组件 --&gt;\n&lt;template&gt;\n    &lt;div class&#x3D;&quot;test&quot;&gt;\n      &lt;test-com @childFn&#x3D;&quot;parentFn&quot;&gt;&lt;&#x2F;test-com&gt;\n      &lt;br&#x2F;&gt; \n      子组件传来的值 : &#123;&#123;message&#125;&#125;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n    &#x2F;&#x2F; ...\n    data() &#123;\n        return &#123;\n             message: &#39;&#39;\n        &#125;\n    &#125;,\n    methods: &#123;\n       parentFn(payload) &#123;\n        this.message &#x3D; payload;\n      &#125;\n    &#125;\n&#125;\n&lt;&#x2F;script&gt;\r\n\r\n子组件是一个buttton按钮，并为其添加了一个click事件，当点击的时候使用$emit()触发事件，把message传给父组件。\r\n\r\n&lt;!-- 子组件 --&gt;\n&lt;template&gt; \n&lt;div class&#x3D;&quot;testCom&quot;&gt;\n    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot; &#x2F;&gt;\n    &lt;button @click&#x3D;&quot;click&quot;&gt;Send&lt;&#x2F;button&gt;\n&lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\nexport default &#123;\n    &#x2F;&#x2F; ...\n    data() &#123;\n        return &#123;\n          &#x2F;&#x2F; 默认\n          message: &#39;我是来自子组件的消息&#39;\n        &#125;\n    &#125;,\n    methods: &#123;\n      click() &#123;\n            this.$emit(&#39;childFn&#39;, this.message);\n        &#125;\n    &#125;    \n&#125;\n&lt;&#x2F;script&gt;\r\n\r\n这样我们就基本实现了子组件向父组件发送值了:\r\n\r\n\r\nimg\r\n\r\n点击send发送\r\n\r\n\r\n\r\nimg\r\n\r\n父组件接收组件传过来的值\r\n小结\r\n\r\n通过\"props down , events up\"我们就简单的实现了父子组件之间的双向传值，这是很基本的知识点，其它还有$invoke等等方法，大家可以去官网好好看看。\r\n关于通信和状态管理就必须了解vuex了，后面我们在项目中当涉及了再好好讲。\r\n\r\nvue中 关于$emit的用法\r\n1、父组件可以使用 props 把数据传给子组件。 2、子组件可以使用 $emit\r\n触发父组件的自定义事件。\r\nvm.$emit( event, arg ) //触发当前实例上的事件\r\nvm.$on( event, fn );//监听event事件后运行 fn；\r\n图一：点击之前例如：子组件：\r\n&lt;template&gt;\n  &lt;div class&#x3D;&quot;train-city&quot;&gt;\n    &lt;h3&gt;父组件传给子组件的toCity:&#123;&#123;sendData&#125;&#125;&lt;&#x2F;h3&gt; \n    &lt;br&#x2F;&gt;&lt;button @click&#x3D;&#39;select(&#96;大连&#96;)&#39;&gt;点击此处将‘大连’发射给父组件&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\n  export default &#123;\n    name:&#39;trainCity&#39;,\n    props:[&#39;sendData&#39;], &#x2F;&#x2F; 用来接收父组件传给子组件的数据\n    methods:&#123;\n      select(val) &#123;\n        let data &#x3D; &#123;\n          cityname: val\n        &#125;;\n        this.$emit(&#39;showCityName&#39;,data);&#x2F;&#x2F;select事件触发后，自动触发showCityName事件\n      &#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;\r\n父组件：\r\n&lt;template&gt;\n    &lt;div&gt;\n        &lt;div&gt;父组件的toCity&#123;&#123;toCity&#125;&#125;&lt;&#x2F;div&gt;\n        &lt;train-city @showCityName&#x3D;&quot;updateCity&quot; :sendData&#x3D;&quot;toCity&quot;&gt;&lt;&#x2F;train-city&gt;\n    &lt;&#x2F;div&gt;\n&lt;template&gt;\n&lt;script&gt;\n  import TrainCity from &quot;.&#x2F;train-city&quot;;\n  export default &#123;\n    name:&#39;index&#39;,\n    components: &#123;TrainCity&#125;,\n    data () &#123;\n      return &#123;\n        toCity:&quot;北京&quot;\n      &#125;\n    &#125;,\n    methods:&#123;\n      updateCity(data)&#123;&#x2F;&#x2F;触发子组件城市选择-选择城市的事件\n        this.toCity &#x3D; data.cityname;&#x2F;&#x2F;改变了父组件的值\n        console.log(&#39;toCity:&#39;+this.toCity)\n      &#125;\n    &#125;\n  &#125;\n&lt;&#x2F;script&gt;\r\n图一：点击之前的数据的数据\r\n\r\n\r\nimg\r\n\r\n图二：点击之后的数据\r\n\r\n\r\nimg\r\n\r\n","slug":"Web Dev/Front End/VUE/父子组件交互","date":"2023-03-07T16:14:46.450Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n","slug":"Web Dev/Front End/VUE/Vue入门","date":"2023-03-07T16:14:46.448Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"These dependencies were not\r\nfound:\r\n&lt;template&gt;\n  &lt;router-view&#x2F;&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &quot;defaultPage&quot;\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n\n&lt;&#x2F;style&gt;\r\n","slug":"Web Dev/Front End/VUE/These dependencies were not found","date":"2023-03-07T16:14:46.444Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"vue-router：404页面路由配置\r\n&#123;\n    name:&#39;404&#39;,\n    path:&#39;&#x2F;404.html&#39;,\n    component: resolve &#x3D;&gt; require([&#39;..&#x2F;page&#x2F;NotFound&#x2F;view.vue&#39;], resolve),\n&#125;,\n&#123;\n     path:&#39;*&#39;,\n     redirect:&#123;\n         name:&quot;404&quot;\n     &#125;\n&#125;\r\n","slug":"Web Dev/Front End/VUE/Router","date":"2023-03-07T16:14:46.442Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Problems in Vue projects\r\nyou may meet\r\n1. your Vue is blank\r\n&lt;template&gt;\n\n&lt;!-- notice! you should know that the router view is the most important label in the parent page, if it doesn&#39;t exist, you can only see the blank page! ---&gt;\n\t&lt;router-view&#x2F;&gt;\n\t&lt;!-- notice! you should know that the router view is the most important label in the parent page, if it doesn&#39;t exist, you can only see the blank page! ---&gt;\n\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &quot;defaultPage&quot;\n&#125;\n&lt;&#x2F;script&gt;\n\n&lt;style scoped&gt;\n\n&lt;&#x2F;style&gt;\r\n不管你创建的是第几级路由，总要有一个该级别的路由总页面，并且在这个总页面上要存在\r\n&lt;router-view&gt; 标签来指明展示子级页面\r\n","slug":"Web Dev/Front End/VUE/ProblemsMeetInVue","date":"2023-03-07T16:14:46.439Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"this.$router.push\r\nthis.$router.go\r\n&#x2F;&#x2F; 字符串\nthis.$router.push(&#39;&#x2F;home&#x2F;first&#39;)\n&#x2F;&#x2F; 对象\nthis.$router.push(&#123; path: &#39;&#x2F;home&#x2F;first&#39; &#125;)\n&#x2F;&#x2F; 命名的路由\nthis.$router.push(&#123; name: &#39;home&#39;, params: &#123; myid: id &#125;&#125;)\r\n&lt;!----&gt;\n&lt;button @click&#x3D;&quot;goback&quot;&gt;返回上页&lt;&#x2F;button&gt;\n\nmethods:&#123;\n  goback()&#123;\n    this.$router.go(-1)\n  &#125;\n&#125;\r\n&lt;!-- jump to certain page --&gt;\n&lt;button @click&#x3D;&quot;goToLink&quot;&gt;返回page1&lt;&#x2F;button&gt;\n\nmethods:&#123;\n  goToLink()&#123;\n    this.$router.push(&#39;&#x2F;page1&#39;)\n&#125;\n&lt;!-- &#x3D;&#x3D; --&gt;\nthis.$router.push(&#123;name:&#39;page1&#39;&#125;)\r\n1、作用：this.$router.push() 可以通过修改url实现路由跳转。\r\n2、push 后面可以是对象，也可以是字符串：\r\n.Params\r\n由于动态路由也是传递params的，所以在 this.$router.push()\r\n方法中path不能和params一起使用，否则params将无效。需要用name来指定页面。\r\n及通过路由配置的name属性访问\r\n在路由配置文件中定义参数：\r\n通过name获取页面，传递params：\r\n在目标页面通过this.$route.params获取参数： { path: ‘/detail/:myid’,\r\n// 动态路由 name: ‘home’, // 命名路由 component: Detail },\r\nVue 动态路由 与 命名路由\r\n","slug":"Web Dev/Front End/VUE/page jump","date":"2023-03-07T16:14:46.437Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"NPM基本命令\r\n修改npm源\r\n设置npm下载来源为淘宝源\r\n\r\n查看当前源 npm config get registry \r\n设置为淘宝源\r\n\r\nnpm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org  \r\n\r\n临时使用源（适用于一次性使用）\r\n\r\nnpm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install XXX（module name）\r\n还原默认源：\r\nnpm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;\r\n采用cnpm\r\n\r\ncnpm介绍：\r\n淘宝搭建的一个国内的npm服务器，以10分钟每次的速度将npm仓库中的所有内容“搬运”到国内\r\ncnpm安装： npm install -g cnpm\r\n--registry=https://registry.npm.taobao.org\r\ncnpm与npm的关系：cnpm就是npm的另一个版本，是node中一个不同的下载器，只包含了npm的下载功能\r\n\r\nnrm\r\n\r\nnrm介绍：\r\nnrm是npm注册表的管理工具，可以添加、删除、查询、切换npm注册表。\r\n什么是nrm nrm 是一个npm源管理器，允许你快速地在npm源间切换。\r\nnrm简单使用：\r\n\r\n修改NPM的缓存以及全局安装地址：\r\n\r\n查看设置\r\n\r\nnpm config ls\r\n\r\n设置全局安装地址：\r\n\r\nnpm config set prefix &quot;D:&#x2F;npm&#x2F;npm_Download&quot;\r\n\r\n设置缓存地址\r\n\r\nnpm config set cache &quot;D:&#x2F;npm&#x2F;npm_Cache&quot;\r\n\r\n清除缓存：\r\n\r\nnpm cache clean --force\n\t&#96;&#96;&#96;npm WARN using --force I sure hope you know what you are doing.\r\nNPM管理安装包：\r\n\r\n查看已经安装的包：\r\n\r\nnpm list -g --depth 0\r\n\r\n更新包： npm update -g xxx\r\n卸载包： npm uninstall -g xxx\r\n\r\n","slug":"Web Dev/Front End/NPM/基本命令与配置","date":"2023-03-07T16:14:46.430Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"THE\r\nDEFFERENCE BETWEEN SVG ELEMENT(CODE) AND SVG FILE\r\n\r\nreference:\r\n\r\nHow\r\ncan I save svg code as a .svg image? - Stack Overflow\r\n\r\nconclusions:\r\n\r\n\"Just had to make sure it has attribute: xmlns and versions, and then\r\nsave it in a text file and give it a .svg extension. Also make sure to\r\nadd xml tag a the top of the svg file just before pasting the svg tag\r\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\"\r\nSAVE (RATHER: DOWNLOAD)\r\nTHE SVG ELEMENT:\r\n\r\nrefenece: javascript\r\n- How do I save/export an SVG file after creating an SVG with D3.js (IE,\r\nsafari and chrome)? - Stack Overflow\r\ncode (which was used in NeatSankey) :\r\n\r\nfunction save_as_svg()&#123;\n        var svg_data &#x3D; document.getElementById(&quot;svg&quot;).innerHTML &#x2F;&#x2F;put id of your svg element here\n\n        var head &#x3D; &#39;&lt;svg title&#x3D;&quot;graph&quot; version&#x3D;&quot;1.1&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;&#39;\n\n        &#x2F;&#x2F;if you have some additional styling like graph edges put them inside &lt;style&gt; tag\n\n        var style &#x3D; &#39;&lt;style&gt;&lt;&#x2F;style&gt;&#39;\n\n        var full_svg &#x3D; head +  style + svg_data + &quot;&lt;&#x2F;svg&gt;&quot;\n        var blob &#x3D; new Blob([full_svg], &#123;type: &quot;image&#x2F;svg+xml&quot;&#125;);  \n        saveAs(blob, &quot;graph.svg&quot;);\n&#125;;\r\nMETHOD NOT EXAMINED:\r\n\r\nreference: URL.createObjectURL()\r\n- Web API 接口参考 | MDN (mozilla.org)\r\ncode:\r\n\r\nvar svgData &#x3D; $(&quot;#figureSvg&quot;)[0].outerHTML;\nvar svgBlob &#x3D; new Blob([svgData], &#123;type:&quot;image&#x2F;svg+xml;charset&#x3D;utf-8&quot;&#125;);\nvar svgUrl &#x3D; URL.createObjectURL(svgBlob);\nvar downloadLink &#x3D; document.createElement(&quot;a&quot;);\n\ndownloadLink.href &#x3D; svgUrl;\ndownloadLink.download &#x3D; &quot;newesttree.svg&quot;;\ndocument.body.appendChild(downloadLink);\ndownloadLink.click();\ndocument.body.removeChild(downloadLink);\r\nMORE RESOURCE\r\n\r\neligrey/FileSaver.js: An\r\nHTML5 saveAs() FileSaver implementation (github.com)\r\njimmywarting/StreamSaver.js:\r\nStreamSaver writes stream to the filesystem directly asynchronous\r\n(github.com)\r\nFileSaver.js 介绍 -\r\nyunser_blog - 博客园 (cnblogs.com)\r\nWorking\r\nwith files - Mozilla | MDN\r\n\r\n","slug":"Web Dev/Front End/D3/download svg pic","date":"2023-03-07T16:14:46.424Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"#🐒\r\n#D3的命名含义 - 示例：v3.0.0 - 含义：主版本号.次版本号.修订号 -\r\n解释： + 主版本号：当你做了不兼容的API修改 +\r\n次版本号：当你做了向下兼容的功能性更新 +\r\n修订号：当你做了向下兼容的问题修正\r\n#可视化的过程 - 获取 ———— Acquire - 分析 ———— Parse - 过滤 ————\r\nFilter - 挖掘 ———— Mine - 表现 ———— Represent - 改善 ———— Refine - 交互\r\n———— Interact\r\n#js基础 1. 变量的数据类型： -\r\nundefined：未初始化或者未赋值的变量都是undefined，当然，你也可以将变量初始化为undefined\r\n- null：null表示一个空对象，也可以拿它对变量赋初值 -\r\nboolean：布尔类型，只有两个值：true和false\r\n在条件语句（如if）种，所有值都会被转化为布尔值(对策见右)：0,\r\nNaN, undefined, null, \"\"(空字符串) =&gt; false；其他所有值 =&gt; true\r\n-number：支持十进制、八进制、十六进制 -\r\nstring：单引号和双引号作用相同，两个字符串还可以通过“ + ”来拼接 -\r\nobject：对象类型，是拥有属性和方法的数据类型\r\n2. 操作符： - 算数操作符：+、-、、/ -\r\n赋值操作符：+=、-=、=、/=、= - 布尔操作符：！、&amp;&amp;、||、 -\r\n关系操作符：&gt;、&lt;、&gt;=、&lt;=、!=、== - 条件操作符(只有一个)：？\r\nvar result &#x3D; 5 &gt; 3 ? true : false;\t\t&#x2F;&#x2F;true\n&#x2F;&#x2F;如果问号前为true，则返回冒号前的值(true)，否则返回冒号后的值(false) 3. 常见语句 - if else语句 - while、do while语句 - for和for\r\nin语句 - switch语句 - break、continue、label语句 4. 定义函数 -\r\nfunction语句 可以将一个函数赋给一个变量！ ```html var\r\nadd = function(num1, num2){ return num1 + num2; }\r\n            console.log(add(1,2))                                   //在控制台打印 3\r\n        ```//将一个无名函数的功能赋给了add变量\r\n\r\n\r\n\r\n","slug":"Web Dev/Front End/D3/d3","date":"2023-03-07T16:14:46.422Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"D3.js - Data-Driven Documents\r\n(d3js.org)\r\nHome · d3/d3 Wiki\r\n(github.com)\r\nLearn\r\nD3: Introduction / D3 / Observable (observablehq.com)\r\nD3库中所有函数都在“d3”命名空间内。\r\nD3 使用语义版本命名。\r\n你可以使用“d3.version”查看D3的最新版本\r\nD3 API总览\r\n\r\n核心\r\n- 包括选择器，过渡，数据处理，本地化，颜色等。\r\n地理\r\n- 球面坐标，经纬度运算。\r\n几何\r\n- 提供绘制2D几何图形的实用工具。\r\n布局\r\n- 推导定位元素的辅助数据。\r\n比例尺\r\n- 数据编码和视觉编码之间转换。\r\n可缩放矢量图形\r\n- 提供用于创建可伸缩矢量图形的实用工具。\r\n时间\r\n- 解析或格式化时间，计算日历的时间间隔等。\r\n行为\r\n- 可重用交互行为\r\n\r\n","slug":"Web Dev/Front End/D3/01.d3是怎样运作的","date":"2023-03-07T16:14:46.420Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"API 中文手册 ·\r\nd3/d3 Wiki (github.com)\r\n","slug":"Web Dev/Front End/D3/00.d3手册","date":"2023-03-07T16:14:46.417Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"今日开发重点：登陆页面\r\n重要的知识点：\r\n\r\n如下所示，是css中简单的样式，用css可以大幅降低js的难度！\r\n1、a:link{color:#fff}\r\n未访问时的状态（鼠标点击前显示的状态）\r\n2、a:hover{color:#fff} 鼠标悬停时的状态\r\n3、a:visited{color:#fff}\r\n已访问过的状态（鼠标点击后的状态）\r\n4、a:active{color:#fff} 鼠标点击时的状态\r\n5、a:focus{color:#fff}\r\n点击后鼠标移开保持鼠标点击时的状态（只有在时标签中有效）\r\n只有前端哟！要努力做后端了！\r\n整个页面的状态！通用选择器？\r\n跨设备的适配！头大\r\n\r\ninput::-webkit-input-placeholder\r\ninput::-moz-placeholder\r\n\r\n\r\n日记部分：\r\n​\r\n这种日记，是从今天——2021/2/21日重新开机的，我已经很久，很久很久没有写过日记了，其实吧，我觉得还是纸质的日记更好一点，电子的胜在方便，确实，这是互联网设备的生命线\r\n​ 那么，这样子又是一天了，这样子还蛮充实的:)\r\n和cpu斗智斗勇挺不错的，不过也确实应该积极运动，完全可以把！一部分！时间用在别的地方\r\n​\r\n阿里啊，技术还行，不过也确实怪不得他们，上有政策，哎，这也是我的疏忽，就当是花钱打水漂了\r\n​\r\n真是让人摸不着头脑，我又不是违法公民，凭什么剥夺我做blog的权利？\r\n​ 高校的课程真的忙吗？\r\n​ 抓紧时间了！我们还有比赛呢！\r\n","slug":"Web Dev/Front End/blog开发日志/2021.2.21","date":"2023-03-07T16:14:46.409Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"建立一个个人网站吧\r\n感想：这是本站的第一篇文章，这篇文章的上传意味着——这个站子正式成立了！\r\n前言：本文是在“云服务器”上建立个人网站的基础向教程，并不要求有什么编程基础\r\n缘由：我个人中二的以为，建立一个个人网站，即使是在大学里，都是很装逼的事\r\n注意事项：你可能需要准备\r\n\r\n","slug":"Web Dev/Front End/建立一个个人网站吧","date":"2023-03-07T16:14:46.401Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"载入内容的防止缓存策略\r\n在HTML页面更新后浏览器存在大部分时机影响更新页面的使用，非技术人员根本意识不到内容是否有更新\r\n&lt;head&gt; \n    &lt;!--  --&gt;\n    &lt;meta http-equiv&#x3D;&quot;Expires&quot; content&#x3D;&quot;0&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;Pragma&quot; content&#x3D;&quot;no-cache&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;Cache-control&quot; content&#x3D;&quot;no-cache&quot;&gt;\n    &lt;meta http-equiv&#x3D;&quot;Cache&quot; content&#x3D;&quot;no-cache&quot;&gt;\n\n    &lt;!-- 动态加载js以更新数据与控制逻辑 --&gt;\n    &lt;script&gt;\n        document.write(&#39;&lt;script src&#x3D;&quot;&#x2F;static&#x2F;js&#x2F;basicScatter.js?adv&#x3D;&#39;+Math.random()+&#39;&quot;&gt;&lt;\\&#x2F;script&gt;&#39;);\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\r\n由于加入了随机数，每次都会载入“全新的目标文件”，阻止了网页缓存，保证修改的及时展示\r\nDebugger\r\n只要在代码中添加debugger，chrome在运行的时候会自动停在那里。还可以用条件语句把它包裹起来，这样就可以在需要的时候才执行它。\r\nif (true) &#123;\n  debugger;\n&#125;\r\nConsole\r\n2.1 console.log\r\n在console.log()中，可以用%s设置字符串，%i设置数字，%c设置自定义样式，console.log()接受的两个参数，前者是描述性的语言，而第二个参数是与第一个参数位置对应的字符\r\nconsole.log(&#39; %c %s %s %s&#39;, &#39;color: yellow; background-color: black;&#39;, &#39;–&#39;, &#39;测试信息&#39;, &#39;–&#39;);\r\n2.2 console.table()\r\n很多的时候，你可能会有一堆对象需要查看。可以用console.log把每一个对象都输出出来，也可以用console.table语句直接把所有的对象都直接输出成为一个表格\r\n\r\n\r\nimg\r\n\r\n2.3 console.time()和console.timeEnd()\r\n当想知道某些代码的执行时间的时候这个工具将会非常有用，特别是当你定位很耗时的循环的时候。\r\n\r\n\r\nimg\r\n\r\n2.4 console.trace()\r\nconsole.trace()会显示函数调用的完整的堆栈轨迹信息\r\ngetTopN2(arr, n) &#123;\n  &#x2F;&#x2F; sort参数返回值大于1，就交换位置\n  console.trace(&#39;getTopN2&#39;);\n  return [...arr].sort((a, b) &#x3D;&gt; b - a).slice(0, n)\n&#125;\r\n结果如下：\r\n\r\n\r\nimg\r\n\r\n(14\r\n封私信 / 80 条消息) 前端页面，用 JavaScript 在调试 Bug\r\n时有哪些奇技淫巧？ - 知乎 (zhihu.com)\r\n","slug":"Web Dev/Front End/奇技淫巧","date":"2023-03-07T16:14:46.397Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"动画模板：\r\nAnimate\r\nAnimate.css | A cross-browser\r\nlibrary of CSS animations.\r\nUI框架：\r\nVuetify\r\nVue Material Design Component\r\nFramework — Vuetify.js\r\nBootstrap\r\nBootstrap · The most popular\r\nHTML, CSS, and JS library in the world. (getbootstrap.com)\r\nBuefy\r\nBuefy: lightweight UI components for\r\nVue.js based on Bulma\r\nElement UI\r\nA Desktop UI Toolkit\r\nfor Web | Element Plus (element-plus.org)\r\nQuasar FrameWork\r\n不止Web UI\r\nQuasar Framework\r\nQuasar Framework 中文网\r\n(quasarchs.com)\r\nLayUI\r\n基于JQ的前端框架，一个时代的尾声\r\nGitHub - sentsin/layui:\r\n采用自身模块规范编写的前端 UI 框架，遵循原生 HTML/CSS/JS\r\n的书写形式，极低门槛，拿来即用。\r\n\r\n\r\nimage-20210926220729969\r\n\r\n","slug":"Web Dev/Front End/前端框架","date":"2023-03-07T16:14:46.396Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"浅谈响应式Web设计与实现思路\r\n- 知乎 (zhihu.com)\r\n","slug":"Web Dev/Front End/web网页设计思路","date":"2023-03-07T16:14:46.392Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"响应式（Responsive）\r\n响应式是什么呢？顾名思义，响应式，肯定会自动响应，响应什么？应用程序是在终端屏幕窗口中展示给用户，被用户访问的，那么就是响应屏幕的变化，不同终端屏幕尺寸大小不一致，需要针对不同尺寸屏幕进行不同的展示响应。\r\n响应式（Responsive web design, RWD），是指一套应用程序用户界面（User\r\nInterface）能自动响应不同设备窗口或屏幕尺寸（screen\r\nsize）并且内容，布局渲染表现良好。 自适应（Adaptive）\r\n在响应式设计（RWD）之外，还有一种适配多设备屏幕的方式，自适应设计（Adaptive\r\nweb design， AWD）。\r\n自适应设计(AWD)，是指一个应用程序使用多版本用户界面，针对不同设备屏幕，服务器端返回不同版本用户界面，供用户访问。\r\nDesign UI For Mobile Phone\r\n网页自适应手机端的方式有两种：\r\n\r\nPC端的设计与手机端相差不大，利用 @media媒体查询 调整百分比\r\nPC端与手机端的设计分离，利用判断设备的方式做301跳转\r\n\r\n下面就结合源代码讲一讲如何实际实现这两种方案：\r\nMethod1\r\nStep1\r\n在html代码中添加如下代码\r\n&lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;\n&lt;meta content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0,maximum-scale&#x3D;1.0,user-scalable&#x3D;0&quot; name&#x3D;&quot;viewport&quot;&gt;\n&lt;meta content&#x3D;&quot;yes&quot; name&#x3D;&quot;apple-mobile-web-app-capable&quot;&gt;\n&lt;meta content&#x3D;&quot;yes&quot; name&#x3D;&quot;apple-touch-fullscreen&quot;&gt;\n&lt;meta content&#x3D;&quot;black&quot; name&#x3D;&quot;apple-mobile-web-app-status-bar-style&quot;&gt;\n&lt;meta content&#x3D;&quot;320&quot; name&#x3D;&quot;MobileOptimized&quot;&gt;\r\nStep2\r\n设置PC端内容区域width:1100px，添加如下代码：\r\n.container&#123; width:1100px; max-width:100%; &#125;\n.container img&#123; max-width:100%; &#125;\n \n@media only screen and (max-width: 480px) &#123;\n           &#x2F;&#x2F;此适配不同手机型号下文字，图片的大小\n&#125;\n \n@media only screen and (max-width: 375px) &#123;\n \n            &#x2F;&#x2F;此适配不同手机型号下文字，图片的大小\n&#125;\n \n..&#x2F;&#x2F;可继续\r\nMethod2\r\n在PC端公共Header中，添加如下JS\r\n&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n        if (window.location.toString().indexOf(&#39;pref&#x3D;padindex&#39;) !&#x3D; -1) &#123; &#125; else &#123;\n            if (&#x2F;AppleWebKit.*Mobile&#x2F;i.test(navigator.userAgent) || (&#x2F;MIDP|SymbianOS|NOKIA|SAMSUNG|LG|NEC|TCL|Alcatel|BIRD|DBTEL|Dopod|PHILIPS|HAIER|LENOVO|MOT-|Nokia|SonyEricsson|SIE-|Amoi|ZTE&#x2F;.test(navigator.userAgent))) &#123;\n                if (window.location.href.indexOf(&quot;?mobile&quot;) &lt; 0) &#123;\n                    try &#123;\n                        if (&#x2F;Android|Windows Phone|webOS|iPhone|iPod|BlackBerry&#x2F;i.test(navigator.userAgent)) &#123;\n                            window.location.href &#x3D; &quot;手机端链接&quot;;\n                        &#125; else if (&#x2F;iPad&#x2F;i.test(navigator.userAgent)) &#123;\n                        &#125; else &#123;\n                        &#125;\n                    &#125; catch (e) &#123;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n&lt;&#x2F;script&gt;    \r\n","slug":"Web Dev/Front End/UIDesign","date":"2023-03-07T16:14:46.391Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"#什么是jQuery： &gt; jQuery 库是一个 JavaScript 文件，您可以使用 HTML 的\r\n\r\n标签来引用它：\r\n&lt;head&gt;\n\t&lt;script src&#x3D;&quot;jquery-1.10.2.min.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt;\r\n/* JavaScript 是 HTML5 以及所有现代浏览器中的默认脚本语言！ */\r\n/* 所以没有必要再于&lt;script&gt;标签中写上：type=&quot;text/javascript&quot; 了 */\r\n##学习jQuery: 1. 查看当前jq版本：\r\n在控制台中，使用$.fn.jquery命令，即可调用出当前页面的jq版本\r\n\r\njq语法：\r\n\r\n/*\r\n使用jq的代替方案————CDN(内容分发网络)，即，通过CDN来就近引用服务器中存有的jQuery\r\n/ / 1. Staticfile CDN: / &lt;head&gt;\n\t&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;jquery&#x2F;1.10.2&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;head&gt; / 2. 百度 CDN:\r\n/ &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;apps.bdimg.com&#x2F;libs&#x2F;jquery&#x2F;2.1.4&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt; / 3. 又拍云 CDN: / &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;upcdn.b0.upaiyun.com&#x2F;libs&#x2F;jquery&#x2F;jquery-2.0.2.min.js&quot;&gt;&lt;&#x2F;script&gt; / 4.\r\n新浪 CDN: / &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;lib.sinaapp.com&#x2F;js&#x2F;jquery&#x2F;2.0.2&#x2F;jquery-2.0.2.min.js&quot;&gt;&lt;&#x2F;script&gt; / 5. Google CDN: / &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;ajax.googleapis.com&#x2F;ajax&#x2F;libs&#x2F;jquery&#x2F;1.10.2&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;\r\n/ 6. Microsoft CDN: / &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;ajax.aspnetcdn.com&#x2F;ajax&#x2F;jquery&#x2F;jquery-1.9.0.min.js&quot;&gt;&lt;&#x2F;script&gt; / 使用CDN的两个优势\r\n/ / 1. 用户在访问其他站点时，已经从CDN处加载过\r\njQuery。所以结果是，当他们访问您的站点时，会从CDN的缓存中加载\r\njQuery，这样可以减少加载时间。 / / 2. 大多数 CDN\r\n都可以确保当用户向其请求文件时，会从离用户最近的服务器上返回响应，这样也可以提高加载速度。\r\n*/\r\n","slug":"Web Dev/Front End/jQuery","date":"2023-03-07T16:14:46.388Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\nsvg————可缩放矢量模型（scalable vector graphics）\r\nsvg的主要意义：svg生成矢量图，它不会随着图片的缩放而发生失真\r\n##使用svg\r\n使用  标签导入 &lt;embed src&#x3D;&quot;circle1.svg&quot; type&#x3D;&quot;image&#x2F;svg+xml&quot; &#x2F;&gt;\r\n直接在html中嵌入svg代码 &lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n   &lt;circle cx&#x3D;&quot;100&quot; cy&#x3D;&quot;50&quot; r&#x3D;&quot;40&quot; stroke&#x3D;&quot;black&quot; stroke-width&#x3D;&quot;2&quot; fill&#x3D;&quot;red&quot; &#x2F;&gt;\n&lt;&#x2F;svg&gt;\r\n链接svg文件 &lt;a href&#x3D;&quot;circle1.svg&quot;&gt;View SVG file&lt;&#x2F;a&gt; ##svg的图形元素\r\n引出：svg有很多预定义的形状元素，可以直接被开发者使用和操作！\r\n矩形———— &gt; 用  标签来创建矩形 /* 见示例1\r\n*/\r\n圆形———— &gt; 用 标签来创建圆 /* 见示例二\r\n*/\r\n椭圆———— &gt; 用 标签来创建椭圆 /* 见示例三\r\n*/\r\n直线———— &gt; 用 标签来创建直线 /* 见示例四\r\n*/\r\n多边形———— &gt; 用\r\n标签来创建含有不少于三个边的图形 /* 见示例五\r\n*/\r\n曲线———— &gt; 用 标签来创建曲线 /* 见示例六\r\n/ / 确切的说，应该算是个折线 */\r\n路径———— &gt; 用 标签来定义一个路径 /* 见示例七 */\r\n&gt; 以下的命令可用于路径数据\r\n\r\nM = move to /* 两个参数表示点————移动画笔至一个点 */\r\nL = line to /* 两个参数表示点————在前后两点间连一条直线 */\r\nH = horizontal line to /* 一个参数表示线————绘制竖直线 */\r\nV = vertical line to /* 一个参数表示线————绘制水平线 */\r\nC = curve to /*\r\n三个参数————定义两个控制点和一个点————“绘制平滑曲线的命令”————绘制三次贝塞尔曲线C\r\n*/\r\nS = smooth curve to\r\nQ = quadratic Bézier curve /*\r\n“绘制平滑曲线的命令”————绘制二次贝塞尔曲线Q */\r\nT = smooth quadratic Bézier curve to\r\nA = elliptical Arc /* 弧形命令 */\r\nZ = close path /* 无参数————闭合路径命令 / /\r\n以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位（例如：从上一个点开始，向上移动10px，向左移动7px）\r\n/ / 元素是SVG基本形状中最强大的一个。 你可以用它创建线条,\r\n曲线, 弧形等等 */\r\n\r\n\r\n##svg文本：元素 引出：元素用于定义文本\r\n见示例8 &gt; 8.1 书写文本 &gt; 8.2 字体旋转 &gt; 8.3 路径上的文字 &gt;\r\n8.4 与元素联合 &gt; 8.5 作为连接文本（与元素联合）\r\n##svg滤镜 种类多样! &gt; feBlend -\r\n与图像相结合的滤镜 &gt; feColorMatrix - 用于彩色滤光片转换 &gt;\r\nfeComponentTransfer &gt; feComposite &gt; feConvolveMatrix &gt;\r\nfeDiffuseLighting &gt; feDisplacementMap &gt; feFlood &gt;\r\nfeGaussianBlur - 用于图像的模糊处理（高斯模糊） &gt; feImage &gt;\r\nfeMerge &gt; feMorphology &gt; feOffset - 过滤阴影 &gt;\r\nfeSpecularLighting &gt; feTile &gt; feTurbulence &gt; feDistantLight -\r\n用于照明过滤 &gt; fePointLight - 用于照明过滤 &gt; feSpotLight -\r\n用于照明过滤 /* 按照示例9，依葫芦画瓢 */\r\n###svg模糊：实质上是一种滤镜  和 ：\r\n互联网的svg滤镜统一定义在中，是用于元素定义并含有特殊元素的定义\r\n而svg的滤镜必须定义在中，且标签必须使用id属性来定义图形应用应该指向那个滤镜\r\n/* xml的id使用见示例8，9 */\r\n###svg阴影 仍用 和  使用  滤镜\r\n或与其他滤镜（如滤镜）组合使用 /* 见示例10 */\r\n##svg属性 1. stroke属性 &gt; stroke属性\r\n定义一条线，文本或元素轮廓的颜色 &gt; stroke-width属性\r\n定义了一条线，文本或元素轮廓的厚度 &gt; stroke-linecap属性\r\n定义不同类型的开放路径的结束方式 &gt;\r\nstroke-dasharray属性 用于创建虚线（此四属性统一见示例） &gt;\r\nstroke-opacity属性 定义轮廓透明度（该属性运用见示例1.2） 2. fill属性 3.\r\nfill-rull属性 &#x2F;* 示例1：创建矩形 *&#x2F;\n\t1. \n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;rect width&#x3D;&quot;300&quot; height&#x3D;&quot;100&quot; style&#x3D;&quot;fill:#66ccff;stroke-width:1;stroke:rgb(0,0,0)&quot;&#x2F;&gt;\n\t\t&lt;&#x2F;svg&gt;\n\t\t&#x2F;* \t1. rect 元素的 width 和 height 属性可定义矩形的高度和宽度\n\t\t\t2. style 属性用来定义 CSS 属性\n\t\t\t3. CSS 的 fill 属性定义矩形的填充颜色（rgb 值、颜色名或者十六进制值）&#x2F;* 3 是重点！ *&#x2F;\n\t\t\t4. CSS 的 stroke-width 属性定义矩形边框的宽度\n\t\t\t5. CSS 的 stroke 属性定义矩形边框的颜色&#x2F;* 详见stroke元素 *&#x2F;\n\t\t*&#x2F;\n\t2. \n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;rect x&#x3D;&quot;50&quot; y&#x3D;&quot;20&quot; width&#x3D;&quot;150&quot; height&#x3D;&quot;150&quot; style&#x3D;&quot;fill:blue;stroke:pink;stroke-width:5;fill-opacity:0.1;stroke-opacity:0.9&quot;&#x2F;&gt;\n\t\t&lt;&#x2F;svg&gt;\n\t\t&#x2F;* \t1. x 属性定义矩形的左侧位置（例如，x&#x3D;&quot;0&quot; 定义矩形到浏览器窗口左侧的距离是 0px）\n\t\t\t2. y 属性定义矩形的顶端位置（例如，y&#x3D;&quot;0&quot; 定义矩形到浏览器窗口顶端的距离是 0px）\n\t\t\t3. CSS 的 fill-opacity 属性定义填充颜色透明度（合法的范围是：0 - 1）&#x2F;* 1为完全不透明！ *&#x2F;\n\t\t\t4. CSS 的 stroke-opacity 属性定义轮廓颜色的透明度（合法的范围是：0 - 1）&#x2F;* 1为完全不透明！ *&#x2F;\n\t\t*&#x2F;\n\t   \n\t   &#x2F;* 对于 2 ，还可以使用 style&#x3D;&quot;opacity: 0.x&quot;&#x2F;* opacity值范围0-1 *&#x2F;来定义整个元素的不透明度，1为完全不透明！ *&#x2F;\n\t3. 创建一个圆角矩形\n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;rect x&#x3D;&quot;50&quot; y&#x3D;&quot;20&quot; rx&#x3D;&quot;20&quot; ry&#x3D;&quot;20&quot; width&#x3D;&quot;150&quot; height&#x3D;&quot;150&quot; style&#x3D;&quot;fill:red;stroke:black;stroke-width:5;opacity:0.5&quot;&#x2F;&gt;\n\t\t&lt;&#x2F;svg&gt;\n\t\t&#x2F;* rx 和 ry 属性可使矩形产生圆角。 *&#x2F;\r\n&#x2F;* 示例2：创建圆形 *&#x2F;\n\t1. \n\t\t&lt;!DOCTYPE html&gt;\n\t\t&lt;html&gt;\n\t\t\t&lt;body&gt;\n\t\t\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t\t\t&lt;circle cx&#x3D;&quot;100&quot; cy&#x3D;&quot;50&quot; r&#x3D;&quot;40&quot; stroke&#x3D;&quot;black&quot; stroke-width&#x3D;&quot;2&quot; fill&#x3D;&quot;red&quot; &#x2F;&gt;\n\t\t\t\t&lt;&#x2F;svg&gt; \n\t\t\t&lt;&#x2F;body&gt;\n\t\t&lt;&#x2F;html&gt;\n\t\t&#x2F;* \t1. cx和cy属性定义圆心的x和y坐标。如果省略cx和cy，圆心会被设置为(0, 0)\n\t\t\t2. r属性定义圆的半径\n\t\t*&#x2F;\r\n&#x2F;* 示例3：创建一个椭圆 *&#x2F;\n\t1.\n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;ellipse cx&#x3D;&quot;300&quot; cy&#x3D;&quot;80&quot; rx&#x3D;&quot;100&quot; ry&#x3D;&quot;50&quot; style&#x3D;&quot;fill:yellow;stroke:purple;stroke-width:2&quot;&#x2F;&gt;\n\t\t&lt;&#x2F;svg&gt;\n\t\t&#x2F;* \n\t\t\t1. CX属性定义的椭圆中心的x坐标\n\t\t\t2. CY属性定义的椭圆中心的y坐标\n\t\t\t3. RX属性定义的水平半径（半长轴）\n\t\t\t4. RY属性定义的垂直半径（半短轴）\n\t\t*&#x2F;\n\t2. 三个“层叠而上的”椭圆\n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;ellipse cx&#x3D;&quot;240&quot; cy&#x3D;&quot;100&quot; rx&#x3D;&quot;220&quot; ry&#x3D;&quot;30&quot; style&#x3D;&quot;fill:purple&quot; &#x2F;&gt;\n\t\t\t&lt;ellipse cx&#x3D;&quot;220&quot; cy&#x3D;&quot;70&quot; rx&#x3D;&quot;190&quot; ry&#x3D;&quot;20&quot; style&#x3D;&quot;fill:lime&quot; &#x2F;&gt;\n\t\t\t&lt;ellipse cx&#x3D;&quot;210&quot; cy&#x3D;&quot;45&quot; rx&#x3D;&quot;170&quot; ry&#x3D;&quot;15&quot; style&#x3D;&quot;fill:yellow&quot; &#x2F;&gt;\n\t\t&lt;&#x2F;svg&gt;\n\t3. 椭圆“组合”（或者叫“嵌套”？）\n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;ellipse cx&#x3D;&quot;240&quot; cy&#x3D;&quot;50&quot; rx&#x3D;&quot;220&quot; ry&#x3D;&quot;30&quot; style&#x3D;&quot;fill:yellow&quot;&#x2F;&gt;\n\t\t\t&lt;ellipse cx&#x3D;&quot;220&quot; cy&#x3D;&quot;50&quot; rx&#x3D;&quot;190&quot; ry&#x3D;&quot;20&quot; style&#x3D;&quot;fill:white&quot;&#x2F;&gt;\n\t\t&lt;&#x2F;svg&gt;\r\n&#x2F;* 示例4：创建一条直线 *&#x2F;\n\t1. \n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;line x1&#x3D;&quot;0&quot; y1&#x3D;&quot;0&quot; x2&#x3D;&quot;200&quot; y2&#x3D;&quot;200&quot; style&#x3D;&quot;stroke:rgb(255,0,0);stroke-width:2&quot;&#x2F;&gt;\n\t\t&lt;&#x2F;svg&gt;\n\t&#x2F;* \t1. x1 属性在 x 轴定义线条的开始&#x2F;* x轴————浏览器左上角向右延伸 *&#x2F;\n\t\t2. y1 属性在 y 轴定义线条的开始&#x2F;* y轴————浏览器左上角向下延伸 *&#x2F;\n\t\t3. x2 属性在 x 轴定义线条的结束\n\t\t4. y2 属性在 y 轴定义线条的结束\n\t*&#x2F;\r\n&#x2F;* 示例5：创建一个多边形 *&#x2F;\n\t1. 三角形\n\t&lt;svg  height&#x3D;&quot;210&quot; width&#x3D;&quot;500&quot;&gt;\n\t\t&lt;polygon points&#x3D;&quot;200,10 250,190 160,210&quot; style&#x3D;&quot;fill:lime;stroke:purple;stroke-width:1&quot;&#x2F;&gt;\n\t&lt;&#x2F;svg&gt;\n\t&#x2F;* \t1. points 属性定义多边形每个角的 x 和 y 坐标\n\t*&#x2F;\n   2. 四边形\n   &lt;svg height&#x3D;&quot;250&quot; width&#x3D;&quot;500&quot;&gt;\n\t\t&lt;polygon points&#x3D;&quot;220,10 300,210 170,250 123,234&quot; style&#x3D;&quot;fill:lime;stroke:purple;stroke-width:1&quot; &#x2F;&gt;\n   &lt;&#x2F;svg&gt;\n   3. 五角星_1\n\t&lt;svg height&#x3D;&quot;210&quot; width&#x3D;&quot;500&quot;&gt;\n\t\t&lt;polygon points&#x3D;&quot;100,10 40,198 190,78 10,78 160,198&quot; style&#x3D;&quot;fill:lime;stroke:purple;stroke-width:5;fill-rule:nonzero;&quot; &#x2F;&gt;\n\t&lt;&#x2F;svg&gt;\n\t&#x2F;* 1. 出现五角星内有对角线的原因————svg 与多边形的产生方式有关!\n\t\t\t\tsvg 多边形是通过 前一个点 连接 后一个点 来产生连线来勾勒出多边形的，它一定会去连接下一个被定义的点并产生 stroke !\n\t*&#x2F;\n\t&#x2F;* \t1. fill-rule:nonzero; \n\t*&#x2F;\n   4. 五角星_2\n   &lt;svg height&#x3D;&quot;210&quot; width&#x3D;&quot;500&quot;&gt;\n\t\t&lt;polygon points&#x3D;&quot;100,10 40,198 190,78 10,78 160,198&quot; style&#x3D;&quot;fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;&quot; &#x2F;&gt;\n   &lt;&#x2F;svg&gt;\n   &#x2F;* \t1. fill-rule:evenodd;\n   *&#x2F;\n  &#x2F;* [fill-rule 介绍：](http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;2008&#x2F;REC-CSS2-20080411&#x2F;cascade.html#value-def-inherit) *&#x2F;\n  &#x2F;*  *&#x2F;\r\n&#x2F;* 示例6：曲线的实际应用 *&#x2F;\n\t1. \n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t&lt;polyline points&#x3D;&quot;20,20 40,25 60,40 80,120 120,140 200,10&quot; style&#x3D;&quot;fill:none;stroke:black;stroke-width:3&quot; &#x2F;&gt;\n\t&lt;&#x2F;svg&gt;\n\t&#x2F;* \t1. 第一个点是起始位置(都是绝对位置！)\n\t\t2. 第二个点往后是折线段的\n\t\t3. 最后一个点是灭点\n\t*&#x2F;\r\n&#x2F;* 示例7：路径path的实际使用 *&#x2F;\n\t1. \n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t&lt;path d&#x3D;&quot;M150 0 L75 200 L225 200 Z&quot; &#x2F;&gt;\n\t&lt;&#x2F;svg&gt;\n\t&#x2F;* \t1. d是&lt;path&gt;中完成绘制工作的属性，它包含了一系列的用于绘制的命令\n\t\t2. M是绝对路径上的点，可以通过M（move to）来实现移动画笔，但是这个 “ M ” ，它也只移动画笔，不会去画线！ 所以 M 命令一般出现在路径的开始处，用来指明从何处开始画\n\t\t3. L是用虚画笔来完成连线的，path中最常用的命令，会在当前位置和它之后给出的新位置之间画一条线段（x0 y0 L x y (从点(x0,y0)出发连一条线到(x,y))）\n\t*&#x2F;\r\n&#x2F;* 示例8 *&#x2F;\n\t1. 写一个文本：\n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t&lt;text x&#x3D;&quot;0&quot; y&#x3D;&quot;15&quot; fill&#x3D;&quot;red&quot;&gt;I love SVG&lt;&#x2F;text&gt;\n\t&lt;&#x2F;svg&gt;\n\t2. 旋转的文字：\n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t&lt;text x&#x3D;&quot;0&quot; y&#x3D;&quot;15&quot; fill&#x3D;&quot;red&quot; transform&#x3D;&quot;rotate(30 20,40)&quot;&gt;I love SVG&lt;&#x2F;text&gt;\n\t&lt;&#x2F;svg&gt;\n\t\n\t\n&gt; 划重点！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！\n\t3. 路径上的文字：\n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot; xmlns:xlink&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot;&gt;\n\t\t&lt;defs&gt;\n\t\t\t&lt;path id&#x3D;&quot;path1&quot; d&#x3D;&quot;M75,20 a1,1 0 0,0 100,0&quot; &#x2F;&gt;\n\t\t&lt;&#x2F;defs&gt;\n\t\t&lt;text x&#x3D;&quot;10&quot; y&#x3D;&quot;100&quot; style&#x3D;&quot;fill:red;&quot;&gt;\n\t\t\t&lt;textPath xlink:href&#x3D;&quot;#path1&quot;&gt;I love SVG I love SVG&lt;&#x2F;textPath&gt;\n\t\t&lt;&#x2F;text&gt;\n\t&lt;&#x2F;svg&gt;\n&gt; 划重点！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！\n\n\n\t4. 安排任何分小组与&lt;tspan&gt; 元素的数量。每个&lt;tspan&gt; 元素可以包含不同的格式和位置。几行文本(与 &lt;tspan&gt; 元素):\n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t&lt;text x&#x3D;&quot;10&quot; y&#x3D;&quot;20&quot; style&#x3D;&quot;fill:red;&quot;&gt;Several lines:\n\t\t\t&lt;tspan x&#x3D;&quot;10&quot; y&#x3D;&quot;45&quot; style&#x3D;&quot;fill:blue;&quot;&gt;First line&lt;&#x2F;tspan&gt;\n\t\t\t&lt;tspan x&#x3D;&quot;10&quot; y&#x3D;&quot;70&quot; style&#x3D;&quot;fill:green;&quot;&gt;Second line&lt;&#x2F;tspan&gt;\n\t\t&lt;&#x2F;text&gt;\n\t&lt;&#x2F;svg&gt;\n\t5. 作为链接文本（ &lt;a&gt; 元素）：\n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot; xmlns:xlink&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot;&gt;\n\t\t&lt;a xlink:href&#x3D;&quot;http:&#x2F;&#x2F;www.w3schools.com&#x2F;svg&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;\n\t\t\t&lt;text x&#x3D;&quot;0&quot; y&#x3D;&quot;15&quot; fill&#x3D;&quot;red&quot;&gt;I love SVG&lt;&#x2F;text&gt;\n\t\t&lt;&#x2F;a&gt;\n\t&lt;&#x2F;svg&gt;\r\n&#x2F;* 示例9：svg的模糊效果 *&#x2F;\n\t1. &lt;feGaussianBlur&gt;元素（用于创建模糊效果）\n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t&lt;defs&gt;\n\t\t\t&lt;filter id&#x3D;&quot;f1&quot; x&#x3D;&quot;0&quot; y&#x3D;&quot;0&quot;&gt;\n\t\t\t\t&lt;feGaussianBlur in&#x3D;&quot;SourceGraphic&quot; stdDeviation&#x3D;&quot;15&quot; &#x2F;&gt;\n\t\t\t&lt;&#x2F;filter&gt;\n\t\t&lt;&#x2F;defs&gt;\n\t\t&lt;rect width&#x3D;&quot;90&quot; height&#x3D;&quot;90&quot; stroke&#x3D;&quot;green&quot; stroke-width&#x3D;&quot;3&quot; fill&#x3D;&quot;yellow&quot; filter&#x3D;&quot;url(#f1)&quot; &#x2F;&gt;\n\t&lt;&#x2F;svg&gt;\n\t&#x2F;* \t1. &lt;filter&gt;元素id属性定义一个滤镜的唯一名称\n\t\t2. &lt;feGaussianBlur&gt;元素定义模糊效果\n\t\t3. in&#x3D;&quot;SourceGraphic&quot;这个部分定义了由整个图像创建效果\n\t\t4. stdDeviation属性定义模糊量\n\t\t5. &lt;rect&gt;元素的滤镜属性用来把元素链接到&quot;f1&quot;滤镜\n\t*&#x2F;\r\n&#x2F;* 示例10：svg阴影 *&#x2F;\n\t1.\n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t&lt;defs&gt;\n\t\t\t&lt;filter id&#x3D;&quot;f1&quot; x&#x3D;&quot;0&quot; y&#x3D;&quot;0&quot; width&#x3D;&quot;200%&quot; height&#x3D;&quot;200%&quot;&gt;\n\t\t\t\t&lt;feOffset result&#x3D;&quot;offOut&quot; in&#x3D;&quot;SourceGraphic&quot; dx&#x3D;&quot;20&quot; dy&#x3D;&quot;20&quot; &#x2F;&gt;\n\t\t\t\t&lt;feBlend in&#x3D;&quot;SourceGraphic&quot; in2&#x3D;&quot;offOut&quot; mode&#x3D;&quot;normal&quot; &#x2F;&gt;\n\t\t\t&lt;&#x2F;filter&gt;\n\t\t&lt;&#x2F;defs&gt;\n\t\t&lt;rect width&#x3D;&quot;90&quot; height&#x3D;&quot;90&quot; stroke&#x3D;&quot;green&quot; stroke-width&#x3D;&quot;3&quot; fill&#x3D;&quot;yellow&quot; filter&#x3D;&quot;url(#f1)&quot; &#x2F;&gt;\n\t&lt;&#x2F;svg&gt;\n\t&#x2F;* &lt;filter&gt;元素id属性定义一个滤镜的唯一名称，&lt;rect&gt;元素的滤镜属性用来把元素链接到&quot;f1&quot;滤镜 *&#x2F;\n\t2.\n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t&lt;defs&gt;\n\t\t\t&lt;filter id&#x3D;&quot;f1&quot; x&#x3D;&quot;0&quot; y&#x3D;&quot;0&quot; width&#x3D;&quot;200%&quot; height&#x3D;&quot;200%&quot;&gt;\n\t\t\t\t&lt;feOffset result&#x3D;&quot;offOut&quot; in&#x3D;&quot;SourceGraphic&quot; dx&#x3D;&quot;20&quot; dy&#x3D;&quot;20&quot; &#x2F;&gt;\n\t\t\t\t&lt;feGaussianBlur result&#x3D;&quot;blurOut&quot; in&#x3D;&quot;offOut&quot; stdDeviation&#x3D;&quot;10&quot; &#x2F;&gt;\n\t\t\t\t&lt;feBlend in&#x3D;&quot;SourceGraphic&quot; in2&#x3D;&quot;blurOut&quot; mode&#x3D;&quot;normal&quot; &#x2F;&gt;\n\t\t\t&lt;&#x2F;filter&gt;\n\t\t&lt;&#x2F;defs&gt;\n\t\t&lt;rect width&#x3D;&quot;90&quot; height&#x3D;&quot;90&quot; stroke&#x3D;&quot;green&quot; stroke-width&#x3D;&quot;3&quot; fill&#x3D;&quot;yellow&quot; filter&#x3D;&quot;url(#f1)&quot; &#x2F;&gt;\n\t&lt;&#x2F;svg&gt;\n\t&#x2F;* &lt;feGaussianBlur&gt;元素的stdDeviation属性定义了模糊量 *&#x2F;\n\t3.\n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t&lt;defs&gt;\n\t\t\t&lt;filter id&#x3D;&quot;f1&quot; x&#x3D;&quot;0&quot; y&#x3D;&quot;0&quot; width&#x3D;&quot;200%&quot; height&#x3D;&quot;200%&quot;&gt;\n\t\t\t\t&lt;feOffset result&#x3D;&quot;offOut&quot; in&#x3D;&quot;SourceAlpha&quot; dx&#x3D;&quot;20&quot; dy&#x3D;&quot;20&quot; &#x2F;&gt;\n\t\t\t\t&lt;feGaussianBlur result&#x3D;&quot;blurOut&quot; in&#x3D;&quot;offOut&quot; stdDeviation&#x3D;&quot;10&quot; &#x2F;&gt;\n\t\t\t\t&lt;feBlend in&#x3D;&quot;SourceGraphic&quot; in2&#x3D;&quot;blurOut&quot; mode&#x3D;&quot;normal&quot; &#x2F;&gt;\n\t\t\t&lt;&#x2F;filter&gt;\n\t\t&lt;&#x2F;defs&gt;\n\t\t&lt;rect width&#x3D;&quot;90&quot; height&#x3D;&quot;90&quot; stroke&#x3D;&quot;green&quot; stroke-width&#x3D;&quot;3&quot; fill&#x3D;&quot;yellow&quot; filter&#x3D;&quot;url(#f1)&quot; &#x2F;&gt;\n\t&lt;&#x2F;svg&gt;\n\t&#x2F;* &lt;feOffset&gt;元素的属性改为&quot;SourceAlpha&quot;在Alpha通道使用残影，而不是整个RGBA像素。 *&#x2F;\n\t4.\n\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t&lt;defs&gt;\n\t\t\t&lt;filter id&#x3D;&quot;f1&quot; x&#x3D;&quot;0&quot; y&#x3D;&quot;0&quot; width&#x3D;&quot;200%&quot; height&#x3D;&quot;200%&quot;&gt;\n\t\t\t\t&lt;feOffset result&#x3D;&quot;offOut&quot; in&#x3D;&quot;SourceGraphic&quot; dx&#x3D;&quot;20&quot; dy&#x3D;&quot;20&quot; &#x2F;&gt;\n\t\t\t\t&lt;feColorMatrix result&#x3D;&quot;matrixOut&quot; in&#x3D;&quot;offOut&quot; type&#x3D;&quot;matrix&quot; values&#x3D;&quot;0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0&quot; &#x2F;&gt;\n\t\t\t\t&lt;feGaussianBlur result&#x3D;&quot;blurOut&quot; in&#x3D;&quot;matrixOut&quot; stdDeviation&#x3D;&quot;10&quot; &#x2F;&gt;\n\t\t\t\t&lt;feBlend in&#x3D;&quot;SourceGraphic&quot; in2&#x3D;&quot;blurOut&quot; mode&#x3D;&quot;normal&quot; &#x2F;&gt;\n\t\t\t&lt;&#x2F;filter&gt;\n\t\t&lt;&#x2F;defs&gt;\n\t\t&lt;rect width&#x3D;&quot;90&quot; height&#x3D;&quot;90&quot; stroke&#x3D;&quot;green&quot; stroke-width&#x3D;&quot;3&quot; fill&#x3D;&quot;yellow&quot; filter&#x3D;&quot;url(#f1)&quot; &#x2F;&gt;\n\t&lt;&#x2F;svg&gt;\n\t&#x2F;* &lt;feColorMatrix&gt;过滤器是用来转换偏移的图像使之更接近黑色的颜色。 &#39;0.2&#39;矩阵的三个值都获取乘以红色，绿色和蓝色通道。降低其值带来的颜色至黑色（黑色为0） *&#x2F;\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例8 *&#x2F;\n\t\r\n&#x2F;* 示例1：stroke属性示例 *&#x2F;\n1. stroke\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;body&gt;\n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;g fill&#x3D;&quot;none&quot;&gt;\n\t\t\t\t&lt;path stroke&#x3D;&quot;red&quot; d&#x3D;&quot;M5 20 l215 0&quot; &#x2F;&gt;\n\t\t\t\t&lt;path stroke&#x3D;&quot;black&quot; d&#x3D;&quot;M5 40 l215 0&quot; &#x2F;&gt;\n\t\t\t\t&lt;path stroke&#x3D;&quot;blue&quot; d&#x3D;&quot;M5 60 l215 0&quot; &#x2F;&gt;\n\t\t\t&lt;&#x2F;g&gt;&#x2F;* stroke 可以直接在&lt;g&gt;标签中统一定义！ *&#x2F;\n\t\t&lt;&#x2F;svg&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n2. stroke-width\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;body&gt;\n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;g fill&#x3D;&quot;none&quot; stroke&#x3D;&quot;black&quot;&gt;\n\t\t\t\t&lt;path stroke-width&#x3D;&quot;2&quot; d&#x3D;&quot;M5 20 l215 0&quot; &#x2F;&gt;\n\t\t\t\t&lt;path stroke-width&#x3D;&quot;4&quot; d&#x3D;&quot;M5 40 l215 0&quot; &#x2F;&gt;\n\t\t\t\t&lt;path stroke-width&#x3D;&quot;6&quot; d&#x3D;&quot;M5 60 l215 0&quot; &#x2F;&gt;\n\t\t\t&lt;&#x2F;g&gt;&#x2F;* 同样的，stroke-width 也可以直接在&lt;g&gt;标签中统一定义！ *&#x2F;\n\t\t&lt;&#x2F;svg&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n3. stroke-linecap\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;body&gt;\n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;g fill&#x3D;&quot;none&quot; stroke&#x3D;&quot;black&quot; stroke-width&#x3D;&quot;6&quot;&gt;\n\t\t\t\t&lt;path stroke-linecap&#x3D;&quot;butt&quot; d&#x3D;&quot;M5 20 l215 0&quot; &#x2F;&gt;\n\t\t\t\t&lt;path stroke-linecap&#x3D;&quot;round&quot; d&#x3D;&quot;M5 40 l215 0&quot; &#x2F;&gt;\n\t\t\t\t&lt;path stroke-linecap&#x3D;&quot;square&quot; d&#x3D;&quot;M5 60 l215 0&quot; &#x2F;&gt;\n\t\t\t&lt;&#x2F;g&gt;&#x2F;* 同上 *&#x2F;\n\t\t&lt;&#x2F;svg&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n4. stroke-dasharray\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;body&gt;\n\t\t&lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; version&#x3D;&quot;1.1&quot;&gt;\n\t\t\t&lt;g fill&#x3D;&quot;none&quot; stroke&#x3D;&quot;black&quot; stroke-width&#x3D;&quot;4&quot;&gt;\n\t\t\t\t&#x2F;* 1号 *&#x2F;&lt;path stroke-dasharray&#x3D;&quot;5,5&quot; d&#x3D;&quot;M5 20 l215 0&quot; &#x2F;&gt;\n\t\t\t\t&#x2F;* 2号 *&#x2F;&lt;path stroke-dasharray&#x3D;&quot;10,10&quot; d&#x3D;&quot;M5 40 l215 0&quot; &#x2F;&gt;\n\t\t\t\t&#x2F;* 3号 *&#x2F;&lt;path stroke-dasharray&#x3D;&quot;20,10,5,5,5,10&quot; d&#x3D;&quot;M5 60 l215 0&quot; &#x2F;&gt;\n\t\t\t&lt;&#x2F;g&gt;&#x2F;* 同上 *&#x2F;\n\t\t&lt;&#x2F;svg&gt;&#x2F;* stroke-dasharray中，对于1、2号来讲：第一个参数是一条虚线上 单条短实线的长度， 第二个参数是一条虚线上 各个短实线之间的间隔长度 *&#x2F;\n\t&lt;&#x2F;body&gt;&#x2F;* 而对于3号（多参数）来讲，其顺序是：短实线长，间隔长，短实线长，间隔长，短实线长，间隔长······如此循环，事实上1、2号也遵守此规律 *&#x2F;\n&lt;&#x2F;html&gt;\r\n","slug":"Web Dev/Front End/02. svg","date":"2023-03-07T16:14:46.386Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"#HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准。 /*\r\n其实可以修改更多包括———— 改变html内容 ， 改变 CSS 样式 ， 改变 HTML 属性\r\n， 创建新的 HTML 元素 ， 删除已有的 HTML 元素 ， 改变事件（处理程序）\r\n*/\r\n###DOM 节点 1. 根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点!\r\n- 整个文档是一个文档节点 - 每个 HTML 元素是元素节点 - HTML\r\n元素内的文本是文本节点 - 每个 HTML 属性是属性节点 - 注释是注释节点 2.\r\n节点的级别 -\r\n用父（parent）、子（child）和同胞（sibling）等术语来描述这些关系。 -\r\n父节点拥有子节点,同级的子节点被称为同胞（兄弟或姐妹） 3. 节点范例 -\r\n代码示例： &lt;html&gt;\n  &lt;head&gt;\n\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;title&gt;DOM 教程&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n\t&lt;h1&gt;DOM 课程1&lt;&#x2F;h1&gt;\n\t&lt;p&gt;Hello world!&lt;&#x2F;p&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt; -\r\n\r\n节点没有父节点；它是根节点 -\r\n\r\n和\r\n\r\n的父节点是\r\n\r\n节点 - 文本节点 \"Hello world!\" 的父节点是\r\n\r\n节点 4. DOM处理中的常见错误就是希望元素包含文本 - 解释： text is\r\nalways stored in text nodes A common error in DOM processing is to\r\nexpect an element node to contain text However, the text of an element\r\nnode is stored in a text node. In this example:\r\n&lt;year&gt;2005&lt;/year&gt;, the element node ,\r\nholds a text node with the value \"2005\". \"2005\" is not the\r\nvalue of the  element -\r\n即：文本只在文本节点中，而文本节点只是属于的子节点，year并不包含\"2005\",\"2005\"是专属于文本节点的值\r\n5. 可通过 JavaScript （以及其他编程语言）对 HTML DOM 进行访问。\r\n###DOM方法 HTML DOM 方法是我们可以在节点（HTML\r\n元素）上执行的动作。→方法是我们能够执行的动作（比如添加或修改元素）。\r\n\r\ngetElementById(id) -\r\n获取带有指定id的节点（元素）\r\n/*\r\n返回值类型为元素对象，只返回指定ID的元素，如果在后面用.value是可以的，但是将.value赋给一个变量就不行，原因不明\r\n*/\r\ngetElementsByTagName() -\r\n返回带有指定标签名的所有元素/*\r\ndocument.getElementsByTagName(\"p\"); */\r\n/* document.getElementById(\"main\").getElementsByTagName(\"p\");\r\n//\r\n\r\n元素应该是 id=\"main\" 的元素的后代 */\r\nThe getElementsByClassName() -\r\n查找带有相同类名的所有 HTML 元素\r\nappendChild(node) - 插入新的子节点（元素）\r\nremoveChild(node) - 删除子节点（元素）\r\ncreateElement() -\r\n\r\n###DOM属性 HTML DOM 属性是我们可以在节点（HTML\r\n元素）设置和修改的值。→属性是我们能够获取或设置的值（比如节点的名称或内容）。\r\n1. innerHTML - 节点（元素）的文本值（或者是————获取html元素的内容）/*\r\ninnerHTML 属性可用于获取或改变任意 HTML 元素，包括\r\n\r\n和\r\n\r\n*/ 2. parentNode - 节点（元素）的父节点 3. childNodes -\r\n节点（元素）的子节点 4. attributes - 节点（元素）的属性节点 5. nodeName\r\n- 规定节点的名称 - 只读\r\n/* 元素节点的 nodeName 与标签名相同,  属性节点的 nodeName 与属性名相同, 文本节点的 nodeName 始终是 #text, 文档节点的 nodeName 始终是 #document */\r\n\r\nnodeValue - 规定节点的值\r\n/* 元素节点的 nodeValue 是 undefined 或 null, 文本节点的 nodeValue\r\n是文本本身,属性节点的 nodeValue 是属性值 */\r\nnodeType - 返回节点的类型 - 只读\r\n/* 元素节点反1， 属性节点反2， 文本节点反3， 注释节点反8，文档节点反9\r\n*/\r\n\r\n###DOM事件 使用 JavaScript 向 HTML 元素分配事件： 1. onclick -\r\n鼠标点击触发事件 2. onload - 用户进入界面触发事件 /* onload\r\n事件可用于检查访客的浏览器类型和版本，以便基于这些信息来加载不同版本的网页。\r\n*/ 3. onunload - 用户离开页面触发事件 - onload 和 onunload\r\n事件可用于处理 cookies。\r\n    /* 实例见下 */\r\n\r\nonchange - 当用户改变输入字段的内容时，将调用事件\r\n\r\n实例见下20\r\n\r\nonmouseover -\r\nonmouseout -\r\nonmousedown -\r\nonmouseup -\r\n\r\n/* DOM方法与属性综合使用简单实践 */ &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t\n\t&lt;body&gt;\n\t\t&lt;p id&#x3D;&quot;intro&quot;&gt;Hello World!&lt;&#x2F;p&gt;\n\t\t&lt;script&gt;\n\t\t\tvar txt&#x3D;document.getElementById(&quot;intro&quot;).innerHTML;&#x2F;* getElementById是方法， 而innerHtml是属性 *&#x2F;\n\t\t\tdocument.write(txt);&#x2F;* innerHTML直接使用：***document.getElementById(&quot; ~~xxx的id~~ &quot;).innerHTML*** &#x3D; &quot; hello world &quot; *&#x2F;\n\t\t&lt;&#x2F;script&gt; &#x2F;* 作用很明了————捕获id为 &quot;intro&quot; 的元素，将它的值赋给txt， 并在文件中打印一次txt*&#x2F;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\r\n/* nodeName、nodeType、nodeValue 应用实例 */ &lt;!DOCTYPE html&gt;\n\t&lt;html&gt;\n\t\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\n\t\t&lt;p id&#x3D;&quot;intro&quot;&gt;Hello World!&lt;&#x2F;p&gt;\n\n\t\t&lt;script&gt;\n\t\t\tx&#x3D;document.getElementById(&quot;intro&quot;);\n\t\t\tdocument.write(x.firstChild.nodeName&#x2F;* nodeType *&#x2F;&#x2F;* nodeValue *&#x2F;);\n\t\t&lt;&#x2F;script&gt;\n\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\r\n/* innerHTML 实例//改变 HTML 内容 */ &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;p id&#x3D;&quot;p1&quot;&gt;Hello World!&lt;&#x2F;p&gt;\t\t\n\t\t&lt;script&gt;\n\t\t\tdocument.getElementById(&quot;p1&quot;).innerHTML&#x3D;&quot;新文本!&quot;;\n\t\t&lt;&#x2F;script&gt;&#x2F;* p1 原本的文字并没有消失，它是在文档渲染中进行的实时替换的，仍然存在且仍然可以被利用，但是利用的js代码必须在替换之前！！！ *&#x2F;\n\t\t&lt;p&gt;段落通过脚本来修改内容。&lt;&#x2F;p&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\r\n/* 改变 HTML 样式 */ \t&lt;p id&#x3D;&quot;p1&quot;&gt;Hello world!&lt;&#x2F;p&gt;\n\t&lt;p id&#x3D;&quot;p2&quot;&gt;Hello world!&lt;&#x2F;p&gt;\n\n&#96;&#96;&#96;html\n&lt;script&gt;\ndocument.getElementById(&quot;p2&quot;).style.color&#x3D;&quot;blue&quot;;\ndocument.getElementById(&quot;p2&quot;).style.fontFamily&#x3D;&quot;Arial&quot;;\ndocument.getElementById(&quot;p2&quot;).style.fontSize&#x3D;&quot;larger&quot;;\n&lt;&#x2F;script&gt;\n&#96;&#96;\r\n/* 使用事件 / 1. &lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;document.body.style.backgroundColor&#x3D;&#39;lavender&#39;;&quot; value&#x3D;&quot;修改背景颜色&quot;&gt; 也可以用函数执行: &lt;script&gt;\n\tfunction ChangeBackground()\n\t&#123;\n\t\tdocument.body.style.backgroundColor&#x3D;&quot;lavender&quot;;\n\t&#125;\n&lt;&#x2F;script&gt;\n&lt;input type&#x3D;&quot;button&quot; onclick&#x3D;&quot;ChangeBackground()&quot; value&#x3D;&quot;修改背景颜色&quot; &#x2F;&gt;\r\n/ 常见html事件的例子 - 当用户点击鼠标时 - 当网页已加载时 -\r\n当图片已加载时 - 当鼠标移动到元素上时 - 当输入字段被改变时 - 当 HTML\r\n表单被提交时 - 当用户触发按键时 / 2. &lt;h1 onclick&#x3D;&quot;this.innerHTML&#x3D;&#39;Ooops!&#39;&quot;&gt;点击文本!&lt;&#x2F;h1&gt;&#x2F;* 没有定义函数，直接在元素里完成脚本编写 *&#x2F; 也可以用函数执行\r\n&lt;script&gt;\n\tfunction changetext(id)&#123;\n\t\tid.innerHTML&#x3D;&quot;Ooops!&quot;;\n\t&#125;\n&lt;&#x2F;script&gt;\n&lt;h1 onclick&#x3D;&quot;changetext(this)&quot;&gt;点击文本!&lt;&#x2F;h1&gt; 等于 &lt;script&gt;\n\tfunction changetext()\n\t&#123;\n\t\tdocument.getElementById(1).innerHTML&#x3D;&quot;Ooops!&quot;;\n\t&#125;\n&lt;&#x2F;script&gt;\n\t&lt;h1 onclick&#x3D;&quot;changetext()&quot; id&#x3D;&quot;1&quot;&gt;点击文本!&lt;&#x2F;h1&gt; 3. \t /\r\n创建新的HTML元素 - createElement() //\r\n特点：将新元素作为父元素的最后一个子元素进行添加 / &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;div1&quot;&gt;\n\t\t&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;\n\t\t&lt;p id&#x3D;&quot;p2&quot;&gt;这是另一个段落。&lt;&#x2F;p&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;script&gt;\n\t\t\tvar para&#x3D;document.createElement(&quot;p&quot;);\n\t\t\tvar node&#x3D;document.createTextNode(&quot;这是一个新段落。&quot;);\n\t\t\tpara.appendChild(node);\n\t\t\tvar element&#x3D;document.getElementById(&quot;div1&quot;);\n\t\t\telement.appendChild(para);\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\r\n/ 实例解析 这段代码创建了一个新的\r\n\r\n元素： 先新建你要添加的元素 var para=document.createElement(\"p\");\r\n如需向 &lt;p&gt; 元素添加文本，您首先必须创建文本节点。这段代码创建文本节点：      必须创建文字节点来存储字符\r\nvar node=document.createTextNode(&quot;这是一个新段落。&quot;);\r\n\r\n然后您必须向 &lt;p&gt; 元素追加文本节点：                                        向元素节点追加文字节点\r\npara.appendChild(node);\r\n\r\n最后，您必须向已有元素追加这个新元素。                                     向已有元素追加新元素\r\n这段代码查找到一个已有的元素：\r\nvar element=document.getElementById(&quot;div1&quot;);\r\n\r\n这段代码向这个已存在的元素追加新元素：\r\nelement.appendChild(para); */\r\n/* 创建新的 HTML 元素 - insertBefore() //\r\n特点：新元素添加时可以自选位置 */ &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;div1&quot;&gt;\n\t\t\t&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;\n\t\t\t&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;script&gt;\n\t\t\tvar para&#x3D;document.createElement(&quot;p&quot;);\t\t\t\t\t\t\t先新建你要添加的元素\n\t\t\tvar node&#x3D;document.createTextNode(&quot;这是一个新段落。&quot;);\t\t\t\t必须创建文字节点来存储字符\n\t\t\tpara.appendChild(node);\t\t\t\t\t\t\t\t\t\t\t向元素节点追加文字节点\n\t\t\tvar element&#x3D;document.getElementById(&quot;div1&quot;);\t\t\t\t\t找到新元素的插入指向的父元素\n\t\t\tvar child&#x3D;document.getElementById(&quot;p1&quot;);\t\t\t\t\t\t找到具体子元素中的插入位置(before)\n\t\t\telement.insertBefore(para,child);\t\t\t\t\t\t\t\t向已有元素追加新元素\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\r\n/* 删除已有的 HTML 元素 */ &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;div1&quot;&gt;\n\t\t\t&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;\n\t\t\t&lt;p id&#x3D;&quot;p2&quot;&gt;这是另一个段落。&lt;&#x2F;p&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;script&gt;\n\t\t\tvar parent&#x3D;document.getElementById(&quot;div1&quot;);\t\t\t\t\t\t找到要删除元素的父元素\n\t\t\tvar child&#x3D;document.getElementById(&quot;p1&quot;);\t\t\t\t\t\t找到具体要删除的元素\n\t\t\tparent.removeChild(child);\t\t\t\t\t\t\t\t\t\t执行删除\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\r\n/* 替换 HTML 元素 */ &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div id&#x3D;&quot;div1&quot;&gt;\n\t\t\t&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;\n\t\t\t&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;\n\t\t&lt;&#x2F;div&gt;\n\t\t&lt;script&gt;\n\t\t\tvar parent&#x3D;document.getElementById(&quot;div1&quot;);\t\t\t\t\t\t找父\n\t\t\tvar child&#x3D;document.getElementById(&quot;p1&quot;);\t\t\t\t\t\t找子\n\t\t\tvar para&#x3D;document.createElement(&quot;p&quot;);\t\t\t\t\t\t\t新子\n\t\t\tvar node&#x3D;document.createTextNode(&quot;这是一个新的段落。&quot;);\t\t\t新子内文本\n\t\t\tpara.appendChild(node);\t\t\t\t\t\t\t\t\t\t\t文本与子绑定\n\t\t\tparent.replaceChild(para,child);\t\t\t\t\t\t\t\t替换\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\r\n/* onchange事件实例 */ &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t\t&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;\n\t\t&lt;script&gt;\n\t\t\tfunction myFunction()\n\t\t\t&#123;\n\t\t\t\tvar x&#x3D;document.getElementById(&quot;fname&quot;);\n\t\t\t\tx.value&#x3D;x.value.toUpperCase();\n\t\t\t&#125;\n\t\t&lt;&#x2F;script&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t输入你的名字: &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;fname&quot; onchange&#x3D;&quot;myFunction()&quot;&gt;\t\n\t\t&lt;p&gt;当你离开输入框后，函数将被触发，将小写字母转为大写字母。&lt;&#x2F;p&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\r\n/* onload事件实例（类推onunload） */ &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body onload&#x3D;&quot;checkCookies()&quot;&gt;\n\t\t&lt;script&gt;\n\t\t\tfunction checkCookies()\n\t\t\t&#123;\n\t\t\t\tif (navigator.cookieEnabled&#x3D;&#x3D;true)&#x2F;* navigator是js中的一个对象(Navigator 对象包含有关浏览器的信息)，cookieEnabled是其一个属性 *&#x2F;\n\t\t\t\t&#123;\n\t\t\t\t\talert(&quot;Cookie 可用&quot;)\n\t\t\t\t&#125;\n\t\t\t\telse\n\t\t\t\t&#123;\n\t\t\t\t\talert(&quot;Cookie 不可用&quot;)\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&lt;&#x2F;script&gt;\n\t\t&lt;p&gt;页面载入时，弹出浏览器 Cookie 可用状态。&lt;&#x2F;p&gt;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\r\n/* onmouseover 和 onmouseout 事件 及可类推的 onmousedown、onmouseup\r\n以及 onclick 事件 */ &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;\n\t&lt;&#x2F;head&gt;\n\t&lt;body&gt;\n\t\t&lt;div onmouseover&#x3D;&quot;mOver(this)&quot; onmouseout&#x3D;&quot;mOut(this)&quot; style&#x3D;&quot;background-color:#D94A38;width:120px;height:20px;padding:40px;&quot;&gt;Mouse Over Me&lt;&#x2F;div&gt;\n\t\t&lt;script&gt;\n\t\t\tfunction mOver(obj)\n\t\t\t&#123;\n\t\t\t\tobj.innerHTML&#x3D;&quot;Thank You&quot;\n\t\t\t&#125;\n\t\t\tfunction mOut(obj)\n\t\t\t&#123;\n\t\t\t\tobj.innerHTML&#x3D;&quot;Mouse Over Me&quot;\n\t\t\t&#125;\n\t\t&lt;&#x2F;script&gt;\n\t\t\t&#x2F;* \t\t\n\t\t\t\t\t&lt;div onmousedown&#x3D;&quot;mDown(this)&quot; onmouseup&#x3D;&quot;mUp(this)&quot; style&#x3D;&quot;background-color:#D94A38;width:90px;height:20px;padding:40px;&quot;&gt;Click Me&lt;&#x2F;div&gt;\n\t\t\t\t\t&lt;script&gt;\n\t\t\t\t\t function mDown(obj)\n\t\t\t\t\t &#123;\n\t\t\t\t\t\tobj.style.backgroundColor&#x3D;&quot;#1ec5e5&quot;;\n\t\t\t\t\t\tobj.innerHTML&#x3D;&quot;Release Me&quot;\n\t\t\t\t\t &#125;\n\t\t\t\t\t \n\t\t\t\t\t function mUp(obj)\n\t\t\t\t\t &#123;\n\t\t\t\t\t\tobj.style.backgroundColor&#x3D;&quot;#D94A38&quot;;\n\t\t\t\t\t\tobj.innerHTML&#x3D;&quot;Thank You&quot;\n\t\t\t\t\t &#125;\n\t\t\t\t\t&lt;&#x2F;script&gt;\n\t\t\t*&#x2F;\n\t&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\r\n备注一些单位：\r\n\r\n\r\n\r\nem\r\n相对于父元素的字体大小\r\n\r\n\r\npx\r\n相对于屏幕分辨率\r\n\r\n\r\n%\r\n相对于父元素\r\n\r\n\r\ncm\r\n即厘米\r\n\r\n\r\nmm\r\n即毫米\r\n\r\n\r\nin\r\n即英寸\r\n\r\n\r\npt\r\n1/72 英寸\r\n\r\n\r\npc\r\n1/21\r\n\r\n\r\n\r\n","slug":"Web Dev/Front End/01. html_dom","date":"2023-03-07T16:14:46.384Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n","slug":"Web Dev/Back End/SpringBoot/FirstSpringBootApplication","date":"2023-03-07T16:14:46.377Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Maven官方的中央仓库：Central Repository:\r\n(apache.org)\r\nStructures\r\nMaven项目结构\r\n一个使用Maven管理的普通的Java项目，它的目录结构默认如下：\r\n\r\n\r\nIMG\r\n\r\n项目的根目录a-maven-project是项目名\r\n有一个项目描述文件pom.xml，存放Java源码的目录是src/main/java\r\n存放资源文件的目录是src/main/resources\r\n存放测试源码的目录是src/test/java\r\n存放测试资源的目录是src/test/resources\r\n最后，所有编译、打包生成的文件都放在target目录里\r\n这些就是一个Maven项目的标准目录结构\r\n","slug":"Web Dev/Back End/MAVEN/MAVEN-Project_Structure","date":"2023-03-07T16:14:46.367Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"pom.xml Structure\r\n\r\n\r\n(project . CInodeIVersion&gt;4. O. i\r\ntranswarD. I earn (version&gt; I. &lt;pmpert (dependenci (dependency) d)\r\ngroupld) (art i fact I t Id) (version) I.\r\n\r\n其中，groupId类似于Java的包名，通常是公司或组织名称\r\nartifactId类似于Java的类名，通常是项目名称\r\n再加上version\r\n一个Maven工程就是由groupId，artifactId和version作为唯一标识。\r\n我们在引用其他第三方库的时候，也是通过这3个变量确定。\r\n例如，依赖commons-logging：\r\n使用&lt;&gt;声明一个依赖后，Maven就会自动下载这个依赖包并把它放到classpath中。\r\n但是version target is not necessary！\r\n但是，并不是所有依赖都需要声明version，\r\n","slug":"Web Dev/Back End/MAVEN/MAVEN-poml-file_Structure","date":"2023-03-07T16:14:46.358Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n\r\n\r\n\r\n\r\n\r\n\r\nMaven Command\r\nDescription\r\n\r\n\r\n\r\n\r\nmvn --version\r\nPrints out the version of Maven you are running.\r\n\r\n\r\nmvn clean\r\nClears the target directory into which Maven normally\r\nbuilds your project.\r\n\r\n\r\nmvn package\r\nBuilds the project and packages the resulting JAR file into the\r\ntarget directory.\r\n\r\n\r\nmvn package -Dmaven.test.skip=true\r\nBuilds the project and packages the resulting JAR file into the\r\ntarget directory - without running the unit tests during\r\nthe build.\r\n\r\n\r\nmvn clean package\r\nClears the target directory and Builds the project and\r\npackages the resulting JAR file into the target\r\ndirectory.\r\n\r\n\r\nmvn clean package - Dmaven.test.skip=true\r\nClears the target directory and builds the project and\r\npackages the resulting JAR file into the target directory -\r\nwithout running the unit tests during the build.\r\n\r\n\r\nmvn verify\r\nRuns all integration tests found in the project.\r\n\r\n\r\nmvn clean verify\r\nCleans the target directory, and runs all integration tests found in\r\nthe project.\r\n\r\n\r\nmvn install\r\nBuilds the project described by your Maven POM file and installs the\r\nresulting artifact (JAR) into your local Maven repository\r\n\r\n\r\nmvn install -Dmaven.test.skip=true\r\nBuilds the project described by your Maven POM file without running\r\nunit tests, and installs the resulting artifact (JAR) into your local\r\nMaven repository\r\n\r\n\r\nmvn clean install\r\nClears the target directory and builds the project\r\ndescribed by your Maven POM file and installs the resulting artifact\r\n(JAR) into your local Maven repository\r\n\r\n\r\nmvn clean install -Dmaven.test.skip=true\r\nClears the target directory and builds the project\r\ndescribed by your Maven POM file without running unit tests, and\r\ninstalls the resulting artifact (JAR) into your local Maven\r\nrepository\r\n\r\n\r\nmvn dependency:copy-dependencies\r\nCopies dependencies from remote Maven repositories to your local\r\nMaven repository.\r\n\r\n\r\nmvn clean dependency:copy-dependencies\r\nCleans project and copies dependencies from remote Maven\r\nrepositories to your local Maven repository.\r\n\r\n\r\nmvn clean dependency:copy-dependencies package\r\nCleans project, copies dependencies from remote Maven repositories\r\nto your local Maven repository and packages your project.\r\n\r\n\r\nmvn dependency:tree\r\nPrints out the dependency tree for your project - based on the\r\ndependencies configured in the pom.xml file.\r\n\r\n\r\nmvn dependency:tree -Dverbose\r\nPrints out the dependency tree for your project - based on the\r\ndependencies configured in the pom.xml file. Includes repeated,\r\ntransitive dependencies.\r\n\r\n\r\nmvn dependency:tree -Dincludes=com.fasterxml.jackson.core\r\nPrints out the dependencies from your project which depend on the\r\ncom.fasterxml.jackson.core artifact.\r\n\r\n\r\nmvn dependency:tree -Dverbose\r\n-Dincludes=com.fasterxml.jackson.core\r\nPrints out the dependencies from your project which depend on the\r\ncom.fasterxml.jackson.core artifact. Includes repeated, transitive\r\ndependencies.\r\n\r\n\r\nmvn dependency:build-classpath\r\nPrints out the classpath needed to run your project (application)\r\nbased on the dependencies configured in the pom.xml file.\r\n\r\n\r\n\r\n","slug":"Web Dev/Back End/MAVEN/COMMAND","date":"2023-03-07T16:14:46.355Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Flask如何处理请求\r\n一个简单但完整的示例\r\nfrom flask import Flask, jsonify\n\napp &#x3D; Flask(__name__)\n\n\n@app.route(&#39;&#x2F;api&#39;)\ndef my_microservice():\n    return jsonify(&#123;&#39;Hello&#39;: &#39;World!&#39;&#125;)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    app.run()\r\n此时，当我们访问/api时，应用会返回一个JSON映射。\r\n\r\n变量__name__\r\n\r\n\r\n变量__name__是这个应用软件包的名称，而当运行一个单独的Python模块时，变量__name__会赋值为__main__\r\nFlask会使用这个变量实例化一个新的日志日志记录器(logger)，并在磁盘上定位这个模块所在文件的路径。\r\nFlask将使用该文件的目录作为助手程序的根目录(例如与应用程序相关的配置文件)，并根据此目录确定静态文件目录(static)与模板目录(templates)的默认存放位置\r\n\r\n在shell中运行当前模块时，Flask会运行其中的内置Web服务器，并在默认在5000端口监听传入的请求\r\n\r\n访问/api\r\n\r\nroot@BUNJIESP8:&#x2F;mnt&#x2F;c&#x2F;Users&#x2F;m1518&#x2F;Project&#x2F;flask# curl -v http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;api\n*   Trying 127.0.0.1:5000...\n* Connected to 127.0.0.1 (127.0.0.1) port 5000 (#0)\n&gt; GET &#x2F;api HTTP&#x2F;1.1\n&gt; Host: 127.0.0.1:5000\n&gt; User-Agent: curl&#x2F;7.81.0\n&gt; Accept: *&#x2F;*\n&gt; \n* Mark bundle as not supporting multiuse\n&lt; HTTP&#x2F;1.1 200 OK\n&lt; Server: Werkzeug&#x2F;2.2.2 Python&#x2F;3.10.4\n&lt; Date: Sat, 10 Sep 2022 11:43:02 GMT\n&lt; Content-Type: application&#x2F;json\n&lt; Content-Length: 19\n&lt; Connection: close\n&lt; \n&#123;&quot;Hello&quot;:&quot;World!&quot;&#125;\n* Closing connection 0\r\n可以发现，我们得到了一个合法的JSON响应和正确的消息头。\r\n\r\njsonity函数\r\n\r\n该函数会将Python字典类型转换为合法的JSON响应，并在添加适当的Content-Type消息头后，将映射信息存储到响应体中\r\nrequest对象\r\n与大多数Web框架不同，flask不需要显示地将request对象传递到代码中——它隐式地提供了一个全局的request变量，并用该全局的变量来指向当前的request对象。Flask把传入的HTTP请求解析为WSGI环境字典，并利用它来创建这个对象\r\n这样：当服务器的响应不依赖请求的内容时，就没必要处理它。视图只需要确保返回了客户端应该获取的内容，并确保内容能够被Flask序列化即可\r\n了解底层到底发生了什么\r\n增加print方法，了解curl访问具体过程\r\nfrom flask import Flask, jsonify, request\n\napp &#x3D; Flask(__name__)\n\n\n@app.route(&#39;&#x2F;api&#39;)\ndef my_microservice():\n    print(request)\n    print(request.environ)\n    response &#x3D; jsonify(&#123;&#39;Hello&#39;: &#39;World!&#39;&#125;)\n    print(response)\n    print(response.data)\n    return response\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    print(app.url_map)\n    app.run()\r\n有：\r\n(venv) root@BUNJIESP8:&#x2F;mnt&#x2F;c&#x2F;Users&#x2F;m1518&#x2F;Project&#x2F;flask&#x2F;chapter2# python app.py \nMap([&lt;Rule &#39;&#x2F;static&#x2F;&lt;filename&gt;&#39; (OPTIONS, GET, HEAD) -&gt; static&gt;,\n &lt;Rule &#39;&#x2F;api&#39; (OPTIONS, GET, HEAD) -&gt; my_microservice&gt;])\n * Serving Flask app &#39;app&#39;\n * Debug mode: off\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http:&#x2F;&#x2F;127.0.0.1:5000\nPress CTRL+C to quit\n&lt;Request &#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;api&#39; [GET]&gt;\n&#123;&#39;wsgi.version&#39;: (1, 0), &#39;wsgi.url_scheme&#39;: &#39;http&#39;, &#39;wsgi.input&#39;: &lt;_io.BufferedReader name&#x3D;4&gt;, &#39;wsgi.errors&#39;: &lt;_io.TextIOWrapper name&#x3D;&#39;&lt;stderr&gt;&#39; mode&#x3D;&#39;w&#39; encoding&#x3D;&#39;utf-8&#39;&gt;, &#39;wsgi.multithread&#39;: True, &#39;wsgi.multiprocess&#39;: False, &#39;wsgi.run_once&#39;: False, &#39;werkzeug.socket&#39;: &lt;socket.socket fd&#x3D;4, family&#x3D;AddressFamily.AF_INET, type&#x3D;SocketKind.SOCK_STREAM, proto&#x3D;0, laddr&#x3D;(&#39;127.0.0.1&#39;, 5000), raddr&#x3D;(&#39;127.0.0.1&#39;, 54614)&gt;, &#39;SERVER_SOFTWARE&#39;: &#39;Werkzeug&#x2F;2.2.2&#39;, &#39;REQUEST_METHOD&#39;: &#39;GET&#39;, &#39;SCRIPT_NAME&#39;: &#39;&#39;, &#39;PATH_INFO&#39;: &#39;&#x2F;api&#39;, &#39;QUERY_STRING&#39;: &#39;&#39;, &#39;REQUEST_URI&#39;: &#39;&#x2F;api&#39;, &#39;RAW_URI&#39;: &#39;&#x2F;api&#39;, &#39;REMOTE_ADDR&#39;: &#39;127.0.0.1&#39;, &#39;REMOTE_PORT&#39;: 54614, &#39;SERVER_NAME&#39;: &#39;127.0.0.1&#39;, &#39;SERVER_PORT&#39;: &#39;5000&#39;, &#39;SERVER_PROTOCOL&#39;: &#39;HTTP&#x2F;1.1&#39;, &#39;HTTP_HOST&#39;: &#39;127.0.0.1:5000&#39;, &#39;HTTP_USER_AGENT&#39;: &#39;curl&#x2F;7.81.0&#39;, &#39;HTTP_ACCEPT&#39;: &#39;*&#x2F;*&#39;, &#39;werkzeug.request&#39;: &lt;Request &#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;api&#39; [GET]&gt;&#125;\n&lt;Response 19 bytes [200 OK]&gt;\nb&#39;&#123;&quot;Hello&quot;:&quot;World!&quot;&#125;\\n&#39;\n127.0.0.1 - - [10&#x2F;Sep&#x2F;2022 22:55:47] &quot;GET &#x2F;api HTTP&#x2F;1.1&quot; 200 -\r\n路由匹配\r\n路由匹配发生在app.url_map中，这是Werzeug中Map类的一个实例。Map([&lt;Rule '/static/&lt;filename&gt;' (OPTIONS, GET, HEAD) -&gt; static&gt;, &lt;Rule '/api' (OPTIONS, GET, HEAD) -&gt; my_microservice&gt;])\r\n该类使用正则表达式来判定被@app.route装饰的函数时候与传入的请求匹配，路由匹配只会姜茶route调用里的路径参数来判断函数时候匹配客户端的请求，默认情况下，声明式路由只支持GET,\r\nOPTIONS,\r\nHEAD方法的调用，如果使用了不支持的HTTP方法，则会出现405Method\r\nNot\r\nAllowed响应，并在Allow响应头中返回其所支持的HTTP方法列表（正常访问不会出现Allow响应头）\r\n当需要支持指定HTTP请求方式时，我们需要给装饰器增加额外的参数：\r\n@app.route(&#39;&#x2F;api&#39;, method&#x3D;[&#39;POST&#39;, &#39;DELETE&#39;, &#39;GET&#39;])\r\n不过，\r\n变量与转换器\r\n路由系统支持变量如：/person/&lt;person_id&gt;\r\n请求\r\n响应\r\nFlask的内置特性\r\n微服务骨架\r\n拓展：\r\n这个 name 变量可能取什么值？\r\n当你直接执行一段脚本的时候，这段脚本的\r\nname变量等于\r\n'main'，当这段脚本被导入其他程序的时候，name\r\n变量等于脚本本身的名字。\r\n这个 name 拿来做什么的？\r\n作为 Python\r\n的内置变量，name变量（前后各有两个下划线）还是挺特殊的。它是每个\r\nPython 模块必备的属性，但它的值取决于你是如何执行这段代码的。\r\n在许多情况下，你的代码不可能全部都放在同一个文件里，或者你在这个文件里写的函数，在其他地方也可以用到。为了更高效地重用这些代码，你需要在\r\nPython 程序中导入来自其他文件的代码。\r\n所以，在name\r\n变量的帮助下，你可以判断出这时代码是被直接运行，还是被导入到其他程序中去了。\r\nPython 的\r\nname 变量，到底是个什么东西？ - 知乎\r\n(zhihu.com)\r\n","slug":"Web Dev/Back End/flask/tutorial/setup_your_flask","date":"2023-03-07T16:14:46.345Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"注意你的sql文件\r\n当你犯错时，不妨再去看看语法：\r\nDROP TABLE IF EXISTS user;\nDROP TABLE IF EXISTS post;\n\nCREATE TABLE user (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT UNIQUE NOT NULL,\n    password TEXT NOT NULL, &#x2F;&#x2F; 不应该有 ,\n);\n\nCREATE TABLE post (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    author_id INTEGER NOT NULL,\n    created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    title TEXT NOT NULL,\n    body TEXT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES user (id)\n) &#x2F;&#x2F;应该加上 ;\r\n","slug":"Web Dev/Back End/flask/坑","date":"2023-03-07T16:14:46.337Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"单体应用有很多显而易见的好处\r\n\r\n项目起步简单，\r\n易于部署\r\n\r\n但是\r\n\r\n项目通常都会增长，比最初计划的要大，最终演变成失控性增长\r\n\r\n","slug":"Web Dev/Back End/flask/why we need microservices","date":"2023-03-07T16:14:46.334Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"快速上手\r\n对应的官网页面：快速上手\r\n— Flask 中文文档 (2.0.2) (dormousehole.readthedocs.io)\r\n一个最小的应用\r\n一个最小的 Flask 应用如下：\r\nfrom flask import Flask\n\napp &#x3D; Flask(__name__)\n\n@app.route(&quot;&#x2F;&quot;)\ndef hello_world():\n    return &quot;&lt;p&gt;Hello, World!&lt;&#x2F;p&gt;&quot;\r\n那么，这些代码是什么意思呢？\r\n\r\n首先我们导入了 Flask\r\n类。该类的实例将会成为我们的 WSGI 应用。\r\n接着我们创建一个该类的实例。第一个参数是应用模块或者包的名称。\r\n__name__ 是一个适用于大多数情况的快捷方式。有了这个参数，\r\nFlask 才能知道在哪里可以找到模板和静态文件等东西。\r\n然后我们使用 route() 装饰器来告诉\r\nFlask 触发函数 的 URL 。\r\n函数返回需要在用户浏览器中显示的信息。默认的内容类型是 HTML ，因此字\r\n符串中的 HTML 会被浏览器渲染。\r\n\r\n把它保存为 hello.py 或其他类似名称。\r\n\r\n请不要使用 flask.py 作为应用名称，这会与 Flask\r\n本身发生冲突。\r\n\r\n可以使用 flask 命令或者 python 的 -m\r\n开关来运行这个应 用。在运行应用之前，需要在终端里导出\r\nFLASK_APP 环境变量：\r\nPowershell\r\n&gt; $env:FLASK_APP &#x3D; &quot;hello&quot;\n&gt; flask run\n * Running on http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;\r\n应用发现行为\r\n作为一个捷径，如果文件名为 app.py 或者\r\nwsgi.py ，那么您不 需要设置 FLASK_APP\r\n环境变量。详见 命令行接口\r\n。\r\n这样就启动了一个非常简单的内建的服务器。这个服务器用于测试应该是足够了，\r\n但是用于生产可能是不够的。关于部署的有关内容参见 部署方式\r\n。\r\n现在在浏览器中打开 http://127.0.0.1:5000/ ，应该可以看到 Hello World!\r\n字样。\r\n外部可见的服务器\r\n运行服务器后，会发现只有您自己的电脑可以使用服务，而网络中的其他电脑却\r\n不行。缺省设置就是这样的，因为在调试模式下该应用的用户可以执行您电脑中\r\n的任意 Python 代码。\r\n如果您关闭了调试器或信任您网络中的用户，那么可以让服务器被公开访问。\r\n只要在命令行上简单的加上 --host=0.0.0.0 即可:\r\n$ flask run --host&#x3D;0.0.0.0\r\n这行代码告诉您的操作系统监听所有公开的 IP 。\r\n如果服务器不能启动怎么办\r\n假如运行 python -m flask 命令失败或者\r\nflask 命令\r\n不存在，那么可能会有多种原因导致失败。首先应该检查错误信息。\r\n老版本的 Flask\r\n版本低于 0.11 的 Flask，启动应用的方式是不同的。\r\n简单的说就是 flask 和 python -m\r\nflask 命令都无法使用。在这种情 况下有两个选择：一是升级 Flask\r\n到更新的版本，二是参阅 开发服务器\r\n， 学习其他启动服务器的方法。\r\n非法导入名称\r\nFLASK_APP 环境变量中储存的是模块的名称，运行\r\nflask run 命令就\r\n会导入这个模块。如果模块的名称不对，那么就会出现导入错误。出现错误的时机是在\r\n应用开始的时候。如果调试模式打开的情况下，会在运行到应用开始的时候出现导入\r\n错误。出错信息会告诉您尝试导入哪个模块时出错，为什么会出错。\r\n最常见的错误是因为拼写错误而没有真正创建一个 app\r\n对象。\r\n调试模式\r\nflask run\r\n命令不只可以启动开发服务器。如果您打开调试模式，那么服务\r\n器会在修改应用代码之后自动重启，并且当请求过程中发生错误时还会在浏览器\r\n中提供一个交互调试器。\r\n\r\n\r\nThe interactive debugger in\r\naction.\r\n\r\n\r\n调试器允许执行来自浏览器的任意 Python 代码。虽然它由一个 pin 保护，\r\n但仍然存在巨大安全风险。不要在生产环境中运行开发服务器或调试器。\r\n\r\n如果需要打开所有开发功能，那么需要在运行 flask run\r\n之前设置 FLASK_ENV 环境变量为 development\r\n。\r\nPowershell\r\n&gt; $env:FLASK_ENV &#x3D; &quot;development&quot;\n&gt; flask run\r\n另见：\r\n\r\n开发服务器\r\n和 命令行接口\r\n包含有关开发模式运行的内容。\r\n调试应用程序错误\r\n包含有关内置调试器和其他调试器的内容。\r\n日志\r\n和 应用错误处理\r\n包含有关日志记录和显示友好 的出错信息页面的内容\r\n\r\nHTML 转义\r\n当返回 HTML （ Flask\r\n中的默认响应类型）时，为了防止注入攻击，所有用户提供的值在输出渲染前必须被转义。使用\r\nJinja （这个稍后会介绍）渲染的 HTML 模板会自动执行此操作。\r\n在下面展示的 escape()\r\n可以手动转义。因为保持简洁的原因，在多数示例中它被省略了，但您应该始终留心处理不可信的数据。\r\nfrom markupsafe import escape\n\n@app.route(&quot;&#x2F;&lt;name&gt;&quot;) # 在这里定义了一个&lt;name&gt;来接收用用户内容\ndef hello(name):\n    return f&quot;Hello, &#123;escape(name)&#125;!&quot;\r\n如果一个用户想要提交其名称为\r\n&lt;script&gt;alert(\"bad\")&lt;/script&gt; ，那么\r\n宁可转义为文本，也好过在浏览器中执行脚本。\r\n路由中的 &lt;name&gt; 从 URL\r\n中捕获值并将其传递给视图函数。这些变量规则见 下文。\r\n路由\r\n现代 web 应用都使用有意义的 URL\r\n，这样有助于用户记忆，网页会更得到用户的青睐， 提高回头率。\r\n使用 route()\r\n装饰器来把函数绑定到 URL:\r\n@app.route(&#39;&#x2F;&#39;)\ndef index():\n    return &#39;Index Page&#39;\n\n@app.route(&#39;&#x2F;hello&#39;)\ndef hello():\n    return &#39;Hello, World&#39;\r\n但是能做的不仅仅是这些！您可以动态变化 URL 的某些部分，\r\n还可以为一个函数指定多个规则。\r\n变量规则\r\n通过把 URL 的一部分标记为 &lt;variable_name&gt; 就可以在\r\nURL 中添加变量。标记的部分会作为关键字参数传递给函数。通过使用\r\n&lt;converter:variable_name&gt; ，可以 选择性的\r\n加上一个转换器，为变量指定规则。请看下面的例子:\r\nfrom markupsafe import escape\n\n@app.route(&#39;&#x2F;user&#x2F;&lt;username&gt;&#39;)\ndef show_user_profile(username):\n    # show the user profile for that user\n    return f&#39;User &#123;escape(username)&#125;&#39;\n\n@app.route(&#39;&#x2F;post&#x2F;&lt;int:post_id&gt;&#39;)\ndef show_post(post_id):\n    # show the post with the given id, the id is an integer\n    return f&#39;Post &#123;post_id&#125;&#39;\n\n@app.route(&#39;&#x2F;path&#x2F;&lt;path:subpath&gt;&#39;)\ndef show_subpath(subpath):\n    # show the subpath after &#x2F;path&#x2F;\n    return f&#39;Subpath &#123;escape(subpath)&#125;&#39;\r\n转换器类型：\r\n\r\n\r\n\r\nstring\r\n（缺省值） 接受任何 不包含斜杠 的文本\r\n\r\n\r\n\r\n\r\nint\r\n接受 正 整数\r\n\r\n\r\nfloat\r\n接受 正 浮点数\r\n\r\n\r\npath\r\n类似 string ，但可以包含斜杠\r\n\r\n\r\nuuid\r\n接受 UUID 字符串\r\n\r\n\r\n\r\n唯一的 URL / 重定向行为\r\n以下两条规则的不同之处在于是否使用尾部的斜杠。:\r\n@app.route(&#39;&#x2F;projects&#x2F;&#39;)\ndef projects():\n    return &#39;The project page&#39;\n\n@app.route(&#39;&#x2F;about&#39;)\ndef about():\n    return &#39;The about page&#39;\r\nprojects 的 URL\r\n是中规中矩的，尾部有一个斜杠，看起来就如同一个文件 夹。\r\n访问一个没有斜杠结尾的 URL （ /projects ）时 Flask\r\n会自动进行重定向，帮您在尾部加上一个斜杠（ /projects/\r\n）\r\nabout 的 URL\r\n没有尾部斜杠，因此其行为表现与一个文件类似。如果访问这 个 URL\r\n时添加了尾部斜杠（/about/ ）就会得到一个 404 “未找到” 错\r\n误。这样可以保持 URL 唯一，并有助于搜索引擎重复索引同一页面。\r\nURL 构建\r\nurl_for()\r\n函数用于构建指定函数的 URL。它把函数名称作为第一个\r\n参数。它可以接受任意个关键字参数，每个关键字参数对应 URL\r\n中的变量。未知变量 将添加到 URL 中作为查询参数。\r\n为什么不在把 URL 写死在模板中，而要使用反转函数 url_for()\r\n动态构建？\r\n\r\n反转通常比硬编码 URL 的描述性更好。\r\n您可以只在一个地方改变 URL ，而不用到处乱找。\r\nURL 创建会为您处理特殊字符的转义，比较直观。\r\n生产的路径总是绝对路径，可以避免相对路径产生副作用。\r\n如果您的应用是放在 URL 根路径之外的地方（如在\r\n/myapplication 中，不在 / 中）， url_for()\r\n会为您妥善处理。\r\n\r\n例如，这里我们使用 test_request_context()\r\n方法来尝试使用 url_for()\r\n。 test_request_context()\r\n告诉 Flask 正在处理一个请求，而实际上也许我们正处在交互 Python shell\r\n之中， 并没有真正的请求。参见 本地环境\r\n。\r\nfrom flask import url_for\n\napp &#x3D; Flask(__name__)\n\n@app.route(&#39;&#x2F;&#39;)\ndef index():\n    return &#39;index&#39;\n\n@app.route(&#39;&#x2F;login&#39;)\ndef login():\n    return &#39;login&#39;\n\n@app.route(&#39;&#x2F;user&#x2F;&lt;username&gt;&#39;)\ndef profile(username):\n    return f&#39;&#123;username&#125;\\&#39;s profile&#39;\n\nwith app.test_request_context():\n    print(url_for(&#39;index&#39;))\n    print(url_for(&#39;login&#39;))\n    print(url_for(&#39;login&#39;, next&#x3D;&#39;&#x2F;&#39;))\n    print(url_for(&#39;profile&#39;, username&#x3D;&#39;John Doe&#39;))\n&#x2F;\n&#x2F;login\n&#x2F;login?next&#x3D;&#x2F;\n&#x2F;user&#x2F;John%20Doe\r\nHTTP 方法\r\nWeb 应用使用不同的 HTTP 方法处理 URL 。当您使用 Flask 时，应当熟悉\r\nHTTP 方法。 缺省情况下，一个路由只回应 GET 请求。 可以使用\r\nroute()\r\n装饰器的 methods 参数来处理不同的 HTTP 方法:\r\nfrom flask import request\n\n@app.route(&#39;&#x2F;login&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])\ndef login():\n    if request.method &#x3D;&#x3D; &#39;POST&#39;:\n        return do_the_login()\n    else:\n        return show_the_login_form()\r\n如果当前使用了 GET 方法， Flask 会自动添加 HEAD\r\n方法支持，并且同时还会 按照 HTTP RFC 来处理\r\nHEAD 请求。同样， OPTIONS 也会自动实现。\r\n静态文件\r\n动态的 web 应用也需要静态文件，一般是 CSS 和 JavaScript\r\n文件。理想情况下您的服务器已经配置好了为您的提供静态文件的服务。但是在开发过程中，\r\nFlask 也能做好这项工作。只要在您的包或模块旁边创建一个名为\r\nstatic 的文件夹就行了。 静态文件位于应用的\r\n/static 中。\r\n使用特定的 'static' 端点就可以生成相应的 URL\r\nurl_for(&#39;static&#39;, filename&#x3D;&#39;style.css&#39;)\r\n这个静态文件在文件系统中的位置应该是\r\nstatic/style.css\r\n渲染模板\r\n在 Python 内部生成 HTML 不好玩，且相当笨拙。因为您必须自己负责 HTML\r\n转义， 以确保应用的安全。因此， Flask 自动为您配置 Jinja2 模板引擎。\r\n使用 render_template()\r\n方法可以渲染模板，您只要提供模板名称和需要\r\n作为参数传递给模板的变量就行了。下面是一个简单的模板渲染例子:\r\nfrom flask import render_template\n\n@app.route(&#39;&#x2F;hello&#x2F;&#39;)\n@app.route(&#39;&#x2F;hello&#x2F;&lt;name&gt;&#39;)\ndef hello(name&#x3D;None):\n    return render_template(&#39;hello.html&#39;, name&#x3D;name)\r\nFlask 会在 templates\r\n文件夹内寻找模板。因此，如果您的应用是一个模块，\r\n那么模板文件夹应该在模块旁边；如果是一个包，那么就应该在包里面：\r\n情形 1 : 一个模块:\r\n&#x2F;application.py\n&#x2F;templates\n    &#x2F;hello.html\r\n情形 2 : 一个包:\r\n&#x2F;application\n    &#x2F;__init__.py\n    &#x2F;templates\n        &#x2F;hello.html\r\n您可以充分使用 Jinja2 模板引擎的威力。更多内容，详见官方 Jinja2 模板文档\r\n。\r\n模板示例：\r\n&lt;!doctype html&gt;\n&lt;title&gt;Hello from Flask&lt;&#x2F;title&gt;\n&#123;% if name %&#125;\n  &lt;h1&gt;Hello &#123;&#123; name &#125;&#125;!&lt;&#x2F;h1&gt;\n&#123;% else %&#125;\n  &lt;h1&gt;Hello, World!&lt;&#x2F;h1&gt;\n&#123;% endif %&#125;\r\n在模板内部可以像使用 url_for()\r\n和 get_flashed_messages()\r\n函数一样访问 config\r\n、 request\r\n、 session\r\n和 g\r\n1\r\n对象。\r\n模板在继承使用的情况下尤其有用。其工作原理参见 模板继承\r\n。简单的说，模板继承可以使每个页面\r\n的特定元素（如页头、导航和页尾）保持一致。\r\n自动转义默认开启。因此，如果 name 包含 HTML\r\n，那么会被自动转义。如 果您可以信任某个变量，且知道它是安全的 HTML\r\n（例如变量来自一个把 wiki 标记转换为 HTML 的模块），那么可以使用 Markup\r\n类把 它标记为安全的，或者在模板中使用 |safe\r\n过滤器。更多例子参见 Jinja 2 文档。\r\n下面 Markup\r\n类的基本使用方法:\r\n&gt;&gt;&gt; from markupsafe import Markup\n&gt;&gt;&gt; Markup(&#39;&lt;strong&gt;Hello %s!&lt;&#x2F;strong&gt;&#39;) % &#39;&lt;blink&gt;hacker&lt;&#x2F;blink&gt;&#39;\nMarkup(&#39;&lt;strong&gt;Hello &lt;blink&gt;hacker&lt;&#x2F;blink&gt;!&lt;&#x2F;strong&gt;&#39;)\n&gt;&gt;&gt; Markup.escape(&#39;&lt;blink&gt;hacker&lt;&#x2F;blink&gt;&#39;)\nMarkup(&#39;&lt;blink&gt;hacker&lt;&#x2F;blink&gt;&#39;)\n&gt;&gt;&gt; Markup(&#39;&lt;em&gt;Marked up&lt;&#x2F;em&gt; &amp;raquo; HTML&#39;).striptags()\n&#39;Marked up \\xbb HTML&#39;\r\n\r\n\r\nChangelog\r\n\r\n\r\n\r\n1\r\n不确定 g\r\n对象是什么？它是某个可以根据需要储存信 息的东西，详见 g\r\n对象的文档和 使用\r\nSQLite 3 。\r\n\r\n操作请求数据\r\n对于 web 应用来说对客户端向服务器发送的数据作出响应很重要。在 Flask\r\n中 由全局对象 request\r\n来提供请求信息。如果您有一些 Python 基础，那么可能\r\n会奇怪：既然这个对象是全局的，怎么还能保持线程安全？答案\r\n是本地环境：\r\n本地环境\r\n内部信息\r\n如果您想了解工作原理和如何使用本地环境进行测试，那么请阅读本节，\r\n否则可以跳过本节。\r\n某些对象在 Flask\r\n中是全局对象，但不是通常意义下的全局对象。这些对象实际上是\r\n特定环境下本地对象的代理。真拗口！但还是很容易理解的。\r\n设想现在处于处理线程的环境中。一个请求进来了，服务器决定生成一个新线程（或者\r\n叫其他什么名称的东西，这个下层的东西能够处理包括线程在内的并发系统）。当\r\nFlask 开始其内部请求处理时会把当前线程作为活动环境，并把当前应用和 WSGI\r\n环境绑定到\r\n这个环境（线程）。它以一种聪明的方式使得一个应用可以在不中断的情况下调用另一个\r\n应用。\r\n这对您有什么用？基本上您可以完全不必理会。这个只有在做单元测试时才有用。在测试\r\n时会遇到由于没有请求对象而导致依赖于请求的代码会突然崩溃的情况。对策是自己创建\r\n一个请求对象并绑定到环境。最简单的单元测试解决方案是使用 test_request_context()\r\n环境管理器。通过使用 with 语句\r\n可以绑定一个测试请求，以便于交互。例如:\r\nfrom flask import request\n\nwith app.test_request_context(&#39;&#x2F;hello&#39;, method&#x3D;&#39;POST&#39;):\n    # now you can do something with the request until the\n    # end of the with block, such as basic assertions:\n    assert request.path &#x3D;&#x3D; &#39;&#x2F;hello&#39;\n    assert request.method &#x3D;&#x3D; &#39;POST&#39;\r\n另一种方式是把整个 WSGI 环境传递给 request_context()\r\n方法:\r\nwith app.request_context(environ):\n    assert request.method &#x3D;&#x3D; &#39;POST&#39;\r\n请求对象\r\n请求对象在 API 一节中有详细说明这里不细谈（参见 Request\r\n）。 这里简略地谈一下最常见的操作。首先，您必须从 flask\r\n模块导入请求对象:\r\nfrom flask import request\r\n通过使用 method\r\n属性可以操作当前请求方法，通过使用 form\r\n属性处理表单数据（在 POST 或者 PUT 请求\r\n中传输的数据）。以下是使用上述两个属性的例子:\r\n@app.route(&#39;&#x2F;login&#39;, methods&#x3D;[&#39;POST&#39;, &#39;GET&#39;])\ndef login():\n    error &#x3D; None\n    if request.method &#x3D;&#x3D; &#39;POST&#39;:\n        if valid_login(request.form[&#39;username&#39;],\n                       request.form[&#39;password&#39;]):\n            return log_the_user_in(request.form[&#39;username&#39;])\n        else:\n            error &#x3D; &#39;Invalid username&#x2F;password&#39;\n    # the code below is executed if the request method\n    # was GET or the credentials were invalid\n    return render_template(&#39;login.html&#39;, error&#x3D;error)\r\n当 form 属性中不存在这个键时会发生什么？会引发一个 KeyError\r\n。 如果您不像捕捉一个标准错误一样捕捉 KeyError\r\n，那么会显示一个 HTTP 400 Bad Request\r\n错误页面。因此，多数情况下您不必处理这个问题。\r\n要操作 URL （如 ?key=value ）中提交的参数可以使用 args\r\n属性:\r\nsearchword &#x3D; request.args.get(&#39;key&#39;, &#39;&#39;)\r\n用户可能会改变 URL 导致出现一个 400\r\n请求出错页面，这样降低了用户友好度。因此， 我们推荐使用 get 或通过捕捉\r\nKeyError\r\n来访问 URL 参数。\r\n完整的请求对象方法和属性参见 Request\r\n文档。\r\n文件上传\r\n用 Flask 处理文件上传很容易，只要确保不要忘记在您的 HTML 表单中设置\r\nenctype=\"multipart/form-data\"\r\n属性就可以了。否则浏览器将不会传送您的文件。\r\n已上传的文件被储存在内存或文件系统的临时位置。您可以通过请求对象\r\nfiles 属性来访问上传的文件。每个上传的文件都储存在这个\r\n字典型属性中。这个属性基本和标准 Python file\r\n对象一样，另外多出一个 用于把上传文件保存到服务器的文件系统中的 save()\r\n方法。下例展示其如何运作:\r\nfrom flask import request\n\n@app.route(&#39;&#x2F;upload&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])\ndef upload_file():\n    if request.method &#x3D;&#x3D; &#39;POST&#39;:\n        f &#x3D; request.files[&#39;the_file&#39;]\n        f.save(&#39;&#x2F;var&#x2F;www&#x2F;uploads&#x2F;uploaded_file.txt&#39;)\n    ...\r\n如果想要知道文件上传之前其在客户端系统中的名称，可以使用 filename\r\n属性。但是请牢记这个值是\r\n可以伪造的，永远不要信任这个值。如果想要把客户端的文件名作为服务器上的文件名，\r\n可以通过 Werkzeug 提供的 secure_filename()\r\n函数:\r\nfrom werkzeug.utils import secure_filename\n\n@app.route(&#39;&#x2F;upload&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])\ndef upload_file():\n    if request.method &#x3D;&#x3D; &#39;POST&#39;:\n        file &#x3D; request.files[&#39;the_file&#39;]\n        file.save(f&quot;&#x2F;var&#x2F;www&#x2F;uploads&#x2F;&#123;secure_filename(file.filename)&#125;&quot;)\n    ...\r\n更好的例子参见 上传文件\r\n。\r\nCookies\r\n要访问 cookies ，可以使用 cookies\r\n属性。可以使用响应 对象 的 set_cookie\r\n方法来设置 cookies 。请求对象的 cookies\r\n属性是一个包含了客户端传输的所有 cookies 的字典。在 Flask 中，如果使用\r\n会话\r\n，那么就不要直接使用 cookies ，因为 会话\r\n比较安全一些。\r\n读取 cookies:\r\nfrom flask import request\n\n@app.route(&#39;&#x2F;&#39;)\ndef index():\n    username &#x3D; request.cookies.get(&#39;username&#39;)\n    # use cookies.get(key) instead of cookies[key] to not get a\n    # KeyError if the cookie is missing.\r\n储存 cookies:\r\nfrom flask import make_response\n\n@app.route(&#39;&#x2F;&#39;)\ndef index():\n    resp &#x3D; make_response(render_template(...))\n    resp.set_cookie(&#39;username&#39;, &#39;the username&#39;)\n    return resp\r\n注意， cookies 设置在响应对象上。通常只是从视图函数返回字符串， Flask\r\n会把它们转换为响应对象。如果您想显式地转换，那么可以使用 make_response()\r\n函数，然后再修改它。\r\n使用 doc:patterns/deferredcallbacks 方案可以在没有响应对象的情况下设\r\n置一个 cookie 。\r\n另见 关于响应\r\n。\r\n重定向和错误\r\n使用 redirect()\r\n函数可以重定向。使用 abort()\r\n可以 更早退出请求，并返回错误代码:\r\nfrom flask import abort, redirect, url_for\n\n@app.route(&#39;&#x2F;&#39;)\ndef index():\n    return redirect(url_for(&#39;login&#39;))\n\n@app.route(&#39;&#x2F;login&#39;)\ndef login():\n    abort(401)\n    this_is_never_executed()\r\n上例实际上是没有意义的，它让一个用户从索引页重定向到一个无法访问的页面（401\r\n表示禁止访问）。但是上例可以说明重定向和出错跳出是如何工作的。\r\n缺省情况下每种出错代码都会对应显示一个黑白的出错页面。使用 errorhandler()\r\n装饰器可以定制出错页面:\r\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template(&#39;page_not_found.html&#39;), 404\r\n注意 render_template()\r\n后面的 404 ，这表示页面对就的出错 代码是 404\r\n，即页面不存在。缺省情况下 200 表示：一切正常。\r\n详见 应用错误处理\r\n。\r\n关于响应\r\n视图函数的返回值会自动转换为一个响应对象。如果返回值是一个字符串，那么会被\r\n转换为一个包含作为响应体的字符串、一个 200 OK 出错代码\r\n和一个 text/html\r\n类型的响应对象。如果返回值是一个字典，那么会调用 jsonify()\r\n来产生一个响应。以下是转换的规则：\r\n\r\n如果视图返回的是一个响应对象，那么就直接返回它。\r\n如果返回的是一个字符串，那么根据这个字符串和缺省参数生成一个用于返回的\r\n响应对象。\r\n如果返回的是一个字典，那么调用 jsonify\r\n创建一个响应对象。\r\n如果返回的是一个元组，那么元组中的项目可以提供额外的信息。元组中必须至少\r\n包含一个项目，且项目应当由 (response, status) 、\r\n(response, headers) 或者\r\n(response, status, headers) 组成。 status\r\n的值会重载状态代码， headers 是一个由额外头部值组成的列表\r\n或字典。\r\n如果以上都不是，那么 Flask 会假定返回值是一个有效的 WSGI\r\n应用并把它转换为 一个响应对象。\r\n\r\n如果想要在视图内部掌控响应对象的结果，那么可以使用 make_response()\r\n函数。\r\n设想有如下视图:\r\n@app.errorhandler(404)\ndef not_found(error):\n    return render_template(&#39;error.html&#39;), 404\r\n可以使用 make_response()\r\n包裹返回表达式，获得响应对象，并对该对象 进行修改，然后再返回:\r\n@app.errorhandler(404)\ndef not_found(error):\n    resp &#x3D; make_response(render_template(&#39;error.html&#39;), 404)\n    resp.headers[&#39;X-Something&#39;] &#x3D; &#39;A value&#39;\n    return resp\r\nJSON 格式的 API\r\nJSON 格式的响应是常见的，用 Flask 写这样的 API\r\n是很容易上手的。如果从视图 返回一个 dict\r\n，那么它会被转换为一个 JSON 响应。\r\n@app.route(&quot;&#x2F;me&quot;)\ndef me_api():\n    user &#x3D; get_current_user()\n    return &#123;\n        &quot;username&quot;: user.username,\n        &quot;theme&quot;: user.theme,\n        &quot;image&quot;: url_for(&quot;user_image&quot;, filename&#x3D;user.image),\n    &#125;\r\n如果 dict 还不能满足需求，还需要创建其他类型的 JSON\r\n格式响应，可以使用 jsonify()\r\n函数。该函数会序列化任何支持的 JSON 数据类型。 也可以研究研究 Flask\r\n社区扩展，以支持更复杂的应用。\r\n@app.route(&quot;&#x2F;users&quot;)\ndef users_api():\n    users &#x3D; get_all_users()\n    return jsonify([user.to_json() for user in users])\r\n会话\r\n除了请求对象之外还有一种称为 session\r\n的对象，允许您在不同请求 之间储存信息。这个对象相当于用密钥签名加密的\r\ncookie ，即用户可以查看您的 cookie ，但是如果没有密钥就无法修改它。\r\n使用会话之前您必须设置一个密钥。举例说明:\r\nfrom flask import session\n\n# Set the secret key to some random bytes. Keep this really secret!\napp.secret_key &#x3D; b&#39;_5#y2L&quot;F4Q8z\\n\\xec]&#x2F;&#39;\n\n@app.route(&#39;&#x2F;&#39;)\ndef index():\n    if &#39;username&#39; in session:\n        return f&#39;Logged in as &#123;session[&quot;username&quot;]&#125;&#39;\n    return &#39;You are not logged in&#39;\n\n@app.route(&#39;&#x2F;login&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])\ndef login():\n    if request.method &#x3D;&#x3D; &#39;POST&#39;:\n        session[&#39;username&#39;] &#x3D; request.form[&#39;username&#39;]\n        return redirect(url_for(&#39;index&#39;))\n    return &#39;&#39;&#39;\n        &lt;form method&#x3D;&quot;post&quot;&gt;\n            &lt;p&gt;&lt;input type&#x3D;text name&#x3D;username&gt;\n            &lt;p&gt;&lt;input type&#x3D;submit value&#x3D;Login&gt;\n        &lt;&#x2F;form&gt;\n    &#39;&#39;&#39;\n\n@app.route(&#39;&#x2F;logout&#39;)\ndef logout():\n    # remove the username from the session if it&#39;s there\n    session.pop(&#39;username&#39;, None)\n    return redirect(url_for(&#39;index&#39;))\r\n如何生成一个好的密钥\r\n生成随机数的关键在于一个好的随机种子，因此一个好的密钥应当有足够的随机性。\r\n操作系统可以有多种方式基于密码随机生成器来生成随机数据。使用下面的命令\r\n可以快捷的为 Flask.secret_key （ 或者 SECRET_KEY\r\n）生成值:\r\n$ python -c &#39;import os; print(os.urandom(16))&#39;\nb&#39;_5#y2L&quot;F4Q8z\\n\\xec]&#x2F;&#39;\r\n基于 cookie 的会话的说明： Flask\r\n会取出会话对象中的值，把值序列化后储存到 cookie 中。在打开 cookie\r\n的情况下，如果需要查找某个值，但是这个值在请求中\r\n没有持续储存的话，那么不会得到一个清晰的出错信息。请检查页面响应中的\r\ncookie 的大小是否与网络浏览器所支持的大小一致。\r\n除了缺省的客户端会话之外，还有许多 Flask 扩展支持服务端会话。\r\n消息闪现\r\n一个好的应用和用户接口都有良好的反馈，否则到后来用户就会讨厌这个应用。\r\nFlask 通过闪现系统来提供了一个易用的反馈方式。闪现系统的基本工作原理是\r\n在请求结束时记录一个消息，提供且只提供给下一个请求使用。通常通过一个布\r\n局模板来展现闪现的消息。\r\nflash()\r\n用于闪现一个消息。在模板中，使用 get_flashed_messages()\r\n来操作消息。完整的例子参见 消息闪现\r\n。\r\n日志\r\n\r\n\r\nChangelog\r\n\r\n\r\n有时候可能会遇到数据出错需要纠正的情况。例如因为用户篡改了数据或客户端\r\n代码出错而导致一个客户端代码向服务器发送了明显错误的 HTTP 请求。多数时\r\n候在类似情况下返回 400 Bad Request\r\n就没事了，但也有不会返回的时候， 而代码还得继续运行下去。\r\n这时候就需要使用日志来记录这些不正常的东西了。自从 Flask 0.3\r\n后就已经为 您配置好 了一个日志工具。\r\n以下是一些日志调用示例:\r\napp.logger.debug(&#39;A value for debugging&#39;)\napp.logger.warning(&#39;A warning occurred (%d apples)&#39;, 42)\napp.logger.error(&#39;An error occurred&#39;)\r\nlogger\r\n是一个标准的 Logger\r\nLogger 类，更多信息详见官方的 logging\r\n文档。\r\n参见 应用错误处理\r\n。\r\n集成 WSGI 中间件\r\n如果想要在应用中添加一个 WSGI 中间件，那么可以用应用的\r\nwsgi_app 属性 来包装。例如，假设需要在 Nginx 后面使用 ProxyFix\r\n中间件，那么可以这样做:\r\nfrom werkzeug.middleware.proxy_fix import ProxyFix\napp.wsgi_app &#x3D; ProxyFix(app.wsgi_app)\r\n用 app.wsgi_app 来包装，而不用 app\r\n包装，意味着 app 仍旧指向您 的 Flask\r\n应用，而不是指向中间件。这样可以继续直接使用和配置 app\r\n。\r\n使用 Flask 扩展\r\n扩展是帮助完成公共任务的包。例如 Flask-SQLAlchemy 为在 Flask\r\n中轻松使用 SQLAlchemy 提供支持。\r\n更多关于 Flask 扩展的内容请参阅 扩展\r\n。\r\n部署到网络服务器\r\n已经准备好部署您的新 Flask 应用了？请移步 部署方式\r\n。\r\n","slug":"Web Dev/Back End/flask/start","date":"2023-03-07T16:14:46.328Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"How\r\nto Deploy Flask Application with Nginx and Gunicorn on Ubuntu 20.04 -\r\nRoseHosting\r\n","slug":"Web Dev/Back End/flask/DEPLOY","date":"2023-03-07T16:14:46.326Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"需要安装的内容：\r\nDjango本体\r\n","slug":"Web Dev/Back End/django/Python Django Web典型模块开发实战/总述及django安装","date":"2023-03-07T16:14:46.297Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_4","date":"2023-03-07T16:14:46.270Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"官网原教程：\r\nPART 3：\r\nWriting\r\nyour first Django app, part 3 | Django documentation | Django\r\n(djangoproject.com)\r\n概述：\r\n\r\n编写处理http请求的函数\r\n在urls中，添加视图内容\r\n\r\n\r\n复述：\r\n1. 编写处理http请求的函数：\r\n示例函数：\r\nfrom django.http import HttpResponse\nfrom .models import Question\n\ndef index(request):\n    latest_question_list &#x3D; Question.objects.order_by(&#39;-pub_date&#39;)[:5]\n    output &#x3D; &#39;, &#39;.join([q.question_text for q in latest_question_list])\n    return HttpResponse(output)\n# 我们也可以使用这样的方式：在html文件中编写特殊语句并通过render函数及HttpResponse返回给前端\n# 需要额外引入：&#96;from django.template import loader&#96;\n#   template &#x3D; loader.get_template(&#39;polls&#x2F;index.html&#39;)\n#   context &#x3D; &#123;\n#       &#39;latest_question_list&#39;: latest_question_list,\n#   &#125;\n#   return HttpResponse(template.render(context, request))\n\n# 当然也可以使用shortcuts中的render函数：https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;zh-hans&#x2F;4.0&#x2F;intro&#x2F;tutorial03&#x2F;#a-shortcut-render\ndef detail(request, question_id):\n    try:\n        question &#x3D; Question.objects.get(pk&#x3D;question_id)\n    except Question.DoesNotExist:\n        raise Http404(&quot;Question does not exist&quot;)\n    return render(request, &#39;polls&#x2F;detail.html&#39;, &#123;&#39;question&#39;: question&#125;)\n\ndef results(request, question_id):\n    response &#x3D; &quot;You&#39;re looking at the results of question %s.&quot;\n    return HttpResponse(response % question_id)\n\ndef vote(request, question_id):\n    return HttpResponse(&quot;You&#39;re voting on question %s.&quot; % question_id)\r\n这些函数实际需要做的只有两件事：\r\n\r\n按需求处理请求，或者抛出异常\r\n返回处理结果或者错误信息\r\n\r\n在处理的过程中，我们从数据库里读取必要信息以参与处理，以达成我们的目的。以上方代码中的index函数为例，我们读取了数据库中以日期为序的最近5个问题，并在后续处理中进行合并并以逗号,分割，最后返回一个HttpResponse对象来完成本次请求。\r\n如果收到的请求无效，我们应当以适当的方式抛出错误，请注意在处理时将model层和view层相分离：\r\n\r\n为什么我们使用辅助函数 get_object_or_404()\r\n而不是自己捕获 ObjectDoesNotExist\r\n异常呢？还有，为什么模型 API 不直接抛出 ObjectDoesNotExist\r\n而是抛出 Http404\r\n呢？\r\n因为这样做会增加模型层和视图层的耦合性。指导 Django\r\n设计的最重要的思想之一就是要保证松散耦合。一些受控的耦合将会被包含在 django.shortcuts\r\n模块中。\r\n编写你的第一个\r\nDjango 应用，第 3 部分 | Django 文档 | Django\r\n(djangoproject.com)\r\n\r\n为了便于构建views，django提供了一套template系统:，可至模板\r\n| Django 文档 | Django (djangoproject.com)查看\r\n2. 编写urls\r\n编写好对应请求的处理函数后，自然要把它们挂载到对应的url路径上，此时便需要修改project\r\nmodule和当前app中的urls文件\r\nproject module内urls - 示例内容：\r\nurlpatterns &#x3D; [\n    path(&#39;admin&#x2F;&#39;, admin.site.urls),\n    path(&#39;polls&#x2F;&#39;, include(&#39;polls.urls&#39;))\n]\r\napp内urls - 示例内容：\r\nfrom django.urls import path\nfrom . import views\n\nurlpatterns &#x3D; [\n    # ex: &#x2F;polls&#x2F;\n    path(&#39;&#39;, views.index, name&#x3D;&#39;index&#39;),\n    # ex: &#x2F;polls&#x2F;5&#x2F;\n    path(&#39;&lt;int:question_id&gt;&#x2F;&#39;, views.detail, name&#x3D;&#39;detail&#39;),\n    # ex: &#x2F;polls&#x2F;5&#x2F;results&#x2F;\n    path(&#39;&lt;int:question_id&gt;&#x2F;results&#x2F;&#39;, views.results, name&#x3D;&#39;results&#39;),\n    # ex: &#x2F;polls&#x2F;5&#x2F;vote&#x2F;\n    path(&#39;&lt;int:question_id&gt;&#x2F;vote&#x2F;&#39;, views.vote, name&#x3D;&#39;vote&#39;),\n]\r\n如果你转到 \"/polls/34/\" ，Django 将会运行 detail()\r\n方法并且展示你在 URL 里提供的问题\r\nID。也就是说当某人请求你网站的某一页面时——比如\"/polls/34/\"，那么Django\r\n将会根据配置项 ROOT_URLCONF\r\n中的设置载入 mysite.urls 模块，然后寻找名为\r\nurlpatterns 变量并且按序匹配正则表达式。在找到匹配项\r\n'polls/'，它切掉了匹配的文本（\"polls/\"），将剩余文本——\"34/\"，发送至\r\n'polls.urls' URLconf 做进一步处理。在这里剩余文本匹配了\r\n'&lt;int:question_id&gt;/'，使得我们 Django 以如下形式调用\r\ndetail():\r\ndetail(request&#x3D;&lt;HttpRequest object&gt;, question_id&#x3D;34)\r\n这样便完成了基本的前后端交互\r\n","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_3","date":"2023-03-07T16:14:46.267Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"官网原教程：\r\nPART 2：\r\nWriting\r\nyour first Django app, part 2 | Django documentation | Django\r\n(djangoproject.com)\r\n概述：\r\n\r\n建立数据库：基于sqlite数据库，介绍project\r\nmodule下settings中包括如何更换其他数据库的部分内容，并通过migrate命令快速创建所需数据库\r\n\r\n\r\n复述：\r\n1. 建立数据库\r\na. 确认数据库设置\r\nDjango默认使用SQLite作为默认数据库，因为这是Python内置的数据库。\r\n如果需要更换别的数据库的话，首先需要安装合适的database\r\nbindings，然后改变project module下settings文件中的设置文件中\r\nDATABASES 'default'\r\n项目中的一些键值，包括：\r\n\r\n\r\nENGINE\r\n– Either 'django.db.backends.sqlite3',\r\n'django.db.backends.postgresql',\r\n'django.db.backends.mysql', or\r\n'django.db.backends.oracle'. Other backends are also\r\navailable.\r\nNAME\r\n– The name of your database. If you’re using SQLite, the database will\r\nbe a file on your computer; in that case, NAME\r\nshould be the full absolute path, including filename, of that file. The\r\ndefault value, BASE_DIR / 'db.sqlite3', will store the file\r\nin your project directory.\r\n\r\n\r\n并且如果不使用 SQLite，则必须添加更多内容，比如 USER\r\n、 PASSWORD\r\n、 HOST\r\n等。更多内容请查阅文档：DATABASES\r\n。\r\n\r\n如果你使用了 SQLite\r\n以外的数据库，请确认在使用前已经创建了数据库。你可以通过在你的数据库交互式命令行中使用\r\n\"CREATE DATABASE database_name;\" 命令来完成这件事。\r\n另外，还要确保该数据库用户中提供 mysite/settings.py 具有\r\n\"create database\" 权限。这使得自动创建的 test\r\ndatabase 能被以后的教程使用。\r\n如果你使用\r\nSQLite，那么你不需要在使用前做任何事——数据库会在需要的时候自动创建。\r\n\r\nb. 按规则设置时区\r\n注意时区属性的格式\r\nc. check\r\nINSTALLED_APPS items\r\nthe item, INSTALLED_APPS\r\nsetting at the top of the file, holds the names of all Django\r\napplications that are activated in this Django\r\ninstance.\r\nApps can be used in multiple projects, and you can package and\r\ndistribute them for use by others in their projects.\r\n\r\nBy default, INSTALLED_APPS\r\ncontains the following apps, all of which come with Django:\r\n\r\ndjango.contrib.admin\r\n– The admin site. You’ll use it shortly.\r\ndjango.contrib.auth\r\n– An authentication system.\r\ndjango.contrib.contenttypes\r\n– A framework for content types.\r\ndjango.contrib.sessions\r\n– A session framework.\r\ndjango.contrib.messages\r\n– A messaging framework.\r\ndjango.contrib.staticfiles\r\n– A framework for managing static files.\r\n\r\nThese applications are included by default as a convenience for the\r\ncommon case.\r\n\r\nSome of these applications make use of at least one database table,\r\nthough, so we need to create the tables in the database before we can\r\nuse them. To do that, run the following command:\r\npy manage.py migrate\r\nas we said before \"the database file will be created automatically\r\nwhen it is needed.\", the sqlite database finally appeared with those\r\ntables above.\r\n\r\nThe migrate\r\ncommand looks at the INSTALLED_APPS\r\nsetting and creates any necessary database tables according to the\r\ndatabase settings in your mysite/settings.py file and the\r\ndatabase migrations shipped with the app (we’ll cover those later).\r\nYou’ll see a message for each migration it applies. If you’re\r\ninterested, run the command-line client for your database and type\r\n\\dt (PostgreSQL), SHOW TABLES; (MariaDB,\r\nMySQL), .tables (SQLite), or\r\nSELECT TABLE_NAME FROM USER_TABLES; (Oracle) to display the\r\ntables Django created.\r\n\r\n2. model文件编写\r\n\r\nNow we’ll define your models – essentially, your database layout,\r\nwith additional metadata.\r\n在 Django 里写一个数据库驱动的 Web 应用的第一步是定义模型 -\r\n也就是数据库结构设计和附加的其它元数据。\r\n\r\na. 什么是一个model？\r\n\r\nPhilosophy\r\nA model is the single, definitive source of information about your\r\ndata. It contains the essential fields and behaviors of the data you’re\r\nstoring. Django follows the DRY\r\nPrinciple. The goal is to define your data model in one place and\r\nautomatically derive things from it.\r\nThis includes the migrations - unlike in Ruby On Rails, for example,\r\nmigrations are entirely derived from your models file, and are\r\nessentially a history that Django can roll through to update your\r\ndatabase schema to match your current models.\r\n\r\nb. examples\r\nIn our poll app, we’ll create two models: Question and\r\nChoice.\r\n\r\nA Question has a question and a publication date.\r\nA Choice has two fields: the text of the choice and a\r\nvote tally. Each Choice is associated with a\r\nQuestion.\r\n\r\nThese concepts are represented by Python classes. Edit the\r\npolls/models.py file so it looks like this:\r\nfrom django.db import models\n\nclass Question(models.Model):\n    question_text &#x3D; models.CharField(max_length&#x3D;200)\n    pub_date &#x3D; models.DateTimeField(&#39;date published&#39;)\n\nclass Choice(models.Model):\n    question &#x3D; models.ForeignKey(Question, on_delete&#x3D;models.CASCADE)\n    choice_text &#x3D; models.CharField(max_length&#x3D;200)\n    votes &#x3D; models.IntegerField(default&#x3D;0)\r\nHere, each model is represented by a class that subclasses django.db.models.Model.\r\nEach model has a number of class variables, each of which represents a\r\ndatabase field in the model.\r\nEach field is represented by an instance of a Field\r\nclass – e.g., CharField\r\nfor character fields and DateTimeField\r\nfor datetimes. This tells Django what type of data each field holds.\r\nThe name of each Field\r\ninstance (e.g. question_text or pub_date) is\r\nthe field’s name, in machine-friendly format. You’ll use this\r\nvalue in your Python code, and your database will use it as the column\r\nname.\r\nYou can use an optional first positional argument to a Field\r\nto designate a human-readable name. That’s used in a couple of\r\nintrospective parts of Django, and it doubles as documentation. If this\r\nfield isn’t provided, Django will use the machine-readable name. In this\r\nexample, we’ve only defined a human-readable name for\r\nQuestion.pub_date. For all other fields in this model, the\r\nfield’s machine-readable name will suffice as its human-readable\r\nname.\r\nSome Field\r\nclasses have required arguments. CharField,\r\nfor example, requires that you give it a max_length.\r\nThat’s used not only in the database schema, but in validation, as we’ll\r\nsoon see.\r\nA Field\r\ncan also have various optional arguments; in this case, we’ve set the default\r\nvalue of votes to 0.\r\nFinally, note a relationship is defined, using ForeignKey.\r\nThat tells Django each Choice is related to a single\r\nQuestion. Django supports all the common database\r\nrelationships: many-to-one, many-to-many, and one-to-one.\r\n3. 激活你的model\r\n\r\nThat small bit of model code gives Django a lot of information. With\r\nit, Django is able to:\r\n\r\nCreate a database schema (CREATE TABLE statements) for\r\nthis app.\r\nCreate a Python database-access API for accessing\r\nQuestion and Choice objects.\r\n\r\n\r\nfirst we need to tell our project that the polls app is\r\ninstalled.\r\n\r\nadd the 'polls.apps.PollsConfig' (see\r\npolls/apps.py) to INSTALLED_APPS\r\nrun the command py manage.py makemigrations polls, you\r\nshould see the output like: &gt; Migrations for 'polls': &gt;\r\npolls/migrations/0001_initial.py &gt; - Create model Question &gt; -\r\nCreate model Choice\r\n\r\n\r\n\r\nmore about command makemigrations:\r\nBy running makemigrations, you’re\r\ntelling Django that you’ve made some changes to your models (in this\r\ncase, you’ve made new ones) and that you’d like the changes to be stored\r\nas a migration.\r\nMigrations are how Django stores changes to your models (and thus\r\nyour database schema) - they’re files on disk. You can read the\r\nmigration for your new model if you like; it’s the file\r\npolls/migrations/0001_initial.py. Don’t worry, you’re not\r\nexpected to read them every time Django makes one, but they’re designed\r\nto be human-editable in case you want to manually tweak how Django\r\nchanges things.\r\n\r\n\r\nTo run the migrations and manage your database schema automatically -\r\nusing the command migrate\r\nfirst. let’s see what SQL that migration would run. The sqlmigrate\r\ncommand takes migration names and returns their SQL:\r\n\r\npy manage.py sqlmigrate polls 0001\r\n\r\nYou should see something similar to the following (we’ve reformatted\r\nit for readability):\r\nBEGIN;\n--\n-- Create model Question\n--\nCREATE TABLE &quot;polls_question&quot; (\n    &quot;id&quot; serial NOT NULL PRIMARY KEY,\n    &quot;question_text&quot; varchar(200) NOT NULL,\n    &quot;pub_date&quot; timestamp with time zone NOT NULL\n);\n--\n-- Create model Choice\n--\nCREATE TABLE &quot;polls_choice&quot; (\n    &quot;id&quot; serial NOT NULL PRIMARY KEY,\n    &quot;choice_text&quot; varchar(200) NOT NULL,\n    &quot;votes&quot; integer NOT NULL,\n    &quot;question_id&quot; integer NOT NULL\n);\nALTER TABLE &quot;polls_choice&quot;\n  ADD CONSTRAINT &quot;polls_choice_question_id_c5b4b260_fk_polls_question_id&quot;\n    FOREIGN KEY (&quot;question_id&quot;)\n    REFERENCES &quot;polls_question&quot; (&quot;id&quot;)\n    DEFERRABLE INITIALLY DEFERRED;\nCREATE INDEX &quot;polls_choice_question_id_c5b4b260&quot; ON &quot;polls_choice&quot; (&quot;question_id&quot;);\n\nCOMMIT;\r\nNote the following:\r\n\r\nThe exact output will vary depending on the database you are using.\r\nThe example above is generated for PostgreSQL.\r\nTable names are automatically generated by combining the name of the\r\napp (polls) and the lowercase name of the model –\r\nquestion and choice. (You can override this\r\nbehavior.)\r\nPrimary keys (IDs) are added automatically. (You can override this,\r\ntoo.)\r\nBy convention, Django appends \"_id\" to the foreign key\r\nfield name. (Yes, you can override this, as well.)\r\nThe foreign key relationship is made explicit by a\r\nFOREIGN KEY constraint. Don’t worry about the\r\nDEFERRABLE parts; it’s telling PostgreSQL to not enforce\r\nthe foreign key until the end of the transaction.\r\nIt’s tailored to the database you’re using, so database-specific\r\nfield types such as auto_increment (MySQL),\r\nserial (PostgreSQL), or\r\ninteger primary key autoincrement (SQLite) are handled for\r\nyou automatically. Same goes for the quoting of field names – e.g.,\r\nusing double quotes or single quotes.\r\nThe sqlmigrate\r\ncommand doesn’t actually run the migration on your database - instead,\r\nit prints it to the screen so that you can see what SQL Django thinks is\r\nrequired. It’s useful for checking what Django is going to do or if you\r\nhave database administrators who require SQL scripts for changes.\r\n\r\nIf you’re interested, you can also run python manage.py check;\r\nthis checks for any problems in your project without making migrations\r\nor touching the database.\r\nNow, run migrate\r\nagain to create those model tables in your database:\r\n\r\npy manage.py migrate\r\n\r\nThe migrate\r\ncommand takes all the migrations that haven’t been applied (Django\r\ntracks which ones are applied using a special table in your database\r\ncalled django_migrations) and runs them against your\r\ndatabase - essentially, synchronizing the changes you made to your\r\nmodels with the schema in the database.\r\nMigrations are very powerful and let you change your models over\r\ntime, as you develop your project, without the need to delete your\r\ndatabase or tables and make new ones - it specializes in upgrading your\r\ndatabase live, without losing data. We’ll cover them in more depth in a\r\nlater part of the tutorial, but for now, remember the three-step guide\r\nto making model changes:\r\n\r\nChange your models (in models.py).\r\nRun python manage.py makemigrations\r\nto create migrations for those changes\r\nRun python manage.py migrate\r\nto apply those changes to the database.\r\n\r\nThe reason that there are separate commands to make and apply\r\nmigrations is because you’ll commit migrations to your version control\r\nsystem and ship them with your app; they not only make your development\r\neasier, they’re also usable by other developers and in production.\r\nRead the django-admin\r\ndocumentation for full information on what the\r\nmanage.py utility can do.\r\n\r\n\r\n4. 完善model，初试api\r\nNow, let’s hop into the interactive Python shell and play around with\r\nthe free API Django gives you. To invoke the Python shell, use this\r\ncommand:\r\npy manage.py shell\r\nWe’re using this instead of simply typing “python”, because\r\nmanage.py sets the DJANGO_SETTINGS_MODULE\r\nenvironment variable, which gives Django the Python import path to your\r\nmysite/settings.py file.\r\nYou can try these database api below:\r\n&gt;&gt;&gt; from polls.models import Choice, Question  # Import the model classes we just wrote.\n\n# No questions are in the system yet.\n&gt;&gt;&gt; Question.objects.all()\n&lt;QuerySet []&gt;\n\n# Create a new Question.\n# Support for time zones is enabled in the default settings file, so\n# Django expects a datetime with tzinfo for pub_date. Use timezone.now()\n# instead of datetime.datetime.now() and it will do the right thing.\n&gt;&gt;&gt; from django.utils import timezone\n&gt;&gt;&gt; q &#x3D; Question(question_text&#x3D;&quot;What&#39;s new?&quot;, pub_date&#x3D;timezone.now())\n\n# Save the object into the database. You have to call save() explicitly.\n&gt;&gt;&gt; q.save()\n\n# Now it has an ID.\n&gt;&gt;&gt; q.id\n1\n\n# Access model field values via Python attributes.\n&gt;&gt;&gt; q.question_text\n&quot;What&#39;s new?&quot;\n&gt;&gt;&gt; q.pub_date\ndatetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo&#x3D;&lt;UTC&gt;)\n\n# Change values by changing the attributes, then calling save().\n&gt;&gt;&gt; q.question_text &#x3D; &quot;What&#39;s up?&quot;\n&gt;&gt;&gt; q.save()\n\n# objects.all() displays all the questions in the database.\n&gt;&gt;&gt; Question.objects.all()\n&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;\n\r\n我们可以为类内添加__str__()方法来快速查看项目内容\r\n\r\nPython\r\nstr() 方法 (runoob.com)\r\n\r\nfrom django.db import models\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text # Choice类同理\r\n这样当我们查看内容时就能看到\r\n\r\n&gt;&gt;&gt; Question.objects.all() &lt;QuerySet [&lt;Question:\r\nWhat's up?&gt;]&gt;\r\n\r\n当然也可以添加别的“正常的功能”，如：\r\nclass Question(models.Model):\n    # ...\n    def was_published_recently(self):\n        return self.pub_date &gt;&#x3D; timezone.now() - datetime.timedelta(days&#x3D;1)\r\n更多操作:\r\n&gt;&gt;&gt; from polls.models import Choice, Question\n\n# Make sure our __str__() addition worked.\n&gt;&gt;&gt; Question.objects.all()\n&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;\n\n# Django provides a rich database lookup API that&#39;s entirely driven by\n# keyword arguments.\n&gt;&gt;&gt; Question.objects.filter(id&#x3D;1)\n&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;\n&gt;&gt;&gt; Question.objects.filter(question_text__startswith&#x3D;&#39;What&#39;)\n&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;\n\n# Get the question that was published this year.\n&gt;&gt;&gt; from django.utils import timezone\n&gt;&gt;&gt; current_year &#x3D; timezone.now().year\n&gt;&gt;&gt; Question.objects.get(pub_date__year&#x3D;current_year)\n&lt;Question: What&#39;s up?&gt;\n\n# Request an ID that doesn&#39;t exist, this will raise an exception.\n&gt;&gt;&gt; Question.objects.get(id&#x3D;2)\nTraceback (most recent call last):\n    ...\nDoesNotExist: Question matching query does not exist.\n\n# Lookup by a primary key is the most common case, so Django provides a\n# shortcut for primary-key exact lookups.\n# The following is identical to Question.objects.get(id&#x3D;1).\n&gt;&gt;&gt; Question.objects.get(pk&#x3D;1)\n&lt;Question: What&#39;s up?&gt;\n\n# Make sure our custom method worked.\n&gt;&gt;&gt; q &#x3D; Question.objects.get(pk&#x3D;1)\n&gt;&gt;&gt; q.was_published_recently()\nTrue\n\n# Give the Question a couple of Choices. The create call constructs a new\n# Choice object, does the INSERT statement, adds the choice to the set\n# of available choices and returns the new Choice object. Django creates\n# a set to hold the &quot;other side&quot; of a ForeignKey relation\n# (e.g. a question&#39;s choice) which can be accessed via the API.\n&gt;&gt;&gt; q &#x3D; Question.objects.get(pk&#x3D;1)\n\n# Display any choices from the related object set -- none so far.\n&gt;&gt;&gt; q.choice_set.all()\n&lt;QuerySet []&gt;\n\n# Create three choices.\n&gt;&gt;&gt; q.choice_set.create(choice_text&#x3D;&#39;Not much&#39;, votes&#x3D;0)\n&lt;Choice: Not much&gt;\n&gt;&gt;&gt; q.choice_set.create(choice_text&#x3D;&#39;The sky&#39;, votes&#x3D;0)\n&lt;Choice: The sky&gt;\n&gt;&gt;&gt; c &#x3D; q.choice_set.create(choice_text&#x3D;&#39;Just hacking again&#39;, votes&#x3D;0)\n\n# Choice objects have API access to their related Question objects.\n&gt;&gt;&gt; c.question\n&lt;Question: What&#39;s up?&gt;\n\n# And vice versa: Question objects get access to Choice objects.\n&gt;&gt;&gt; q.choice_set.all()\n&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;\n&gt;&gt;&gt; q.choice_set.count()\n3\n\n# The API automatically follows relationships as far as you need.\n# Use double underscores to separate relationships.\n# This works as many levels deep as you want; there&#39;s no limit.\n# Find all Choices for any question whose pub_date is in this year\n# (reusing the &#39;current_year&#39; variable we created above).\n&gt;&gt;&gt; Choice.objects.filter(question__pub_date__year&#x3D;current_year)\n&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;\n\n# Let&#39;s delete one of the choices. Use delete() for that.\n&gt;&gt;&gt; c &#x3D; q.choice_set.filter(choice_text__startswith&#x3D;&#39;Just hacking&#39;)\n&gt;&gt;&gt; c.delete()\r\n5. 试用admin端\r\ncreate a admin user\r\npy manage.py createsuperuser\r\nStart your server, make sure you have added the admin site to\r\nurls.py. Then follow the urls to open the admin page, you will see the\r\nlogin page. After that, you should see the Django admin index page,\r\nwithout your polls app though(if you follow the tutorial completely)\r\n\r\nOnly one more thing to do: we need to tell the admin that\r\nQuestion objects have an admin interface. To do this, open\r\nthe polls/admin.py file, and edit it to look like this:\r\n&gt;from django.contrib import admin\n\n&gt;from .models import Question\n\n&gt;admin.site.register(Question)\r\n\r\nNow that we’ve registered Question, Django knows that it\r\nshould be displayed on the admin index page.\r\n","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_2","date":"2023-03-07T16:14:46.264Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"官网原教程：\r\nPART 1：\r\nWriting\r\nyour first Django app, part 1 | Django documentation | Django\r\n(djangoproject.com)\r\n概述：\r\n\r\n概述教程内容\r\n使用startproject命令创建的项目的基本内容介绍\r\n通过mange.py启动刚刚创建的新项目\r\n通过startapp命令新建应用，并对project与app作区分\r\n介绍url与view\r\n\r\n复述：\r\n1. quick the\r\ninstallation and version of django\r\npython -m django --version\r\nIf Django is installed, you should see the version of your\r\ninstallation. If it isn’t, you’ll get an error telling “No module named\r\ndjango”.\r\n2. creating a project\r\nUse the command line to auto-generate some code that establishes a\r\nDjango project\r\n– a collection of settings for an instance of Django, including database\r\nconfiguration, Django-specific options and application-specific settings\r\nto finish some initial setup.\r\ndjango-admin startproject &lt;mysite&gt;\r\nThis will create a mysite directory in your current\r\ndirectory.\r\n\r\nAnd the folder created by startproject looks like:\r\n\r\nmysite/ manage.py mysite/ init.py settings.py\r\nurls.py asgi.py wsgi.py\r\n\r\nThese files are:\r\n\r\nThe outer mysite/ root directory is a container for\r\nyour project. Its name doesn’t matter to Django; you can rename it to\r\nanything you like.\r\nmanage.py: A command-line utility that lets you\r\ninteract with this Django project in various ways. You can read all the\r\ndetails about manage.py in django-admin\r\nand manage.py.\r\nThe inner mysite/ directory is the actual Python\r\npackage for your project. Its name is the Python package name you’ll\r\nneed to use to import anything inside it (e.g.\r\nmysite.urls).\r\nmysite/__init__.py: An empty file that tells Python\r\nthat this directory should be considered a Python package. If you’re a\r\nPython beginner, read more\r\nabout packages in the official Python docs.\r\nmysite/settings.py: Settings/configuration for this\r\nDjango project. Django\r\nsettings will tell you all about how settings work.\r\nmysite/urls.py: The URL declarations for this Django\r\nproject; a “table of contents” of your Django-powered site. You can read\r\nmore about URLs in URL\r\ndispatcher.\r\nmysite/asgi.py: An entry-point for ASGI-compatible web\r\nservers to serve your project. See How\r\nto deploy with ASGI for more details.\r\nmysite/wsgi.py: An entry-point for WSGI-compatible web\r\nservers to serve your project. See How\r\nto deploy with WSGI for more details.\r\n\r\n\r\n3. start your project\r\npython manage.py runserver\n# you can pass server&#39;s port and so on as a command-line argument behind &#39;runserver&#39;\r\nYou'll see the output which includes:\r\n\r\n... Starting development server at http://127.0.0.1:8000/ Quit the\r\nserver with CONTROL-C.\r\n\r\n4. create new app\r\n\r\nWhat’s the difference between a project and an app? An app is a web\r\napplication that does something – e.g., a blog system, a database of\r\npublic records or a small poll app. A project is a collection of\r\nconfiguration and apps for a particular website. A project can contain\r\nmultiple apps. An app can be in multiple projects.\r\n\r\npy manage.py startapp polls\r\nThat will create a new directory like:\r\n\r\npolls/ init.py admin.py apps.py migrations/\r\ninit.py models.py tests.py views.py\r\n\r\nThis directory structure will house the poll application.\r\n5. write your own view and\r\nset it url\r\nOpen the file polls/views.py and put the following\r\nPython code in it:\r\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(&quot;Hello, world. You&#39;re at the polls index.&quot;)\r\nThis is the simplest view possible in Django. To call the view, we\r\nneed to map it to a URL - and for this we need a URLconf.\r\nTo create a URLconf in the polls directory, create a file called\r\nurls.py. Your app directory should now look like:\r\n\r\npolls/ init.py admin.py apps.py migrations/\r\ninit.py models.py tests.py urls.py views.py\r\n\r\nIn the polls/urls.py file include the following\r\ncode:\r\nfrom django.urls import path\nfrom . import views\n\nurlpatterns &#x3D; [path(&#39;&#39;, views.index, name&#x3D;&#39;index&#39;),]\r\nThe next step is to point the root URLconf at the\r\npolls.urls module. In mysite/urls.py,\r\nadd an import for django.urls.include and insert an include()\r\nin the urlpatterns list, so you have:\r\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns &#x3D; [\n    path(&#39;polls&#x2F;&#39;, include(&#39;polls.urls&#39;)),\n    path(&#39;admin&#x2F;&#39;, admin.site.urls),\n]\r\nThe include()\r\nfunction allows referencing other URLconfs. Whenever Django encounters\r\ninclude(),\r\nit chops off whatever part of the URL matched up to that point and sends\r\nthe remaining string to the included URLconf for further processing. See\r\nmore about -&gt; include()\r\nYou should always use include() when you include other\r\nURL patterns. admin.site.urls is the only exception to\r\nthis.\r\nNow restart your server and go to http://localhost:8000/polls/ in\r\nyour browser, and you should see the text “Hello, world. You’re at\r\nthe polls index.”, which you defined in the index\r\nview.\r\nSee more about path()\r\n\r\npath()\r\nargument: route¶\r\nroute is a string that contains a URL pattern. When\r\nprocessing a request, Django starts at the first pattern in\r\nurlpatterns and makes its way down the list, comparing the\r\nrequested URL against each pattern until it finds one that matches.\r\nPatterns don’t search GET and POST parameters, or the domain name.\r\nFor example, in a request to\r\nhttps://www.example.com/myapp/, the URLconf will look for\r\nmyapp/. In a request to\r\nhttps://www.example.com/myapp/?page=3, the URLconf will\r\nalso look for myapp/.\r\n\r\n\r\npath()\r\nargument: view¶\r\nWhen Django finds a matching pattern, it calls the specified view\r\nfunction with an HttpRequest\r\nobject as the first argument and any “captured” values from the route as\r\nkeyword arguments. We’ll give an example of this in a bit.\r\n\r\n\r\npath()\r\nargument: kwargs¶\r\nArbitrary keyword arguments can be passed in a dictionary to the\r\ntarget view. We aren’t going to use this feature of Django in the\r\ntutorial.\r\n\r\n\r\npath()\r\nargument: name¶\r\nNaming your URL lets you refer to it unambiguously from elsewhere in\r\nDjango, especially from within templates. This powerful feature allows\r\nyou to make global changes to the URL patterns of your project while\r\nonly touching a single file.\r\nWhen you’re comfortable with the basic request and response flow,\r\nread part 2 of\r\nthis tutorial to start working with the database.\r\n\r\n\r\n\r\n\r\n","slug":"Web Dev/Back End/django/official website basic tutorial/official_website_basic_tutorial-part_1","date":"2023-03-07T16:14:46.261Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Python 虚拟环境\r\nPython\r\n之所以强大，除了语言本身的特性外，更重要的是拥有无所不及的第三方库。\r\n依赖问题？\r\n包\r\npython 包库\r\n包库或者叫软件源是 Python\r\n第三方软件的库的集合，或者市场，可以发布、下载和管理软件包，其中 pypi\r\n(Python Package Index) https://pypi.org/\r\n是官方指定的软件包库，基于其上的 pip\r\n工具就是从这里查找、下载安装软件包的。为了提高下载速度，世界上有很多\r\nPypi\r\n的镜像服务器，在国内也有多个软件源，例如阿里的软件源是：http://mirrors.aliyun.com/pypi/simple/。\r\n除此之外，还有其他软件源，如正对科学计算的 anaconda 的软件源\r\nhttps://repo.anaconda.com/\r\npython 包管理器\r\n软件包源中的软件包数量巨大，版本多样，所以需要借助于软件源管理工具，例如\r\npip、conda、Pipenv、Poetry 等\r\n\r\npip 是最常用的包管理工具，通过\r\npip install &lt;packagename&gt;\r\n命令格式来安装软件包，使用的是 pypi 软件包源\r\nconda\r\n多用作科学计算领域的包管理工具，功能丰富且强大，使用的软件包源是\r\nAnaconda repository 和 Anaconda Cloud，conda 不仅支持 Python\r\n软件包，还可以安装 C、C++ 、R\r\n以及其他语言的二定制软件包。除了软件包管理外，还能提供相互隔离的软件环境。\r\nPipenv 是 Kenneth Reitz\r\n在2017年1月发布的Python依赖管理工具，现在由PyPA维护。Pipenv\r\n会自动帮你管理虚拟环境和依赖文件，并且提供了一系列命令和选项来帮助你实现各种依赖和环境管理相关的操作\r\nPoetry 和 Pipenv 类似，是一个 Python\r\n虚拟环境和依赖管理工具，另外它还提供了包管理功能，比如打包和发布。你可以把它看做是\r\nPipenv 和 Flit 这些工具的超集。它可以让你用 Poetry 来同时管理 Python\r\n库和 Python 程序\r\n\r\n很多包管理工具不仅提供了基本的包管理功能，还提供了虚拟环境构建，程序管理的等功能\r\nPython 虚拟环境\r\nPython\r\n应用经常需要使用一些包第三方包或者模块，有时需要依赖特定的包或者库的版本，所以不能有一个能适应所有\r\nPython 应用的软件环境，很多时候不同的 Python\r\n应用所依赖的版本是冲突的，满足了其中一个，另一个则无法运行，解决这一问题的方法是\r\n虚拟环境。 虚拟环境是一个包含了特定 Python\r\n解析器以及一些软件包的自包含目录，不同的应用程序可以使用不同的虚拟环境，从而解决了依赖冲突问题，而且虚拟环境中只需要安装应用相关的包或者模块，可以给部署提供便利\r\n构建虚拟环境\r\n原理\r\n虚拟环境并不是什么新技术，主要是利用了操作系统中环境变量以及进程间环境隔离的特性\r\n操作系统的环境变量可以为程序提供信息和做信息交换介质，进程可以共享操作系统中的环境变量，也可以为进程指定环境变量，其中\r\nPATH\r\n是很重要的环境变量，用于为操作系统和程序提供可执行文件的访问路径，例如写一个程序\r\na.exe，存放在 D:中，在命令行中执行 a.exe ，会得到提示“ 无法找到程序\r\na.exe”，为了让系统找到，可以将 D:路径加入到 PATH 环境变量中，当输入\r\na.exe 时，操作系统就会从 PATH\r\n所提供的路径中逐个查找，这时就可以找到了。Linux 和 MacOS\r\n具有相似的特性，甚至比 Windows 的功能更丰富。\r\nPython\r\n虚拟环境就是利用这个特性构建的，在激活虚拟环境之时，激活脚本会将当前命令行程序的\r\nPATH 修改为虚拟环境的，这样执行命令就会在被修改的 PATH\r\n中查找，从而避免了原本 PATH 可以找到的命令，从而实现了 Python\r\n环境的隔离。\r\n为了让开发这容易区分当前环境是否虚拟环境以及是那个虚拟环境，命令提示符前会加上特殊标记，例如:\r\n\r\n创建\r\nvirtualenv 工具\r\n在 python3.3 之前，只能通过 virtualenv 创建虚拟环境，首先需要安装\r\nvirtualenv\r\npip install virtualenv \r\n安装完后，在当前目录下创建一个名为 myvenv 的虚拟环境:\r\nvirtualenv --no-site-packages myvenv \r\n参数 --no-site-packages\r\n的意思是创建虚拟环境时，不复制主环境中安装的第三方包，也就是创建一个\r\n“干净的” 虚拟环境\r\nvirtualenv 还有很多参数，用于不同的使用场景，例如:\r\n\r\n-p: 用于指定 Python 解析器，就是安装好的 Python\r\n应用程序，默认为当前环境中的 Python\r\n–no-pip：不需要安装 pip，默认为安装\r\n–clear：如果创建虚拟环境的目录已经有了其他虚拟环境，清楚重建\r\n\r\nvenv 模块\r\nPython3.3 之后，可以用模块 venv 代替 virtualenv\r\n工具，好处时不用单独安装，3.3 及之后的版本，都可以通过安装好的 Python\r\n来创建虚拟环境:\r\npython -m venv myvenv\r\n可以在当前目录创建一个名为 myvenv 的虚拟环境\r\nvenv 有些才参数，不过相比 virtualenv 少了些，这里简单介绍几个：\r\n\r\n–without-pip: 不需要安装 pip，默认为安装\r\n–clear：如果创建虚拟环境的目录已经有了其他虚拟环境，清楚重建\r\n\r\n因为 venv 是依附于一个 Python 解析器创建的，所以不需要指定 Python\r\n解释器版本\r\n激活\r\n虚拟环境创建好后，需要激活才能在当前命令行中使用，可以理解成将当前命令行环境中\r\nPATH 变量的值替换掉\r\n通过 virtualenv 和 模块 venv\r\n创建的虚拟环境，激活方式是一样的，即运行激活脚本\r\n\r\nWindows 系统中，激活脚本路径是\r\n&lt;myvenv&gt;\\Scripts\\activate.bat，如果是 powershell\r\n命令行，脚本换成 Activate.ps1 , 注意将\r\n&lt;myvenv&gt; 换成你自己的虚拟环境目录\r\nLinux 系统中，激活脚本路径是\r\n&lt;myvenv&gt;/bin/activate，默认脚本没有执行权限，要么设置脚本为可执行，要么用\r\nsource 命令执行，例如\r\n$ source myvenv/bin/activate\r\n\r\n激活后，可以在命令行行头看到虚拟环境标记\r\n与开发工具配合\r\n虽然通过激活脚本，很容易切换到虚拟环境，但是在实际开发中，还是不够方便，而且现在很多开发工具，特别是提供\r\nPython\r\n解析环境的开发工具，都可以和虚拟环境配合，在开发过程中几乎无感，对开发工作是很大的帮助\r\nVisual Studio Code\r\nVS Code\r\n是个后起之秀，功能强大且具有丰富的插件资源，无疑是这两年发展最快的综合开发工具。现在的版本配置\r\nPython 虚拟环境很简单，只需要选择一个 Python 解释器就好了\r\n同时按下 Ctrl+Shift+P, 在弹出的命令窗口中输入\r\n“解析器”，然后在下拉列表中选择\r\n“Python:选择解析器”，这里会缓存一些已经创建好的解析器，如果没有想要的，可以选择\r\n“Enter interpreter path”\r\n来选择解析器路径，即已经创建好的虚拟环境脚本文件夹中的 Python\r\n程序，就可以创建一个新的解析器\r\n\r\n如果编辑的是 Python\r\n代码文件，在状态栏中也可以选择和切换解释器，更为方便\r\n\r\nPycharm\r\nPycharm 应该是功能最好的 Python 开发工具，转为 Python\r\n开发而生，除了基本的开发功能外，还提供项目创建、打包、测试等丰富功能，有很大的市场占有率\r\n创建项目时，在项目创建对话框中，可以创建或者选择已经已有的解析器\r\n\r\n选择创建新的解析器时，需要选择创建虚拟环境的工具，如\r\nvirtualenv；指定虚拟环境的目录；选择 Python 基础解析器，同 virtualenv\r\n工具的 -p 参数的效果；以及是否要继承基础解析器的第三方库 和\r\n是否将这个虚拟环境作为默认环境，即创建其他项目时默认选择\r\n如果选择已存在的解析器，和 VS Code\r\n差不多，可以选择已经缓存的或者指定解析器的路径\r\n部署虚拟环境\r\n之所以在开发时选择虚拟环境，除了避免库之间的冲突，还有重要的原因时方便部署，因为虚拟环境时独立的，仅包含了项目相关的依赖库，所以部署的效率更高，风险更小\r\n一般部署流程是：\r\n\r\n开发完成后，使用 pip freeze &gt; requirements.txt\r\n命令将项目的库依赖导出，作为代码的一部分\r\n将代码上传到服务器\r\n在服务器上创建一个虚拟环境\r\n激活虚拟环境，执行\r\npip install -r requirements.txt，安装项目依赖\r\n\r\n怎么运行项目，需要看项目的具体情况\r\n\r\nWeb 项目 Web 项目一般使用 Django、Flask 的 Web 开发的提供 Web\r\n服务的项目，部署时需要一个 Web\r\n容器，作为程序的运行环境，容器的配置中都有一个虚拟环境的设置，其实是指定\r\nPython 解析器的路径，将其设置为虚拟环境的目录或者 Python\r\n解析器就可以了，启动时就用使用虚拟环境，并与其他环境隔离。例如 uWSGI\r\n配置文件中 home 参数是用来指定解析器的。\r\n服务类项目\r\n服务类项目就是需要以服务的形式长时间运行的，例如之前介绍的\r\n公交闹钟，或者一些定时爬虫之类的，对于 Linux 而言，当前主流的服务方式是\r\nSystemd，是一种比 init 更先进的服务管理工具，在服务脚本中， 设置\r\nExecStart 执行命令为全路径的虚拟环境的 Python\r\n解析器，服务启动时，使用独立的虚拟环境了。 Windows 服务，对于达成 EXE\r\n包的，不需要配置虚拟环境，因为打包时已经考虑了环境问题了，如果时脚本运行的话，需要指定全路径的\r\nPython 解析器\r\n单次运行项目\r\n对于一些测试或者实验性质的项目，大多数情况下手动执行，只要在激活的虚拟环境下，或者用特定的\r\nPython 解析器运行就好了，和在开发过程中运行区别不大\r\n\r\n其他虚拟环境管理工具\r\n\r\nvirtualenvwrapper： 是对 virtualenv 的一个封装，还有针对 vim 用户和\r\nemacs 用户的 扩展，能支持 bash/ksh/zsh\r\nvirtualenvwrapper-win： 针对 Windows batch shell 的\r\nvirtualenvwrapper\r\npyenv： 用来解决这类问题。它可以安装、卸载、编译、管理多个 python\r\n版本，并随时将其中一个设置为工作环境\r\npyenv-win： 针对 Windows 的 pyenv\r\n\r\n","slug":"Web Dev/Back End/django/使用当前目录里venv中的python","date":"2023-03-07T16:14:46.254Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Django Model\r\n参考文档\r\n\r\n模型\r\n| Django 文档 | Django (djangoproject.com)\r\n详解Django的Models（django基础四）_Charles-Su的博客-CSDN博客_django\r\nmodel\r\n\r\n\r\n内容：\r\nModel在项目中的意义\r\n模型准确且唯一的描述了数据。它包含储存数据的重要字段和行为。\r\n一般来说，每一个模型都映射一张数据库表。\r\n基础：\r\n\r\n每个模型都是一个 Python 的类，这些类继承 django.db.models.Model\r\n模型类的每个属性都相当于一个数据库的字段。\r\n利用这些，Django 提供了一个自动生成访问数据库的 API；请参阅 执行查询。\r\n\r\nModel的构建\r\n继承来源：\r\n我们可以继承 models.Model , AbstractUser\r\n等来构建我们的新Model类\r\n其中\r\nmodels.Model:\r\nModels则是通用的模型类，自定义模型都需要继承这个\r\nAbstractUser:\r\nAbstractUser要记得在setting.py里面加上AUTH_USER_MODEL =\r\n‘users.UserProfile’\r\nAbstractUser是内置的用户类，当要继承内置的用户模型并进行扩展时，就使用它\r\nInner Class -- Meta：\r\nModel metadata is “anything that’s not a field”, such as ordering\r\noptions (ordering),\r\ndatabase table name (db_table),\r\nor human-readable singular and plural names (verbose_name\r\nand verbose_name_plural).\r\nNone are required, and adding class Meta to a model is\r\ncompletely optional.\r\nA complete list of all possible Meta options can be\r\nfound in the model\r\noption reference.\r\n基本属性与字段：\r\n1.field类型\r\nAutoField:一个自动递增的整形字段，通常用于主键\r\nCharField：字符串字段，用于输入较短的字符，对应与HTML里面&lt;input\r\ntype='text'&gt;\r\nTextField：文本字段，用于输入较多的字符，对应html标签 &lt;input type\r\n= \"textarea\"&gt;；\r\nEmailField：邮箱字段，用于输入带有Email格式的字符\r\nDateFiled\r\nTimeFiled\r\nDateTimeField：日期字段，支持时间输入\r\nImageField：用于上传图片并验证图片合法性，需定义upload_to参数，使用本字段需安装python\r\npillow等图片库\r\nIntegerField：整数字段，用于保持整数信息\r\nfield属性\r\nprimary_key：设置True or False，定义此字段是否为主键\r\ndefault：设置默认值，可以设置默认的文本、时间、图片、时间等\r\nnull：设置True or False，是否允许数据库字段为Null，默认为False\r\nblank：设置True or\r\nFalse，定义是否运行用户不输入，默认为False；若为True，则用户可以不输入此字段\r\nmax_length：设置默认长度，一般在CharField、TextField、EmailField等文本字段设置\r\nverbose_name：设置该字段的名称，所有字段都可以设置，在Web页面会显示出来（例如将英文显示为中文）\r\nchoices：设置该字段的可选值，本字段的值是一个二维元素的元祖；元素的第1个值为实际存储的值，第2个值为HTML页面显示的值\r\nupload_to：设置上传路径，ImageField和FileField字段需要设置此参数,如果路径不存在，会自动创建\r\nMeta类属性\r\nverbose_name：设置对象名称（例如usecms），若没有设置，则默认为该类名的小写分词形式，例如类名为CamelCase会被转换为camel\r\ncase；\r\nverbose_name_plural：设置对象名称复数（例如usercms），一般设置跟verbose_name一样，\r\nverbose_name_plural=verbose_name否则会默认加s；\r\ndb_table：设置映射的数据表名，默认为“应用名_模型名”，即用该模型所在app的名称加本模型类的名称\r\nproxy：设置True or\r\nFalse，设置本模型及所有继承本模型的子模型是否为代理模型；\r\nabstract：设置True or\r\nFalse，设置本模型类是否为抽象基类；如果是抽象基类，那么是不会创建这张表的，这张表用来作为基类被其他的表继承\r\nmodel层的命令详解\r\npython manage.py makemigrations+名字:#\r\n生成数据库表的初始化文件initial.py文件\r\npython manage.py migrate# #\r\n基于数据库表初始化文件initial.py文件，正式生成数据表\r\npython manage.py sqlmigrate polls\r\n0001查看数据库的生成语句，因为initial.0001是数据库表的初始化文件\r\n基本设计思路：\r\n","slug":"Web Dev/Back End/django/Django Model","date":"2023-03-07T16:14:46.251Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\nremeber: we always do makemigrations and\r\nmigrate when we change the models\r\n\r\n\r\nStep 1. create an app\r\ndjango-amdin startapp &lt;YourAppName&gt;\r\nThen we got an essential app with the structure like below:\r\n\r\n- &lt;YourAppName&gt;: - migrations - __init__.py -\r\nadmin.py - apps.py - models.py - tests.py - views.py\r\n\r\nStep 2. change\r\nyour models and save the changes\r\nobviously, if we want a good backend, we need a database. And in that\r\ncase, we need to write a good model file\r\n\r\nsideshow: Use\r\nThe Python Shell to Control Django\r\nuse command python manage.py shell to enter the special\r\npython shell\r\nfor example:\r\nwe have a model in an app named product like this:\r\n&gt;&gt;&gt; from products.models import product as pd\n&gt;&gt;&gt; pd.objects.all()  # check all the data related with class product, using the method __str__\n# add:\n&gt;&gt;&gt; pd.objects.create(&lt;pd_attr1&gt;&#x3D;&quot;...&quot;, [...])  # add a new data into the table\n# delete\n&gt;&gt;&gt; pd.objects.\n# change\n&gt;&gt;&gt;\n# search\n&gt;&gt;&gt;\r\nif we want to change the fields of vars in models, we must make sure\r\nthat the data is fixable in new field: In certain time, we need to\r\nchange the data:\r\nof course you can change it in software like sqlitestudio, but how\r\nabout with shell?\r\n","slug":"Web Dev/Back End/django/BuildUpYourApps","date":"2023-03-07T16:14:46.244Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"django项目的创建：\r\n创建好的项目目录如下\r\nbysms&#x2F;\t\t\t\t\t\t\t\t&#x2F;&#x2F;整体的项目名称\n    manage.py\t\t\t\t\t\t&#x2F;&#x2F;项目中的管理文件\n    bysms&#x2F;\t\t\t\t\t\t\t&#x2F;&#x2F;实际构建网站的文件的二级目录\n        __init__.py\t\t\t\t\t\n        settings.py\t\t\t\t\t&#x2F;&#x2F;Django 项目的配置文件\n        urls.py\t\t\t\t\t\t&#x2F;&#x2F;负责网站访问中的路由分发\n        wsgi.py\t\t\t\t\t\t&#x2F;&#x2F;以wsgi规范构建网站\r\ndjango的url分发策略：\r\n\r\n按层级分发：\r\n​ ——项目下的同名文件夹的urls作一级分发\r\n示例：\r\n\r\npath('login/', include('login.urls'))\r\npath('admin/', include('admin.urls'))\r\npath('莫斯提马/', include('莫斯提马.urls'))\r\n\r\n注意：要先from django.urls import path, include\r\n直接访问：\r\n\r\npath('login/', login)\r\n\r\n注意：此时要求在当前文件目录下的views.py文件中要存在对应的已经定义好的，能返回HttpResponse()的函数\r\n\r\n```python def login(request): return HttpResponse( ··· )\r\n\n  但是在使用之前，要从根目录开始引入这个函数\n\n+ &#96;&#96;&#96;python\n  from login.views import login\r\n\r\n\r\ndjango配合数据库：\r\n","slug":"Web Dev/Back End/django/2021 3 13","date":"2023-03-07T16:14:46.241Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n","slug":"Web Dev/Back End/WSGI","date":"2023-03-07T16:14:46.235Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n如果是对同一个表进行数据操作，应该使用同一条API，然后根据method的不同，进行不同的操作\r\nGET&#x2F;POST&#x2F;PUT&#x2F;DELETE&#x2F;PATCH\r\n面向资源编程，通过API提交的参数最好是名词如name，尽量少用动词\r\nhttp:&#x2F;&#x2F;www.abc.com&#x2F;name\r\n体现版本，在API中加入像v1, v2这样的版本代号\r\nhttp:&#x2F;&#x2F;www.abc.com&#x2F;v1&#x2F;name\nhttp:&#x2F;&#x2F;www.abc.com&#x2F;v2&#x2F;name\r\n体现API，让使用者一眼能看出这是API而不是URL，应该在API中加入提示：\r\nhttp:&#x2F;&#x2F;www.abc.com&#x2F;api&#x2F;v1&#x2F;name\nhttp:&#x2F;&#x2F;www.abc.com&#x2F;api&#x2F;v2&#x2F;name\r\n使用HTTPS https:&#x2F;&#x2F;www.abc.com&#x2F;api&#x2F;v1&#x2F;name\nhttps:&#x2F;&#x2F;www.abc.com&#x2F;api&#x2F;v2&#x2F;name\r\n响应式设置状态码 return HttpResponse(&#39;abcde&#39;, status&#x3D;200)\r\nAPI的参数里加入筛选条件参数，也可以理解为获取资源优先选择GET的方式\r\nhttps:&#x2F;&#x2F;www.abc.com&#x2F;api&#x2F;v2&#x2F;name?page&#x3D;1&amp;size&#x3D;10\r\n返回值的规范，对不同的请求method，做出相应的响应值如：\r\n-&gt; https:&#x2F;&#x2F;www.abc.com&#x2F;api&#x2F;v1&#x2F;name\n\n- GET: 所有列表\n- POST: 新增的数据\n\n-&gt; https:&#x2F;&#x2F;www.abc.com&#x2F;api&#x2F;v1&#x2F;name&#x2F;1\n\n- GET: 单条数据\n- PUT: 更新，返回更新的数据\n- PATCH: 局部更新，返回更新的数据\n- DELETE: 删除，返回空文档\r\n返回错误信息，包括错误代号等，让用户直接看出是哪种类型错误\r\nret &#123;\n    code: 1000,\n    data: &#123;\n        1: &#123;&#39;id&#39;: 1, &#39;title&#39;: &#39;lala&#39;&#125;\n    &#125;\n&#125;\r\n返回的详细信息，应该以字典的形式存放在data中\r\nret &#123;\n    code: 1000,\n    data: &#123;\n        1: &#123;&#39;id&#39;: 1, &#39;title&#39;: &#39;lala&#39;, &#39;detail&#39;: &#39;lalalalala&#39;&#125;\n    &#125;\n&#125;\r\n\r\n","slug":"Web Dev/Back End/RESTful规范 - 如何写API","date":"2023-03-07T16:14:46.229Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"POST 请求 |\r\nAxios 中文文档 (axios-http.cn)\r\n","slug":"Web Dev/前后端交互","date":"2023-03-07T16:14:46.221Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"关联\r\n视频地址：【Unity教程搬运】学习如何在Unity2022制作一个2D平台游戏\r\n- 完整的游戏开发课程！_哔哩哔哩_bilibili\r\n要点速览\r\n给项目做好预设\r\n做出一个基本界面\r\n尝试parallax\r\neffect式的background\r\n在使用了parallax effect，设定：最远的后，我们往往能发现，\r\ntilemaps\r\nPlayer Logic\r\n我们需要实现的是一个经典的2d rpg character\r\n对于这种character，我们需要做的有：\r\nPlayer Input\r\nPlayer Collider\r\nPlayer Animator and States\r\nEnemy ai\r\n敌人的animator\r\n敌人的hitbox\r\n敌人的detect box\r\n","slug":"Technical Artist/YourFirstGame/ReadMe","date":"2023-03-07T16:14:46.199Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"应用阶段\r\n应用阶段的主要任务是把需要显示在屏幕上的几何信息输入到渲染管线的下一阶段。\r\n应用阶段其实就是指Unity中用C#编程的阶段，通过代码控制的程序变化，但是并不似所有变化都会影响到接下来的渲染阶段，只有做了与渲染相关的操作才会影响接下来的阶段。比如控制摄像机的位置，物体的旋转、颜色等都能影响姐接下来的渲染阶段。\r\n我们在写Shader的时候，会看到一个叫appdata的结构体，而结构体所定义的数据就是从应用阶段传过来的数据。\r\nstruct appdata_t &#123;\n  float4 vertex: POSITION;\n  float4 color: COLOR;\n  float2 texcoord: TEXCOORD0;\n&#125;;\r\n应用阶段会提供大致以下数据：\r\n\r\n顶点（网格）\r\n颜色\r\n纹理的UV坐标\r\nMVP矩阵\r\n光源位置\r\n\r\n好多书中都会写应用阶段是通过软件方式来实现的阶段，开发者在应用阶段有完全的控制权。\r\n我理解的软件方式指的是CPU负责的事情，在Unity中游戏逻辑，编码、资产处理都是CPU去处理的。而“开发者”在游戏引擎指的是引擎的开发者和使用者，开发者决定了引擎的渲染方式，提供的渲染路径，如何触发批处理等，而使用者可以控制物体本身的属性和渲染相关的脚本编写。\r\n所以说应用阶段我们使用了游戏引擎提供的相关功能加上我们自己的编码和设置来控制最终给下一个阶段提供的数据信息。\r\n(12\r\n封私信 / 80 条消息) 渲染管线 应用阶段 - 搜索结果 - 知乎\r\n(zhihu.com)\r\n","slug":"Technical Artist/RenderingPipline/01.Application","date":"2023-03-07T16:14:46.192Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n","slug":"Technical Artist/RenderingPipline/00.General","date":"2023-03-07T16:14:46.191Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n","slug":"Technical Artist/RemakeDarkSoul/ReadMe","date":"2023-03-07T16:14:46.184Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n","slug":"Technical Artist/BlogCollection/综述","date":"2023-03-07T16:14:46.076Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n(11 封私信 / 80\r\n条消息)\r\n当面试被问到详述一下OpenGL的渲染管线时，什么答案是面试官想听到的？ -\r\n知乎 (zhihu.com)\r\n「黑丝」的材质如何用\r\nshader 实现？数学模型是怎样的？ - 知乎 (zhihu.com)\r\nAll-frequency\r\nrendering of dynamic, spatially-varying reflectance\r\n(jiapingwang.com)\r\n浅谈《原神》中的图形渲染技术_AkagiSenpai的博客-CSDN博客_原神渲染技术\r\n(12\r\n封私信 / 80 条消息)\r\n大学4年想成为一个优秀的技术美术（偏技术），该怎么做？ - 知乎\r\n(zhihu.com)\r\n\r\n","slug":"Technical Artist/Stack","date":"2023-03-07T16:14:46.070Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Origin\r\nB站首发！草履虫都能看懂的【傅里叶变换】讲解，清华大学李永乐老师教你如何理解傅里叶变换，辨清美颜和变声原理，！！_哔哩哔哩_bilibili\r\n\r\n时域、频域：06:44\r\n傅里叶级数公式表达：10:46\r\n关于欧拉公式：虚数与复数与欧拉公式 -\r\n知乎 (zhihu.com)\r\n\r\n快速傅里叶：快速傅里叶变换(FFT)是什么？FFT深入理解_哔哩哔哩_bilibili\r\n傅里叶变换/连续傅里叶变换\r\n利用傅里叶进行图像处理\r\n傅里叶级数\r\n\r\n任何一个周期性的函数f(t)，都可以进行变换为一系列正余弦函数的和\r\n\r\n\r\n同思路：用标准正交基表示坐标系内的任意坐标\r\n\r\n","slug":"Technical Artist/FourierTransform","date":"2023-03-07T16:14:46.067Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"vim内进行文件浏览\r\n:Ex 开启目录浏览器，可以浏览当前目录下的所有文件，并可以选择 :Sex\r\n水平分割当前窗口，并在一个窗口中开启目录浏览器\r\nvim与shell切换\r\n:shell 可以在不关闭vi的情况下切换到shell命令行 exit 从shell回到vi\r\n","slug":"Softwares/vim/10.commandswithshell","date":"2023-03-07T16:14:46.054Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"比较文件差异——Show difference\r\n本质是在vim中新开一个窗口，\r\nTo show differences between files execute below command −\r\n$ vimdiff &lt;file&gt; &lt;file&gt; \nOR \n$ vim –d &lt;file&gt; &lt;file&gt;\r\nvim内比较\r\n:diffsplit filename # 横向窗口\n:vert :diffsplit filename # 纵向窗口\r\n相同的部分无颜色表示，不同的部分会进行高亮\r\n修改处跳转——Jump to previous\r\nchange\r\nIn diff window, execute following command to jump to previous change\r\n−\r\n[c\r\nJump to next change\r\nIn diff window, execute following command to jump to next change\r\n−\r\n]c\r\n","slug":"Softwares/vim/09.diff","date":"2023-03-07T16:14:46.051Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Working With Multiple Things\r\n打开新文件——Multiple files\r\nLet us suppose you are editing a file and you want to open another\r\nfile in same Vim session.\r\nIn that case, you can use Vim’s edit command. Below table shows these\r\ncommands\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\n:e\r\nLoad new file in buffer for editing\r\n\r\n\r\n:edit\r\nSame as :e\r\n\r\n\r\n:e \r\nList the files for editing from current directory\r\n\r\n\r\n:edit \r\nSame as :e \r\n\r\n\r\n\r\n打开新文件并保持旧文件——Multiple\r\nbuffers\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\n:badd \r\nAdd file into new buffer\r\n\r\n\r\n:bN\r\nSwitch to Nth buffer. For instance to switch to 3rd buffer use\r\n:b3\r\n\r\n\r\n:bnext\r\nMove to the next buffer in buffer list\r\n\r\n\r\n:bprevious\r\nMove to the previous buffer in buffer list\r\n\r\n\r\n:buffers\r\nList all buffers\r\n\r\n\r\n:bfirst\r\nMove to the first buffer\r\n\r\n\r\n:blast\r\nMove to the last buffer\r\n\r\n\r\n:ball\r\nLoad all buffers\r\n\r\n\r\n\r\n在我们可以使用\r\n:buffers 或 :ls\r\n来查看我们所打开的全部文件\r\n多标签页——Multiple tabs\r\nLike other editors we can also open multiple tabs in Vim. Below table\r\ndescribes tab related commands −\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\n:tabnew\r\nOpen new tab\r\n\r\n\r\n:tabnew \r\nOpen new file in tab\r\n\r\n\r\n:tabclose(acronym: :tabc)\r\nClose current tab\r\n\r\n\r\n:tabo\r\nclose all the tabs except the first one\r\n\r\n\r\n:tabnext\r\nMove to the next tab\r\n\r\n\r\n:tabprevious\r\nMove to the previous tab\r\n\r\n\r\n:tabfirst\r\nMove to the first tab\r\n\r\n\r\n:tablast\r\nMove to the last tab\r\n\r\n\r\n\r\n多窗口：Multiple windows\r\nIn Vim we can create new window using following commands −\r\n开启多窗\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\n:new \r\nOpen file in new window(横向)\r\n\r\n\r\n:split+窗口名(acronym:sp+窗口名)\r\n横向切割窗口\r\n\r\n\r\n:vsplit+窗口名(acronym:vsp+窗口名)\r\n纵向切割窗口\r\n\r\n\r\n\r\n窗口切换\r\n\r\n:ctrl+w+h/j/k/l 左下上右切换窗口\r\n快速双击ctrl+w 依次切换窗口\r\n\r\n窗口大小调整\r\n纵向调整\r\n\r\n\r\n\r\ncommand\r\ndescription\r\n\r\n\r\n\r\n\r\n:ctrl+w +\r\n纵向扩大（行数增加）\r\n\r\n\r\n:ctrl+w -\r\n纵向缩小 （行数减少）\r\n\r\n\r\n:res(ize) num\r\n把当前窗口显示行数调整为num行\r\n\r\n\r\n:res(ize)+num\r\n把当前窗口高度增加num行\r\n\r\n\r\n:res(ize)-num\r\n把当前窗口高度减少num行\r\n\r\n\r\n\r\n横向调整\r\n\r\n\r\n\r\ncommand\r\ndescription\r\n\r\n\r\n\r\n\r\n:vertical res(ize) num\r\n指定当前窗口为num列\r\n\r\n\r\n:vertical res(ize)+num\r\n把当前窗口增加num列\r\n\r\n\r\n:vertical res(ize)-num\r\n把当前窗口减少num列\r\n\r\n\r\n\r\n关闭多窗\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\n:close/:q!\r\n关闭多窗口使用close只是暂时关闭窗口，其内容还在缓存中，只有使用q!等才能真正退出。\r\n\r\n\r\n\r\n","slug":"Softwares/vim/08.multiplefiles","date":"2023-03-07T16:14:46.048Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"进行相关设置——Search\r\nrelated settings\r\n启用增量搜索——To perform incremental search execute following command\r\n−\r\n:set incsearch\r\n启用内容高亮——To highlight search execute following command −\r\n:set hlsearch\r\nThis command will automatically highlight current matches. For\r\ninstance in below image fox word is highlighted −\r\nTo disable incremental and highlighted search execute following\r\ncommands −\r\n:set noincsearch\n:set nohlsearch\r\n当前文件搜索——Search in\r\ncurrent file\r\n向后搜索——Search in forward\r\ndirection\r\nUse following commands to perform search in forward direction −\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\n/\r\nSearch expression in forward direction\r\n\r\n\r\nn\r\nFind next occurrence. This is same and find next\r\n\r\n\r\nN\r\nFind previous occurrence. This is same as find previous\r\n\r\n\r\n//\r\nRepeat previous forward search\r\n\r\n\r\n\r\n向前搜索——Search in\r\nbackward direction\r\nUse following commands to perform search in backward direction\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\n?\r\nSearch expression in backward direction\r\n\r\n\r\nn\r\nFind previous occurrence. This is same and find previous\r\n\r\n\r\nN\r\nFind next occurrence. This is same as find next\r\n\r\n\r\n??\r\nRepeat previous backward search\r\n\r\n\r\n\r\n指针后搜索——Search word\r\nunder cursor\r\nPlace cursor under any word and execute following commands to perform\r\nsearch operation −\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\n*****\r\nSearch next occurrence of current word\r\n\r\n\r\n#\r\nSearch previous occurrence of current word\r\n\r\n\r\n\r\n多文件搜索——Search in\r\nmultiple files\r\nUsing vimgrep command we can search  in multiple files.\r\nFor instance below command searches string - Jarvis in\r\nall text files.\r\n:vimgrep Jarvis *.txt\r\nNote that to go to next and previous occurrence we have to use\r\nfollowing commands −\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\n:cn\r\nGo to next occurrence of expression\r\n\r\n\r\n:cN\r\nGo to previous occurrence of expression\r\n\r\n\r\n\r\n","slug":"Softwares/vim/07.Searching","date":"2023-03-07T16:14:46.045Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"移动光标\r\n\r\n\r\n\r\n具体按键\r\n描述 Description\r\n\r\n\r\n\r\n\r\nh\r\n左移 Move cursor to left by one position\r\n\r\n\r\nj\r\n下移 Move cursor to downward by one position\r\n\r\n\r\nk\r\n上移 Move cursor to upward direction by one line\r\n\r\n\r\nl\r\n右移 Move cursor to right direction by one line\r\n\r\n\r\n\r\n可以通过数字键+移动键实现快速移动，如向下移动十行：\r\nTo perform multi-position navigation use number with these commands.\r\nFor instance to navigate cursor 10 line below from current line, execute\r\nfollowing command −\r\n10j # 先按数字键1 0 后按 j\r\n有一些特殊\"数字\"： | command | Description | | ---- |\r\n------------------------------------------------- | | 0\r\n| Move cursor to the beginning of current line | | $ |\r\nMove cursor to the end of current line | | Ctrl + f |\r\nScroll down entire page | | Ctrl + b | Scroll up entire\r\npage |\r\nNavigate to lines\r\nBelow command can be used to navigate to specific line −\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\n:[lineNumber]\r\nJump to the certain line\r\n\r\n\r\n:0\r\nJump to the start of file\r\n\r\n\r\n:$\r\nJump to the end of file\r\n\r\n\r\n\r\nWord navigation\r\nWe can use following commands for word navigation −\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\nw\r\nMove cursor to the beginning of the next word\r\n\r\n\r\ne\r\nMove cursor to the end of the current word\r\n\r\n\r\nb\r\nMove cursor to the beginning of the previous word\r\n\r\n\r\n\r\nUsing jumps\r\nVim keeps track of your navigation using a jump list. You can go\r\nbackward and forward through that list.\r\nThe jump list keeps tracks of all the places you’ve been to by\r\ntracking file name, line number and column number.\r\nTo view jump list execute following command −\r\n:jumps\r\nFollowing command are based on jump list −\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\nCtrl + o\r\nJump back to the previous position\r\n\r\n\r\nCtrl + i\r\nJump to the next position\r\n\r\n\r\n\r\n退出:jumps\r\n一般不要使用:q作退出！很可能直接关闭文件！\r\n","slug":"Softwares/vim/06.navigation","date":"2023-03-07T16:14:46.041Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"edit综述\r\n总览：\r\nVim provides many commands which make editing functionality really\r\npowerful. In this chapter, we will discuss following items −\r\n\r\nInsert\r\nAppend\r\nOpen new line\r\nSubstitute\r\nChange\r\nReplace\r\nJoin\r\n\r\n插入——i：Insert text before\r\ncursor\r\nTo insert text before cursor perform following steps −\r\n\r\nTo insert text before cursor perform following steps\r\nSwitch to insert mode\r\n\r\ni\r\n追加——a：Append text after\r\ncursor\r\nTo append text after cursor perform following steps\r\n\r\nSwitch to command mode and move cursor to appropriate position\r\n\r\nEsc\r\n\r\nSwitch to insert mode\r\n\r\na\r\n头插——I：Insert text\r\nat the beginning of line\r\nLet us suppose you are in the middle of line and you want to insert\r\ntext at the beginning of current line then perform following steps −\r\n\r\nSwitch to command mode\r\n\r\nEsc\r\n\r\nActivate insert mode\r\n\r\nI\r\nThis action will move cursor to the beginning of current line and\r\nswitch Vim in insert mode\r\n尾插——A：Append text at the\r\nend of line\r\nLet us suppose you are in the middle of line and you want to append\r\ntext at the end of current line then perform following steps −\r\n\r\nSwitch to command mode\r\n\r\nEsc\r\n\r\nSwitch to insert mode\r\n\r\nA\r\nThis action will move cursor to the end of line and switch Vim in\r\ninsert mode\r\n另起行——在光标当前行下新起一行并进入insert模式——o：Open\r\nnew line below cursor\r\nLet us suppose you are in the middle of line and you want to open new\r\nline below current line then perform following steps −\r\n\r\nSwitch to command mode\r\n\r\nEsc\r\n\r\nSwitch to insert mode\r\n\r\no\r\nThis action will insert blank line below current line and switch Vim\r\nin insert mode\r\n另起行——将当前行下移一行并进入insert模式——O：Open\r\nnew line above cursor\r\nLet us suppose you are in the middle of line and you want to open new\r\nline above current line then perform following steps −\r\n\r\nSwitch to command mode\r\n\r\nEsc\r\n\r\nSwitch to insert mode\r\n\r\no\r\nThis action will insert blank line above current line and switch Vim\r\nin insert mode\r\n替换——替换(删)当前字插入——s：Substitute\r\none character\r\nLet us suppose you want to substitute single character then perform\r\nfollowing steps −\r\n\r\nSwitch to command mode\r\n\r\nEsc\r\n\r\nSwitch to insert mode\r\n\r\ns\r\nThis action will delete character under cursor and switch Vim in\r\ninsert mode To substitute entire line use −\r\n替换——替换(删)当前行插入——S：Substitute\r\nentire line\r\nor you want to substitute entire line -\r\n\r\nSwitch to command mode\r\n\r\nEsc\r\n\r\nSwitch to insert mode\r\n\r\nS\r\nThis action will delete entire line and switch Vim in insert\r\nmode.\r\n修改——改变文字(删)——cc：Change\r\nentire line\r\nLet us suppose you want to change text in current line then perform\r\nfollowing steps −\r\n\r\nSwitch to command mode\r\n\r\nEsc\r\n\r\nExecute following command −\r\n\r\ncc\r\nThis is similar to substitute action using S\r\n修改——从当前位置起改变文字(删)——C：change\r\ntext from current cursor position\r\nexecute following command -\r\nC\r\nThis action will delete text after current cursor position and switch\r\nVim in insert mode.\r\n替换——代替当前光标所指字符——r：\r\nTo replace single character perform following steps −\r\n\r\nSwitch to command mode\r\n\r\nEsc\r\n\r\nMove cursor to appropriate position\r\nExecute following command −\r\n\r\nr\r\n\r\nEnter character to be substituted.\r\n\r\nNote that this command will not switch Vim in insert\r\nmode\r\n替换——直接进入替换编辑模式——R/hit\r\ninsert button twice：\r\nTo replace entire line execute −\r\nR\r\nIt will switch Vim in replace mode as shown in below image −\r\n合并——合并当前行与下一行——J：Join\r\ntext\r\nTo join two lines perform following steps −\r\n\r\nSwitch to command mode\r\n\r\nEsc\r\n\r\nMove cursor to appropriate line\r\nExecute following command −\r\n\r\nJ\r\n编辑进化——重新审视编辑——Revisiting\r\nEditing：\r\nBuffer\r\nBuffer is temporary memory used by Vim. When we open a file\r\nin editor, Vim loads its contents from disk drive. These\r\ncontents are stored in memory (RAM) whenever we edit a file we are\r\nactually editing file from buffer. Once we finish editing and save file\r\nthat time only buffer contents are transferred to appropriate file.\r\nSwap\r\nSwap area is a file created by Vim to store buffer contents\r\nperiodically. While editing file our changes may be lost because of any\r\nreasons and Vim provides swap files to provide data recovery.\r\nTo get actual name of swap file execute following command −\r\n:swapname\r\nCut, Copy and paste actions\r\nWe often perform cut, copy and paste actions on text. Vim provides\r\nfollowing commands to perform these actions (y stands for yank and p\r\nstands for paste action) −\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\nx\r\nDelete character from cursor position\r\n\r\n\r\nX\r\nDelete previous character from cursor position\r\n\r\n\r\ny\r\nCopy single character from cursor position\r\n\r\n\r\np\r\nPaste character after cursor position\r\n\r\n\r\nP\r\nPaste character before cursor position\r\n\r\n\r\nd\r\ncut\r\n\r\n\r\n\r\nMulti-position command\r\nWe can use cut, copy and paste commands with words and sentences as\r\nwell. Below table shows this −\r\n\r\n\r\n\r\nCommand\r\nDescription\r\n\r\n\r\n\r\n\r\ndw\r\nDelete word from cursor position\r\n\r\n\r\nD\r\nDelete entire line from cursor position\r\n\r\n\r\ndd\r\nDelete entire line\r\n\r\n\r\nY\r\nCopies entire line\r\n\r\n\r\nyy\r\nCopies entire line\r\n\r\n\r\n\r\nTo perform multi-line/multi-word actions just use numbers with\r\ncommand. You can use this syntax with other commands as well. For\r\ninstance, to delete 3 words use −\r\n3dw\r\nUndo\r\nWe can undo single or multiple actions. To perform one time undo\r\naction execute −\r\nu\r\nTo perform multiple undo action, use number with same command. For\r\ninstance, below command will undo last 3 actions −\r\n3u\r\nIn addition to this, to undo all execute following command −\r\nU\r\nRedo\r\nRedo is apposite action of undo. Execute any of the command to\r\nperform redo action.\r\nCtrl + r\n# OR\n:red\r\n","slug":"Softwares/vim/05.editing","date":"2023-03-07T16:14:46.037Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"前言\r\n当你没有任何头绪的时候，不妨输入\r\n:help &lt;topic-name&gt; \r\n试试\r\nIn above command replace  with topic in which you are\r\ninterested. Forinstance to access help about vim mode, execute following\r\ncommand\r\n:help modes\r\nSearch help phrase in manual\r\n如果你知道对应主题的名字的话，直接搜索对应内容当然是最好的\r\n但是当我们不知道我们所需要信息的准确名称时，我们就需要对topic进行检索\r\n我们可以使用下面的命令：\r\nYou can search specific topic only if you know its name. But what if,\r\nyou don’t know the exact name of help topic. In that case you can use\r\nbelow command −\r\n:helpgrep &lt;phrase&gt;\r\nFor instance, to access help about navigation in Vim execute below\r\ncommand\r\n:helpgrep navigation\r\n退出help:\r\n:helpclose 或者直接 :q\r\n","slug":"Softwares/vim/04.help","date":"2023-03-07T16:14:46.035Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"vim一共有6中模式\r\n\r\n\r\n\r\n进入方式\r\n对应模式\r\n\r\n\r\n\r\n\r\nn\r\nNormal mode\r\n\r\n\r\nv\r\nVisual mode\r\n\r\n\r\ni\r\nInsert mode\r\n\r\n\r\nc\r\nCommand-line mode\r\n\r\n\r\nh\r\nall previous modes when in a help file\r\n\r\n\r\na\r\nall previous modes\r\n\r\n\r\nr\r\nfor hit-enter prompt\r\n\r\n\r\n\r\n其中，normal mode，insert mode，command-line mode是我们的常用模式\r\nnormal mode\r\n这是进入vim后的默认模式\r\n我们可以在这个模式下执行复制，粘贴，删除，替换等许多操作\r\nInsert mode\r\n在command\r\nmode下按i或功能键insert后进入的模式\r\n通过Esc退回到command mode\r\nCommand line mode\r\n执行具体命令的模式，在command mode下按下:来输入命令\r\n例如，我们可以通过:edit message.txt来对当前目录下的message.txt文件进行编辑，若不存在此文件则先进行创建\r\n:edit message.txt # 运行vim命令时的目录下的message.txt\n:edit &#x2F;root&#x2F;message.txt # 指定位置的message.txt\r\nVisual mode\r\n在command mode下按下v可进入\r\nreadonly mode\r\nvim -R message.txt\n# or\nview message.txt\r\n","slug":"Softwares/vim/03.modules","date":"2023-03-07T16:14:46.031Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Windows\r\n省略\r\nLinux\r\n确保vim安装：\r\nwhich vim\r\n在当前用户根目录下的.vimrc文件中存储它的具体配置文件，我们可以进行手动配置\r\n#没有.vimrc文件，手动进行创建\ntouch .vimrc #\nvim .vimrc\n\n#写入命令：\nset nu\n\n#这个配置会使令vim编辑器在每行开头都显示行号\r\n若没有安装：\r\n#redhat\nyum install vim\n\n#debian\napt update\napt install vim\r\n","slug":"Softwares/vim/02.installation","date":"2023-03-07T16:14:46.028Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Vim教程：\r\nVim Tutorial\r\n(tutorialspoint.com)\r\nVim is acronym for Vi IMproved.\r\nVim官网：\r\nwelcome home : vim online\r\n一个Vim相关的小游戏： https://vim-adventures.com/\r\n一个配置文件： https://github.com/MarsWang42/My-Vim-Conf\r\nVimAwesome网站： https://vimawesome.com/\r\nVim Plug Github页面： https://github.com/junegunn/vim-plug\r\n","slug":"Softwares/vim/01.start","date":"2023-03-07T16:14:46.026Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"vi/vim命令：\r\n\r\n经典版：\r\n\r\n编辑模式\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","slug":"Softwares/vim/00.pic","date":"2023-03-07T16:14:46.023Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"其他的字符终端文本编辑器\r\n用法简单了解即可\r\nnano\r\n是一个字符终端的文本编辑器，但它比vi/vim要简单得多，比较适合Linux初学者使用。某些Linux发行版的默认编辑器就是nano。\r\n移动\r\n\r\n移动光标：使用用方向键移动。\r\n选择文字：按住鼠标左键拖到。\r\n\r\n复制粘贴\r\n\r\n复制一整行：Alt+6\r\n剪贴一整行：Ctrl+K\r\n粘贴：Ctrl+U\r\n\r\n如果需要复制／剪贴多行或者一行中的一部分，先将光标移动到需要复制／剪贴的文本的开头，按Ctrl+6（或者Alt+A）做标记，然后移动光标到\r\n待复制／剪贴的文本末尾。这时选定的文本会反白，用Alt+6来复制，Ctrl+K来剪贴。若在选择文本过程中要取消，只需要再按一次Ctrl+6。\r\n搜索\r\n按Ctrl+W，然后输入你要搜索的关键字，回车确定。这将会定位到第一个匹配的文本，接着可以用Alt+W来定位到下一个匹配的文本。\r\n翻页\r\n\r\nCtrl+Y到上一页\r\nCtrl+V到下一页\r\n\r\n保存\r\n使用Ctrl+O来保存所做的修改\r\n退出\r\n按Ctrl+X\r\n如果你修改了文件，下面会询问你是否需要保存修改。输入Y确认保存，输入N不保存，按Ctrl+C取消返回。如果输入了Y，下一步会让你输入想要保存的文件名。如果不需要修改文件名直接回车就行；若想要保存成别的名字（也就是另存为）则输入新名称然后确\r\n定。这个时候也可用Ctrl+C来取消返回。\r\n","slug":"Softwares/vim/-1.otherEditor","date":"2023-03-07T16:14:46.018Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"增加PowerPoint撤回次数\r\nOptions-&gt;Advanced-&gt;Editing options-&gt;Maximum number of\r\nundos\r\ndefault: 20, Maximum: 150\r\n自动保存\r\n两个自动保存方式：\r\n\r\nOptions -&gt; Save -&gt; Save AutoRecover information every: [ ]\r\nminutes 自动保存到本地的崩溃前副本\r\nAutosave Option button 使用onedrive进行自动保存\r\n\r\n防止ppt压缩图片\r\nOptions -&gt; Advanced -&gt; Do not compress images in file\r\n字体嵌入\r\nOptions -&gt; Save -&gt; Embed fonts in the file\r\n导出\r\nThrough Export, PPT现可以导出为：\r\n\r\nPDF/XPS\r\nVideo\r\nAnimated GIF\r\nCD (?\r\nIMAGE: PNG, JPG...\r\nand more...\r\n\r\n参考线\r\nView -&gt; Rules, Gridlines, Guides\r\n快速添加\r\n默认字体\r\nDesign -&gt; Variants -&gt; Fonts (-&gt; Customize Fonts)\r\n默认样式\r\n建立一个自己想要的图形样式，right-click, select: Set as default shape\r\n即可\r\n设置幻灯片模板\r\nView -&gt; Master Views\r\n","slug":"Softwares/PowerPoint/01.Change Default Settings","date":"2023-03-07T16:14:46.009Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"1.停止Nginx服务方法\r\n\r\n立即停止服务\r\n这种方法比较强硬，无论进程是否在工作，都直接停止进程。\r\n\r\nnginx -s stop\r\n\r\n从容停止服务\r\n这种方法较stop相比就比较温和一些了，需要进程完成当前工作后再停止。\r\n\r\nnginx -s quit\r\n\r\nsystemctl 停止 systemctl属于Linux命令\r\n\r\nsystemctl stop nginx.service\r\n\r\nkillall 方法杀死进程\r\n直接杀死进程，在上面无效的情况下使用，态度强硬，简单粗暴！\r\n\r\nkillall nginx\r\n2.启动Nginx\r\nnginx直接启动\r\nnginx\r\nsystemctl命令启动\r\nsystemctl start nginx.service\r\n3.查看启动后记录\r\nps aux | grep nginx\r\n4.重启Nginx服务\r\nsystemctl restart nginx.service\r\n5.重新载入配置文件\r\n当有系统配置文件有修改，用此命令，建议不要停止再重启，以防报错！\r\nnginx -s reload\r\n6.查看端口号\r\nnetstat -tlnp\r\n","slug":"Softwares/NginxCommand/NginxCommand","date":"2023-03-07T16:14:45.992Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"为什么使用Github作为博客的托管网站？\r\n怎么搭建你的博客？\r\n首先你需要一个github账号，并在其中创建一个全新的公开仓库\r\n创建公开仓库 xxx.github.io\r\n为你的github账号添加ssh keys\r\n什么是ssh keys？\r\n为什么需要ssh keys\r\n因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的\r\n这也是GitHub上的项目中，你可以准许或禁止某些人push新内容的原因\r\n怎么获取ssh keys\r\n如果你已经完成了本地git global user.name和user.email的设置的话\r\n你可以直接使用如下命令生成你的ssh keys：\r\n\r\nssh-keygen #可选： -t rsa -C \"你的邮箱地址\"\r\n\r\n在此过程中，你可能会遇到要你选择保留公钥和私钥，设置密码的选项，直接回车就可以了，当然你也可以根据自己需要做出选择\r\n\r\n\r\nwin下生成的ssh keys会保存在C:.ssh中，用记事本打开即可查看\r\n请不要将你的ssh keys密钥告诉别人\r\nlinux下生成的SSH key文件保存在中～/.ssh/id_rsa.pub\r\n怎么添加ssh keys\r\n\r\n进入Github Settings SSH and GPG keys页面SSH and GPG keys\r\n(github.com)\r\n选择New SSH Key\r\n自定义title，并将你的id_rsa.pub的全部内容复制到Key中，确定即可\r\n\r\n添加完ssh\r\nkeys后，就可以在这台电脑上连接你的GitHub仓库了\r\n","slug":"Softwares/Git/从零开始的github blog","date":"2023-03-07T16:14:45.960Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"git分区\r\ngit一共有三个分区：\r\n工作区、暂存区和版本库\r\ngit的初始化（自报家门）\r\n\r\ngit config --global user.name \"YOUR NAME\"\r\ngit config --global user.email \"email@example.com\"\r\n\r\n用git创建仓库(repository)\r\n\r\nmkdir repositoryExample（这只是生成了一个文件夹）\r\n\r\n进入仓库（文件夹）\r\n\r\ncd repositoryExample\r\n\r\n初始化仓库（仓库的正式建立）\r\n\r\ngit init\r\n\r\n注意：此举会在当前目录下生成一个.git文件夹，但是这是一个以.开头的隐藏文件夹，所以使用ls命令无法直接看到，你可以使用ls\r\n-a命令来查看这类隐藏的文件夹\r\n用git来记录变化\r\n\r\ngit add fileName\r\n可以使用git status -s来查看更改**\r\n\r\n-A, --all add changes from all tracked and untracked files\r\n-u, --update update tracked files\r\n\r\ngit diff\r\n使用diff来查看已经做出的变化\r\n用git diff HEAD --\r\nfilename来比较远程仓库和本地的文件的区别\r\ngit commit -m \"本次提交的说明\"\r\n\r\n\r\n\r\n\r\n**或者使用git commit -a命令来跳过add直接提交所有变动\r\n关于历史提交\r\n\r\n使用 git log 或者 git log --pretty=oneline 来查看\r\n使用 git reset + log中的每行前的如 d5d7e...版本号 来还原\r\ngit中，有 git reflog 命令来记录用户的每一次操作\r\ngit管理的是修改而不是文件！\r\n\r\n关于文件更改\r\n\r\ngit checkout -- filename //舍弃工作区的所有更改\r\n关于这个命令\r\n​ 如果 filename\r\n文件还没有被提交到暂存区（仍然停留在工作区），则git会立即撤销所有更改——即使已经在文件中保存\r\n​ 如果 filename\r\n文件已经用add命令提交过一次了，则git会将它重置为刚刚提交到缓存区中的状态\r\ngit reset HEAD filename\r\n通过这个命令，我们可以将已经提交到暂存区的 filename\r\n文件回退到工作区\r\n\r\n文件删除\r\n\r\ngit rm filename\r\n注意:\r\n删除文件也是一个修改，必须要提交才会被记录，但这里没有必要add，可以直接commit\r\ngit checkout -- filename\r\n又见面了，再次用此命令来恢复文件，因为它的作用其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\r\n\r\ngit\r\nrm - How do I delete a file from a Git repository? - Stack\r\nOverflow\r\n远程管理\r\n\r\n显示所有远程仓库：git remote -v\r\n添加远程版本库：git remote add [name] [url]\r\n删除远程仓库：git remote remove origin\r\n修改仓库名：git remove rename old_name new_name\r\n\r\n向远程库提交\r\n\r\ngit push -u [推送的主机] [推送的分支] ——例：origin main\r\n删除主机的分支：git push origin --delete master\r\n\r\n从远程库克隆\r\n\r\ngit clone git@项目仓库地址\r\n从远程获取代码并合并本地版本：\r\n规范：git pull  :\r\n示例：git pull origin master:brantest\r\n​ ——将远程主机 origin 的 master 分支拉取过来，与本地的 brantest\r\n分支合并\r\n\r\n分支\r\n\r\n创建并切换到新分支：git checkout -b dev 或 git switch -c dev\r\n切换分支：git checkout dev 或 git switch master\r\n查看分支：git branch\r\n把分支合并到main上：git merge dev\r\n删除分支：git branch -d dev\r\n将分支推送到远程仓库：git push origin bunjie（同理呀！）\r\n\r\ngit push --set-upstream origin master\r\nssh-keygen -t rsa\r\nSet Proxy\r\n一文让你了解如何为\r\nGit 设置代理 - Eric (ericclose.github.io)\r\n","slug":"Softwares/Git/Git Commmand","date":"2023-03-07T16:14:45.958Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"DOCKER QUICK GUIDE\r\n忘记教程，即刻上手docker\r\n主要依赖：\r\n\r\nPython3.10\r\nflask\r\ngunicorn\r\n\r\n项目内容：\r\nflask官方基础教程结果，见link1页面内的Tutorial部分。其中的主要内容为：\r\n\r\n了解flask项目的basic layout\r\n建立工厂函数\r\n建立并操作数据库\r\n了解 flask: blueprint 功能\r\n了解 flask: template 功能\r\n项目可安装化\r\n基础测试\r\n部署\r\n\r\nlink:\r\n\r\nWelcome to\r\nFlask — Flask Documentation (2.2.x) (palletsprojects.com)\r\nDocker Hub\r\nFlask + Docker\r\n无脑部署新手教程 - 知乎 (zhihu.com)\r\n\r\n","slug":"Softwares/docker/quick_guide","date":"2023-03-07T16:14:45.946Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"网页监管工具——uptimebot\r\nLink：\r\n\r\nUptimeRobot: Free Website\r\nMonitoring Service\r\n\r\n","slug":"Softwares/uptimerobot","date":"2023-03-07T16:14:45.876Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Windows\r\n命令 | Microsoft Docs\r\n搜索文件中文本的模式\r\n| findstr\n# https:&#x2F;&#x2F;docs.microsoft.com&#x2F;zh-cn&#x2F;windows-server&#x2F;administration&#x2F;windows-commands&#x2F;findstr\r\n搜索文件中的文本字符串，并显示包含指定字符串的文本行\r\n| find\n# https:&#x2F;&#x2F;docs.microsoft.com&#x2F;zh-cn&#x2F;windows-server&#x2F;administration&#x2F;windows-commands&#x2F;find\r\n显示当前进程\r\ntasklist\n\r\n杀死某个进程\r\ntaskkill &lt;exe程序名&#x2F;PID&gt;\n\r\n历史命令记录\r\n# PowerShell获取当前会话中输入的命令\nhistory\nget-history\n# PowerShell获取当前会话中输入的命令的全部信息\nGet-History | Format-List -Property *\n# CMD获取当前会话中输入的命令\ndoskey &#x2F;h\n\n# 查阅总的命令历史记录：\ncat %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\n\n# https:&#x2F;&#x2F;docs.microsoft.com&#x2F;zh-cn&#x2F;powershell&#x2F;module&#x2F;Microsoft.PowerShell.Core&#x2F;about&#x2F;about_history?view&#x3D;powershell-7.2\r\n生成随机数\r\n# cmd窗口直接输入：\nset &#x2F;a %random%%10+1\n# bat文件：\nset &#x2F;a rnd&#x3D;%random%%%10+1\necho %rnd%\n\n# PowerShell\n# 使用内置函数：Get-Random\nGet-Random\n# This command gets a random integer between 0 (zero) and Int32.MaxValue.\nGet-Random -Maximum 100\n# This command gets a random integer between 0 (zero) and 99.\nGet-Random -Minimum 10.7 -Maximum 20.93\n# This command gets a random floating-point number greater than or equal to 10.7 and less than 20.92.\nGet-Random -InputObject 1, 2, 3, 5, 8, 13 -Count 3 \n# This command gets three randomly selected numbers in random order from the array.\r\narp -\r\n","slug":"Softwares/Windows/一些PowerShell·CMD命令","date":"2023-03-07T16:14:45.861Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"如何在 Windows 中启用详细登录消息？\r\n麻烦up置顶一下，一键添加的cmd命令： reg add HKLM/v VerboseStatus /t\r\nREG_DWORD /d 1\r\n有用！不过要提权顺便科普下： 右键单击 System\r\n项，选择“权限”，然后选择“高级”-&gt;“添加”-&gt;\"选择主体\"-&gt;输入\"ev\"然后“确定”-&gt;勾选“完全控制”然后一路确定即可\r\n组策略里启用:非常详细的信息。就行了\r\n组策略→管理模板→所有设置→输入“显示” 会自动跳转\r\n使用组策略也可以\r\n依次找到“计算机配置-管理模板-系统”，在右侧找到“显示非常详细的状态信息”然后，在弹出的对话窗口中选择“已启用”选项，点击“应用→确定”就OK了\r\nHKEY_LOCAL_MACHINE\r\n","slug":"Softwares/Windows/windows 显示详细登录消息","date":"2023-03-07T16:14:45.856Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Windows Terminal\r\n创建新窗口（控制台）\r\nctrl + shift + 对应窗口预设的数字\r\n快速切换窗口\r\nctrl + alt + 窗口顺序对应数字\r\n横向打开相同的控制台\r\nalt + shift + +/=\r\n纵向打开相同的控制台\r\nalt + shift + -/_\r\n-&gt;\r\n在3、4中创建订单新控制台仍隶属于原控制台，且默认是powershell，对于这些子控制台，有这些命令：\r\n\r\n（本标签内）切换控制台：alt + 方向键\r\n（）控制控制台尺寸：shift + alt + 方向键\r\n\r\n关闭当前控制台\r\nctrl + shift + w\r\n","slug":"Softwares/Windows/Windows Terminal快捷键","date":"2023-03-07T16:14:45.854Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"介绍——什么是PowerShell？\r\n什么是\r\nPowerShell？ - PowerShell | Microsoft Docs\r\n\r\nPowerShell和CMD的关系：\r\n\r\n在Windows下，简单的说，PowerShell可以近似认为是cmd的超集，换句话说，PowerShell几乎兼容所有cmd命令。cmd能做的事情，PowerShell都能做，但是PowerShell还能额外做许多cmd不能做的活。\r\n\r\n\r\n（来源：PowerShell 命令称为 cmdlet（读作 command-let）。 除了 cmdlet\r\n外，使用 PowerShell 还可以在系统上运行任何可用命令。）\r\n\r\n但是PowerShell对于某些CMD中某些命令有更加严格的限制，比如你用npm全局安装的包，默认不能在Powershell上面直接运行\r\n！！！！存在部分CMD命令无法直接在PowerShell上运行！！！！\r\nPowershell特点：\r\n\r\nPowerShell 是新式命令 shell，其中包括其他常用 shell 的最佳功能。\r\n与大多数仅接受并返回文本的 shell 不同，PowerShell 接受并返回 .NET\r\n对象\r\n是一种脚本语言shell，可以用于自动执行系统管理。如和office套件联动\r\nPowerShell跨平台\r\n\r\n\r\n","slug":"Softwares/Windows/PowerShell","date":"2023-03-07T16:14:45.849Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\n","slug":"Softwares/Windows/Bat脚本编写","date":"2023-03-07T16:14:45.847Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"你的 home 目录下藏着很多隐藏文件，而.bashrc就是其中之一\r\n.bashrc是什么及修改.bashrc能做到什么\r\n如果你运行一个基于 Unix 或者类 Unix 的操作系统，bash\r\n很有可能是作为默认终端被安装的。虽然存在很多不同的 shell，bash\r\n却是最常见或许也是最主流的。同时，bash 在每次启动时都会加载 .bashrc\r\n文件的内容。每个用户的 home 目录都有这个 shell\r\n脚本。它用来存储并加载你的终端配置和环境变量。\r\n也就是说，一般情况下，我们能通过修改.bashrc文件来定制我们当前账户的bash\r\n修改\r\n为命令设置别名：alias\r\nalias ll &#x3D; &quot;ls -lha&quot;\r\n函数:\r\nfunction_name () &#123;\n\tcommand_1\n\tcommand_2\n&#125;\n\n# md () &#123;\n#   mkdir -p $1\n#   cd $1 \n# &#125;\r\n什么是\r\n.bashrc，为什么要编辑 .bashrc？ | Linux 中国 - 知乎 (zhihu.com)\r\n更多的隐藏文件？\r\n补习：linux系统变量的类型\r\n按变量的生存周期划分：\r\n\r\n永久的：需要修改配置文件，变量永久生效。\r\n临时的：使用export命令声明即可，变量在关闭shell时失效。\r\n\r\n在配置永久的环境变量时，又可以按照作用范围分为：\r\n\r\n用户环境变量\r\n系统环境变量。\r\n\r\n系统环境变量对所有系统用户都有效，用户环境变量仅仅对当前的用户有效。\r\n设置环境变量\r\n直接运行export命令定义变量\r\n在shell的命令行下直接使用[export 变量名=变量值]\r\n定义变量。该变量只在当前的shell（BASH）或其子shell（BASH）下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。\r\n修改系统环境变量\r\n系统环境变量一般保存在下面的文件中\r\n&#x2F;etc&#x2F;profile\r\n全局（公有）配置，不管是哪个用户，登录时都会读取该文件。\r\n&#x2F;etc&#x2F;bash.bashrc\r\n它也是全局（公有）的 bash执行时，不管是何种方式，都会读取此文件。\r\n&#x2F;etc&#x2F;environment\r\n不要轻易修改此文件\r\n修改用户环境变量\r\n用户环境变量通常被存储在下面的文件中：\r\n~&#x2F;.profile\r\n若bash是以login方式执行时，读取~/.bash_profile，若它不存在，则读取~/.bash_login，若前两者不存在，读取~/.profile。\r\n~&#x2F;.bash_profile 或者~.&#x2F;bash_login\r\n若bash是以login方式执行时，读取/.bash_profile，若它不存,则读取/.bash_login，若前两者不存在，读取\r\n~/.profile。\r\n只有bash是以login形式执行时，才会读取.bash_profile，Unbutu默认没有此文件，可新建。\r\n通常该配置文件还会配置成去读取~/.bashrc。\r\n~&#x2F;.bashrc\r\n当bash是以non-login形式执行时，读取此文件。若是以login形式执行，则不会读取此文件。\r\n~/.bash_profile是交互式、login 方式进入 bash 运行的 ~/.bashrc\r\n是交互式 non-login 方式进入 bash\r\n运行的通常二者设置大致相同，所以通常前者会调用后者。\r\n修改环境变量配置文件\r\n如想将一个路径加入到环境变量（例如$PATH）中，可以像下面这样做（修改/etc/profile）：\r\nsudo vi /etc/profile 以环境变量PATH为例子，环境变量的声明格式：\r\nPATH&#x3D;$PATH:PATH_1:PATH_2:PATH_3:------:PATH_N \nexport PATH\r\n你可以自己加上指定的路径，中间用冒号隔开。环境变量更改后，在用户下次登陆时生效，如果想立刻生效，则可执行下面的语句：\r\n$source &#x2F;etc&#x2F;profile\r\n环境配置文件的区别\r\nprofile、\r\nbashrc、.bash_profile、 .bashrc介绍\r\nbash会在用户登录时，读取下列四个环境配置文件：\r\n全局环境变量设置文件：&#x2F;etc&#x2F;profile、&#x2F;etc&#x2F;bashrc。 \n用户环境变量设置文件：~&#x2F;.bash_profile、~&#x2F;.bashrc。\r\n读取顺序：① /etc/profile、② ~/.bash_profile、③ ~/.bashrc、④\r\n/etc/bashrc。\r\n&#x2F;etc&#x2F;profile：此文件为系统的每个用户设置环境信息，系统中每个用户登录时都要执行这个脚本，如果系统管理员希望某个设置对所有用户都生效，可以写在这个脚本里，该文件也会从&#x2F;etc&#x2F;profile.d目录中的配置文件中搜集shell的设置。 \n~&#x2F;.bash_profile：每个用户都可使用该文件设置专用于自己的shell信息，当用户登录时，该文件仅执行一次。默认情况下，他设置一些环境变量，执行用户的.bashrc文件。 \n~&#x2F;.bashrc：该文件包含专用于自己的shell信息，当登录时以及每次打开新shell时，该文件被读取。 \n&#x2F;etc&#x2F;bashrc：为每一个运行bash shell的用户执行此文件，当bash shell被打开时，该文件被读取。\r\n.bashrc和.bash_profile的区别\r\n.bash_profile会用在登陆shell， .bashrc 使用在交互式非登陆 shell\r\n。简单说来，它们的区别主要是.bash_profile是在你每次登录的时候执行的；.bashrc是在你新开了一个命令行窗口时执行的。\r\n当通过控制台进行登录（输入用户名和密码）：在初始化命令行提示符的时候会执行.bash_profile\r\n来配置你的shell环境。但是如果已经登录到机器，在Gnome或者是KDE也开了一个新的终端窗口（xterm），这时，.bashrc会在窗口命令行提示符出现前被执行。当你在终端敲入/bin/bash时.bashrc也会在这个新的bash实例启动的时候执行。\r\n建议\r\n大多数的时候你不想维护两个独立的配置文件，一个登录的一个非登录的shell。当你设置PATH时，你想在两个文件都适用。可以在.bash_profile中调用.bashrc，然后将PATH和其他通用的设置放到.bashrc中。\r\n要做到这几点，添加以下几行到.bash_profile中：\r\nif [ -f ~&#x2F;.bashrc ]; then\n    . ~&#x2F;.bashrc\nfi\r\n现在，当你从控制台登录机器的时候，.bashrc就会被执行。\r\n常用的环境变量\r\n\r\n\r\n\r\ncommand?\r\nDescription\r\n\r\n\r\n\r\n\r\nBASH\r\nBash Shell的全路径\r\n\r\n\r\nCDPATH\r\n用于快速进入某个目录。\r\n\r\n\r\nPATH\r\n决定了shell将到哪些目录中寻找命令或程序\r\n\r\n\r\nHOME\r\n当前用户主目录\r\n\r\n\r\nHISTSIZE\r\n历史记录数\r\n\r\n\r\nLOGNAME\r\n当前用户的登录名\r\n\r\n\r\nHOSTNAME\r\n指主机的名称\r\n\r\n\r\nSHELL\r\n当前用户Shell类型\r\n\r\n\r\nLANGUGE\r\n语言相关的环境变量，多语言可以修改此环境变量\r\n\r\n\r\nMAIL\r\n当前用户的邮件存放目录\r\n\r\n\r\nPS1\r\n基本提示符，对于root用户是#，对于普通用户是$\r\n\r\n\r\n\r\nReference\r\n[0] Linux的环境变量.bash_profile\r\n.bashrc profile文件 - lvmenghui001 - 博客园 (cnblogs.com)\r\n[1] /etc/profile、/etc/bashrc、/.bash_profile、/.bashrc\r\nhttp://blog.chinaunix.net/uid-26435987-id-3400127.html [2]\r\nLinux如何修改env看到的环境变量？ .bashrc和.bash_profile区别\r\nhttp://blog.csdn.net/xifeijian/article/details/13355031 [3]\r\nlinux环境变量，bashrc与bashprofile\r\nhttp://blog.sina.com.cn/s/blog_43e5ad4e0101ei43.html\r\n","slug":"Softwares/Linux/用户根目录下的隐藏文件","date":"2023-03-07T16:14:45.838Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"boot\r\n系统引导加载时的各文件\r\netc\r\n配置文件\r\nmnt\r\n挂载目录\r\nroot\r\n超级用户主目录\r\nusr\r\n存放系统应用程序\r\nlost+found\r\n系统非正常关机时存放一些不正常的文件\r\nopt\r\n额外安装软件的存放目录\r\nvar\r\n存放运行时需要改变数据的文件，以及各种服务的日志文件\r\nbin\r\n存放二进制可执行文件，系统所需的可执行文件\r\nsbin\r\n存放系统管理的二进制可执行文件\r\ndev\r\n设备文件\r\nlib\r\n存放程序运行时所需要的共享动态库及内核模块\r\nproc\r\n虚拟文件目录，内存映射文件信息\r\ntmp\r\n临时文件\r\nlib64\r\nmedia\r\nrun\r\nsys\r\nsrv\r\ndata\r\nhome\r\n","slug":"Softwares/Linux/Linux学习-系统目录","date":"2023-03-07T16:14:45.836Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"清空系统历史命令\r\n1. history -c\r\n该命令只清空本次登入的所有输出命令，且不清空.bash_history文件\r\n所以下次登陆后，旧命令还将出现，历史命令是存在于当前用户根目录下的./bash_history文件。\r\n2. echo &gt; $HOME/.bash_history\r\n每个用户根目录下都有一个.bash_history文件用于保存历史命令，当每次注销时，本次登陆所执行的命令将被写入该文件。所以可以清空该文件，下次登陆后上次保存的命令将消失，清空效果将在下次登陆生效。\r\n3. 利用设备黑洞\r\n对history文件执行文本清空\r\ncat &#x2F;dev&#x2F;null &gt; &#x2F;root&#x2F;.bash_history\r\n清空文件内容：\r\ncat &#x2F;dev&#x2F;null &gt; [yourfilename]\r\n","slug":"Softwares/Linux/Linux学习-系统日志","date":"2023-03-07T16:14:45.834Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"用户\r\nIn Linux, there are three types of owners: user,\r\ngroup, and others .\r\nLinux User\r\nA user is the default owner and creator of the file. So this user is\r\ncalled owner as well.\r\n\r\nuser == owner\r\n\r\nLinux Group\r\nA user-group is a collection of users. Users that belonging to a\r\ngroup will have the same Linux group permissions to access a file/\r\nfolder.\r\nYou can use groups to assign permissions in a bulk instead of\r\nassigning them individually. A user can belong to more than one group as\r\nwell.\r\nOther\r\nAny users that are not part of the user or group classes belong to\r\nthis class.\r\n更换用户\r\n创建一个全新的用户账号：\r\nuseradd + passwd\r\n更换：\r\nsu命令：\r\nsu root\nsu - root # 不一样！\n# &quot;su r&quot;只是切换了用户，要想连shell环境一起切换就用后边的&quot;su - root&quot;。\r\n文件\r\n文件分类\r\nLinux共有七类文件\r\n普通文件类型 [-]:\r\nLinux中最多的一种文件类型, 包括\r\n纯文本文件(ASCII)；二进制文件(binary)；数据格式的文件(data);各种压缩文件。其第一个属性为\r\n[-]\r\n目录文件 [d]:\r\n就是目录， 能用 # cd 命令进入的。第一个属性为 [d]，例如\r\n[drwxrwxrwx]\r\n块设备文件 [b]:\r\n块设备文件就是存储数据以供系统存取的接口设备，简单而言就是硬盘。\r\n例如一号硬盘的代码是 /dev/hda1等文件。第一个属性为 [b]\r\n字符设备 [c]:\r\n字符设备文件即串行端口的接口设备，例如键盘、鼠标等等。第一个属性为\r\n[c]\r\n套接字文件 [s]:\r\n这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信。\r\n第一个属性为 [s]，最常在 /var/run目录中看到这种文件类型\r\n管道文件 [p]:\r\nFIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。\r\nFIFO是first-in-first-out(先进先出)的缩写。第一个属性为 [p]\r\n链接文件 [l]:\r\n类似Windows下面的快捷方式。第一个属性为 [l]，例如 [lrwxrwxrwx]\r\nHow to\r\nChange File Permissions and Ownership in Linux\r\nchmod 与 chown的区别\r\nchmod - Used for Changing Permissions 用于改变\r\n具体文件或目录 之于某个用户或用户组的 权限关系: permission\r\nchown - Used for Changing Ownership 用与改变\r\n具体文件或目录 之于某个用户或用户组的 归属关系: ownership\r\nCHMOD PART\r\nSyntax\r\nchmod [-options] [permissions] [filename]\r\n\r\npermissions can be read,\r\nwrite, execute or a\r\ncombination of them.\r\nfilename is the name of the file for which the\r\npermissions need to change. This parameter can also be a list if files\r\nto change permissions in bulk.\r\n\r\nWe can change permissions using two modes:\r\n\r\nSymbolic mode: this method uses symbols like\r\nu, g, o to represent users,\r\ngroups, and others. Permissions are represented as r, w, x\r\nfor read write and execute, respectively. You can modify permissions\r\nusing +, - and =.\r\nAbsolute mode: this method represents permissions\r\nas 3-digit octal numbers ranging from 0-7.\r\n\r\nExample\r\nchmod u+x mymotd.sh\n# To add execution rights (x) to user(or-&gt; the file owner)(u) using symbolic mode, we can use the command above;\n\nchmod 777 test.txt\n# 把三个分区看作三段被拼接的二进制\n# 111 -&gt; 7, rwx, u, g, o;\r\nCHOWN PART\r\nSyntax &amp; Example\r\nchown [-options] [user:group] [filename]&#x2F;[path]\n\nchown -R root &#x2F;root&#x2F;test # 改变文件夹的归属\nchown :admins &#x2F;opt&#x2F;script # To change group ownership, we can use chown by preceding the group name by a colon &#39;:&#39;\r\nLinux中chown和chmod的区别和用法（转）\r\n- EasonJim - 博客园 (cnblogs.com)\r\nLinux\r\nchmod and chown – How to Change File Permissions and Ownership in Linux\r\n(freecodecamp.org)\r\n","slug":"Softwares/Linux/Linux学习-文件与权限","date":"2023-03-07T16:14:45.829Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"ctrl+alt+t: open a new terminal\r\n","slug":"Softwares/Linux/Linux学习-快捷键与配置","date":"2023-03-07T16:14:45.826Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"apt切换国内源\r\nlinux\r\n系统默认使用的软件源都是国外源，国内访问速度过慢，所以改为国内镜像源\r\n\r\nsudo su进入root 模式\r\nvim /etc/apt/sources.list编辑软件源配置文件 \r\n按 i 进入 vim\r\n的编辑模式，用#将deb一行的内容注释掉，然后换成国内源地址,这里我直接用阿里云源\r\n\r\n官方源\ndeb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main non-free contrib\ndeb-src http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main non-free contrib\n中科大源\ndeb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main non-free contrib\ndeb-src http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kali kali-rolling main non-free contrib\n阿里云源\ndeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main non-free contrib\ndeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kali kali-rolling main non-free contrib\n清华大学源\ndeb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;kali kali-rolling main contrib non-free\ndeb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;kali kali-rolling main contrib non-free\n浙大源\ndeb http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;kali kali-rolling main contrib non-free\ndeb-src http:&#x2F;&#x2F;mirrors.zju.edu.cn&#x2F;kali kali-rolling main contrib non-free\n东软大学源\ndeb http:&#x2F;&#x2F;mirrors.neusoft.edu.cn&#x2F;kali kali-rolling&#x2F;main non-free contrib\ndeb-src http:&#x2F;&#x2F;mirrors.neusoft.edu.cn&#x2F;kali kali-rolling&#x2F;main non-free contrib\n新加坡kali源\ndeb http:&#x2F;&#x2F;mirror.nus.edu.sg&#x2F;kali&#x2F;kali&#x2F; kali main non-free contrib\ndeb-src http:&#x2F;&#x2F;mirror.nus.edu.sg&#x2F;kali&#x2F;kali&#x2F; kali main non-free contrib\n163 Kali源\ndeb http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian wheezy main non-free contrib\ndeb-src http:&#x2F;&#x2F;mirrors.163.com&#x2F;debian wheezy main non-free contrib\r\n 之后 Esc，然后 :wq 保存退出即可 \\4.\r\napt-get update更新索引 \\5.\r\napt-get upgrade更新软件\r\n","slug":"Softwares/Linux/Linux学习-apt切换国内服务","date":"2023-03-07T16:14:45.820Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"killall -9 xeyes\r\nLinux中误删/root目录恢复方法\r\n- alisapine - 博客园 (cnblogs.com)\r\n","slug":"Softwares/Linux/Linux 花里胡哨","date":"2023-03-07T16:14:45.817Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Kernal\r\nThe Linux Kernel\r\nArchives - Releases\r\nLinux内核 -\r\n维基百科，自由的百科全书 (wikipedia.org)\r\n\r\nKernal团队所长期维护的内核并不一定和当前分发版内“长期维护”的内核相同\r\n\r\n\r\nMany Linux distributions provide their own \"longterm maintenance\"\r\nkernels that may or may not be based on those maintained by kernel\r\ndevelopers. These kernel releases are not hosted at kernel.org and\r\nkernel developers can provide no support for them.\r\n\r\n版本号解读：\r\n# uname -r\n5.6.19-300.fc32.x86_64\r\n\r\n5 –内核版本\r\n6 –重大修订\r\n19 –轻微修订\r\n300 –错误修复\r\n\r\n更多内容随机器而定，本处是X86架构的64位fc32系统\r\n","slug":"Softwares/Linux/Kernal","date":"2023-03-07T16:14:45.814Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"apt\r\n什么是apt\r\napt（Advanced Packaging Tool）基于 DEB 包管理，是一个常见于 Debian 和\r\nUbuntu 中的软件包管理器，也用于 Kali 等系统中\r\n对应着dpkg\r\napt和apt-get的关系\r\n虽然有些微小的差异，但也可以认为：apt 是\r\napt-get 的超集，它包含\r\napt-get、apt-cache 和 apt-config\r\n中最常用命令选项的集合。\r\n一般的应用场景下 apt 和 apt-get\r\n可以互用\r\n不过也确实可以作一些区分：\r\n\r\nWARNING : apt does not have a stable CLI interface.\r\n\r\n编写高可靠需求的自动化脚本时，使用apt-get；其余时候可以使用更简练的apt命令\r\n常用命令\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncommand\r\ndescription\r\n\r\n\r\n\r\n\r\nsudo apt update\r\n列出所有可更新的软件清单命令\r\n\r\n\r\nsudo apt upgrade\r\n升级软件包\r\n\r\n\r\napt list --upgradeable\r\n列出可更新的软件包及版本信息\r\n\r\n\r\nsudo apt full-upgrade\r\n升级软件包，升级前先删除需要更新软件包\r\n\r\n\r\nsudo apt install \r\n安装指定的软件命令\r\n\r\n\r\nsudo apt install   \r\n安装多个软件包\r\n\r\n\r\nsudo apt update \r\n更新指定的软件命令\r\n\r\n\r\nsudo apt show \r\n显示软件包具体信息,例如：版本号，安装大小，依赖关系等等\r\n\r\n\r\nsudo apt remove \r\n删除软件包命令\r\n\r\n\r\nsudo apt autoremove\r\n清理不再使用的依赖和库文件\r\n\r\n\r\nsudo apt purge \r\n移除软件包及配置文件\r\n\r\n\r\nsudo apt search &lt;keyword&gt;\r\n从软件源中查找软件包\r\n\r\n\r\napt list --installed\r\n列出所有已安装的包\r\n\r\n\r\napt list --all-versions\r\n列出所有已安装的包的版本信息\r\n\r\n\r\napt help\r\n帮助\r\n\r\n\r\n\r\n\r\napt-get update：是同步/etc/apt/sources.list和/etc/apt/sources.list.d中列出的软件源的软件包版本，这样才能获取到最新的软件包。\r\napt-get upgrade：是更新已安装的所有或者指定软件包，升级之到本地索引中的对应版本。因此，在执行\r\nupgrade\r\n之前一般要执行update，这样安装的才是最新的版本。\r\n\r\n编辑source.list文件\r\n以 ubuntu20.04lts 为例\r\n在使用apt时，我们需要维护一个存储着源地址信息的文本文件：/etc/apt/source.list，\r\napt可以通过这些地址来查询软件最新版本并通过他们进行更新\r\nsource.list内容(已去除部分注释)：\r\ndeb http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal main restricted\n# deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal main restricted\ndeb http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal-updates main restricted\n# deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal-updates main restricted\ndeb http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal universe\n# deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal universe\ndeb http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal-updates universe\n# deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal-updates universe\ndeb http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal multiverse\n# deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal multiverse\ndeb http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal-updates multiverse\n# deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal-updates multiverse\ndeb http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal-backports main restricted universe multiverse\n# deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; focal-backports main restricted universe multiverse\ndeb http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu&#x2F; focal-security main restricted\n# deb-src http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu&#x2F; focal-security main restricted\ndeb http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu&#x2F; focal-security universe\n# deb-src http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu&#x2F; focal-security universe\ndeb http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu&#x2F; focal-security multiverse\n# deb-src http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu&#x2F; focal-security multiverse\r\n解析规则：\r\n总的来说，解析list时遵循以下规则：\r\nuri + \"dists\" + ubuntu版本信息 + 索引分类 +\r\n仓库类型\r\n\r\n仓库类型：\r\n\r\ndeb： 二进制包仓库\r\ndeb-src： 二进制包的源码库\r\n\r\nuri：\r\n\r\nURI：库所在的地址，可以是网络地址，也可以是本地的镜像地址\r\n\r\n版本信息：\r\n\r\n就是当前Ubuntu对应的版本代号。可以用命令lsb_release\r\n-sc来查看当前系统的代号。\r\n20.04lts的代号是 focal，所以所有的uri后都会有\r\nfocal\r\n具体则有五种后缀：\r\n\r\n无后缀 - 一般不考虑的随发布的source\r\nSecurity - Important Security Updates.\r\nUpdates - Recommended Updates.\r\nProposed - Pre-released Updates.\r\nBackports - Unsupported Updates.\r\n\r\n\r\n索引分类：\r\n\r\ncomponents： 软件的性质（free或non-free等）\r\n共有四种：\r\n\r\nmain: 完全的自由软件。\r\nrestricted: 不完全的自由软件。\r\nuniverse: Ubuntu官方不提供支持与补丁，全靠社区支持。\r\nmultiverse：非自由软件，完全不提供支持和补丁。\r\n\r\n例如，现有一个源配置如下：\r\n\r\ndeb http://archive.ubuntu.com/ubuntu/ focal main restricted\r\n\r\n那么，解析出的结果为：\r\nhttp://cn.archive.ubuntu.com/ubuntu/dists/focal/main\r\nhttp://cn.archive.ubuntu.com/ubuntu/dists/focal/restricted\r\n\r\n\r\nimage-20220128141631953\r\n\r\n\r\n\r\nimage-20220128141726663\r\n\r\ndeb-src会对应 source，deb\r\n则会对应 binary-xxx，xxx 就是\r\narch，比如 i386 (32位)或是 amd64\r\n(64位)。\r\n如需指定 arch，则对应：\r\n\r\ndeb [arch=amd64] http://cn.archive.ubuntu.com/ubuntu/ focal main\r\n\r\n会指向：\r\n\r\nhttp://cn.archive.ubuntu.com/ubuntu/dists/focal/main/binary-amd64/\r\n\r\n编辑 /etc/apt/sources.list.d/\r\n目录\r\n和sources.list功能一样的是/etc/apt/sources.list.d目录\r\n在此目录下，我们可以随意定制我们所指定的软件源，只要以\r\n.list 结尾即可\r\nsources.list.d 目录下的 .list\r\n文件为软件源的管理提供了全新的思路，我们亦可以用此来安装第三方的软件。\r\n示例：\r\n用 /etc/apt/sources.list.d/google-chrome.list 文件来暂存\r\ngoogle chrome 的源\r\n&gt;&gt; cat google-chrome.list\ndeb http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;chrome&#x2F;deb&#x2F; stable main\r\nyum\r\n介绍：\r\nyum(Yellow dog Updater, Modified)基于 RPM 包管理，是一个应用在 Fedora\r\n和 RedHat 系Linux中的软件包管理器。\r\n对应着rpm\r\n常用命令：\r\n\r\n\r\n\r\ncommand\r\ndescription\r\n\r\n\r\n\r\n\r\nyum search\r\n使用 yum (在源内)查找软件包\r\n\r\n\r\nyum install &lt;package_name&gt;\r\n仅安装指定的软件命令\r\n\r\n\r\nyum update &lt;package_name&gt;\r\n仅更新指定的软件命令\r\n\r\n\r\nyum remove &lt;package_name&gt;\r\n删除软件包命令\r\n\r\n\r\nyum list\r\n列出(源内)所有可安装的软件包\r\n\r\n\r\nyum list updates\r\n列出所有可更新的软件包\r\n\r\n\r\nyum list installed\r\n列出所有已安装的软件包\r\n\r\n\r\nyum list extras\r\n列出所有已安装但不在 Yum Repository\r\n内的软件包\r\n\r\n\r\nyum info\r\n使用 YUM 获取软件包信息\r\n\r\n\r\nyum info updates\r\n列出所有可更新的软件包信息\r\n\r\n\r\nyum info installed\r\n列出所有已安装的软件包信息\r\n\r\n\r\nyum info extras\r\n列出所有已安装但不在 Yum Repository\r\n内的软件包信息\r\n\r\n\r\nyum provides\r\n列出软件包提供哪些文件\r\n\r\n\r\n\r\n修改yum源：\r\n\r\n进入yum源配置目录： cd &#x2F;etc&#x2F;yum.repos.d\r\n备份原配置文件：\r\n\r\nsudo mv CentOS-Base.repo CentOS-Base.repo.backup\r\n\r\n下载新配置文件：\r\n\r\nsudo wget -O CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo\n# http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo先找到对应系统，这里是centos7\n# 没有wget就用curl，一定要用就在mv前线下载wget\r\n\r\n清除缓存\r\n\r\nsudo yum clean all\nsudo yum makecache\r\n\r\n查看是否更新成功\r\n\r\nyum repolist\r\n\r\n更新所有软件\r\n\r\nyum update -y \r\n当然，我们也可以使用yum自带的插件——fastest-mirror\r\n\r\n\r\nimage-20220128150420505\r\n\r\n\r\nThe fastest mirror plugin is designed for use in repository\r\nconfigurations where you have more than 1 mirror in a repo\r\nconfiguration.\r\nAfter fastestmirror is installed, make sure that it is enabled.\r\nEdit the file /etc/yum/pluginconf.d/fastestmirror.conf\r\nand ensure that it contains the following lines:\r\n[main]\nverbose &#x3D; 0\nsocket_timeout &#x3D; 3\nenabled &#x3D; 1\nhostfilepath &#x3D; &#x2F;var&#x2F;cache&#x2F;yum&#x2F;timedhosts.txt\nmaxhostfileage &#x3D; 1\r\nTo exclude a specific mirror, TLD, or something in between, add an\r\n'exclude=' line to\r\n/etc/yum/pluginconf.d/fastestmirror.conf:\r\n[main]\n...\nexclude&#x3D;.gov, facebook, myspace, junk-mirror.com\r\nPackageManagement/Yum/FastestMirror\r\n- CentOS Wiki\r\n\r\ndnf——新一代的RPM软件包管理器：\r\nDNF 包管理器作为 YUM\r\n包管理器的升级替代品，它能自动完成更多的操作。\r\nDNF/zh-cn - Fedora\r\nProject Wiki\r\n一些对比\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n对比项\r\nrpm\r\nyum\r\ndpkg\r\napt\r\n\r\n\r\n\r\n\r\n系列\r\nRedHat系\r\nRedHat系\r\nDebian系\r\nDebian系\r\n\r\n\r\n区别\r\n包安装工具\r\n依赖管理工具\r\n包安装工具\r\n依赖管理工具\r\n\r\n\r\n查询已安装\r\nrpm -qa\r\nyum list installed\r\ndkpg -l\r\napt list –installed\r\n\r\n\r\n安装\r\nrpm -i package.rpm 或 rpm –ivh\r\nhttp://www.xxx.net/package.rpm\r\nyum install\r\ndpkg -i package.deb\r\napt install package\r\n\r\n\r\n更新\r\nrpm –U software.rpm\r\nyum update\r\n\r\napt upgrade\r\n\r\n\r\n移除软件包\r\nrpm -e [module1][module2]…\r\nyum remove\r\ndpkg -r package\r\napt remove package\r\n\r\n\r\n移除软件包及配置\r\n\r\n\r\ndpkg -P\r\napt purge package\r\n\r\n\r\n下载的包存放位置\r\n\r\n\r\n\r\n/var/cache/apt/archives\r\n\r\n\r\n软件安装默认位置\r\nrpm -ql\r\n\r\n\r\n/usr/share\r\n\r\n\r\n可执行文件位置\r\n/usr/bin\r\n\r\n\r\n/usr/bin\r\n\r\n\r\n配置文件位置\r\n/etc\r\n\r\n\r\n/etc\r\n\r\n\r\nlib文件位置\r\n/usr/lib\r\n\r\n\r\n\r\n\r\n\r\n使用手册\r\n/usr/share/doc\r\n\r\n\r\n\r\n\r\n\r\n帮助文档\r\n/usr/share/man\r\n\r\n\r\n\r\n\r\n\r\n更新\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nyum与apt的区别_qq_26182553的博客-CSDN博客_yum和apt\r\nRPM介绍\r\nRPM简介与基本使用\r\n- 大师兄啊哈 - 博客园 (cnblogs.com)\r\n","slug":"Softwares/Linux/compareAPTandYUM","date":"2023-03-07T16:14:45.799Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"尝试进行\r\n数据类型：\r\n整数？、字符串\r\n整数计算 - expr command (evaluate expressions)：\r\nexpr 1 + 2\r\n\r\nattention to the space\r\nuse \\ in your command to make a reverse, for example \\* and \\(\r\n\r\nn&#x3D;&#96;expr 1 \\* 2&#96;\necho $&#123;n&#125;\r\n相似的运算符有：(()), let, $[]\r\n\r\n(()):\r\n\r\nfor((i&#x3D;0;i&lt;num;i++))\ndo\n\t((total+&#x3D;i))\ndone\n# 该语句是对shell中算数及赋值运算的拓展，其中的所有表达式与c几乎一致，能够进行逻辑及四则运算\r\n\r\nlet:\r\n\r\ni&#x3D;0\nwhile((i&lt;&#x3D;5))\ndo\n\techo $i\n\tlet i++\ndone\n# 1. let无需间隔每个字符\n# 2. let\r\n\r\n$[]\r\n\r\necho $[3+5]\n# 1. $[]会对表达式进行整数运算计算\n# 2. $[]中的变量无需手动加上$，当然，你可以选择加上\n# 3. $[]中的数字无需间隔\n# 4. $[]不能单独使用，必须让计算结果有所指向\r\nString\r\n执行：\r\nsource, exec及shell运行的区别\r\nsh方式\r\nsource方式\r\nexec方式\r\n","slug":"Softwares/Linux/Bash shell","date":"2023-03-07T16:14:45.796Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"python 定时器\r\n在工作中，我们有时候会需要定时去做一些操作，比如凌晨更新远程代码，仓库每小时更新一次远程分支。这些操作，我们如果要人工进行，不仅要耗费精力，也更容易出错。\r\n如果一件事情，具有周期操作的特点，那么把这件事情设置为定时器操作，最合适不过。\r\n不借助第三方插件\r\n在不借助第三方插件的情况下，python内部可以有多种方式完成定时器操作，这里介绍一种简单易行的方法：\r\n利用threading.Timer方法创建一个定时器。\r\n一个简单的需求，程序启动5s后在屏幕上打印一个hello\r\n首先介绍一下threading.Timer的使用方法：\r\nclass threading.Timer(interval, function, args=[], kwargs={})\r\n创建一个timer，在interval秒过去之后，它将以参数args和关键字参数kwargs运行function\r\n。\r\n调用该函数回返回一个定时器的句柄，同时也获得了一个定时器实例。\r\n但是这时，定时器只是被创建，被没有启动，需要调用实例里面的\r\nstart（）方法启动定时器。如果在定时过程中想要取消该定时器，需要使用cancel()函数。\r\n那么这个小需求，就很简单了，代码可以这么写：\r\n\r\n定义一个定时时间到了，需要调用的函数，方便Timer函数回调，创建定时器实例，并设置定时时间，或得实例后，启动定时器。\r\n\r\n但是我们发现，定时器只执行了一次，如何要定时器，能够不停的执行下去呢？\r\n一种方法是利用while（True），不停的创建定时器并启动，显然这种方法显得笨拙，而且会一直占用线程。\r\n另外一种方法，就是在回调函数中，创建定时器并启动，形成递归调用。这里着重说下这种方法。\r\n\r\n运行效果如下：\r\n\r\n程序看起来很简单，通过在回调函数里面，重新创建定时器，来使得定时器能够一直工作。\r\n但是值得注意的是，定时器的句柄需要定义成为一个全局变量，这样做的好处是，创建的定时器进程和实例不会堆积，而是覆盖，避免不必要的内存占用。\r\n另外利用threading创建的定时器还有一个好处是，每一个定时器的创建都是在一个新的进程里面，所以定时器是不阻塞式的，比如，我们创建两个定时器，让它们分别打印不同的字符串：\r\n\r\n我们运行程序可以看到：\r\n\r\n\r\n结果\r\n\r\n这样一个简单的定时器就完成了！\r\n但是这并不是一个十分健壮的定时器，还有很多问题需要考虑，比如，如何终止定时器？在何时使用cancel（）？如果创建定时器实例失败，应该如何处理？等等。\r\n不过一个定时器的基本雏形已经完成了，剩下的就是根据需要添加不同的功能。\r\nSchedule插件\r\nschedule · PyPI\r\n","slug":"Language Learning/Python/计时器","date":"2023-03-07T16:14:45.658Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"python的is和==，java的==和equal（相等判断）\r\nPython判断对象是否相等（== 和\r\nis）\r\nPython中的对象包含三个基本要素，分别是：\r\n\r\nid：用来唯一标识一个对象，可以理解为内存地址；\r\ntype：标识对象的类型；\r\nvalue：对象的值；\r\n\r\n== ：比较两个对象的内容是否\r\n相等，即两个对象的 value 是否相等，无论 id\r\n是否相等，默认会调用对象的 __eq__()方法\r\nis： 比较的是两个对象是不是完全\r\n相同，即他们的 id 要相等。\r\n也就是说：如果 a is b 为 True，那么 a == b 也为True\r\n字符串比较\r\na &#x3D; &#39;hello&#39;\nb &#x3D; &#39;hello&#39;\nprint(a is b)\nprint(id(a))\nprint(id(b))\n# 执行结果：\nTrue\n1830826496176\n1830826496176\r\n数字比较\r\n先看一个有趣的现象\r\nIn[43]: a &#x3D; 256\nIn[44]: b &#x3D; 256\nIn[45]: a is b\nOut[45]: True\nIn[46]: id(a)\nOut[46]: 140711685177712\nIn[47]: id(b)\nOut[47]: 140711685177712\nIn[48]: a &#x3D; 257\nIn[49]: b &#x3D; 257\nIn[50]: a is b\nOut[50]: False\nIn[51]: id(a)\nOut[51]: 2097451837488\nIn[52]: id(b)\nOut[52]: 2097451837648\r\n为什么当 a,b为257的时候 a is b 为False呢？\r\nPython\r\n为了优化速度，使用了小整数对象池，避免为整数频繁申请和销毁内存空间。\r\n而Python 对小整数的定义是 [-5,\r\n256)，只有数字在-5到256之间它们的id才会相等，超过了这个范围就不行了，同样的道理，字符串对象也有一个类似的缓冲池，超过区间范围内自然不会相等了。\r\n需要注意的是这仅仅是在命令行中执行时才会有小整数缓存，而在文件中执行时，结果是不一样的，这是因为解释器做了一部分优化，如下：\r\nx &#x3D; 257\ny &#x3D; 257\nprint(id(x))\nprint(id(y))\nprint(x is y)\n# 执行结果：\n2177330411024\n2177330411024\nTrue\r\n元组比较\r\nx &#x3D; (1, 2, 3)\ny &#x3D; (1, 2, 3)\nprint(x is y)\nprint(id(x))\nprint(id(y))\n# 执行结果：\nTrue\n3014830376024\n3014830376024\r\n列表比较\r\nx &#x3D; [1, 2, 3]\ny &#x3D; [1, 2, 3]\nprint(x &#x3D;&#x3D; y)\nprint(x is y)\nprint(id(x))\nprint(id(y))\n# 执行结果：\nTrue\nFalse\n2968991650248\n2968991650760\r\n列表赋值比较\r\nx &#x3D; [1, 2, 3]\ny &#x3D; x\nprint(x is y)\nprint(id(x))\nprint(id(y))\n# 执行结果：\nTrue\n2294971781576\n2294971781576\r\n字典比较\r\nx &#x3D; &#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;b&quot;: 3&#125;\ny &#x3D; &#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;b&quot;: 3&#125;\nprint(x &#x3D;&#x3D; y)\nprint(x is y)\nprint(id(x))\nprint(id(y))\n# 执行结果：\nTrue\nFalse\n2522908527576\n2522908269848\r\n集合比较\r\nx &#x3D; set([1, 2, 3])\ny &#x3D; set([1, 2, 3])\nprint(x &#x3D;&#x3D; y)\nprint(x is y)\nprint(id(x))\nprint(id(y))\n# 执行结果：\nTrue\nFalse\n2080395955784\n2080414590120\r\n小结：\r\n可以看到，当 x, y 为字符串、整数，元组（都是不可变类型）的时候，如果\r\nx 和 y的值一样的话，x is y 则为True；\r\n然而为列表，字典，集合（都是可变类型）的时候，x is y\r\n为False，列表赋值的时候为True；\r\n与 == 相比，is\r\n的计算速度快——因为它不能重载，不用进行特殊的函数调用，少了函数调用的开销而直接比较两个整数\r\nid。而 a == b 则是等同于**a.__eq(b)。继承自 object 的\r\n****eq__** 方法比较两个对象的id，结果与 is\r\n一样。但是多数Python的对象会覆盖object的\r\n__eq__方法，而定义内容的相关比较，所以比较的是对象属性的值。\r\n在变量和单例值之间比较时，应该使用 is。目前，最常使用 is\r\n的地方是判断对象是不是 None\r\n关于python的可变类型不可变类型可参考：https://www.runoob.com/python/python-variable-types.html\r\npython的赋值、浅拷贝和深拷贝可参考：https://blog.csdn.net/bufengzj/article/details/90486991\r\nJava判断对象是否相等（==\r\n和equal）\r\njava中没有 is ,有 == 和 equal。。\r\n==：比较两个变量本身的值，即两个对象在内存中的首地址（类似也就是和python的\r\nis ）；\r\nequals：比较变量所包含的内容是否相同（类似也就是和python的\r\n== ）；\r\njava 具体参考：https://www.cnblogs.com/weibanggang/p/9457757.html\r\n","slug":"Language Learning/Python/相等判断","date":"2023-03-07T16:14:45.652Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"二维数组的定义\r\n创建一个二维数组？还是一个n*n的二维数组？\r\n1. 直接定义：\r\na &#x3D; [[]]\r\n2.众多间接定义？\r\na.直接地间接创建\r\na&#x3D;[]\narrays&#x3D;[a*3]\r\n注意！这里的arrays并不是[[], [], []]，而是[[]]\r\nb.通过引用创建二维数组\r\narrays&#x3D;[a]*N\r\n看上去是创建了二维数组，但是只是创建N个指向a的引用\r\n所以一旦a改变，arrays中N个list也会随之改变\r\neg:\r\na&#x3D;[]\nN&#x3D;3\narrays&#x3D;[a]*3\n# arrays &#x3D; [[], [], []]\n\narrays[0].append(1) # 注意：并不是只为第一个list添加整数1\nprint(arrays)\n# 输出[[1], [1], [1]]\n\narrays[1].append(1)\nprint(arrays)\n# 输出[[1, 1], [1, 1], [1, 1]]\r\nc.创建独立的二维数组\r\narrays&#x3D;[[]for i in range(N)]\r\neg:\r\nN&#x3D;3\narrays&#x3D;[[]for i in range(N)]\nprint(arrays)\n\narrays[0].append(0)\nprint(arrays)\n# 输出[[0], [], []]\r\n输出[[], [], []]\r\n","slug":"Language Learning/Python/数组","date":"2023-03-07T16:14:45.646Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"依赖项管理：Requirements.txt,\r\nSetup.py及更多\r\nWrite a setup.py\r\n\r\nremember what you use, or try to use some tools to control the\r\ndependenies efficiently and fine\r\n\r\nYes, we can write this file in multiple ways - python is a script\r\nlanguage after all.\r\nHowever, what's the most imporant part?\r\nI think we should follow the codes below:\r\nfrom setuptools import setup, find_packages()\nsetup(\n    # metadata with info\n    name&#x3D;&#39;SetupFileExample&#39;,\n    version&#x3D;&#39;0.1&#39;,\n    author&#x3D;&#39;JBR&#39;,\n    author_email&#x3D;&#39;jbr@example.com&#39;,\n    packages&#x3D;find_packages(),\n    description&#x3D;&#39;Useful towel-related stuff.&#39;,\n    # dependencies \n    install_requires&#x3D;[\n        &quot;Django &gt;&#x3D; 1.1.1&quot;,\n        &quot;caldav &#x3D;&#x3D; 0.1.4&quot;,\n    ],\n)\r\nAs for metadata, you can use this chart:\r\n\r\n\r\nimg\r\n\r\nand, the next one is a problem: how can we remember the packages we\r\ninstalled thousands of years ago?\r\nwell, thanks to the pip-tools we list at link4 - Link below, we can\r\nclearly see the main dependencies and decide which to list. With that,\r\nwe can figure out what's important\r\nWhy we\r\nneed setup.py even if requirements.txt already exists?\r\nsee link3 - it's pretty nice!\r\nLinks：\r\n\r\nhighly recommend to read: A\r\nPractical Guide to Using Setup.py - GoDataDriven\r\nrecommend to read: Python\r\n库打包分发(setup.py 编写)简易指南 | Huoty's Blog (konghy.cn)\r\nrecommend to read: 12.\r\nsetup.py vs requirements.txt — 一起写Python文章，一起看Python文章\r\n(pyzh.readthedocs.io)\r\n别再用\r\nrequirements.txt 来管理依赖了 - 腾讯云开发者社区-腾讯云\r\n(tencent.com)\r\njazzband/pip-tools:\r\nA set of tools to keep your pinned Python dependencies fresh.\r\n(github.com)\r\nPython 中的\r\nrequirements.txt 与 setup.py - 知乎 (zhihu.com)\r\n2.\r\nWriting the Setup Script — Python 3.10.7 documentation\r\nBuilding and\r\nDistributing Packages with Setuptools - setuptools 65.3.0.post20220826\r\ndocumentation (pypa.io)\r\n\r\n","slug":"Language Learning/Python/依赖项管理","date":"2023-03-07T16:14:45.640Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"使用Python解决文件自动化改名和命名\r\n原因：获取压缩文件的实际名称：\r\n压缩文件名称使用了随机字符，而原文件夹作为压缩文件的根目录来保存，为了避免打开压缩文件才能知道打开的到底是哪个文件，需要将压缩文件内的文件夹名复制出来为外部压缩文件改名\r\n采用方案：\r\n解压缩模块：zipfile\r\nofficial site zipfile — Work\r\nwith ZIP archives — Python 3.9.6 documentation\r\n\r\n提取所有压缩文件的实际名称\r\n\r\n文件处理模块：os\r\n\r\n确定实际工作目录\r\n找到所有需要改名的文件并存储\r\n在压缩文件中提取完实际名称后对源文件进行改名\r\n\r\n文字提取模块（正则表达式）：re\r\n\r\n对路径使用正则表达式来处理文件\r\n\r\n程序实例：\r\nimport os\nimport zipfile\nimport re\n\nos.getcwd()\t\t\t# 等待结果\npath &#x3D; r&quot;&quot;\t\t\t# 输入要处理文件的路径\nos.chdir(path)\t\t# 进入目标目录\n\nA &#x3D; []\nfor i in os.walk(path):\n    A.append(i)\n    \nB &#x3D; A[0][2] # B按顺序存储了需要修改的所有文件，注意A[0][2]的真正含义！\n\n# 注意，B可能包含已经修改了的文件，这时有两个方案\n\t# 1. （通过操作）规避这些文件，单独处理（费时费力，但是可以在一个文件夹下完成所有操作，也符合我个人直觉，毕竟是存在某些文件没有\n\t# 2. 将这些文件全部复制到新文件夹下保持文件纯净\n# 采用方案2\n\nC &#x3D; [] # 存储真实名称\n\nfor i in B:\n    with zipfile.ZipFile(i, &#39;r&#39;) as z:\n        for i in z.namelist():\n            C.append(i)\n        z.close() # 可能会有几百行？_(:з」∠)_，总之，拿下了就行\n\nget_name_rule &#x3D; re.compile(r&quot; &quot;, re.S) # 正则表达式的筛选规则\nD &#x3D; []\nfor i in C:\n\tif re.findall(get_name_rule, i) !&#x3D; []:\n        D.append(re.findall(get_name_rule, i)[0])\n\n&#39;&#39;&#39;\nE &#x3D; []\nrule_extended &#x3D; re.compile(r&quot; &quot;, re.S)\nfor i in D:\n    if re.findall(rule_extended, i) !&#x3D; []:\n    \tE.append(re.findall(rule_extended, i)[0])\n    else:\n    \tE.append(i)\n补充提取，将所有违规字符如&#39;&#x2F;&#39;，&#39;*&#39;等全部剔除\n&#39;&#39;&#39;\n\ncount &#x3D; 0\nfor i in B:\n    temp &#x3D; E[count] + &quot;.zip&quot; \t# 注意后缀！\n    os.rename(i, temp)\n    count &#x3D; count + 1\n\n    \n    \n    \n    \n以上全部！\r\n有关zipfile的常用方法：\r\n\r\n一看就懂：\r\nimport zipfile\nf &#x3D; zipfile.ZipFile(&#39;filename.zip&#39;, &#39;w&#39; ,zipfile.ZIP_DEFLATED)\nf.write(&#39;file1.txt&#39;)\nf.write(&#39;file2.doc&#39;)\nf.write(&#39;file3.rar&#39;)\nf.close()\nf &#x3D; zipfile.ZipFile(&#39;filename&#39;)\nf.extractall()\nf.close()\r\n1.1 zipfile.ZipFile(file,\r\nmode='r', compression=ZIP_STORED,\r\nallowZip64=True, compresslevel=None, **,\r\nstrict_timestamps=True*)\r\nOpen a ZIP file, where file can be a path to a file (a\r\nstring), a file-like object or a path-like\r\nobject.\r\n\r\nfileName是没有什么疑问的了。\r\nmode和一般的文件操作一样,'r'表示打开一个存在的只读ZIP文件；'w'表示清空并打开一个只写的ZIP文件，或创建一个只写的ZIP文件；'a'表示打开一个ZIP文件，并添加内容。\r\n\r\n\r\n\r\n\r\nThe mode parameter should be 'r' to read an\r\nexisting file,\r\n'w' to truncate and write a new file,\r\n'x' to exclusively create and write a new file.\r\n\r\nIf mode is 'x' and file refers to an\r\nexisting file, a FileExistsError\r\nwill be raised.\r\n\r\n'a' to append to an existing file,\r\n\r\nIf mode is 'a' and file refers to an\r\nexisting ZIP file, then additional files are added to it.\r\nIf file does not refer to a ZIP file, then a new ZIP archive\r\nis appended to the file. This is meant for adding a ZIP archive to\r\nanother file (such as python.exe).\r\n#比如：我有一个new.txt文件\na &#x3D; zipfile.ZipFile(&#39;new.txt&#39;, &#39;a&#39;) # 此时new.txt文件会被归档，new.txt会被改写为zip文件\na.write(&#39;new.txt&#39;)\na.close()\n# 并在外侧改写new.txt的后缀为.zip，发现存在是一个正式的.zip文件且存在一个new.txt\r\nIf mode is 'a' and the file does not exist at\r\nall, it is created.\r\n\r\nIf mode is 'r' or 'a', the file\r\nshould be seekable.\r\n\r\n\r\n\r\ncompression表示压缩格式，可选的压缩格式只有2个：ZIP_STORE;ZIP_DEFLATED。ZIP_STORE是默认的，表示不压缩；ZIP_DEFLATED表示压缩。\r\nallowZip64为True时，表示支持64位的压缩，一般而言，在所压缩的文件大于2G时，会用到这个选项；默认情况下，该值为False，因为Unix系统不支持。\r\n\r\n1.2 zipfile.close()\r\n\r\n你写入的任何文件在关闭之前不会真正写入磁盘。\r\n\r\n1.3 zipfile.write(filename[, arcname[,\r\ncompress_type]])\r\n\r\nacrname是压缩文件中该文件的名字，默认情况下和filename一样\r\ncompress_type的存在是因为zip文件允许被压缩的文件可以有不同的压缩类型。\r\n\r\n1.4 zipfile.extractall([path[, member[,\r\npassword]]])\r\n\r\npath解压缩目录\r\nmember需要解压缩的文件名儿列表\r\npassword当zip文件有密码时需要该选项\r\n\r\nExtract all members from the archive to the current working\r\ndirectory.\r\npath specifies a different directory to extract to.\r\nmembers is optional and must be a subset of the list returned\r\nby namelist().\r\npwd is the password used for encrypted files.\r\n\r\n\r\n\r\nZipFile.namelist()\r\n\r\n\r\n","slug":"Language Learning/Python/使用python解决文件自动化处理的方案及zipfile模块的介绍","date":"2023-03-07T16:14:45.637Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"使用Python解决文件自动化改名和命名\r\n原因：获取压缩文件的实际名称：\r\n压缩文件名称使用了随机字符，而原文件夹作为压缩文件的根目录来保存，为了避免打开压缩文件才能知道打开的到底是哪个文件，需要将压缩文件内的文件夹名复制出来为外部压缩文件改名\r\n采用方案：\r\n解压缩模块：zipfile\r\nofficial site zipfile — Work\r\nwith ZIP archives — Python 3.9.6 documentation\r\n\r\n提取所有压缩文件的实际名称\r\n\r\n文件处理模块：os\r\n\r\n确定实际工作目录\r\n找到所有需要改名的文件并存储\r\n在压缩文件中提取完实际名称后对源文件进行改名\r\n\r\n文字提取模块（正则表达式）：re\r\n\r\n对路径使用正则表达式来处理文件\r\n\r\n程序实例：\r\nimport os\nimport zipfile\nimport re\n\nos.getcwd()\t\t\t# 等待结果\npath &#x3D; r&quot;&quot;\t\t\t# 输入要处理文件的路径\nos.chdir(path)\t\t# 进入目标目录\n\nA &#x3D; []\nfor i in os.walk(path):\n    A.append(i)\n    \nB &#x3D; A[0][2] # B按顺序存储了需要修改的所有文件，注意A[0][2]的真正含义！\n\n# 注意，B可能包含已经修改了的文件，这时有两个方案\n\t# 1. （通过操作）规避这些文件，单独处理（费时费力，但是可以在一个文件夹下完成所有操作，也符合我个人直觉，毕竟是存在某些文件没有\n\t# 2. 将这些文件全部复制到新文件夹下保持文件纯净\n# 采用方案2\n\nC &#x3D; [] # 存储真实名称\n\nfor i in B:\n    with zipfile.ZipFile(i, &#39;r&#39;) as z:\n        for i in z.namelist():\n            C.append(i)\n        z.close() # 可能会有几百行？_(:з」∠)_，总之，拿下了就行\n\nget_name_rule &#x3D; re.compile(r&quot; &quot;, re.S) # 正则表达式的筛选规则\nD &#x3D; []\nfor i in C:\n\tif re.findall(get_name_rule, i) !&#x3D; []:\n        D.append(re.findall(get_name_rule, i)[0])\n\n&#39;&#39;&#39;\nE &#x3D; []\nrule_extended &#x3D; re.compile(r&quot; &quot;, re.S)\nfor i in D:\n    if re.findall(rule_extended, i) !&#x3D; []:\n    \tE.append(re.findall(rule_extended, i)[0])\n    else:\n    \tE.append(i)\n补充提取，将所有违规字符如&#39;&#x2F;&#39;，&#39;*&#39;等全部剔除\n&#39;&#39;&#39;\n\ncount &#x3D; 0\nfor i in B:\n    temp &#x3D; E[count] + &quot;.zip&quot; \t# 注意后缀！\n    os.rename(i, temp)\n    count &#x3D; count + 1\n\n    \n    \n    \n    \n以上全部！\r\n","slug":"Language Learning/Python/使用python解决文件自动化处理的方案","date":"2023-03-07T16:14:45.634Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"目标：使用selenium来解决网页中的大量同质化人工操作内容\r\n零：想好该怎么做：\r\n关于指定网站：\r\n网站是网盘网站，其文件有密码保护，即每个文件都有不同且无规律的受保护地址；同时，这些网页的操作完全重复。\r\n我们可以使用selenium来完成自动化代替重复劳动。\r\n关于selenium\r\n\r\n需要使用浏览器的自动化driver\r\n需要使用键盘输入模拟模块\r\n需要使用鼠标输入模拟模块\r\n需要事先了解需要操作的网页元素对象的路径\r\n\r\n一、准备工作：将所有需要爬取的地址整合到一个列表里：\r\nimport os\n\npath &#x3D; r&quot;D:\\Project\\Code Trainning\\Learning\\PythonDemo&quot;\nfilename &#x3D; r&quot;addresslist.txt&quot; # 存储所有网址的文件\ncode &#x3D; &quot;849227&quot; # 网站文件的密码\n\nos.chdir(path)\nos.getcwd()\n\nf &#x3D; open(file&#x3D;filename, mode&#x3D;&#39;r&#39;, encoding&#x3D;&#39;utf-8&#39;)\nFileContent &#x3D; f.readlines()\nf.close()\n\nAddressList &#x3D; []\nt &#x3D; 1\nfor i in FileContent:\n    if t % 2 &#x3D;&#x3D; 0 and t % 4 !&#x3D; 0:\n        AddressList.append(i)\n    t &#x3D; t + 1\n\n# for i in AddressList:\n#     print(i)\r\n二、用selenium来打开这些网页并模拟操作：\r\n打开网页：\r\nfrom selenium import webdriver # selenium.webdriver模块提供了所有WebDriver的实现\nfrom selenium.webdriver.common.keys import Keys # Keys类提供了键盘的代码，用来输入特殊的键盘符（如：回车,ALT,F1等等）\n\t# 比如，在上条语句输入之后，可以使用Keys.ENTER来模拟输入回车符\nimport time\n\nwd &#x3D; webdriver.Edge(r&quot;D:\\language\\EdgeDriver\\msedgedriver.exe&quot;) # 创建一个Edge浏览器的实例\n\ntry:\n    for i in AddressList:\n        wd.get(i)\n        \n        …… # 接第二步\n\n        time.sleep(60)\nexcept Exception as e:\n    print(e)\n\n    # driver.get方法会导向给定的URL的页面，WebDriver会等待页面完全加载完(就是onload函数被触发了)，才把程序的控制权交给你的测试或者脚本。 \n    # 但是！如果 你的页面用了太多的AJAX，那么这个机制将会失效，因为原本完整的页面只占用很小一部分时间，而ajax是“页面完成之后的操作”，selenium根本不知道页面到底是什么时候加载完。就像是requests面对众多ajax存在的网页一样\r\n对网页进行操作\r\ntime.sleep(5) # 最差的实现方式，最好使用隐式等待\n\n\ninput_box1 &#x3D; wd.find_element_by_id(&#39;passcode&#39;) # 找到输入box\ninput_box1.send_keys(code) # 输入验证码，send_keys函数能模拟大部分的键盘输入，其他的需要Keys类来实现\nconfirm_button1 &#x3D; wd.find_element_by_xpath(r&quot;&#x2F;html&#x2F;body&#x2F;main&#x2F;div&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;div&#x2F;div[2]&#x2F;div[2]&#x2F;button&quot;)\nconfirm_button1.click() # 模拟鼠标电机\n\ntime.sleep(5) # 如上\n\nconfirm_button2 &#x3D; wd.find_element_by_xpath(r&quot;&#x2F;html&#x2F;body&#x2F;main&#x2F;div&#x2F;div&#x2F;div[4]&#x2F;div[1]&#x2F;div[2]&#x2F;button&quot;)\nconfirm_button2.click()\n\ntime.sleep(180)\nwd.find_element_by_tag_name(&#39;body&#39;).send_keys(Keys.Control + &#39;t&#39;) # 模拟组合键\n\n&quot;&quot;&quot;\n显式Waits\n\t+ 用WebDriverWait结合ExpectedCondition来实现：\n\t\telement &#x3D; selenium.webdriver.support.ui.WebDriverWait(wd, 10).unitl(\n\t\t\tselenium.webdriver.support.expected_conditions.presence_of_located(By.ID, &quot;anyIDisOK&quot;)\n\t\t) \n\t\t# 这段代码将会等待10秒，并在等待过程中，每0.5s就调用一下ExpectedCondition，如果成功则立即返回，否则持续重试直到超时报错，报出错误TimeoutException\n\t+ 显示Wait中有许多预期条件，这样子就无需自己编写expected_condition（见文档\n\t\n隐式Waits\nplease forget that，but when I understand，I will c\n&quot;&quot;&quot;\r\n结束\r\nwd.close() # 或者 wb.quit()\r\n","slug":"Language Learning/Python/selenium自动化","date":"2023-03-07T16:14:45.611Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"requirements.txt in Python\r\nproject\r\n写python程序的时候，我们经常的会下载很多外部模块，当我们编写完成后，准备在其他设备上部署的时候，那么新设备上需要安装我当前环境下的所有包——非常麻烦\r\n我们可以利用pip来生成一个requirements.txt的文件，在新环境中通过读取这个文件中的模块名称进行环境的安装\r\n生成requirements.txt\r\n在项目根目录打开cmd/powershell\r\n执行\r\npip freeze &gt; requirements.txt\r\n例如：\r\n\r\n\r\nimg\r\n\r\n这时候项目根目录就会多一个requirements.txt文件，里面会记录我们项目需要的所以模块信息。具体说明可见：pip freeze - pip\r\ndocumentation v22.0.3 (pypa.io)\r\n\r\n请注意区分当前terminal中的pip是否和项目所使用的pip所一致，terminal生成的txt是根据系统变量中pip的所有依赖包来生成txt的，可能跟项目实际所使用的有所不同\r\n如果在创建项目都是包全局继承就比较悲剧，但鉴于requirements.txt的格式较为简单，在了解后可以尝试手动创建\r\n\r\n使用requirements.txt\r\n新环境中通过此文件可以直接安装模块（注:需要先切换到\r\nrequirements.txt的上级目录，也就是项目根目录）\r\n在项目根目录下执行 pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple -r requirements.txt\r\n安装至虚拟环境中命令\r\n进入到了虚拟环境中：切到虚拟环境目录的Script文件下\r\npip install -r D:\\odoo13\\odoo\\requirements.txt\r\n两个备用镜像源：\r\n阿里 https://mirrors.aliyun.com/pypi/simple\r\n清华 https://pypi.tuna.tsinghua.edu.cn/simple\r\n","slug":"Language Learning/Python/Requirements.txt","date":"2023-03-07T16:14:45.608Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"第一步：引入包并准备临时存储数据的列表\r\nimport urllib.request\nimport urllib.parse\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\nimport random, time # 设置每个网页之间的爬取间隔，防止被ban\n# import xlwt, xlwings, sqlite3\n# import selenium\n\n# 1.设定爬取网页对象\nurl &#x3D; &quot;&quot;\n# 2 准备临时保存数据的列表\nA &#x3D; []\nB &#x3D; []\n...\n# 3 文件保存路径\nsaveAddress &#x3D; &quot;D:\\\\project\\\\code\\\\python\\\\&quot;\n# 4 设立序号num\nnum &#x3D; 0\r\n第二步：获取网页内容（源代码）\r\n采用urllib\r\n\r\n使用手册：\r\n​ Python\r\nurllib | 菜鸟教程 (runoob.com)\r\n​ urllib.request\r\n— Extensible library for opening URLs — Python 3.9.6\r\ndocumentation\r\n简明教程：\r\n\r\n\r\nurllib包内文件设计：\r\n\r\nurllib.request - 打开和读取 URL。它定义了一些打开\r\nURL\r\n的函数和类，包含授权验证、重定向、浏览器cookies等。\r\nurllib.error - 包含 urllib.request\r\n抛出的异常。\r\nurllib.parse - 解析 URL。\r\nurllib.robotparser - 解析 robots.txt 文件。\r\n\r\n打开一个 URL：\r\nurllib.request.urlopen(url, data=None, [timeout, ], cafile=None,\r\ncapath=None, cadefault=False, context=None)\r\n​ 注意返回值：This function always returns an object which can work as\r\na context\r\nmanager and has the properties url,\r\nheaders, and status.\r\n​ 注意url对象：Open the URL url, which can be either a string\r\nor a Request\r\nobject.\r\n解析urlopen()的返回值：（注意还要decode()）\r\n​ read( [length = number] )\r\n​ readline( )\r\n​ readlines( [ ] )：返回列表\r\n模拟头部信息（身份伪装）：\r\n​ urllib.request.Request(url, data=None, headers={},\r\norigin_req_host=None, unverifiable=False, method=None)\r\n​\r\n如果用到了Request对象，自然是直接将data放在这里面而不是在urlopen里\r\n\r\n\r\n\r\ndef ask_html(i):\n\t# 对基础url做处理，拿到新的、需要爬取的实际目标网页url，并在接下来对这个网址做处理\n\ttempUrl &#x3D; url + str(i * 25)\n\t# 伪装user-agent\n\theaders &#x3D; &#123;\n\t\t&quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) ......&quot;\n\t&#125;\n\t\t# # 用户表单信息\n\t\t# data &#x3D; bytes(urllib.parse.urlencode(&#123;&#39;user_name&#39;: &#39;bunjie&#39;&#125;), encoding&#x3D;&#39;utf-8&#39;)，是urlopen中的data参数，用来发送post请求，否则是get请求\n\t# 对爬虫身份做封装\n\tresponse &#x3D; urllib.request.Request(url&#x3D;url_now, headers&#x3D;headers, method&#x3D;&quot;GET&quot;) # 要发送表单信息的话，请使用POST\n\t# 进行网页爬取并解码\n\treq &#x3D; urllib.request.urlopen(response, timeout&#x3D;30)\n\thtml &#x3D; req.read().decode(&#39;utf-8&#39;)\n\t# 返回目标网页对应的html代码内容\n\treturn html\r\n采用requests\r\n\r\n\r\n官方示例：\r\n\r\n\r\n&gt;&gt;&gt; r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;api.github.com&#x2F;user&#39;, auth&#x3D;(&#39;user&#39;, &#39;pass&#39;))\n&gt;&gt;&gt; r.status_code\n200\n&gt;&gt;&gt; r.headers[&#39;content-type&#39;]\n&#39;application&#x2F;json; charset&#x3D;utf8&#39;\n&gt;&gt;&gt; r.encoding\n&#39;utf-8&#39;\n&gt;&gt;&gt; r.text\n&#39;&#123;&quot;type&quot;:&quot;User&quot;...&#39;\n&gt;&gt;&gt; r.json()\n&#123;&#39;private_gists&#39;: 419, &#39;total_private_repos&#39;: 77, ...&#125;\r\n\r\n\r\n文档：\r\n​ Requests: HTTP\r\nfor Humans™ — Requests 2.26.0 documentation\r\n(python-requests.org)\r\n​ Requests:\r\n让 HTTP 服务人类 — Requests 2.18.1 文档\r\n(python-requests.org)\r\n简明教程：\r\n\r\nAPI Reference:\r\n\r\nrequests.get(url,\r\nparams=None, **kwargs)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nParameters:\r\nurl – URL for the new Request\r\nobject.params – (optional) Dictionary, list of\r\ntuples or bytes to send in the query string for the Request.**kwargs\r\n– Optional arguments that request takes.\r\n\r\n\r\n\r\n\r\nReturns:\r\nResponse\r\nobject\r\n\r\n\r\n\r\n\r\n\r\nrequests.post(url,\r\ndata=None, json=None, **kwargs)\r\nSends a POST request.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nParameters:\r\nurl – URL for the new Request\r\nobject.data – (optional) Dictionary, list of\r\ntuples, bytes, or file-like object to send in the body of the Request.json\r\n– (optional) json data to send in the body of the Request.**kwargs\r\n– Optional arguments that request takes.\r\n\r\n\r\n\r\n\r\nReturns:\r\nResponse\r\nobject\r\n\r\n\r\n\r\n\r\n\r\n**kwargs参数列表:\r\n\r\nparams – (optional) Dictionary, list of tuples or\r\nbytes to send in the query string for the Request.\r\ndata – (optional) Dictionary, list of tuples,\r\nbytes, or file-like object to send in the body of the Request.\r\njson – (optional) A JSON serializable Python object\r\nto send in the body of the Request.\r\nheaders – (optional) Dictionary of HTTP Headers to\r\nsend with the Request.\r\ncookies – (optional) Dict or CookieJar object to\r\nsend with the Request.\r\nfiles – (optional) Dictionary of\r\n'name': file-like-objects (or\r\n&#123;'name': file-tuple&#125;) for multipart encoding upload.\r\nfile-tuple can be a 2-tuple\r\n('filename', fileobj), 3-tuple\r\n('filename', fileobj, 'content_type') or a 4-tuple\r\n('filename', fileobj, 'content_type', custom_headers),\r\nwhere 'content-type' is a string defining the content type\r\nof the given file and custom_headers a dict-like object\r\ncontaining additional headers to add for the file.\r\nauth – (optional) Auth tuple to enable\r\nBasic/Digest/Custom HTTP Auth.\r\ntimeout (float\r\nor tuple)\r\n– (optional) How many seconds to wait for the server to send data before\r\ngiving up, as a float, or a (connect\r\ntimeout, read timeout) tuple.\r\nallow_redirects (bool)\r\n– (optional) Boolean. Enable/disable\r\nGET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to\r\nTrue.\r\nproxies – (optional) Dictionary mapping protocol to\r\nthe URL of the proxy.\r\nverify – (optional) Either a boolean, in which case\r\nit controls whether we verify the server’s TLS certificate, or a string,\r\nin which case it must be a path to a CA bundle to use. Defaults to\r\nTrue.\r\nstream – (optional) if False, the\r\nresponse content will be immediately downloaded.\r\ncert – (optional) if String, path to ssl client\r\ncert file (.pem). If Tuple, (‘cert’, ‘key’) pair.\r\n\r\n\r\n\r\n\r\n&gt; *class* **&#96;requests&#96;.&#96;Response&#96;**\n&gt;\n&gt; The [&#96;Response&#96;](https:&#x2F;&#x2F;docs.python-requests.org&#x2F;en&#x2F;latest&#x2F;api&#x2F;#requests.Response) object, which contains a server’s response to an HTTP request.\n&gt;\n&gt; 1. **content**\n&gt;\n&gt; ​\t\tContent of the response, in bytes.\n&gt;\n&gt; 2. **text**\n&gt;\n&gt;    Content of the response, in unicode.\n&gt;\n&gt;    If Response.encoding is None, encoding will be guessed using &#96;charset_normalizer&#96; or &#96;chardet&#96;.\n&gt;\n&gt;    The encoding of the response content is determined based solely on HTTP headers, following RFC 2616 to the letter. If you can take advantage of non-HTTP knowledge to make a better guess at the encoding, you should set &#96;r.encoding&#96; appropriately before accessing this property.\n&gt;    \n&gt; 3. **&#96;url&#96; *&#x3D; None***\n&gt;\n&gt;    Final URL location of Response.\n&gt;\n&gt; 4. **&#96;status_code&#96; *&#x3D; None***\n&gt;\n&gt;    Integer Code of responded HTTP Status, e.g. 404 or 200.\n&gt;\n&gt; 5. **&#96;request&#96; *&#x3D; None***\n&gt;\n&gt;    The [&#96;PreparedRequest&#96;](https:&#x2F;&#x2F;docs.python-requests.org&#x2F;en&#x2F;latest&#x2F;api&#x2F;#requests.PreparedRequest) object to which this is a response.\n&gt;\n&gt;    You can **check the response** header through this method! \n&gt;\n&gt; &gt; When you make a request, Requests makes educated guesses about the encoding of the response based on the HTTP headers. The text encoding guessed by Requests is used when you access **&#96;r.text&#96;**. You can find out what encoding Requests is using, and change it, using the **&#96;r.encoding&#96;** property:\n&gt; &gt;\n&gt; &gt; &#96;&#96;&#96;python\n&gt; &gt; &gt;&gt;&gt; r.encoding\n&gt; &gt; &#39;utf-8&#39;\n&gt; &gt; &gt;&gt;&gt; r.encoding &#x3D; &#39;ISO-8859-1&#39;\r\n\n2. ## Make a Request\n\n&gt; &#96;&#96;&#96;python \n&gt; &gt;&gt;&gt; import requests # first import the module\n&gt; \n &gt; &gt;&gt;&gt; r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;api.github.com&#x2F;events&#39;) # get a webpage. In GET requests mode\r\n\r\nNow, we have a Response object called r. We can get all the\r\ninformation we need from this object.\r\nmeanwhile, requests’ simple API means that all forms of HTTP request\r\nare as obvious. For example, this is how you make an HTTP POST\r\nrequest:\r\n&gt;&gt;&gt; r &#x3D; requests.post(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;, data &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;)\n# 我们当热可以在之前就将要发送的数据包data封装好，在post中就可以直接调用了\r\nNice, rights? What about the other HTTP request types: PUT, DELETE,\r\nHEAD and OPTIONS? These are all just as simple:\r\n&gt;&gt;&gt; r &#x3D; requests.put(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;put&#39;, data &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;)\n&gt;&gt;&gt; r &#x3D; requests.delete(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;delete&#39;)\n&gt;&gt;&gt; r &#x3D; requests.head(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)\n&gt;&gt;&gt; r &#x3D; requests.options(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)\r\n\r\n\r\nPassing Parameters In\r\nURLs\r\n\r\n\r\nYou often want to send some sort of data in the URL’s query string.\r\nIf you were constructing the URL by hand, this data would be given as\r\nkey/value pairs in the URL after a question mark, e.g.\r\nhttpbin.org/get?key=val. Requests allows you to provide\r\nthese arguments as a dictionary of strings, using the\r\nparams keyword argument. As an example, if you wanted to\r\npass key1=value1 and key2=value2 to\r\nhttpbin.org/get, you would use the following code:\r\n&gt;&gt;&gt; payload &#x3D; &#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;&#125;\n&gt;&gt;&gt; r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;, params&#x3D;payload)\r\nYou can see that the URL has been correctly encoded by printing the\r\nURL:\r\n&gt;&gt;&gt; print(r.url)\nhttps:&#x2F;&#x2F;httpbin.org&#x2F;get?key2&#x3D;value2&amp;key1&#x3D;value1\r\nNote that any dictionary key whose value is None will\r\nnot be added to the URL’s query string.\r\n\r\n\r\n第三步：利用bs和re来对爬取内容做处理\r\nbs4：一级处理（可跳过）\r\n\r\n使用手册：\r\n​ Beautiful Soup\r\n4.4.0 文档 — Beautiful Soup 4.2.0 中文 文档\r\n简明教程：\r\n\r\n\r\n创建BeautifulSoup对象：\r\n​ 将一段文档传入BeautifulSoup 的构造方法,就能得到一个文档的对象,\r\n可以传入一段字符串或一个文件句柄.\r\nsoup &#x3D; BeautifulSoup(open(&quot;index.html&quot;)) # 方法一：读取文件\n\nsoup &#x3D; BeautifulSoup(&quot;&lt;html&gt;data&lt;&#x2F;html&gt;&quot;) # 方法二：读取现成、字符串形式的html代码片段\r\n​ 首先,文档被转换成Unicode,并且HTML的实例都被转换成Unicode编码\r\nBeautifulSoup(&quot;Sacr&amp;eacute; bleu!&quot;)\n&lt;html&gt;&lt;head&gt;&lt;&#x2F;head&gt;&lt;body&gt;Sacré bleu!&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; ​ 然后,Beautiful\r\nSoup选择最合适的解析器来解析这段文档,如果手动指定解析器那么Beautiful\r\nSoup会选择指定的解析器来解析文档.(参考 解析成XML\r\n).\r\n对文档进行处理：\r\n​ Beautiful\r\nSoup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种:\r\nTag , NavigableString ,\r\nBeautifulSoup , Comment .\r\n​\r\nTag：即原文档中的标签，可以通过name和attrs来直接调用对应的名称和属性，请务必注意属性的返回值！我们还可以通过string来调用内容，但是内容不能被直接修改\r\n​ 如果只想得到tag中包含的文本内容,那么可以嗲用\r\nget_text()\r\n方法,这个方法获取到tag中包含的所有文版内容包括子孙tag中的内容,并将结果作为Unicode字符串返回\r\n​\r\nNavigableString：字符串常被包含在tag内.Beautiful\r\nSoup用 NavigableString\r\n类来包装tag中的字符串，tag中包含的字符串不能编辑,但是可以被替换成其它的字符串,用\r\nreplace_with()\r\n方法:\r\n\r\n进行文档遍历：低效\r\n文档搜索（√）：\r\n\r\nselect()css选择器，支持id(#)，class(.)，tag，父子选择等css匹配规则\r\n​ example: bs.select(a[class = 'hello!' ])\r\nfind_all()几乎同select，但是支持了正则表达式\r\n​ example: bs.find_all('div', class_='item') /\r\nbs.find_all(re.compile(\"a\"))\r\n\r\n\r\n\r\n\r\n\r\nre：二级处理（从根本解决问题）\r\n\r\n正则表达式使用手册：\r\n​ 正则表达式\r\n(Web\r\n视图)\r\nre模块使用手册：\r\n​ re模块\r\n(Web\r\n视图)\r\n\r\n# 全部html代码已经在前面的url处理中完全取得\ndef get_information(html):\n\tglobal num\n\tbs &#x3D; BeautifulSoup(html, &#39;lxml&#39;) # 推荐使用lxml作为解析器,因为效率更高.\n\n\tfind_movie_address &#x3D; re.compile(r&#39;&lt;a href&#x3D;&quot;(.*?)&quot;&gt;&#39;, re.S)\n\tfind_title &#x3D; re.compile(r&#39;&lt;span class&#x3D;&quot;title&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;, re.S)\n\tfind_more_title &#x3D; re.compile(r&#39;&lt;span class&#x3D;&quot;other&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;, re.S)\n\n\tfor item in bs.find_all(&#39;div&#39;, class_&#x3D;&#39;item&#39;):\n\t\tprint(&#39;-&#39;*30)\n\t\tprint(num + 1)\n\t\titem &#x3D; str(item)\n\t\tmovie_address_data.append(re.findall(find_movie_address, item)[0])\n\n\t\tif len(re.findall(find_title, item)) &#x3D;&#x3D; 2:   # 不是所有影片都有“两个title”的class\n\t\t\tmovie_title_data.append(re.findall(find_title, item)[0])\n\t\t\tmovie_traditional_title_data.append(re.findall(find_title, item)[1])\n\t\telse:\n\t\t\tmovie_title_data.append(re.findall(find_title, item)[0])\n\t\t\tmovie_traditional_title_data.append(&#39; &#39;)  # 用空格&#39; &#39;来代表该电影是中文电影，没有外文“原名”\n\n\t\tmovie_more_title_data.append(re.findall(find_more_title, item)[0])\n\n\t\ttemp &#x3D; movie_title_data[num] + movie_traditional_title_data[num] + movie_more_title_data[num]\n\t\tmovie_title_collection.append(temp)\n\n\t\tprint(movie_address_data[num])\n\t\tprint(movie_title_collection[num])\n\t\tnum &#x3D; num + 1\n\t# 模拟正常浏览网页的停留时间\n\ttime.sleep(random.random() * 100)\r\n第四步：保存数据\r\n\r\nexcel表：Python Resources\r\nfor working with Excel - Working with Excel Files in Python\r\n(python-excel.org)\r\n​ xlwings：Automate Excel with\r\nPython (Open Source and Free) (xlwings.org)\r\n# xlwings示例代码：\n\nimport xlwings as xw\n\n#连接到excel\nworkbook &#x3D; xw.Book(r&#39;path&#x2F;myexcel.xlsx&#39;)#连接excel文件\n#连接到指定单元格\ndata_range &#x3D; workbook.sheets(&#39;Sheet1&#39;).range(&#39;A1&#39;)\n#写入数据\ndata_range.value &#x3D; [1,2,3]\n#保存\nworkbook.save()\r\n\r\n以上步骤综合即是一个完整的python爬虫程序\r\n","slug":"Language Learning/Python/python爬虫","date":"2023-03-07T16:14:45.605Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"深浅拷贝概念与使用\r\nReference：\r\n\r\n彻底理解Python中的\"指针\"_杰克小麻雀的博客-CSDN博客_python有指针吗\r\n\r\n\r\ndeep copy and shallow copy\r\n浅拷贝，指的是重新分配一块内存，创建一个新的对象，但里面的元素是原对象中各个子对象的引用\r\n深拷贝，是指重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中\r\nexamples\r\nshallow copy\r\ncode\r\nlist1 &#x3D; [[1, 2], (30, 40)]\nlist2 &#x3D; list(list1)\n\nlist1.append(100)\nprint(&quot;list1:&quot;,list1)  # [[1, 2], (30, 40), 100]\nprint(&quot;list2:&quot;,list2)  # [[1, 2], (30, 40)]\n\nlist1[0].append(3)\nprint(&quot;list1:&quot;,list1)  # [[1, 2, 3], (30, 40), 100]\nprint(&quot;list2:&quot;,list2)  # [[1, 2, 3], (30, 40)]\n\nlist1[1] +&#x3D; (50, 60)\nprint(&quot;list1:&quot;,list1)  # [[1, 2, 3], (30, 40, 50, 60), 100]\nprint(&quot;list2:&quot;,list2)  # [[1, 2, 3], (30, 40)]\r\nexplanations\r\nin this program, we initial a list: list1 first which\r\ncontains two elements: a list and a tuple.然后对 list1 执行浅拷贝，赋予\r\nlist2。因为浅拷贝里的元素是对原对象元素的引用，因此 list2 中的元素和\r\nlist1 指向同一个列表和元组对象。\r\nnext，list1.append(100). 表示对 list1 的列表新增元素\r\n100。这个操作不会对 list2 产生任何影响，因为 list2 和 list1\r\n作为整体是两个不同的对象，并不共享内存地址。操作过后 list2 不变，list1\r\n会发生改变。\r\nthen，list1[0].append(3) 表示对 list1\r\n中的第一个列表新增元素 3。因为 list2 是 list1 的浅拷贝，list2\r\n中的第一个元素和 list1 中的第一个元素，共同指向同一个列表，因此 list2\r\n中的第一个列表也会相对应的新增元素 3。\r\nat last,\r\nlist1[1] += (50, 60)，因为元组是不可变的，这里表示对 list1\r\n中的第二个元组拼接，然后重新创建了一个新元组作为 list1\r\n中的第二个元素，而 list2 中没有引用新元组，因此 list2 并不受影响。\r\ndeep copy\r\ncode\r\nimport copy\nlist1 &#x3D; [[1, 2], (30, 40)]\nlist2 &#x3D; copy.deepcopy(list1)\n\nlist1.append(100)\nprint(&quot;list1:&quot;,list1)  # [[1, 2], (30, 40), 100]\nprint(&quot;list2:&quot;,list2)  # [[1, 2], (30, 40)]\n\nlist1[0].append(3)\nprint(&quot;list1:&quot;,list1)  # [[1, 2, 3], (30, 40), 100]\nprint(&quot;list2:&quot;,list2)  # [[1, 2], (30, 40)]\n\nlist1[1] +&#x3D; (50, 60)\nprint(&quot;list1:&quot;,list1)  # [[1, 2, 3], (30, 40, 50, 60), 100]\nprint(&quot;list2:&quot;,list2)  # [[1, 2], (30, 40)]\r\nexplanation\r\njust as the example code above, no matter how the list1 changes,\r\nlist2 remains itself. 因为此时的 list1 和 list2\r\n完全独立，没有任何联系。\r\n特例\r\n如果被深拷贝对象中存在指向自身的引用会怎么样？\r\nimport copy\nlist1 &#x3D; [1]\nlist1.append(list1)\nprint(list1)  # [1, [...]]\n\nlist2 &#x3D; copy.deepcopy(list1)\nprint(list2)  # [1, [...]]\r\n此例子中，列表 list1 中有指向自身的引用，因此 list1\r\n是一个无限嵌套的列表。但是当深度拷贝 list1 到 list2\r\n后，程序并没有出现栈溢出的现象。这是为什么呢？\r\n-&gt;因为 deepcopy 会自动维护一个字典，记录已经拷贝的对象与其\r\nID。拷贝过程中，如果字典里已经存储了将要拷贝的对象，则会从字典直接返回。通过查看\r\ndeepcopy 函数实现的源码就会明白：\r\n赋值与拷贝的关系\r\n赋值\r\n只是复制了新对象的引用，不会开辟新的内存空间。\r\n拷贝\r\n创建新对象，具体内容视拷贝类型而定（深浅拷贝）\r\n所以赋值并不会产生一个独立的对象单独存在，只是将原有的数据块打上一个新标签，所以当其中一个标签被改变的时候，数据块就会发生变化，另一个标签也会随之改变。\r\n请注意区分浅拷贝与赋值——关键在是否有新对象被创建\r\n示例\r\n赋值操作：\r\na &#x3D; [1, 2, 3]\n\nb &#x3D; a\n# a.append(4)\n# print(b) # [1, 2, 3, 4]\r\n三种浅拷贝操作：\r\n切片操作： lst1 &#x3D; lst[:] 或者 lst1 &#x3D; [each for each in lst]\r\n工厂函数： lst1 &#x3D; list(lst)\r\ncopy函数： lst1 &#x3D; copy.copy(lst)\r\n三种，都是浅拷贝\r\n连续赋值\r\n在python中是可以使用连续赋值的方式来一次为多个变量进行赋值的(请注意，仍然是“赋值”！)，比如：\r\na &#x3D; b &#x3D; c &#x3D; 1\na, b, c &#x3D; 1, 1, 1\r\n这些都可以完成变量的赋值，但是就有一个问题了，比如：\r\na &#x3D; 3\na, b &#x3D; 1, a  # a &#x3D; 1, b &#x3D; 3\r\n如果按照正常的思维逻辑，先进行a = 1，在进行b =\r\na，最后b应该等于1，但是这里b应该等于3，因为在连续赋值语句中等式右边其实都是局部变量，而不是真正的变量值本身，因此，上面例子中右边的a，在python解析的时候，只是把变量a的指向的变量3赋给b，而不是a=1之后a的结果。这里有一个Leetcode里链表的例子：\r\n\r\n假如要对一个链表进行翻转，就比如把1—&gt;2-&gt;3-&gt;4转化为4-&gt;3-&gt;2-&gt;1\r\n\r\n对于这个问题很简单，只要反转指针就可以了，假如链表结构为：\r\nclass ListNode:\n    def __init__(self, x):\n        self.val &#x3D; x\n        self.next &#x3D; None1234\r\n我们可以用很简单的三行代码完成这个过程：\r\ndef reverseList(self, head):\n        L &#x3D; ListNode(float(&quot;-inf&quot;))\n        while head:\n            L.next, head.next, head &#x3D; head, L.next, head.next\n        return L.next12345\r\n这里的L是指向一个新建的结点，因为python没有指针的概念，所以用一个额外的结点来代替头指针，这里的核心代码就是中间那一行三个变量的连续赋值，如果单独一句句来理解的话，最后肯定是想不通的，在这里，假设head结点是链表串’1-&gt;2-&gt;3-&gt;4’的头结点，先用新的L结点的next指针指向head的第一个结点‘1’，之后将L.next(第一次也就是空)赋给了head的next指针，之后再把head的next指针（注意，这里的next指针还是指向‘2’的，而不是空）赋给head，相当于next向前移一位，这一步相当于一个串变成了两个：\r\n\r\nL：‘-inf’-&gt;‘1’\r\nhead：‘2’-&gt;‘3’-&gt;‘4’-&gt;‘5’\r\n\r\n","slug":"Language Learning/Python/Python拷贝与赋值","date":"2023-03-07T16:14:45.602Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Python lambda表达式\r\n在Python中有两种函数，一种是def定义的函数，而另一种是lambda函数，也就是匿名函数。\r\n它可以接受任意数量的参数，但只能有一个表达式。\r\n示例\r\nx &#x3D; lambda a : a + 10\nprint(x(5))\n# 15\r\n语法\r\nlambda arguments : expression\r\n","slug":"Language Learning/Python/Python Function","date":"2023-03-07T16:14:45.598Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"install： pip install\r\npyecharts\r\nNormal Process\r\n\r\nimport dependencies\r\n\r\nfrom pyecharts.charts import * # 引入所有图表类\nfrom pyecharts.components import Table # 引入table组件\nfrom pyecharts import options as opts # 引入options并rename\nfrom pyecharts.commons.utils import JsCode # 引入原生的js代码\n\nfrom snapshot_selenium import snapshot # 使用snapshot_selenium渲染图片\nfrom pyecharts.render import make_snapshot\n\nimport random\nimport datetime\n...\r\n\r\n对对象添加配置项：\r\n几乎所有配置项都会在\r\n\r\n全局配置项：通过配置全局项，可以更好的设置个性化图表，提供功能组件和更多信息\r\n\r\n\r\n在定义类的详细内容时使用：set_global_opts（function）来进行设定\r\n常用全局配置：\r\n\r\n&gt;init_opts&#x3D; # 这是一个例外：这个需要在Bar() 即新建类时调用，用于设定width等值\n\n&gt;title_opts&#x3D;\n&gt;toolbox_opts&#x3D;\n&gt;tooltip_opts&#x3D;\n&gt;visualmap_opts&#x3D;\r\n\r\n\r\n\r\n系列配置项：\r\n\r\n\r\nBasic Charts\r\nCalendar：日历图\r\n1. class pyecharts.charts.Calendar\n\tclass Calendar(init_opts: opts.InitOpts &#x3D; opts.InitOpts())\n2. func pyeachrts.charts.Calendar.add\n\tyaxis_data: Sequence, # example: [(key, value), ...]\n    calendar_opts&#x3D;opts.CalendarOpts(\n        range_&#x3D;&quot;2017&quot;,\n    ),\n3. \r\nFunnel：漏斗图\r\n# 系列数据项，格式为 [(key1, value1), (key2, value2)]\n    data_pair: Sequence,\r\nGauge：仪表盘\r\n# 系列数据项，格式为 [(key1, value1), (key2, value2)]\n    data_pair: Sequence,\r\nGraph：关系图\r\n# 关系图节点数据项列表，参考 &#96;opts.GraphNode&#96;\nnodes: Sequence[Union[opts.GraphNode, dict]],\n\n# 关系图节点间关系数据项列表，参考 &#96;opts.GraphLink&#96;\nlinks: Sequence[Union[opts.GraphLink, dict]],\n\n# 关系图节点分类的类目列表，参考 &#96;opts.GraphCategory&#96;\ncategories: Union[Sequence[Union[opts.GraphCategory, dict]], None] &#x3D; None,\r\nLiquid: 水流图\r\n# 系列数据，格式为 [value1, value2, ....]\n    data: Sequence # normally： value1 &gt; value2 &gt; ...\r\nParallel: 平行坐标系\r\n# 轴定义：\nparallel_axis &#x3D; [&#123;&quot;dim&quot;: 0, &quot;name&quot;: &quot;Price&quot;&#125;,\n    &#123;&quot;dim&quot;: 1, &quot;name&quot;: &quot;Net Weight&quot;&#125;,\n    &#123;&quot;dim&quot;: 2, &quot;name&quot;: &quot;Amount&quot;&#125;,\n    &#123;   &quot;dim&quot;: 3,\n        &quot;name&quot;: &quot;Score&quot;,\n        &quot;type&quot;: &quot;category&quot;,\n        &quot;data&quot;: [&quot;Excellent&quot;, &quot;Good&quot;, &quot;OK&quot;, &quot;Bad&quot;],&#125;,]\n# 数据准备\ndata &#x3D; [(12.99, 100, 82, &quot;Good&quot;), (9.99, 80, 77, &quot;OK&quot;), (20, 120, 60, &quot;Excellent&quot;)]\n(\n    Parallel(init_opts&#x3D;opts.InitOpts(width&#x3D;&quot;1400px&quot;, height&#x3D;&quot;800px&quot;))\n    .add_schema(schema&#x3D;parallel_axis)\n    .add(\n        series_name&#x3D;&quot;&quot;,\n        data&#x3D;data\n    )\n    .render()\n)\r\nPie\r\n# 系列数据项，格式为 [(key1, value1), (key2, value2)]\ndata_pair: types.Sequence[types.Union[types.Sequence, opts.PieItem, dict]],\r\nPolar：极坐标系\r\n# 对数据存在一个add_schema来定义轴\n def add_schema(\n    radiusaxis_opts: Union[opts.RadiusAxisOpts, dict] &#x3D; opts.RadiusAxisOpts(),\n    angleaxis_opts: Union[opts.AngleAxisOpts, dict] &#x3D; opts.AngleAxisOpts(),\n)\n# 数据本身仍在add中引入\n    # 系列数据项\n    data: Sequence, # 数据形式是数组：[(key, value1), value2...]       \n    # 注意一个类型选项\n    type_&#x3D;&quot;bar&quot; # 支持ChartType.SCATTER, ChartType.LINE, ChartType.BAR，ChartType.EFFECT_SCATTER\n默认是极坐标形式的散点图\n\n    Polar()\n    .add_schema(\n        radiusaxis_opts&#x3D;opts.RadiusAxisOpts(type_&#x3D;&quot;category&quot;),\n        angleaxis_opts&#x3D;opts.AngleAxisOpts(is_clockwise&#x3D;True, max_&#x3D;10),\n    )\n    .add(&quot;A&quot;, [(&quot;周一&quot;, 1), 2, 3, 4, 3, 5, 1], type_&#x3D;&quot;bar&quot;)\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;Polar-RadiusAxis&quot;))\n    .set_series_opts(label_opts&#x3D;opts.LabelOpts(is_show&#x3D;True))\n    .render()\r\nRadar\r\nv1 &#x3D; [(4300, 10000, 28000)]\nv2 &#x3D; [(5000, 14000, 28000)]\n(Radar(init_opts&#x3D;opts.InitOpts(width&#x3D;&quot;1280px&quot;, height&#x3D;&quot;720px&quot;, bg_color&#x3D;&quot;#CCCCCC&quot;))\n    .add_schema(\n        schema&#x3D;[\n            opts.RadarIndicatorItem(name&#x3D;&quot;销售（sales）&quot;, max_&#x3D;6500),\n            opts.RadarIndicatorItem(name&#x3D;&quot;研发（Development）&quot;, max_&#x3D;52000),\n            opts.RadarIndicatorItem(name&#x3D;&quot;市场（Marketing）&quot;, max_&#x3D;25000),\n        ],\n        splitarea_opt&#x3D;opts.SplitAreaOpts(\n            is_show&#x3D;True, areastyle_opts&#x3D;opts.AreaStyleOpts(opacity&#x3D;1)\n        ),\n        textstyle_opts&#x3D;opts.TextStyleOpts(color&#x3D;&quot;#fff&quot;),\n    )\n    .add(\n        series_name&#x3D;&quot;预算分配（Allocated Budget）&quot;,\n        data&#x3D;v1,\n        linestyle_opts&#x3D;opts.LineStyleOpts(color&#x3D;&quot;#CD0000&quot;),\n    )\n    .add(...)\n    .set_series_opts(label_opts&#x3D;opts.LabelOpts(is_show&#x3D;False))\n    .set_global_opts(\n        title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;基础雷达图&quot;), \n    )\n    .render())\n\n    # 系列名称，用于 tooltip 的显示，legend 的图例筛选。\n    series_name: str,\r\nSankey：桑基图\r\nnodes &#x3D; [&#123;&quot;name&quot;: &quot;category1&quot;&#125;,\n    &#123;&quot;name&quot;: &quot;category2&quot;&#125;,\n    &#123;&quot;name&quot;: &quot;category3&quot;&#125;,\n    &#123;&quot;name&quot;: &quot;category4&quot;&#125;,\n    &#123;&quot;name&quot;: &quot;category5&quot;&#125;,\n    &#123;&quot;name&quot;: &quot;category6&quot;&#125;,]\nlinks &#x3D; [&#123;&quot;source&quot;: &quot;category1&quot;, &quot;target&quot;: &quot;category2&quot;, &quot;value&quot;: 10&#125;,\n    &#123;&quot;source&quot;: &quot;category2&quot;, &quot;target&quot;: &quot;category3&quot;, &quot;value&quot;: 15&#125;,\n    &#123;&quot;source&quot;: &quot;category3&quot;, &quot;target&quot;: &quot;category4&quot;, &quot;value&quot;: 20&#125;,\n    &#123;&quot;source&quot;: &quot;category5&quot;, &quot;target&quot;: &quot;category6&quot;, &quot;value&quot;: 25&#125;,]\n(Sankey().add(\n    series_name&#x3D;&quot;sankey&quot;,\n    nodes&#x3D;nodes,\n    links&#x3D;links,\n    pos_bottom&#x3D;50\n    # linestyle_opt&#x3D;opts.LineStyleOpts(opacity&#x3D;0.2, curve&#x3D;0.5, color&#x3D;&quot;source&quot;),\n    # label_opts&#x3D;opts.LabelOpts(position&#x3D;&quot;right&quot;),\n).set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;Sankey-基本示例&quot;)).render())\r\nSunburst：旭日图\r\n # 数据项1：\n    data &#x3D; [\n    &#123;\n        &quot;name&quot;: &quot;Flora&quot;,\n        &quot;itemStyle&quot;: &#123;&quot;color&quot;: &quot;#da0d68&quot;&#125;,\n        &quot;children&quot;: [\n            &#123;&quot;name&quot;: &quot;Black Tea&quot;, &quot;value&quot;: 1, &quot;itemStyle&quot;: &#123;&quot;color&quot;: &quot;#975e6d&quot;&#125;&#125;,\n            &#123;\n                &quot;name&quot;: &quot;Floral&quot;,\n                &quot;itemStyle&quot;: &#123;&quot;color&quot;: &quot;#e0719c&quot;&#125;,\n                &quot;children&quot;: [&#123;...&#125;,],\n            &#125;,\n        ],\n    &#125;,\n    &#123;...&#125;\n    # 数据项2。\n    data_pair: Sequence,\ndata &#x3D; [\n    opts.SunburstItem(\n        name&#x3D;&quot;Grandpa&quot;,\n        children&#x3D;[\n            opts.SunburstItem(\n                name&#x3D;&quot;Uncle Leo&quot;,\n                value&#x3D;15,\n                children&#x3D;[...],\n            ),\n            opts.SunburstItem(...),\n        ],),\n    opts.SunburstItem(),\n]\nsunburst &#x3D; (\n    Sunburst(init_opts&#x3D;opts.InitOpts(width&#x3D;&quot;1000px&quot;, height&#x3D;&quot;600px&quot;))\n    .add(series_name&#x3D;&quot;&quot;, data_pair&#x3D;data, radius&#x3D;[0, &quot;90%&quot;])\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;Sunburst-基本示例&quot;))\n    .set_series_opts(label_opts&#x3D;opts.LabelOpts(formatter&#x3D;&quot;&#123;b&#125;&quot;))\n    .render(&quot;basic_sunburst.html&quot;)\n)\r\nThemeRiver\r\nWordCloud\r\n直角坐标系图表\r\n几乎所有表的数据要求特征相同，一般为xaxis赋字符串列表，而使用一条或多条yaxis来展示值\n1. markline\nmarkline_opts&#x3D;opts.MarkLineOpts(data&#x3D;[opts.MarkLineItem(type_&#x3D;&quot;average&quot;)]) # \r\n柱状图\r\n# 系列名称，用于 tooltip 的显示，legend 的图例筛选。\nseries_name: str,\n# 系列数据\nx&#x2F;y_axis: Sequence[Numeric, opts.BarItem, dict],\r\n热力图\r\n# Y 坐标轴数据\nyaxis_data: types.Sequence[types.Union[opts.HeatMapItem, dict]] # 例: Faker.week\n# 系列数据项\nvalue: [[0, 0, 18], ...]types.Sequence[types.Union[opts.HeatMapItem, dict]]\r\n箱形图\r\nv1 &#x3D; [[850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980],]\nc &#x3D; Boxplot()\nc.add_xaxis([&quot;expr1&quot;])\nc.add_yaxis(&quot;A&quot;, c.prepare_data(v1))\nc.set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;BoxPlot-基本示例&quot;))\nc.render()\r\n散点图\r\ndata &#x3D; [[10.0, 8.04],...]\nx_data &#x3D; [d[0] for d in data]\ny_data &#x3D; [d[1] for d in data]\n# 可能需要把global options中各轴的type设置为value\ntooltip_opts&#x3D;opts.TooltipOpts(is_show&#x3D;True)\r\n折线图\r\nLine()\n.add_xaxis(Faker.choose())\n.add_yaxis(&quot;商家A&quot;, Faker.values(), areastyle_opts&#x3D;opts.AreaStyleOpts(opacity&#x3D;0.5))\n.add_yaxis(&quot;商家B&quot;, Faker.values(), areastyle_opts&#x3D;opts.AreaStyleOpts(opacity&#x3D;0.5))\n.set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;Line-面积图&quot;))\n.render()\r\n层叠图\r\nline.overlap(scatter).render() # line &#x3D; Line()... scatter &#x3D; Scatter()...\r\n","slug":"Language Learning/Python/pyecharts使用","date":"2023-03-07T16:14:45.595Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"numpy\r\nimport numpy as np\r\napi内容：\r\n&gt; 数组的创建：\r\n\r\nnp.array()\r\n\r\nnumpy.array(object, dtype = None, copy = True, order = None, subok =\r\nFalse, ndmin = 0)\r\n​ object: 数组或嵌套的数列\r\n​ dtype:数组元素的数据类型，可选\r\n​ copy:对象是否需要复制，可选\r\n​ order:创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）\r\n​ subok:默认返回一个与基类类型一致的数组\r\n​ ndmin:指定生成数组的最小维度\r\n\r\n&gt; a &#x3D; np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ])\n&gt; a\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\r\nnp.zeros()\r\n\r\nnumpy.zeros(shape, dtype = float, order = 'C')\r\n​ shape:数组形状\r\n​ order:'C' 用于 C 的行数组，或者 'F' 用于 FORTRAN\r\n的列数组(C中的二维数组行优先，Fortran中的二维数组列优先)\r\n\r\n&gt; a &#x3D; np.zeros([3, 3])\n&gt; a\narray([[0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]]) #print(a[0][0])的结果是0.0 且 a[0][0] &#x3D;&#x3D; 0结果为True!\r\nnp.ones()\r\n\r\nnumpy.ones(shape, dtype = None, order = 'C')\r\n\r\n&gt; a &#x3D; np.ones([3, 3])\n&gt; a\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.]]) #print(a[0][0])的结果是1.0 且 a[0][0] &#x3D;&#x3D; 1结果为True!\r\nnp.empty()\r\n\r\nnumpy.empty(shape, dtype = float, order = 'C')\r\n\r\n&gt; a &#x3D; np.empty([2, 2])\n&gt; a\narray([[1.18498951e-303, 5.97409933e-299],\n       [7.54793231e+168, 4.94065646e-324]]) #注意 − 数组元素为随机值，因为它们未初始化。\r\nnp.full()\r\n&gt; np.full([3, 3], 6)\narray([[6, 6, 6],\n       [6, 6, 6],\n       [6, 6, 6]])\r\nnp.eye()\r\n&gt; np.eye(4)\narray([[1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.]]) # 生成的矩阵称为“对角矩阵”\r\nnp.arange()\r\n\r\nnp.arange(start, stop, step, dtype)\r\n\r\nnp.linspace()\r\n\r\nnp.linspace(start, stop, num=50, endpoint=True, retstep=False,\r\ndtype=None)\r\n用于创建等差数列\r\n\r\nnp.logspace()\r\n\r\nnp.logspace(start, stop, num=50, endpoint=True, base=10.0,\r\ndtype=None)\r\n用于创建等比数列\r\n\r\nnp.diag()\r\n&gt; np.diag([1, 2, 3])\narray([[1, 0, 0],\n       [0, 2, 0],\n       [0, 0, 3]])\r\nnp.tri()\r\n&gt; np.tri(3)\narray([[1., 0., 0.],\n       [1., 1., 0.],\n       [1., 1., 1.]]) #np.tri(3)[0][0] &#x3D;&#x3D; 1的结果为True!\r\nnp.vander()\r\n&gt; np.vander([3, 4, 5, 6])\narray([[ 27,   9,   3,   1],\n       [ 64,  16,   4,   1],\n       [125,  25,   5,   1],\n       [216,  36,   6,   1]])\r\n\r\n&gt; 数组属性：\r\n\r\n以array = np.vander([3, 4, 5, 6])生成的数组来做演示\r\n\r\n\r\narray.shape\r\n&gt; array.shape\n(4, 4) # type(array.shape)返回：&lt;class &#39;tuple&#39;&gt;——是“元组”\r\narray.size\r\n&gt; array.size\n16\r\narray.T\r\n&gt; array.T\narray([[ 27,  64, 125, 216],\n       [  9,  16,  25,  36],\n       [  3,   4,   5,   6],\n       [  1,   1,   1,   1]]) #即：矩阵的倒置\r\narray.real\r\n&gt; array.real\narray([[ 27,   9,   3,   1],\n       [ 64,  16,   4,   1],\n       [125,  25,   5,   1],\n       [216,  36,   6,   1]]) #复数的实部\r\narray.imag\r\n&gt; array.imag\narray([[0, 0, 0, 0],\n       [0, 0, 0, 0],\n       [0, 0, 0, 0],\n       [0, 0, 0, 0]]) #复数的虚部\r\narray.itemsize\r\narray.\r\narray.flags\r\narray.dtype\r\narray.ndim\r\n\r\n&gt; 数组的操作：\r\n\r\narray.copy()\r\n\r\n显式复制\r\n\r\n&gt; array &#x3D; np.vander([4, 4])\n\n&gt; cc &#x3D; array.copy()\n&gt; cc[0][0] &#x3D; 1000\n&gt; cc\narray([[1000,    9,    3,    1],\n       [  64,   16,    4,    1],\n       [ 125,   25,    5,    1],\n       [ 216,   36,    6,    1]])\n&gt; array\narray([[ 27,   9,   3,   1],\n       [ 64,  16,   4,   1],\n       [125,  25,   5,   1],\n       [216,  36,   6,   1]])\n\n&gt; cc &#x3D; array\n&gt; cc[0][0] &#x3D; 1000\n&gt; cc\narray([[1000,    9,    3,    1],\n       [  64,   16,    4,    1],\n       [ 125,   25,    5,    1],\n       [ 216,   36,    6,    1]])\n&gt; array\narray([[1000,    9,    3,    1],\n       [  64,   16,    4,    1],\n       [ 125,   25,    5,    1],\n       [ 216,   36,    6,    1]])\r\narray.reshape()\r\n&gt; array &#x3D; np.vander([3, 4, 5, 6])\n&gt; cc &#x3D; array.reshape(2, 8)\n&gt; cc\narray([[ 27,   9,   3,   1,  64,  16,   4,   1],\n       [125,  25,   5,   1, 216,  36,   6,   1]])\n&gt; array\narray([[ 27,   9,   3,   1],\n       [ 64,  16,   4,   1],\n       [125,  25,   5,   1],\n       [216,  36,   6,   1]])\r\narray.resize()\r\n# 接array.reshape()\n&gt; cc &#x3D; array.resize(2, 8)\n&gt; cc # 没有返回值！cc变为空！\n&gt; array\narray([[ 27,   9,   3,   1,  64,  16,   4,   1],\n       [125,  25,   5,   1, 216,  36,   6,   1]])\r\narray.flatten()\r\n# 另接array.reshape()\n&gt; cc &#x3D; array.flatten()\n&gt; cc\narray([ 27,   9,   3,   1,  64,  16,   4,   1, 125,  25,   5,   1, 216,\n        36,   6,   1])\n&gt; array\narray([[ 27,   9,   3,   1],\n       [ 64,  16,   4,   1],\n       [125,  25,   5,   1],\n       [216,  36,   6,   1]])\r\narray.max()\r\n\r\n取全数组的最大值\r\n\r\narray.min()\r\n\r\n取全数组的最小值\r\n\r\n\r\n&gt; 数组的索引：\r\n\r\n切片\r\n&gt; array &#x3D; np.vander([3, 4, 5, 6])\n&gt; array[1:3, 1:3]\narray([[16,  4],\n       [25,  5]])\n&gt; array[1:3, 1:3][0][0]\n16\r\n键值索引\r\n&gt; array &#x3D; np.vander([3, 4, 5, 6])\n&gt; array[0, 2]\n3\n&gt; array[0][2]\n3\n&gt; array[[0, 2], [1, 3]]\narray([9, 1]) #规则：array[Ⅰ,Ⅱ]两处，Ⅰ处一定是行坐标，如果此处是一个列表，则同时锁定列表中数字所指定的所有行，Ⅱ处一定是列坐标且应用规则同理！\r\nnp.ix_ 索引（键值索引加强版）\r\n\r\n解释：np.ix_() 是将前后两个[ ]中的所有内容全部一一配对！\r\n\r\n&gt; array &#x3D; np.vander([3, 4, 5, 6, 7, 8])\n&gt; array\narray([[  243,    81,    27,     9,     3,     1],\n       [ 1024,   256,    64,    16,     4,     1],\n       [ 3125,   625,   125,    25,     5,     1],\n       [ 7776,  1296,   216,    36,     6,     1],\n       [16807,  2401,   343,    49,     7,     1],\n       [32768,  4096,   512,    64,     8,     1]])\n&gt; array[np.ix_([0, 1, 2], [1, 2, 3])]\narray([[ 81,  27,   9],\n       [256,  64,  16],\n       [625, 125,  25]])\r\nnp.nditer 索引\r\n&gt; array &#x3D; np.np.vander([3, 4, 5])\n&gt; for i in array:\n    print(i)\n\n[9 3 1]\n[16  4  1]\n[25  5  1]\n&gt; for i in np.nditer(array):\n    print(i)\n   \n9\n3\n1\n16\n4\n1\n25\n5\n1\r\n\r\n&gt; 数组的拼接：\r\n\r\nvstack\r\n\r\nv: vertical\r\n\r\n&gt; array1 &#x3D; np.ones([3, 3])\n&gt; array2 &#x3D; zeros([3, 3])\n&gt; array &#x3D; np.vstack([array1, array2])\n&gt; array\narray([[1., 1., 1.],\n       [1., 1., 1.],\n       [1., 1., 1.],\n       [0., 0., 0.],\n       [0., 0., 0.],\n       [0., 0., 0.]])\n&gt; array.shape\n(6, 3)\r\nhstack\r\n\r\nh: horizontal\r\n\r\n# 接vstack\n&gt; array &#x3D; np.hstack([array2, array1])\n&gt; array\narray([[0., 0., 0., 1., 1., 1.],\n       [0., 0., 0., 1., 1., 1.],\n       [0., 0., 0., 1., 1., 1.]])\n&gt; array.shape\n(3, 6)\r\nstack\r\n# 接vstack\n&gt; array &#x3D; np.stack([array1, array2])\n&gt; array\narray([[[1., 1., 1.],\n        [1., 1., 1.],\n        [1., 1., 1.]],\n       [[0., 0., 0.],\n        [0., 0., 0.],\n        [0., 0., 0.]]])\n&gt; array.shape\n(2, 3, 3)\r\n\r\n&gt; 数组的拆分：\r\n\r\n前提：\r\n/&gt; array = np.vander([3, 4, 5, 6]) /&gt; array\r\narray([ [ 27, 9, 3, 1], [ 64, 16, 4, 1], [125, 25, 5, 1], [216, 36,\r\n6, 1]])\r\n\r\n\r\nvsplit\r\n&gt; np.vsplit(array, 2)\n[array([[27,  9,  3,  1],\n       [64, 16,  4,  1]]), array([[125,  25,   5,   1],\n       [216,  36,   6,   1]])]\r\nhsplit\r\n&gt; np.hsplit(array, 2)\n[array([[ 27,   9],\n       [ 64,  16],\n       [125,  25],\n       [216,  36]]),array([[3, 1],\n       [4, 1],\n       [5, 1],\n       [6, 1]])]\r\nsplit\r\n&gt; np.split(array, 2)\n[array([[27,  9,  3,  1],\n       [64, 16,  4,  1]]), array([[125,  25,   5,   1],\n       [216,  36,   6,   1]])]\r\n\r\n&gt; 从已有内容中创建numpy数组：\r\n\r\nnp.asarray()\r\n\r\nnumpy.asarray(a, dtype = None, order = None)\r\n​ a：任意形式的输入参数，可以是，列表, 列表的元组, 元组, 元组的元组,\r\n元组的列表，多维数组\r\n\r\n&gt; a &#x3D; [1, 2, 3]\n&gt; b &#x3D; np.array([1, 2, 3])\n&gt; type(a)\n&lt;class &#39;list&#39;&gt;\n&gt; type(b)\n&lt;class &#39;numpy.ndarray&#39;&gt;\n&gt; a &#x3D; np.asarray(a)\n&gt; type(a)\n&lt;class &#39;numpy.ndarray&#39;&gt;\n\n&gt; c &#x3D; (1, 2, 3)\n&gt; type(c)\n&lt;class &#39;tuple&#39;&gt;\n&gt; c &#x3D; np.asarray(c)\n&gt; type(c)\n&lt;class &#39;numpy.ndarray&#39;&gt;\r\nnp.frombuffer()\r\nnp.fromiter()\r\n\r\n\r\n","slug":"Language Learning/Python/numpy","date":"2023-03-07T16:14:45.590Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"install certain python\r\nversion in Linux\r\n-1: for Ubuntu:\r\njust: apt install python3.8\r\nZero, try to\r\ndownload python3.8 through yum\r\nyum list | grep python3\r\nfind no python38, so choose to setup python3.8 through make\r\ninstall\r\nFirst, download the python\r\nfile\r\ngo to website: https://www.python.org/ftp/python to choose correct\r\nfile\r\n\r\nexample:\r\nhttps://www.python.org/ftp/python/3.8.10/Python-3.8.10.tgz\r\n\r\nwget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.8.10&#x2F;Python-3.8.10.tgz\r\nunzip, make and install\r\n\r\n在编译前先在/usr/local建一个文件夹python3（作为python的安装路径，以免覆盖老的版本）\r\n\r\nmkdir &#x2F;usr&#x2F;local&#x2F;python3\r\n\r\n解压：\r\n\r\ntar -zxvf Python-3.8.10.tgz\r\n\r\n进行指定目录的编译安装\r\n\r\n.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3 # 设置编译安装路径\n\nmake # 编译\n\nmake install # 安装 \r\n\r\n创建软链接\r\n\r\nln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3  &#x2F;usr&#x2F;bin&#x2F;python3.8\n\n# 修改旧版本软连接：ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3  &#x2F;usr&#x2F;bin&#x2F;pythonv\r\n检验安装\r\npython3.8 -V\n# Python 3.8.10\r\ncentOS下升级python版本，详细步骤\r\n- leon-zyl - 博客园 (cnblogs.com)\r\n","slug":"Language Learning/Python/install certain python version in Linux","date":"2023-03-07T16:14:45.587Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"XML 简介 – 什么是\r\nXML？ | 菜鸟教程 (runoob.com)\r\n","slug":"Language Learning/MARK LANGUAGE/XML","date":"2023-03-07T16:14:45.575Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"DTD 简介 |\r\n菜鸟教程 (runoob.com)\r\n","slug":"Language Learning/MARK LANGUAGE/DTD","date":"2023-03-07T16:14:45.571Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"条件运算符: ?\r\n条件运算符\r\n- JavaScript | MDN (mozilla.org)\r\n说明\r\n条件（三元）运算符是 JavaScript\r\n仅有的使用三个操作数的运算符。\r\n一个条件后面会跟一个问号（?），如果条件为\r\ntrue，则问号后面的表达式A将会执行；\r\n表达式A后面跟着一个冒号（:），如果条件为\r\nfalse，则冒号后面的表达式B将会执行。\r\n条件运算符经常作为 if 语句的简捷形式来使用。\r\n示例一：\r\nvar age &#x3D; 26;\nvar beverage &#x3D; (age &gt;&#x3D; 21) ? &quot;Beer&quot; : &quot;Juice&quot;;\nconsole.log(beverage); &#x2F;&#x2F; &quot;Beer&quot;\r\n条件链\r\n这个三元操作符是右结合的，也就是说你可以像这样把它链接起来， 和\r\nif … else if … else if … else 链类似:\r\n示例二：\r\nfunction example(…) &#123;\n    return condition1 ? value1\n         : condition2 ? value2\n         : condition3 ? value3\n         : value4;\n&#125;\n\n&#x2F;&#x2F; Equivalent to:\n\nfunction example(…) &#123;\n    if (condition1) &#123; return value1; &#125;\n    else if (condition2) &#123; return value2; &#125;\n    else if (condition3) &#123; return value3; &#125;\n    else &#123; return value4; &#125;\n&#125;\r\n","slug":"Language Learning/JavaScript/特殊运算符","date":"2023-03-07T16:14:45.550Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"箭头函数\r\n箭头函数\r\n- JavaScript | MDN (mozilla.org)\r\n说明\r\n箭头函数表达式的语法比函数表达式更简洁，并且没有自己的this，arguments，super或new.target。箭头函数表达式更适用于那些本来需要匿名函数的地方，并且它不能用作构造函数。\r\n注意箭头函数 != 匿名函数\r\n箭头函数是js对Anonymous\r\nfunction - Wikipedia的实现，它属于匿名函数的一种。\r\n一般而言匿名函数anonymous function ==\r\nlambda表达式，但js比较特殊\r\nconst materials &#x3D; [\n  &#39;Hydrogen&#39;,\n  &#39;Helium&#39;,\n  &#39;Lithium&#39;,\n  &#39;Beryllium&#39;\n];\n\nconsole.log(materials.map(material &#x3D;&gt; material.length));\n&#x2F;&#x2F; expected output: Array [8, 6, 7, 9]\r\n语法\r\n(param1, param2, …, paramN) &#x3D;&gt; &#123; statements &#125;\n\n(param1, param2, …, paramN) &#x3D;&gt; expression\n&#x2F;&#x2F;相当于：(param1, param2, …, paramN) &#x3D;&gt;&#123; return expression; &#125;\n\n&#x2F;&#x2F; 当只有一个参数时，圆括号是可选的：\n(singleParam) &#x3D;&gt; &#123; statements &#125;\nsingleParam &#x3D;&gt; &#123; statements &#125;\n\n&#x2F;&#x2F; 没有参数的函数应该写成一对圆括号。\n() &#x3D;&gt; &#123; statements &#125;\r\n函数赋值变量\r\n就相当于给原函数换了个新名\r\n以函数形式返回\r\nfunction print(val) &#123;\n    console.log(&#96;姓名是：$&#123;val&#125;&#96;);\n&#125;\nvar fn &#x3D; print; &#x2F;&#x2F; 将函数赋值给fn\nfn(&#39;angus&#39;); &#x2F;&#x2F; 姓名是：angus\r\n以返回值形式\r\n将函数返回的值赋值给fn，如果函数没有返回值，但又接受了，此时会返回undefined\r\n有返回值：\r\nfunction print(val) &#123;\n   return &#96;姓名是：$&#123;val&#125;&#96;;\n&#125;\nvar fn &#x3D; print(&#39;angus&#39;);\nconsole.log(fn); &#x2F;&#x2F; 姓名是：angus\r\n无返回值：\r\nfunction print(val) &#123;\n    &#96;姓名是：$&#123;val&#125;&#96;;\n&#125;\nvar fn &#x3D; print(&#39;angus&#39;);\nconsole.log(fn); &#x2F;&#x2F; undefined\r\n返回值可为函数\r\n将我们定义的print函数返回给fn：\r\nfunction sum() &#123;\n    var num &#x3D; 0;\n    \n    function print() &#123;\n        num +&#x3D; 2;\n        return num;\n    &#125;\n    return print; &#x2F;&#x2F; return了print函数体，并非直接return num\n&#125;\nvar fn &#x3D; sum();\nconsole.log(fn()); &#x2F;&#x2F; 2\n\n&#x2F;&#x2F; var a &#x3D; function sum() &#123;...&#125;  &#x2F;&#x2F; &#x3D;&#x3D;&#x3D; var a &#x3D; sum\n&#x2F;&#x2F; a &#x3D;&gt; sum()&#123;...&#125;\n&#x2F;&#x2F; a() &#x3D;&gt; print()&#123;...&#125;\n&#x2F;&#x2F; a()() &#x3D;&gt; 2\n\n&#x2F;&#x2F; var b &#x3D; sum()\n&#x2F;&#x2F; b &#x3D;&gt; print()&#123;...&#125;\n&#x2F;&#x2F; b() &#x3D;&gt; 2\r\n直接执行print函数，没有返回：\r\nfunction sum() &#123;\n    var num &#x3D; 0;\n    function print() &#123;\n        num +&#x3D; 2;\n        return num;\n    &#125;\n    print();\n&#125;\nvar fn &#x3D; sum();\nconsole.log(fn); &#x2F;&#x2F; undefined\r\n函数参数中的括号\r\n以此为例：\r\nfunction computeLinkBreadths(&#123;nodes&#125;)&#123;...&#125;\n\nfunction computeLinkBreadths(nodes)&#123;...&#125;\r\n解释：带大括号是指传递一个参数，参数类型为对象，里面有一个属性nodes，而不带大括号就是传递一个参数这里的大括号不是块级作用域，就是单纯的表示一个对象\r\n但从使用上讲两种方式没有直接区别，但使用传递对象的方法会使今后的扩展变得很方便比如如果需要增加一个参数，在传递对象的方法中只需要直接向里面添加一个属性就行了，否则就需要在后面添加一个硬性的参数，而参数越来越多，调用的时候就越来越复杂——参数顺序不能乱。\r\n另外，上面的这种写法是es6的解构赋值，可以看下阮老师的http://es6.ruanyifeng.com/#do...，内容不多全书看下来要不了多久，但对你今后的帮助会非常大。\r\narguments对象\r\n&gt; var b &#x3D; function(a) &#123;\n    return arguments.length ? &#96;$&#123;a&#125;&#96; : &quot;none&quot;&#125;\n&lt; undefined\n\n&gt; b()\n&lt; &#39;none&#39;\n\n&gt; b(&quot;c&quot;)\n&lt; &#39;c&#39;\r\n\r\narguments对象是所有（非箭头）函数中都可用的局部变量。你可以使用arguments对象在函数中引用函数的参数。此对象包含传递给函数的每个参数，第一个参数在索引0处。\r\n\r\nArguments\r\n对象 - JavaScript | MDN (mozilla.org)\r\n","slug":"Language Learning/JavaScript/函数","date":"2023-03-07T16:14:45.542Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"FormData\r\n对象的使用 - Web API 接口参考 | MDN (mozilla.org)\r\n\r\nFormData对象用以将数据编译成键值对，以便用XMLHttpRequest来发送数据。其主要用于发送表单数据，但亦可用于发送带键数据(keyed\r\ndata)，而独立于表单使用。如果表单enctype属性设为multipart/form-data\r\n，则会使用表单的submit()方法来发送数据，从而，发送数据具有同样形式。\r\n\r\n从零开始创建FormData对象\r\n你可以自己创建一个FormData对象，然后调用它的append()方法来添加字段，像这样：\r\nvar formData &#x3D; new FormData();\n\n&#x2F;&#x2F; 发送键值对\nformData.append(&quot;username&quot;, &quot;Groucho&quot;);\nformData.append(&quot;accountnum&quot;, 123456); &#x2F;&#x2F;数字123456会被立即转换成字符串 &quot;123456&quot;\n\n&#x2F;&#x2F; HTML 文件类型input，由用户选择\nformData.append(&quot;userfile&quot;, fileInputElement.files[0]); &#x2F;&#x2F; fileInputElement是 file类型的input标签\n\n&#x2F;&#x2F; JavaScript file-like 对象\nvar content &#x3D; &#39;&lt;a id&#x3D;&quot;a&quot;&gt;&lt;b id&#x3D;&quot;b&quot;&gt;hey!&lt;&#x2F;b&gt;&lt;&#x2F;a&gt;&#39;; &#x2F;&#x2F; 新文件的正文\nvar blob &#x3D; new Blob([content], &#123; type: &quot;text&#x2F;xml&quot;&#125;);\n\nformData.append(&quot;webmasterfile&quot;, blob);\n\n&#x2F;&#x2F; 发送\nvar request &#x3D; new XMLHttpRequest();\nrequest.open(&quot;POST&quot;, &quot;http:&#x2F;&#x2F;foo.com&#x2F;submitform.php&quot;);\nrequest.send(formData);\r\n上传文件思路：\r\n利用h5的input标签，将其type设置为file\r\n&lt;input\r\ntype=\"file\"&gt; - HTML（超文本标记语言） | MDN (mozilla.org)\r\n此时，注意其一特殊的内置属性：files属性，它会以FileList对象的形式列出已选择的文件\r\nFileList\r\n- Web API 接口参考 | MDN (mozilla.org)\r\n值得注意的是，Filelist不是formdata，请不要尝试直接将Filelist对象发送给后端\r\n同时，如需发送formdata，请先行创建一个FormData对象\r\nFormData并非一定需要一个form来作为基础进行创建，但一定需要键值对\r\n也可以利用\r\nformdata.append(&#39;file&#39;, document.getElementById(&quot;fileInput&quot;).files[0])\r\n手动将传入的文件加入formdata对象中\r\n发送请求时，需要特别设置其请求头：\r\nheaders: &#123;\n      &#39;Content-Type&#39;: &quot;multipart&#x2F;form-data&quot;,\n&#125;\r\n防止所发送的文件被错误地转换了格式\r\n循环获取formdata内容\r\njavascript\r\n- How to inspect FormData? - Stack Overflow\r\nfor (var [a, b] of formData.entries()) &#123;\n  console.log(a, b, &#39;--------------&#39;);\n&#125;\r\nformdata.get(key)\r\n\r\n注意:\r\n所有的输入元素都需要有name属性，否则无法访问到值。\r\n——FormData()\r\n- Web API 接口参考 | MDN (mozilla.org)\r\n\r\n上传文件完整攻略：\r\n&lt;body&gt;\n&lt;form id&#x3D;&quot;form&quot;&gt;\n    &lt;label&gt;Choose File to Send: &lt;&#x2F;label&gt;\n    &lt;input type&#x3D;&quot;file&quot; multiple name&#x3D;&quot;file&quot; required&#x2F;&gt; &lt;!-- 注意，用于输入的input一定要有name --&gt;\n    &lt;br &#x2F;&gt;\n    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Send the file!&quot;&#x2F;&gt;\n&lt;&#x2F;form&gt;\n&lt;script&gt;\n    var form &#x3D; document.getElementById(&#39;form&#39;);\n    form.addEventListener(&#39;submit&#39;, function (ev) &#123;\n        var oData &#x3D; new FormData(form);\n\n        axios(&#123;\n            method: &quot;post&quot;,\n            url: &quot;upload&quot;,\n            headers: &#123;\n                &#39;Content-Type&#39;: &quot;multipart&#x2F;form-data&quot;,\n            &#125;,\n            data: oData,\n            timeout: 3000,\n        &#125;).then(res &#x3D;&gt; &#123;\n            console.log(res)\n        &#125;)\n        ev.preventDefault(); &#x2F;&#x2F; 阻止对应组件的默认行为,此处为防止页面刷新导致努力ba\n    &#125;, false);\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\r\n# flask 后台\n@app.route(&#39;&#x2F;upload&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])\ndef upload_file():\n    if request.method &#x3D;&#x3D; &#39;POST&#39;:\n        print(request.files)\n\n        print(request.files.getlist(&#39;file&#39;))\n\n        upload_files &#x3D; request.files.getlist(&#39;file&#39;)\n\n        for i in upload_files:\n            i.save(i.filename + &#39;.jpg&#39;)\n        return &quot;OK!&quot;\n    else:\n        return &quot;Wrong!&quot;\r\n","slug":"Language Learning/JavaScript/formdata使用攻略","date":"2023-03-07T16:14:45.510Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"module 本模块的名称&#123;\n\texports 对外暴露的包路径;\n\trequires 需要依赖的其他模块名称;\n&#125;\r\n一、什么是Java module？\r\n与Java\r\n中的package有些类似，module引入了Java代码分组的另一个级别。每个这样的分组（module）都包含许多子package包。通过在一个模块的源代码文件package的根部，添加文件module-info.java来声明该文件夹及其子文件夹为一个模块。该文件语法如下：\r\nmodule xxx.yyy&#123;\n \t....\n&#125;\r\n其中xxx.yyy是模块module声明的名称，不是package名称。\r\n二、模块导出package\r\n文件module-info.java可以指定该模块下面的哪些package对外可见、可访问。通过一个新的关键字exports来实现该功能。\r\nmodule xxx.yyy&#123;\n\texports com.zimug.java9;\n&#125;\r\ncom.zimug.java9代表一个package。\r\n\r\n需要注意的是：即使给定package包中的类是public的，如果未通过'exports'显式导出其程序包，则它们在模块外部也是不可见的（在编译时和运行时都是如此）。\r\n\r\n三、模块导入package\r\n如果另一个模块想要使用被导出的package包中的类，可以用requires关键字在其module-info.java文件中来导入（读取）目标模块的package包。\r\nmodule def.stu&#123;\n\trequires xxx.yyy;\n&#125;\r\n四、Java module的意义\r\n在笔者看来，Java 9引入module\r\n模块化管理系统，更多的是从安全性的角度考虑。Java\r\n代码中90%以上的漏洞都是由反射和访问权限控制粒度不足引起的，Java\r\n9的模块化系统正好能解决这个问题。Java 9 module提供另一个级别的Java\r\n代码可见性、可访问性的控制。\r\n比如说：我们都知道当一个class被修饰为private的时候，意味着这个类是内部类。对于顶级类(外部类)来说，只有两种修饰符：public和默认(default)。这也就意味着一个问题，有些public\r\nclass我们本来是打算在jar包定义的范围内使用的，但是结果却是任何引入了这个jar的项目都可以使用这个jar里面所有的public\r\nclass代码。\r\n也就是我们的原意是在有限范围内提供公开访问，结果却是无限制的对外公开。在引入Java\r\n9模块化之后，可以实现有限范围内的代码public访问权限，将代码公开区分为：模块外部有限范围的公开访问和模块内部的公开访问。\r\n五、实例\r\n在此示例中，我将创建两个模块“ common.widget”和“\r\ndata.widget”，并将它们放置在单个文件夹“ modules-examples/src”下。文件“\r\nmodule-info.java”将放置在每个模块的根文件夹下。 文件及目录格式如下：\r\nD:\\modules-example&gt;tree &#x2F;F &#x2F;A\n\\---src\n    +---common.widget\n    |   |   module-info.java\n    |   |   \n    |   +---com\n    |   |   \\---zimug\n    |   |           RendererSupport.java\n    |   |           \n    |   \\---org\n    |       \\---jwidgets\n    |               SimpleRenderer.java\n    |               \n    \\---data.widget\n        |   module-info.java\n        |   \n        \\---com\n            \\---example\n                    Component.java\r\n第一个模块\r\n本代码文件目录：modules-example/src/common.widget/org/jwidgets/SimpleRenderer.java。这个package在后文中没有被exports。\r\npackage org.jwidgets;\n\npublic class SimpleRenderer &#123;\n  public void renderAsString(Object object) &#123;\n      System.out.println(object);\n  &#125;\n&#125;\r\n本代码文件目录：modules-example/src/common.widget/com/zimug/RendererSupport.java。这个package在后文中被exports了。\r\npackage com.zimug;\n\nimport org.jwidgets.SimpleRenderer;\n\npublic class RendererSupport &#123;\n\tpublic void render(Object object) &#123;\n        new SimpleRenderer().renderAsString(object);\n  \t&#125;\n&#125;\r\n模块导出，本代码文件目录：modules-example/src/common.widget/module-info.java。只导出com.zimug包,没有导出\r\norg.jwidgets包。导出的模块名称为common.widget\r\nmodule common.widget&#123;\n  \texports com.zimug;\n&#125;\r\n第二个模块\r\n模块导入common.widget，本代码文件目录：modules-example/src/data.widget/module-info.java\r\nmodule data.widget &#123;\n\trequires common.widget;\n&#125;\r\n使用导入模块common.widget中的package:com.zimug。本代码文件路径：\r\nmodules-example/src/data.widget/com/example/Component.java\r\npackage com.example;\n\nimport com.zimug.RendererSupport;\n\npublic class Component &#123;\n  \tpublic static void main(String[] args) &#123;\n     \tRendererSupport support &#x3D; new RendererSupport();\n      \tsupport.render(&quot;Test Object&quot;);\n  \t&#125;\n&#125;\r\n正常编译执行，结果如下：\r\nTest Object\r\n尝试使用未被exports的package代码\r\n由于包“ org.jwidgets”尚未通过“\r\ncommon.widget”模块导出，因此另一个模块“\r\ndata.widget”无法使用该package包下的类SimpleRenderer。我们做一个反例，看看会发生什么：\r\npackage com.example;\nimport org.jwidgets.SimpleRenderer;\n\npublic class Component &#123;\n  \tpublic static void main(String[] args) &#123;\n    \tSimpleRenderer simpleRenderer &#x3D; new SimpleRenderer(); \n    \tsimpleRenderer.renderAsString(&quot;Test Object&quot;);\n  \t&#125;\n&#125;\r\n编译报错信息如下：\r\nD:\\modules-example\\src\\data.widget\\com\\example\\Component.java:3: error: package org.jwidgets is not visible\nimport org.jwidgets.SimpleRenderer;\n          ^\n  (package org.jwidgets is declared in module common.widget, which does not export it)\n1 error\r\n正如我们所看到的，未被exports的package下面的class即使是public的也不能被访问。\r\n","slug":"Language Learning/Java/JavaProject/module_info文件有什么用","date":"2023-03-07T16:14:45.500Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Eclipse中有如下一些和运行调试相关的快捷键。\r\n\r\n【Ctrl+Shift+B】：在当前行设置断点或取消设置的断点。\r\n【F11】：调试最后一次执行的程序。\r\n【Ctrl+F11】：运行最后一次执行的程序。\r\n【F5】：跟踪到方法中，当程序执行到某方法时，可以按【F5】键跟踪到方法中。\r\n\r\n","slug":"Language Learning/Java/JavaProject/eclipse","date":"2023-03-07T16:14:45.497Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"folder\r\n.gradle与.idea\r\nandroid自动生成的文件夹\r\ngradle\r\ngradle是android项目的类似maven的包管理工具，自动配置\r\napp\r\n具体的代码资源，工作的核心目录\r\nbuild\r\nmake project或run project生成的，可以从中找到apk文件\r\n转移工程时可以删除\r\nlibs\r\n第三方jar包存储位置\r\nsrc\r\nandroidTest\r\nmain\r\njava\r\nres\r\ntest\r\nfiles\r\n.gitignore\r\nproject/app版本控制\r\nbuild.gradle\r\n全局/app构建脚本\r\ngradle.properties\r\n全局gradle的配置文件\r\ngradlew与gradlws.bat\r\ngradle命令的具体实现脚本\r\nlocal.properties\r\n指定sdk路径等\r\n## This file is automatically generated by Android Studio.\r\nsettings.gradle\r\n用来指定项目中所有指定的模块\r\n","slug":"Language Learning/Java/AndroidProject/project structure","date":"2023-03-07T16:14:45.482Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\"Failed\r\nto install the following Android SDK packages as some licences have not\r\nbeen accepted\" error - Stack Overflow\r\n","slug":"Language Learning/Java/AndroidProject/Flutter","date":"2023-03-07T16:14:45.477Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"\r\nflutter sdk 版本升级到2.0或者更高的版本后就发现运行时会报错：\r\n\r\nError: Cannot run with sound null safety, because the following dependencies\ndon&#39;t support null safety:\n\n - package:loading_indicator_view\n - package:flutter_swiper\n - package:flutter_page_indicator\n - package:transformer_page_view\n\nFor solutions, see https:&#x2F;&#x2F;dart.dev&#x2F;go&#x2F;unsound-null-safety\n\n\nFAILURE: Build failed with an exception.\r\n也就是说以上有些包不支持 safety模式。\r\n解决方案：--no-sound-null-safety\r\n\r\nrun flutter run --no-sound-null-safety\r\nbuild flutter build apk --no-sound-null-safety\r\n\r\n","slug":"Language Learning/Java/AndroidProject/Flutter Error","date":"2023-03-07T16:14:45.472Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"mipmap-mdpi：108 * 108\r\nmipmap-hdpi：162 * 162\r\nmipmap-xhdpi：216* 216\r\nmipmap-xxhdpi：324 * 324\r\nmipmap-xxxhdpi：432 * 432\r\nmipmap-mdpi 48 ic_launcher.png/ic_launcher_round.png\r\nmipmap-hdpi 72 ic_launcher.png/ic_launcher_round.png\r\nmipmap-xhdpi 96 ic_launcher.png/ic_launcher_round.png\r\nmipmap-xxhdpi 144 ic_launcher.png/ic_launcher_round.png\r\nmipmap-xxxhdpi 192 ic_launcher.png/ic_launcher_round.png\r\nDPI:每英寸像素数\r\n简单的屏幕分辨率计算方法：\r\nDisplayMetrics metrics = this.getResources().getDisplayMetrics();\r\nfloat density = metrics.density; int dpi = metrics.densityDpi; int\r\nheightPixels = metrics.heightPixels; int widthPixels =\r\nmetrics.widthPixels; Log.e(\"---metrics---\",\r\n\"比例:\"+density+\"dpi:\"+dpi+\"高像素:\"+heightPixels+\"宽像素:\"+widthPixels);\r\n图片大小适应不同屏幕：\r\nimg.post(new Runnable() &#123;\n   @Override\n\tpublic void run() &#123;\n\tint spec &#x3D; View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\n\timg.measure(spec,spec);\n\tint measuredWidth&#x3D;img.getMeasuredWidth();int measuredHeight&#x3D;img.getMeasuredHeight();&#x2F;&#x2F;原始大小\n\tif (measuredWidth&#x3D;&#x3D;0)&#123;\n\t\treturn;\n  \t&#125;\n \n    int width&#x3D;img.getWidth();int height&#x3D;img.getHeight();&#x2F;&#x2F;真实大小\n    LinearLayout.LayoutParams lp&#x3D;(LinearLayout.LayoutParams)img.getLayoutParams();\n\tlp.width&#x3D;width;\n\tlp.height&#x3D;width*(measuredHeight &#x2F; measuredWidth);\n\timg.setLayoutParams(lp);&#x2F;&#x2F;设置大小\n\t&#125;\n&#125;);\r\ndp与px计算图（mdpi 1dp=1px）：\r\nldpi:1dp=0.75px mdpi:1dp=1px hdpi:1dp=1.5px xhdpi:1dp=2px\r\nxxhdpi:1dp=3px xxxhdpi:1dp=4px\r\nAndroid手机屏幕标准 对应图标尺寸标准 屏幕密度 比例\r\nxxxhdpi 38402160 192192 640 16\r\nxxhdpi 19201080 144144 480 12\r\nxhdpi 1280720 9696 320 8\r\nhdpi 480800 7272 240 6\r\nmdpi 480320 4848 160 4\r\nldpi 320240 3636 120 3\r\n注：Android studio mipmap文件夹只存放启动图标icon\r\nhttp://blog.csdn.net/a704755096/article/details/46342689\r\n屏幕横竖屏布局切换：\r\n1)单个布局xml直接横竖屏切换，不重新加载数据：android:configChanges=\"orientation|keyboardHidden|screenSize\"\r\n2)layout-land和layout-port布局横竖屏切换，不重新加载数据：FragmentActivity重写onRetainCustomNonConfigurationInstance()\r\nActivity\r\n重写onRetainNonConfigurationInstance()保存数据，在onCreate()时判断getLastNonConfigurationInstance()是否null:\r\nJava代码 \r\n\r\n@Override\r\npublic void onCreate(Bundle\r\nsavedInstanceState) {\r\nsuper.onCreate(savedInstanceState);\r\nsetContentView(R.layout.main);\r\n\r\nObject data = getLastNonConfigurationInstance();\r\nif (data == null) {\r\n​ findviewbyidLoadMyData();\r\n}\r\n...\r\n}\r\n\r\n更多：安卓图片动画（http://www.open-open.com/lib/view/open1335777066015.html）、点九图工具：\r\n1.打开Android 工程包\r\nSDK文件，tools文件，双击draw9patch.bat\r\n2.弹出的窗口点击 File，点击要编辑的图片open 9patch\r\n3.编辑。鼠标左键：划线 / shift + 鼠标左键：删除划线\r\n4.保存。点击save 9patch\r\n","slug":"Language Learning/Java/AndroidProject/App logo","date":"2023-03-07T16:14:45.467Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"what the import statements\r\ncan do\r\nHow to use Java import\r\nstatement\r\n\r\nIn Java, the import statement is used to bring\r\ncertain classes or the entire packages, into visibility. As soon as\r\nimported, a class can be referred to directly by using only its\r\nname.\r\nThe import statement is a convenience to the\r\nprogrammer and is not technically needed to write complete Java program.\r\nIf you are going to refer to some few dozen classes into your\r\napplication, the import statement will save a lot of\r\ntime and typing also.\r\nIn a Java source file, the import statements occur\r\nimmediately following the package statement (if exists)\r\nand before any class definitions.\r\nBelow is the general form of the import statement\r\n:\r\nimport pkg1[.pkg2].(classname|*);\r\nwhen is the\r\n","slug":"Language Learning/Java/What happen when you use import statement","date":"2023-03-07T16:14:45.459Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"在线工具\r\n\r\nJava 在线工具 | 菜鸟工具\r\n(runoob.com)\r\n\r\n\r\n","slug":"Language Learning/Java/Java学习","date":"2023-03-07T16:14:45.421Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Java语言：\r\n教程网站：\r\nOracle Official Site：The Java™\r\nTutorials (oracle.com)\r\nRunoob：Java\r\n教程 | 菜鸟教程 (runoob.com)\r\nw3school：Java\r\nTutorial (w3schools.com)\r\n搜索引擎：\r\n集合，并发，JVM\r\nLinux：\r\n具备相当程度的Linux基础。包括基础命令和设计模式\r\n数据库：\r\nMySql，Redis，HBase，MangoDB，ES\r\n框架：\r\nSpring，SpringMVC，SpringBoot，MyBatis，Tomcat，Dubbo\r\nMQ：\r\nRocketMQ，RabbitMQ，Kafka，ActiveMQ\r\n分布式：\r\nZooKeeper，分布式协议，如何保持一致性？RPC\r\n计算机：\r\n计算机网络，OS，算法\r\n系统：\r\n系统设计：\r\nDDD（领域设计），系统分层（横向纵向）\r\n其他：\r\n缓存，网络安全\r\n","slug":"Language Learning/Java/Java后端学习路径","date":"2023-03-07T16:14:45.418Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"关键词：yeild关键字，yeild return，生成器函数，协程\r\nYeild in JS\r\nyield\r\n- JavaScript | MDN (mozilla.org)\r\nfunction*\r\n- JavaScript | MDN (mozilla.org)\r\n简单地说，Yeild可以在JS中暂停一个生成器函数，当我们再次呼叫这个生成器函数示例时，我们就可以该示例相关的一次结果\r\nfunction* foo(index) &#123;\n  while (index &lt; 5) &#123;\n    yield index;\n    index++;\n  &#125;\n&#125;\n\nconst iterator &#x3D; foo(0);\n\nconsole.log(iterator.next().value);\n&#x2F;&#x2F; Expected output: 0\n\nconsole.log(iterator.next().value);\n&#x2F;&#x2F; Expected output: 1\n\nconsole.log(iterator.next().value); &#x2F;&#x2F; 2\nconsole.log(iterator.next().value); &#x2F;&#x2F; 3\nconsole.log(iterator.next().value); &#x2F;&#x2F; 4\nconsole.log(iterator.next().value); &#x2F;&#x2F; undefined\r\nYeild in Python\r\n如何理解Python中的yield用法?\r\n- 知乎 (zhihu.com)\r\n事实上，Python中的yield与JS中的yield十分相近：同样是对规则的定义、会暂停执行函数，返回generator对象等等。\r\n不同的是，Python不需要使用类似function*这样的单独的定义字符。\r\n不过，在Python中我们可以直接使用for等方法来直接遍历整个生成器对象来快速获得全部的结果。\r\ndef fab(max): \n    n, a, b &#x3D; 0, 0, 1 \n    while n &lt; max: \n        yield b      # 使用 yield\n        # print b \n        a, b &#x3D; b, a + b \n        n &#x3D; n + 1\n \nfor n in fab(5): \n    print n\r\n\r\n生成器就是一个使用了yield关键字的函数，此函数可返回生成器对象\r\n\r\n对了，我们在Python中还可以使用send方法来在实时调用中给生成器函数传入我们需要的值：\r\nimport time\n\ndef fib(n):\n    index &#x3D; 0\n    a &#x3D; 0\n    b &#x3D; 1\n\n    while index &lt; n:\n        sleep &#x3D; yield b\n        print(&#39;等待%s秒&#39; %sleep)\n        time.sleep(sleep)\n        a,b &#x3D; b, a+b\n        index +&#x3D; 1\n\nfib &#x3D; fib(20)\nprint(fib.send(None))   # 效果等同于print(next(fib))\nprint(fib.send(2))\nprint(fib.send(3))\nprint(fib.send(4))\n\n# -----output:-----\n# \r\n~更多示例：Python\r\n中 yield 的用法理解 与 send()\r\n函数对生成器赋值_怎样才能回到过去的博客-CSDN博客 ~\r\ndef test():\n    print(&quot;--------Test starting------&quot;)\n    while True:\n        print(&quot;Stop here, position NO.0&quot;)\n        a &#x3D; &quot;a is unassigned!!!&quot;\n        print(a)\n        print(&quot;Stop here, position NO.1&quot;)\n        a &#x3D; yield &quot;--------Test over----------\\n&quot;\n        print(a)\n        print(&quot;Stop here, position NO.2&quot;)\n\n\nt &#x3D; test()\nprint(&quot;*&quot; * 20 + &quot;Next 1 Start&quot; + &quot;*&quot; * 20 + &quot;\\n&quot;)\nprint(next(t))\nprint(&quot;*&quot; * 20 + &quot;Next 2 Start&quot; + &quot;*&quot; * 20 + &quot;\\n&quot;)\nprint(next(t))\nprint(&quot;*&quot; * 20 + &quot;Next 3 Start&quot; + &quot;*&quot; * 20 + &quot;\\n&quot;)\nprint(t.send(&quot;a is assigned!&quot;))\n\n# ********************Next 1 Start********************\n# \n# --------Test starting------\n# Stop here, position NO.0\n# a is unassigned!!!\n# Stop here, position NO.1\n# --------Test over----------\n# \n# ********************Next 2 Start********************\n# \n# None\n# Stop here, position NO.2\n# Stop here, position NO.0\n# a is unassigned!!!\n# Stop here, position NO.1\n# --------Test over----------\n# \n# ********************Next 3 Start********************\n#\n# a is assigned!\n# Stop here, position NO.2\n# Stop here, position NO.0\n# a is unassigned!!!\n# Stop here, position NO.1\n# --------Test over----------\n#\n\n\n# 规律总结：\n# 1. 生成器函数实例化时，是不会执行的\n# 2. 当调用next函数时，我们的函数才会开始执行，每次执行时只会执行到yeild处一次\n# \t2.1. 初次执行时，函数是从头开始执行，执行到第一个yeild的地方放回yeild后面的值，如果没有外部传值，则yeild本身返回None\n#\t2.2. 后续执行时，函数从上一次yeild中断的地方重新开始执行直到下一个yeild出现（然后在那个地方再次中断）\n# 3. 我们可以通过send向生成器传值，这是JS所没有的\r\n小拓展\r\n深入理解Python 中的\r\nyield from语法 - 知乎 (zhihu.com)\r\n就Python而言，它还有更多的语法糖：yeild from:\r\n\r\n&gt;使用yield\n\n&gt;# 字符串\n&gt;astr&#x3D;&#39;ABC&#39;\n&gt;# 列表\n&gt;alist&#x3D;[1,2,3]\n&gt;# 字典\n&gt;adict&#x3D;&#123;&quot;name&quot;:&quot;wangbm&quot;,&quot;age&quot;:18&#125;\n&gt;# 生成器\n&gt;agen&#x3D;(i for i in range(4,8))\n\n&gt;def gen(*args, **kw):\n   for item in args:\n       for i in item:\n           yield i\n\n&gt;new_list&#x3D;gen(astr, alist, adict, agen)\n&gt;print(list(new_list))\n&gt;# [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, 1, 2, 3, &#39;name&#39;, &#39;age&#39;, 4, 5, 6, 7]\n&gt;使用yield from\n\n&gt;# 字符串\n&gt;astr&#x3D;&#39;ABC&#39;\n&gt;# 列表\n&gt;alist&#x3D;[1,2,3]\n&gt;# 字典\n&gt;adict&#x3D;&#123;&quot;name&quot;:&quot;wangbm&quot;,&quot;age&quot;:18&#125;\n&gt;# 生成器\n&gt;agen&#x3D;(i for i in range(4,8))\n\n&gt;def gen(*args, **kw):\n   for item in args:\n       yield from item\n\n&gt;new_list&#x3D;gen(astr, alist, adict, agen)\n&gt;print(list(new_list))\n&gt;# [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, 1, 2, 3, &#39;name&#39;, &#39;age&#39;, 4, 5, 6, 7]\r\n\r\nYeild in C# and Unity\r\n","slug":"Language Learning/yeild","date":"2023-03-07T16:14:45.230Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"GENERAL\r\nStandard Naming Conventions\r\n- JAVA:\r\nDetails:\r\nThe below list outlines the standard Java naming conventions for each\r\nidentifier type:\r\n\r\nPackages:\r\nNames should be in lowercase. With small projects that only have a\r\nfew packages it's okay to just give them simple (but meaningful!)\r\nnames:\r\npackage pokeranalyzer package mycalculator \r\nIn software companies and large projects where the packages might be\r\nimported into other classes, the names will normally be subdivided.\r\nTypically this will start with the company domain before being split\r\ninto layers or features:\r\npackage com.mycompany.utilities package org.bobscompany.application.userinterface \r\nClasses:\r\nNames should be in CamelCase. Try to use nouns because a class is\r\nnormally representing something in the real world:\r\nclass Customer class Account \r\nInterfaces:\r\nNames should be in CamelCase. They tend to have a name that describes\r\nan operation that a class can do:\r\ninterface Comparable interface Enumerable \r\nNote that some programmers like to distinguish interfaces by\r\nbeginning the name with an \"I\":\r\ninterface IComparable interface IEnumerable \r\nMethods:\r\nNames should be in mixed case. Use verbs to describe what the method\r\ndoes:\r\nvoid calculateTax() string getSurname() \r\nVariables:\r\nNames should be in mixed case. The names should represent what the\r\nvalue of the variable represents:\r\nstring firstName int orderNumber \r\nOnly use very short names when the variables are short-lived, such as\r\nin for loops:\r\nfor (int i&#x3D;0; i&lt;20;i++) &#123;   &#x2F;&#x2F;i only lives in here &#125; \r\nConstants:\r\nNames should be in uppercase.\r\nstatic final int DEFAULT_WIDTH static final int MAX_HEIGHT \r\n\r\nReference in this part:\r\n\r\nUsing\r\nJava Naming Conventions (thoughtco.com)\r\n\r\n\r\nStandard Naming\r\nConventions - PYTHON\r\n","slug":"Language Learning/NAMING CONVENTIONS","date":"2023-03-07T16:14:45.225Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"浅谈玄学算法——模拟退火 -\r\nM_sea 的博客 - 洛谷博客 (luogu.org)\r\n","slug":"Algorithm/Simulate Anneal","date":"2023-03-07T16:14:44.765Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"拒绝服务攻击\r\n拒绝服务（DoS）：DoS是 Denial of\r\nservice的简称，即拒绝服务，任何对服务的干涉，使得其可用性降低或者失去可用性均称为拒绝服务。例如一个计算机系统崩溃或其带宽耗尽或其硬盘被填满，导致其\r\nDDoS\r\nCross—Site\r\nRequest Forgery - 跨站点请求伪造 - CSRF\r\n什么是CSRF攻击？如何防御CRSF攻击？\r\n- 知乎 (zhihu.com)\r\nCSRF攻击攻击原理及过程如下：\r\n\r\n用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；\r\n2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；\r\n用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；\r\n网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；\r\n浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。\r\nCSRF攻击实例\r\n\r\nCross Site Scripting\r\n- 跨站脚本攻击 - XSS\r\n跨站点请求伪造\r\nXSS可以插在哪里？\r\n\r\n用户输入作为script标签内容\r\n用户输入作为HTML注释内容\r\n用户输入作为HTML标签的属性名\r\n用户输入作为HTML标签的属性值\r\n用户输入作为HTML标签的名字\r\n直接插入到CSS里\r\n\r\n直接办法：不要引入任何不可信的第三方JavaScript到页面里！\r\nReference:\r\n\r\nXSS(跨站脚本攻击)详解\r\n- 墨鱼菜鸡 - 博客园 (cnblogs.com)\r\n\r\n\r\n注入攻击\r\n","slug":"网络攻击","date":"2023-03-07T16:14:44.714Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"线程、进程、协程、与CPU多核\r\n一、进程、线程、协程的概念\r\n进程：\r\n是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统资源的基本单位。\r\n线程：\r\n是进程的一个执行单元，是进程内科调度实体。比进程更小的独立运行的基本单位。线程也被称为轻量级进程。\r\n协程：\r\n是一种比线程更加轻量级的存在。一个线程也可以拥有多个协程。其执行过程更类似于子例程，或者说不带返回值的函数调用。\r\n二、进程和线程的区别\r\n地址空间：\r\n线程共享本进程的地址空间，而进程之间是独立的地址空间。\r\n资源：\r\n线程共享本进程的资源如内存、I/O、cpu等，不利于资源的管理和保护，而进程之间的资源是独立的，能很好的进行资源管理和保护。\r\n健壮性：\r\n多进程要比多线程健壮，一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。\r\n执行过程：\r\n每个独立的进程有一个程序运行的入口、顺序执行序列和程序入口，执行开销大。\r\n但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，执行开销小。\r\n可并发性：\r\n两者均可并发执行。\r\n切换时：\r\n进程切换时，消耗的资源大，效率高。所以涉及到频繁的切换时，使用线程要好于进程。同样如果要求同时进行并且又要共享某些变量的并发操作，只能用线程不能用进程。\r\n其他：\r\n线程是处理器调度的基本单位，但是进程不是。\r\n三、协程和线程的区别\r\n协程避免了无意义的调度，由此可以提高性能，但程序员必须自己承担调度的责任。同时，协程也失去了标准线程使用多CPU的能力。\r\n线程\r\n相对独立\r\n有自己的上下文\r\n切换受系统控制；\r\n协程\r\n相对独立\r\n有自己的上下文\r\n切换由自己控制，由当前协程切换到其他协程由当前协程来控制。\r\n四、何时使用多进程，何时使用多线程？\r\n对资源的管理和保护要求高，不限制开销和效率时，使用多进程。\r\n要求效率高，频繁切换时，资源的保护管理要求不是很高时，使用多线程。\r\n五、为什么会有线程？\r\n每个进程都有自己的地址空间，即进程空间，在网络或多用户换机下，一个服务器通常需要接收大量不确定数量用户的并发请求，为每一个请求都创建一个进程显然行不通（系统开销大响应用户请求效率低），因此操作系统中线程概念被引进。\r\n六、*python多线程的问题（面试问题）\r\n存在问题：\r\npython由于历史遗留的问题，严格说多个线程并不会同时执行（没法有效利用多核处理器，python的并发只是在交替执行不同的代码）。\r\n多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。所以python的多线程并发并不能充分利用多核，并发没有java的并发严格。\r\n原因：\r\n原因就在于GIL ，在Cpython\r\n解释器（Python语言的主流解释器）中，有一把全局解释锁（GIL, Global\r\nInterpreter Lock），在解释器解释执行Python\r\n代码时，任何Python线程执行前，都先要得到这把GIL锁。\r\n这个GIL全局锁实际上把所有线程的执行代码都给上了锁。\r\n这意味着，python在任何时候，只可能有一个线程在执行代码。\r\n其它线程要想获得CPU执行代码指令，就必须先获得这把锁，如果锁被其它线程占用了，那么该线程就只能等待，直到占有该锁的线程释放锁才有执行代码指令的可能。\r\n多个线程一起执行反而更加慢的原因：\r\n同一时刻，只有一个线程在运行，其它线程只能等待，即使是多核CPU，也没办法让多个线程「并行」地同时执行代码，只能是交替执行，因为多线程涉及到上线文切换、锁机制处理（获取锁，释放锁等），所以，多线程执行不快反慢。\r\n什么时候GIL 被释放？\r\n当一个线程遇到I/O 任务时，将释放GIL。\r\n计算密集型（CPU-bound）线程执行100次解释器的计步（ticks）时（计步可粗略看作Python\r\n虚拟机的指令），也会释放GIL。\r\n即，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。\r\n不过，Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。\r\n本条参考博客：\r\nhttp://www.sohu.com/a/230407177_99992472\r\n七、*进程通信方式（选读）\r\n管道：\r\n速度慢，容量有限，只有父子进程能通讯\r\nFIFO：\r\n任何进程间都能通讯，但速度慢\r\n消息队列：\r\n容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题\r\n信号量：\r\n不能传递复杂消息，只能用来同步\r\n共享内存区：\r\n能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存\r\n本条参考博客：\r\nhttps://blog.csdn.net/weixin_40283480/article/details/82155704\r\nCPU线程 和 Java线程\r\n​\r\nCPU线程 和\r\nJava线程 - webglcn - 博客园 (cnblogs.com)\r\n进程、线程和CPU\r\n之间的关系（一）_nandao158的博客-CSDN博客_线程和cpu\r\n   进程是程序运行资源分配的最小单位 。进程是操作系统进行资源分配的最小单位,其中资源包括:CPU、内存空间、 磁盘 IO 等,同一进程中的多条线程共享该进程中的全部系统资源,而进程和进程 之间是相互独立的。进程是具有一定独立功能的程序关于某个数据集合上的一次 运行活动,进程是系统进行资源分配和调度的一个独立单位。 进程是程序在计算机上的一次执行活动。当你运行一个程序,你就启动了一 个进程。显然,程序是死的、静态的,进程是活的、动态的。进程可以分为系统进 程和用户进程。凡是用于完成操作系统的各种功能的进程就是系统进程,它们就 是处于运行状态下的操作系统本身,用户进程就是所有由你启动的进程。\r\n\r\n   线程是 CPU 调度的最小单位,必须依赖于进程而存在 线程是进程的一个实体,是 CPU 调度和分派的基本单位,它是比进程更小的、 能独立运行的基本单位。线程自己基本上不拥有系统资源,只拥有一点在运行中 必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其 他的线程共享进程所拥有的全部资源。 线程无处不在 任何一个程序都必须要创建线程,特别是 Java 不管任何程序都必须启动一个 main 函数的主线程; Java Web 开发里面的定时任务、定时器、JSP 和 Servlet、异 步消息处理机制,远程访问接口RM等,任何一个监听事件, onclick的触发事件等都 离不开线程和并发的知识。\r\n\r\nJava多线程并不是由于cpu线程数为多个才称为多线程，当Java线程数大于cpu线程数，操作系统使用时间片机制，采用线程调度算法，频繁的进行线程切换。\r\n\r\n(10 封私信 / 81\r\n条消息) CPU 的线程与操作系统的线程有何关系？ - 知乎 (zhihu.com)\r\n","slug":"线程进程协程与CPU","date":"2023-03-07T16:14:44.712Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"加密方法分类\r\n加密方法可以分为两大类。一类是单钥加密（private key\r\ncryptography），还有一类叫做双钥加密（public key\r\ncryptography）。前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是两套密码。\r\n历史上，人类传统的加密方法都是前一种，比如二战期间德军用的Enigma电报密码。莫尔斯电码也可以看作是一种私钥加密方法。\r\n单钥加密\r\n在单钥加密的情况下，密钥只有一把，所以密钥的保存变得很重要。一旦密钥泄漏，密码也就被破解。\r\n双钥加密\r\n在双钥加密的情况下，密钥有两把，一把是公开的公钥，还有一把是不公开的私钥。\r\n双钥加密的原理如下：\r\n\r\n公钥和私钥是一一对应的关系，有一把公钥就必然有一把与之对应的、独一无二的私钥，反之亦成立。\r\n所有的（公钥, 私钥）对都是不同的。\r\n\r\nc)\r\n用公钥可以解开私钥加密的信息，反之亦成立。\r\n\r\n同时生成公钥和私钥应该相对比较容易，但是从公钥推算出私钥，应该是很困难或者是不可能的。\r\n\r\n在双钥体系中，公钥用来加密信息，私钥用来数字签名。\r\n现状\r\n目前，通用的单钥加密算法为DES（Data Encryption\r\nStandard），通用的双钥加密算法为RSA（\r\nRivest-Shamir-Adleman），都产生于上个世纪70年代。\r\n因为任何人都可以生成自己的（公钥，私钥）对，所以为了防止有人散布伪造的公钥骗取信任，就需要一个可靠的第三方机构来生成经过认证的（公钥，私钥）对。目前，世界上最主要的数字服务认证商是位于美国加州的Verisign公司，它的主要业务就是分发RSA数字证书。\r\n拓展\r\n\r\n数字签名？数字签名是什么？\r\n- 阮一峰的网络日志 (ruanyifeng.com)\r\n\r\n\r\nReference\r\n\r\n密码学笔记\r\n- 阮一峰的网络日志 (ruanyifeng.com)\r\n\r\n","slug":"密码学初步","date":"2023-03-07T16:14:44.707Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Github特殊仓库：\r\n\r\n以JBR-Bunjie为例\r\n\r\n用户名仓库\r\n用户名仓库为: JBR-Bunjie\\JBR-Bunjie\r\n个人博客\r\n个人博客仓库为:\r\nJBR-Bunjie\\JBR-Bunjie.github.io，这个仓库会直接导向网页JBR-Bunjie.github.io\r\n项目Doc\r\n示例：\r\nxlwings - Make Excel\r\nFly! — xlwings dev documentation\r\n用Github\r\nPage快速创建项目文档网站 - 知乎 (zhihu.com)\r\n[Your awesome title · Write an awesome\r\ndescription for your new site here\r\n(rundocs.github.io)](https://rundocs.github.io/starter/)\r\n","slug":"为你的github项目新建一个doc页面","date":"2023-03-07T16:14:44.704Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Remote Procedure Call (RPC)\r\nWhat is Remote Procedure Call\r\n(RPC)?\r\nRemote Procedure Call is a software communication protocol that one\r\nprogram can use to request a service from a program located in another\r\ncomputer on a network without having to understand the network's\r\ndetails. RPC is used to call other processes on the remote systems like\r\na local system. A procedure call is also sometimes known as a\r\nfunction call or a subroutine call.\r\nRPC uses the client-server model. The requesting program is a client,\r\nand the service-providing program is the server. Like a local procedure\r\ncall, an RPC is a synchronous operation requiring the requesting program\r\nto be suspended until the results of the remote procedure are returned.\r\nHowever, the use of lightweight processes or threads that share the same\r\naddress space enables multiple RPCs to be performed concurrently.\r\nThe interface definition language (IDL) -- the specification language\r\nused to describe a software component's application programming\r\ninterface (API) -- is commonly used in Remote Procedure Call software.\r\nIn this case, IDL provides a bridge between the machines at either end\r\nof the link that may be using different operating systems (OSes) and\r\ncomputer languages.\r\nWhat does RPC do?\r\nWhen program statements that use the RPC framework are compiled into\r\nan executable program, a stub is included in the compiled code that acts\r\nas the representative of the remote procedure code. When the program is\r\nrun and the procedure call is issued, the stub receives the request and\r\nforwards it to a client runtime program in the local computer. The first\r\ntime the client stub is invoked, it contacts a name server to determine\r\nthe transport address where the server resides.\r\nThe client runtime program has the knowledge of how to address the\r\nremote computer and server application and sends the message across the\r\nnetwork that requests the remote procedure. Similarly, the server\r\nincludes a runtime program and stub that interface with the remote\r\nprocedure itself. Response-request protocols are returned the same\r\nway.\r\nHow does RPC work?\r\nWhen a remote procedure call is invoked, the calling environment is\r\nsuspended, the procedure parameters are transferred across the network\r\nto the environment where the procedure is to execute, and the procedure\r\nis then executed in that environment.\r\nWhen the procedure finishes, the results are transferred back to the\r\ncalling environment, where execution resumes as if returning from a\r\nregular procedure call.\r\nDuring an RPC, the following steps take place:\r\n\r\nThe client calls the client stub. The call is a local procedure call\r\nwith parameters pushed onto the stack in the normal way.\r\nThe client stub packs the procedure parameters into a message and\r\nmakes a system call to send the message. The packing of the procedure\r\nparameters is called marshalling.\r\nThe client's local OS sends the message from the client machine to\r\nthe remote server machine.\r\nThe server OS passes the incoming packets to the server stub.\r\nThe server stub unpacks the parameters -- called\r\nunmarshalling -- from the message.\r\nWhen the server procedure is finished, it returns to the server\r\nstub, which marshals the return values into a message. The server stub\r\nthen hands the message to the transport layer.\r\nThe transport layer sends the resulting message back to the client\r\ntransport layer, which hands the message back to the client stub.\r\nThe client stub unmarshalls the return parameters, and execution\r\nreturns to the caller.\r\n\r\nTypes of RPC\r\nThere are several RPC models and distributed computing\r\nimplementations. A popular model and implementation is the Open Software\r\nFoundation's (OSF) Distributed Computing Environment (DCE). The\r\nInstitute of Electrical and Electronics Engineers (IEEE) defines RPC in\r\nits ISO Remote Procedure Call Specification, ISO/IEC CD 11578 N6561,\r\nISO/IEC, November 1991.\r\nExamples of RPC configurations include the following:\r\n\r\nThe normal method of operation where the client makes a call and\r\ndoesn't continue until the server returns the reply.\r\nThe client makes a call and continues with its own processing. The\r\nserver doesn't reply.\r\nA facility for sending several client nonblocking calls in one\r\nbatch.\r\nRPC clients have a broadcast facility, i.e., they can send messages\r\nto many servers and then receive all the resulting replies.\r\nThe client makes a nonblocking client/server call; the server\r\nsignals the call is completed by calling a procedure associated with the\r\nclient.\r\n\r\nRPC spans the transport layer and the application layer in the Open\r\nSystems Interconnection (OSI) model of network communication. RPC makes\r\nit easier to develop an application that includes multiple programs\r\ndistributed in a network. Alternative methods for client-server\r\ncommunication include message queueing and IBM's Advanced\r\nProgram-to-Program Communication (APPC).\r\nPros and cons of RPC\r\nThough it boasts a wide range of benefits, there are certainly a\r\nshare of pitfalls that those who use RPC should be aware of.\r\nHere are some of the advantages RPC provides for developers and\r\napplication managers:\r\n\r\nHelps clients communicate with servers via the traditional use of\r\nprocedure calls in high-level languages.\r\nCan be used in a distributed environment, as well as the local\r\nenvironment.\r\nSupports process-oriented and thread-oriented models.\r\nHides the internal message-passing mechanism from the user.\r\nRequires only minimal effort to rewrite and redevelop the code.\r\nProvides abstraction, i.e., the message-passing nature of network\r\ncommunication is hidden from the user.\r\nOmits many of the protocol layers to improve performance.\r\n\r\nOn the other hand, some of the disadvantages of RPC include the\r\nfollowing:\r\n\r\nThe client and server use different execution environments for their\r\nrespective routines, and the use of resources (e.g., files) is also more\r\ncomplex. Consequently, RPC systems aren't always suited for transferring\r\nlarge amounts of data.\r\nRPC is highly vulnerable to failure because it involves a\r\ncommunication system, another machine and another process.\r\nThere is no uniform standard for RPC; it can be implemented in a\r\nvariety of ways.\r\nRPC is only interaction-based, and as such, it doesn't offer any\r\nflexibility when it comes to hardware architecture.\r\n\r\nWhat\r\nIs Remote Procedure Call (RPC)? Definition from SearchAppArchitecture\r\n(techtarget.com)\r\nRPC是什么，看完你就知道了\r\n- 知乎 (zhihu.com)\r\n","slug":"RPC framework","date":"2023-03-07T16:14:44.685Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Original Post: Complexity\r\nHas to Live Somewhere (ferd.ca)\r\nChinese Version:\r\nComplexity\r\nHas to Live Somewhere - Google 文档\r\n架构设计-复杂度是不灭的 -\r\n知乎 (zhihu.com)\r\nSome Related Posts: 复杂度是不灭的，只会转移，难道一切都是徒劳的吗？\r\n- 知乎 (zhihu.com)\r\n\r\nComplexity has to live somewhere. If you embrace it, give it the\r\nplace it deserves, design your system and organisation knowing it\r\nexists, and focus on adapting, it might just become a strength.\r\n\r\n\r\n很多架构/系统一开始是简单的，这一点都没错，因为他们开始只处理简单问题，只处理几个点，这是正确的。随着系统的不断升级迭代，他们开始把复杂的事情往简单里入侵，于是系统边界开始变得模糊不清，最后崩塌。\r\n\r\n千里之堤毁于蚁穴。\r\n\r\n\r\nif you make the build tool simple, it won't handle all the weird\r\nedge cases that exist out there\r\nif you want to handle the weird edge cases, you need to deviate from\r\nwhatever norm you wanted to establish\r\nif you want ease of use for common defaults, the rules for common\r\ndefaults must be shared between the tool and the users, who shape their\r\nsystems to fit the tool's expectations\r\nif you allow configuration or scripting, you give the users a way to\r\nspecify the rules that must be shared, so the tool fits their\r\nsystems\r\nif you want to keep the tool simple, you have to force your users to\r\nonly play within the parameters that fit this simplicity\r\nif your users' use cases don't map well to your simplicity, they\r\nwill build shims around your tool to attain their objectives\r\n\r\n\r\n所以怎么解决复杂？要把复杂交给谁？\r\n是希望用户自定义？还是一站式打包，全部总揽？是只针对小问题破局？还是囊括一切？\r\n层层交叉，复杂自然分散。但是这些分散的复杂是否都经过了稳妥的处理？它们是不是被随意地丢弃在各个角落？\r\n最后：复杂度不会解决，但你所能做的一切都可以促成一个更完善的垃圾堆放处的实现\r\n","slug":"Complexity Has to Live Somewhere","date":"2023-03-07T16:14:44.585Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"Binaries和Source的区别\r\n二进制（Binaries）文件：\r\n即Binary文件/二进制文件：二进制包里面包括了已经经过编译，可以马上运行的程序。你只需要下载和解包（安装）它们以后，就马上可以使用\r\n源（Source）文件：\r\n一般是开源程序，这是程序的源代码文件，需要在你的计算机上进行编译以后才可以产生可以运行程序\r\n简单区分：\r\n\r\n源代码包里的文件往往会含有种种源代码文件，头文件.h、c代码源文件.c、C++代码源文件.cc/.cpp等；\r\n而二进制包里的文件则会有可执行文件（与软件同名的往往是主执行文件），标志是其所在路径含有名为bin的目录（仅有少数例外）。\r\n\r\n","slug":"Binaries与Source","date":"2023-03-07T16:14:44.579Z","categories_index":"","tags_index":"","author_index":"JBR_Bunjie"},{"id":"d0f573d5ece004aa9f60d986d26310d5","title":"WSA Install third-party apps!","content":"# 第 0 步：确保已正确将 adb 命令加入到系统的环境变量\n# 执行下面的命令能看到 adb 版本号则表示 ok\n# 如有错误，请检查环境变量是否配置正确\nadb version\n\n# 第 1 步：连接 WSA\nadb connect 127.0.0.1:58526\n# 其中 127.0.0.1:58526 是刚才在 WSA 设置项中看到的 IP\n\n# 第 2 步：安装 APK\n# 连接成功之后，就能用下面命令来安装 APK 了\nadb install &#123;你的APK文件完整路径&#125;\n# 注意 .apk 的路径最好无中文且无空格，否则需要用英文双引号包裹。\n# 你可在资源管理器上右键点击 apk 文件选「复制文件地址」获取完整路径\nadb install d:\\download\\apk\\weixin.apk\n#下面是例子：\nadb install &quot;d:\\下载\\异次元 iPlaySoft.com\\qq.apk&quot;\n\n# 最后按下回车即可安装\n# 安装完成后，在 Windows 开始菜单的“所有应用”里就能找到你安装的 Android 应用\r\n","slug":"Softwares/Windows/WSA install third party apk","date":"2022-12-23T04:23:24.000Z","categories_index":"Delopy and Installation","tags_index":"Installation,Windows,WSA,Android","author_index":"JBR_Bunjie"},{"id":"413173748dc9f0bf852352ce35bf92b1","title":"Catalan Number","content":"wikipedia-en: Catalan\r\nnumber - Wikipedia\r\nwikipedia-cn:卡塔兰数 -\r\n维基百科，自由的百科全书 (wikipedia.org)\r\n强烈推荐这篇博客：卡特兰(Catalan)数入门详解\r\n- Morning_Glory - 博客园 (cnblogs.com)\r\n\r\nCatalan Number\r\n\r\nIn combinatorial\r\nmathematics, the Catalan numbers are a sequence of natural numbers\r\nthat occur in various counting problems,\r\noften involving recursively defined\r\nobjects. They are named after the French-Belgian mathematician Eugène\r\nCharles Catalan (1814–1894).\r\nThe first Catalan numbers for n = 0, 1, 2, 3, ... are\r\n​ 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, ...\r\n(sequence A000108 in the OEIS).\r\n\r\n意义？\r\n\r\n卡特兰数是一个在组合数学里经常出现的一个数列，它并没有一个具体的意义，却是一个十分常见的数学规律\r\n\r\n也就是说：只要我们能在实际解决问题的过程中，发现当前问题符合Catalan\r\nNumber的定义(公式)，就可以直接利用Cantanlan的相关公式来解决\r\n定义：\r\n设h(n)为catalan数的第n项，令h(0)=1,h(1)=1，catalan数满足递推式：\r\nh(n) = h(0) * h(n-1) + h(1) * h(n-2) + ... + h(n-1) * h(0) (n≥2)\r\n容易计算的推导公式：\r\n可以看英文维基的推导过程\r\nThe nth Catalan number can be expressed directly in terms of\r\nbinomial\r\ncoefficients by\r\n\r\n(公式中的括号表达式请勿用组合的方式来计算)\r\nAn alternative expression for Cn is\r\n\r\nusage\r\n例题1：\r\n题目：2N个人排队买电影票，N个人持5元买票，N个人持10元买票。售票处在售票前只有票没有钱，票价5元，问有多少种排队方式能让2N个人顺利买票，并且输出所有排队队列（不会因为找钱问题）\r\n题解：设x为当前已购票人群中持五元的人数，设y为当前已购票人群中持十元的人数\r\n则易知，任何时候都应有x &gt;= y\r\n将本题转换为坐标系上的问题\r\n则有：\r\n\r\n\r\nimage-20220126215930311\r\n\r\n易知，所有在直线y = x之下的路径都是合法路径，而所有与y = x +\r\n1有交集的路径都是非法路径\r\n我们所需要做的，只是从所有的可能路径——C(2n,\r\nn)中，取出非法路径即可\r\n将所有经过y = x + 1的非法路径(因为所有路径仍然都是要到达(n,n)的)\r\n对直线y = x + 1进行对称\r\n此时所有路径都会到达点 (n - 1, n + 1)\r\n故易知，所有非法路径总数：C(2n, n-1)\r\n故最终结果为：C(2n, n) - C(2n, n-1)\r\n由此题我们可以看出Catalan\r\nNumber类题目的相关特征——使用高度相关的两种数据进行先后排序\r\n例题2：\r\n题目：电影院卖电影票，但是没有零钱找，票价一张 5 元，买票的人为 n\r\n个持有 5 元，m个持 有 10\r\n元，求解出可能的买票序列的个数，使得电影院能够将票卖完。\r\n测试数据：\r\n\r\n\r\nn=3, m=3\r\n\r\n输出：180\r\n\r\nn=5, m=3\r\n\r\n输出：20160\r\n\r\nn=100, m=100\r\n输出：7808493736285054490617457563685000616783524531556170923710322111330291583796072702181230534772124989150269427118016226042154879111313238663979471534186434961519434230403597200370267217266558867539125388517366666256080507202260345081955685568391820824161596607976035333269564672318518060023284166918774048734879105185187102720000000000000000000000000000000000000000000000000\r\n\r\n\r\n解法：和例题一几乎一致，但是具体公式不再能直接套用\r\n我们仍有相同含义的x(x - n - 5元)与y(y - m -\r\n10元)，但是具体公式开始不同\r\n其中，所有可能的顺序为：C(m+n, n)\r\n不合法的路径仍与y = x + 1有关，但是最终的非法内容有：C(m + n,\r\nm-1)\r\n故最终有：C(m + n, n) - C(m + n, m - 1)\r\n是不是有点疑惑？怎么算出来和结果不一样，好像多除以了(m! * n!)？\r\n若是将每个人视为相同的人，是无序的话，结果解释上述表达式，但是实际上每个人都不尽相同，为了保证顺序，还需要乘以(m!\r\n* n!)\r\n(组合方式已定，每组内自由排列)，最终可得到答案(m\r\n+ n)! * (n - m + 1)/(n +\r\n1)，事实上，上一题也应该作这样子的额外处理才对\r\n更多典例\r\n1. 出栈次序\r\n一个栈(无穷大)的进栈序列为1，2，3，…，n，有多少个不同的出栈序列?\r\n2. 01序列\r\n给出一个n，要求一个长度为2n的01序列，使得序列的任意前缀中1的个数不少于0的个数，\r\n有多少个不同的01序列? 以下为长度为6的序列: 111000 101100 101010 110010\r\n110100\r\n3. ‘+1’ ‘-1’序列\r\nn个+1和n个-1构成的2n项\r\na1,a2,⋅⋅⋅,a2na1,a2,⋅⋅⋅,a2n，其部分和满足非负性质，即a1+a2+⋅⋅⋅+ak&gt;=0a1+a2+⋅⋅⋅+ak&gt;=0，(k=1,2,···,2n)\r\n，有多少个不同的此序列?\r\n4. 括号序列\r\nn对括号有多少种匹配方式？\r\n5. 找零问题\r\n2n个人要买票价为五元的电影票，每人只买一张，但是售票员没有钱找零。其中，n个人持有五元，另外n个人持有十元，问在不发生找零困难的情况下，有多少种排队方法？\r\n6. 矩阵链乘\r\nP=a1×a2×a3×……×an，依据乘法结合律，不改变其顺序，只用括号表示成对的乘积，试问有几种括号化的方案？\r\n7. 二叉树计数\r\n有n个节点构成的二叉树（非叶子节点都有2个儿子），共有多少种情形？\r\n有n+1个叶子的二叉树的个数？\r\n8. 凸多边形划分\r\n在一个n边形中，通过不相交于n边形内部的对角线，把n边形拆分为若干个三角形，问有多少种拆分方案？\r\n9. 圆上n条线段\r\n在圆上选择2n个点，将这些点成对连接起来使得所得到的n条线段不相交的方法数？\r\n10. 单调路径\r\n一位大城市的律师在他住所以北n个街区和以东n个街区处工作，每天他走2n个街区去上班。如果他从不穿越（但可以碰到）从家到办公室的对角线，那么有多少条可能的道路？\r\n11. 填充阶梯图形\r\n用n个长方形填充一个高度为n的阶梯状图形的方法个数？\r\n12. 摞碗问题\r\n饭后，姐姐洗碗，妹妹把姐姐洗过的碗一个一个放进碗橱摞成一摞。一共有n个不同的碗，洗前也是摞成一摞的，也许因为小妹贪玩而使碗拿进碗橱不及时，姐姐则把洗过的碗摞在旁边，问：小妹摞起的碗有多少种可能的方式？\r\n13. 汽车胡同加油问题\r\n一个汽车队在狭窄的路面上行驶，不得超车，但可以进入一个死胡同去加油，然后再插队行驶，共有n辆汽车，问共有多少种不同的方式使得车队开出城去？\r\n14. 还书借书问题\r\n在图书馆一共2n个人在排队，n个还《面试宝典》一书，n个在借《面试宝典》一书，图书馆此时没有了面试宝典了，求他们排队的总数\r\n15. 高矮排队问题\r\n2n个高矮不同的人,排成两排,每排必须是从矮到高排列,而且第二排比对应的第一排的人高,问排列方式有多少种?\r\n","slug":"Algorithm/Catalan number","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"String Processing","author_index":"JBR_Bunjie"},{"id":"2e7a3ae4090ee29ca9a2e76805bad9b3","title":"CRC Algorithm","content":"\r\n那简而言之就是 取首位 异或(首位为0 除数为0) 左移 上述三个步骤循环呗\r\n当左移后余数长度小于被除数时则取余 也可以这么理解吧\r\n当余数开头出现n个0的时候就可以全部消掉直到首位是1\r\n商补上n-1个0和一个1就可以了 继续异或运算嘛 我是看到有好几题余数开头俩0的\r\n分析看看\r\n\r\n模2除法(CRC校验码计算)\r\n鉴于网上的讲解自己好不容易才看懂…所以整理了一下,\r\n也方便大家能够理解\r\n模2加减法\r\n模2除法需要用到模2加减法,关于模2加减法,其实就是异或操作,规则如下:\r\n&#x2F;&#x2F;不需要考虑进位和借位\n0 ± 0 &#x3D; 0\n1 ± 1 &#x3D; 0\n0 ± 1 &#x3D; 1\n1 ± 0 &#x3D; 1\n例: 1101 ± 1001 &#x3D; 0100\n计算如下:\n\t\t  1 1 0 1 \n\t\t± 1 0 0 1 \n\t\t-----------\n\t\t  0 1 0 0\n1234\r\n简记:同为0,异为1\r\n\r\n模2除法:\r\n规则:假设被除数X,和除数P,余数R\r\n\r\nX除以P(对X和P做模2加减法),当前X首位为1时,商1,为0时商0\r\n所得余数R去除首位(即左移一位):\r\n\r\n若R第一位为0,将其作为新的被除数,除以0,此时其首位为0,商即为0\r\n若R第一位为1,将其作为新的被除数,除以P,此时其首位为1,商即为1\r\n\r\n重复第2步直到R位数少于P位数\r\n\r\n\r\n例:1111000对除数1101做模2除法:\r\n先说结果:\r\n商1011余111\r\n整体运算\r\n      1 0 1 1     &#x2F;&#x2F;商\n---------------\n1 1 1 1 0 0 0     &#x2F;&#x2F;被除数,注意首位为1\n1 1 0 1\t          &#x2F;&#x2F;被除数首位为1,除以除数\n---------------\n  0 1 0 0 0 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n  0 0 0 0         &#x2F;&#x2F;被除数首位为0,除以0\n---------------\n    1 0 0 0 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n    1 1 0 1       &#x2F;&#x2F;被除数首位为1,除以除数  \n---------------\n      1 0 1 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n      1 1 0 1     &#x2F;&#x2F;被除数首位为1,除以除数\n---------------\n        1 1 1     &#x2F;&#x2F;余数,此时余数位数少于除数,不能继续除了\n123456789101112131415\r\n分步分析\r\n第一步(每一步其实都是模2加减法运算):\r\n      1         &#x2F;&#x2F;商\n-------------\n1 1 1 1 0 0 0   &#x2F;&#x2F;被除数,注意首位为1\n1 1 0 1\t        &#x2F;&#x2F;除数\n-------------\n0 0 1 0 0 0 0   &#x2F;&#x2F;余数,模2运算后结果\n123456\r\n\r\n商的第一位:被除数首位为1,商为1(只要被除数首位非0,商就是1)\r\n\r\n第二步:余数去除首位(左移一位),当第一位为0时,除以0;为1时,除以除数。\r\n      1 0        &#x2F;&#x2F;商\n---------------\n  0 1 0 0 0 0    &#x2F;&#x2F;余数去除首位,作为新的被除数\n  0 0 0 0        &#x2F;&#x2F;被除数首位为0,除以0\n---------------\n  0 1 0 0 0 0    &#x2F;&#x2F;余数,模2运算后结果\n123456\r\n\r\n商的第二位:被除数首位为0,商为0(只要被除数首位是0商就是0)\r\n\r\n第三步\r\n      1 0 1      &#x2F;&#x2F;商\n----------------\n    1 0 0 0 0    &#x2F;&#x2F;余数去除首位,作为新的被除数\n    1 1 0 1      &#x2F;&#x2F;被除数首位为1,除以除数\n----------------\n    0 1 0 1 0    &#x2F;&#x2F;余数,模2运算后结果\n123456\r\n\r\n商的第三位:被除数首位为1,商为1\r\n\r\n第四步\r\n      1 0 1 1     &#x2F;&#x2F;商\n----------------\n      1 0 1 0     &#x2F;&#x2F;余数去除首位,作为新的被除数\n      1 1 0 1     &#x2F;&#x2F;被除数首位为1,除以除数\n----------------\n      0 1 1 1     &#x2F;&#x2F;余数,此时余数位数(这里的0要忽略掉,不参与下一轮,因为最上面的被除数后面\n      \t\t\t  &#x2F;&#x2F;没有数可以给这里往后补一位了)少于除数位数,不能继续除了\n1234567\r\n\r\n商的第四位:被除数首位为1,商为1 此时不能继续做除法,计算结束\r\n\r\n得到最终结果:\r\n商1011余111\r\n\r\n前言\r\nCRC算法简介\r\nCRC计算\r\nCRC校验\r\nCRC计算的C语言实现\r\nCRC计算工具\r\n总结\r\n\r\n前言\r\n最近的工作中，要实现对通信数据的CRC计算，所以花了两天的时间好好研究了一下，周末有时间整理了一下笔记。\r\n一个完整的数据帧通常由以下部分构成：\r\n\r\n\r\nimg\r\n\r\n校验位是为了保证数据在传输过程中的完整性，采用一种指定的算法对原始数据进行计算，得出的一个校验值。接收方接收到数据时，采用同样的校验算法对原始数据进行计算，如果计算结果和接收到的校验值一致，说明数据校验正确，这一帧数据可以使用，如果不一致，说明传输过程中出现了差错，这一帧数据丢弃，请求重发。\r\n常用的校验算法有奇偶校验、校验和、CRC，还有LRC、BCC等不常用的校验算法。\r\n以串口通讯中的奇校验为例，如果数据中1的个数为奇数，则奇校验位0，否则为1。\r\n例如原始数据为：0001\r\n0011，数据中1的个数（或各位相加）为3，所以奇校验位为0。这种校验方法很简单，但这种校验方法有很大的误码率。假设由于传输过程中的干扰，接收端接收到的数据是0010\r\n0011，通过奇校验运算，得到奇校验位的值为0，虽然校验通过，但是数据已经发生了错误。\r\n\r\n\r\nimg\r\n\r\n校验和同理也会有类似的错误：\r\n\r\n\r\nimg\r\n\r\n一个好的校验校验方法，配合数字信号编码方式，如(差分)曼彻斯特编码，(不)归零码等对数据进行编码，可大大提高通信的健壮性和稳定性。例如以太网中使用的是CRC-32校验，曼彻斯特编码方式。本篇文章介绍CRC校验的原理和实现方法。\r\nCRC算法简介\r\n\r\n循环冗余校验（Cyclic Redundancy Check，\r\nCRC）是一种根据网络数据包或计算机文件等数据产生简短固定位数校验码的一种信道编码技术，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的。\r\n\r\nCRC校验计算速度快，检错能力强，易于用编码器等硬件电路实现。从检错的正确率与速度、成本等方面，都比奇偶校验等校验方式具有优势。因而，CRC\r\n成为计算机信息通信领域最为普遍的校验方式。常见应用有以太网/USB通信，压缩解压，视频编码，图像存储，磁盘读写等。\r\nCRC参数模型\r\n不知道你是否遇到过这种情况，同样的CRC多项式，调用不同的CRC计算函数，得到的结果却不一样，而且和手算的结果也不一样，这就涉及到CRC的参数模型了。计算一个正确的CRC值，需要知道CRC的参数模型。\r\n一个完整的CRC参数模型应该包含以下信息：WIDTH，POLY，INIT，REFIN，REFOUT，XOROUT。\r\n\r\nNAME：参数模型名称。\r\nWIDTH：宽度，即生成的CRC数据位宽，如CRC-8，生成的CRC为8位\r\nPOLY：十六进制多项式，省略最高位1，如 x8 + x2 + x + 1，二进制为1\r\n0000 0111，省略最高位1，转换为十六进制为0x07。\r\nINIT：CRC初始值，和WIDTH位宽一致。\r\nREFIN：true或false，在进行计算之前，原始数据是否翻转，如原始数据：0x34\r\n= 0011 0100，如果REFIN为true，进行翻转之后为0010 1100 = 0x2c\r\nREFOUT：true或false，运算完成之后，得到的CRC值是否进行翻转，如计算得到的CRC值：0x97\r\n= 1001 0111，如果REFOUT为true，进行翻转之后为11101001 = 0xE9。\r\nXOROUT：计算结果与此参数进行异或运算后得到最终的CRC值，和WIDTH位宽一致。\r\n\r\n通常如果只给了一个多项式，其他的没有说明则：INIT=0x00，REFIN=false，REFOUT=false，XOROUT=0x00。\r\n常用的21个标准CRC参数模型：\r\n\r\n\r\nimg\r\n\r\nCRC校验在电子通信领域非常常用，可以说有通信存在的地方，就有CRC校验：\r\n\r\n美信(MAXIM)的芯片DS2401/DS18B20，都是使用的CRC-8/MAXIM模型\r\nSD卡或MMC使用的是CRC-7/MMC模型\r\nModbus通信使用的是CRC-16/MODBUS参数模型\r\nUSB协议中使用的CRC-5/USB和CRC-16/USB模型\r\nSTM32自带的硬件CRC计算模块使用的是CRC-32模型\r\n\r\n至于多项式的选择，初始值和异或值的选择，输入输出是否翻转，这就涉及到一定的编码和数学知识了。感兴趣的朋友，可以了解一下每个CRC模型各个参数的来源。至于每种参数模型的检错能力、重复率，需要专业的数学计算了，不在本文讨论的范畴内。\r\nCRC计算\r\n好了，了解了CRC参数模型知识，下面手算一个CRC值，来了解CRC计算的原理。\r\n问：原始数据：0x34，使用CRC-8/MAXIN参数模型，求CRC值？\r\n答：根据CRC参数模型表，得到CRC-8/MAXIN的参数如下：\r\nPOLY &#x3D; 0x31 &#x3D; 0011 0001(最高位1已经省略)\nINIT &#x3D; 0x00\nXOROUT &#x3D; 0x00\nREFIN &#x3D; TRUE\nREFOUT &#x3D; TRUE\r\n有了上面的参数，这样计算条件才算完整，下面来实际计算：\r\n0.原始数据 &#x3D; 0x34 &#x3D; 0011 0100，多项式 &#x3D; 0x31 &#x3D; 1 0011 0001\n1.INIT &#x3D; 00，原始数据高8位和初始值进行异或运算保持不变。\n2.REFIN为TRUE，需要先对原始数据进行翻转：0011 0100 &gt; 0010 1100\n3.原始数据左移8位，即后面补8个0：0010 1100 0000 0000\n4.把处理之后的数据和多项式进行模2除法，求得余数：\n原始数据：0010 1100 0000 0000 &#x3D; 10 1100 0000 0000\n多项式：1 0011 0001\n模2除法取余数低8位：1111 1011\n5.与XOROUT进行异或，1111 1011 xor 0000 0000 &#x3D; 1111 1011 \n6.因为REFOUT为TRUE，对结果进行翻转得到最终的CRC-8值：1101 1111 &#x3D; 0xDF\n7.数据+CRC：0011 0100 1101 1111 &#x3D; 34DF，相当于原始数据左移8位+余数。\r\n模2除法求余数：\r\n\r\n\r\nimg\r\n\r\n验证手算结果：\r\n\r\n\r\nimg\r\n\r\n可以看出是一致的，当你手算的结果和工具计算结果不一致时，可以看看INIT，XOROUT，REFINT，REFOUT这些参数是否一致，有1个参数不对，计算出的CRC结果都不一样。\r\nCRC校验\r\n上面通过笔算的方式，讲解了CRC计算的原理，下面来介绍一下如何进行校验。\r\n按照上面CRC计算的结果，最终的数据帧：0011 0100 1101 1111 =\r\n34DF，前8位0011 0100是原始数据，后8位1101 1111 是 CRC结果。\r\n接收端的校验有两种方式，一种是和CRC计算一样，在本地把接收到的数据和CRC分离，然后在本地对数据进行CRC运算，得到的CRC值和接收到的CRC进行比较，如果一致，说明数据接收正确，如果不一致，说明数据有错误。\r\n另一种方法是把整个数据帧进行CRC运算，因为是数据帧相当于把原始数据左移8位，然后加上余数，如果直接对整个数据帧进行CRC运算（除以多项式），那么余数应该为0，如果不为0说明数据出错。\r\n\r\n\r\nimg\r\n\r\n而且，不同位出错，余数也不同，可以证明，余数与出错位数的对应关系只与CRC参数模型有关，而与原始数据无关。\r\nCRC计算的C语言实现\r\n无论是用C还是其他语言，实现方法网上很多，这里我找了一个基于C语言的CRC计算库，里面包含了常用的21个CRC参数模型计算函数，可以直接使用，只有crcLib.c和crcLib.h两个文件。\r\nGitHub地址：https://github.com/whik/crc-lib-c\r\n使用方法非常简单：\r\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &quot;crcLib.h&quot;\n\nint main()\n&#123;\n    uint8_t LENGTH &#x3D; 10;\n    uint8_t data[LENGTH];\n    uint8_t crc;\n\n    for(int i &#x3D; 0; i &lt; LENGTH; i++)\n    &#123;\n        data[i] &#x3D; i*5;\n        printf(&quot;%02x &quot;, data[i]);\n    &#125;\n    printf(&quot;\\n&quot;);\n\n    crc &#x3D; crc8_maxim(data, LENGTH);\n\n    printf(&quot;CRC-8&#x2F;MAXIM:%02x\\n&quot;, crc);\n    return 0;\n&#125;\r\n计算结果：\r\n\r\n\r\nimg\r\n\r\nCRC计算工具\r\n下面这几款工具都可以自定义CRC算法模型，而且都有标准CRC模型可供选择。如果自己用C语言或者Verilog实现校验算法时，非常适合作为标准答案进行验证。\r\n\r\n在线计算：http://www.ip33.com/crc.html\r\n离线计算工具：CRC_Calc v0.1.exe或者GCRC.exe\r\n\r\n格西CRC计算器：\r\n\r\n\r\nimg\r\n\r\n总结\r\nCRC校验并不能100%的检查出数据的错误，非常低的概率会出现CRC校验正确但数据中有错误位的情况。这和CRC的位数，多项式的选择等等有很大的关系，所以在实际使用中尽量选择标准CRC参数模型，这些多项式参数都是经过理论计算得出的，可以提高CRC的检错能力。CRC校验可以检错，也可以纠正单一比特的错误，你知道纠错的原理吗？\r\n参考资料\r\n\r\nhttps://www.cnblogs.com/liushui-sky/p/9962123.html\r\nhttps://segmentfault.com/a/1190000018094567!\r\n\r\n","slug":"Algorithm/CRC、LRC、BCC校验与模二运算","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"CRC","author_index":"JBR_Bunjie"},{"id":"d42b57b5bace0bb67392a01a7601ad24","title":"Dijkstra Algorithm","content":"Dijkstra 算法详解\r\n概述\r\nDijkstra 算法是求一个图中一个点到其他所有点的最短路径的算法\r\nDijkstra\r\n算法是一个基于「贪心」、「广度优先搜索」、「动态规划」求一个图中一个点到其他所有点的最短路径的算法，时间复杂度\r\nO(n2)\r\n\\[\r\n\\begin{align}\r\n&amp;(n-1)+(n-2)+···+1\\\\\r\n= &amp;\\frac{n*(n - 1)}{2}\\\\\r\n= &amp;\\frac{n^2}{2} - \\frac{n}{2}\\\\\r\n≈ &amp;n^2\r\n\\end{align}\r\n\\]\r\n主要行为\r\n每次从「未求出最短路径的点」中 取出 距离距离起点\r\n最小路径的点，以这个点为桥梁 刷新「未求出最短路径的点」的距离\r\n图解案例分析\r\n题要\r\n以 A 点为顶点，求到其他点的最短路径。\r\n\r\n\r\nimg\r\n\r\n邻接矩阵图\r\nint[][] graph &#x3D; new int[][]&#123;\n&#123;0 , 2, ∞, 6&#125;\n&#123;2 , 0, 3, 2&#125;\n&#123;∞ , 3, 0, 2&#125;\n&#123;6 , 2, 2, 0&#125;&#125;;\r\n算法过程\r\nresult：已求出 最小路径的顶点 notFound：未求出\r\n最小路径的顶点，里面的值是 到起点的距离 每次从 「未求出最短路径的点」中\r\n取出 距离距离起点 最近的点，以这个点为桥梁\r\n刷新「未求出最短路径的点」的距离\r\n初始，result={A(0)} 中只有起点 A，notFound={B(2),C(∞),D(6)} 中是除了\r\nA 点的其他点，里面的值是到起点的距离（例如 B(2) 代表 B点到起点的距离为\r\n2）\r\n\r\n\r\nimg\r\n\r\n然后，从「未求出最短路径的点」notFound 中取出 最短路径的点 B(2)\r\n，然后通过 B(2) 为桥梁 刷新「未求出最短路径的点」的距离\r\n取出 最短路径的点： 从「未求出最短路径的点」notFound 中取出\r\n最短路径的点 B(2)，放入结果 result 中，结果如下：\r\n「未求出最短路径点」 notFound={C(∞),D(6)}，「已求出最短路径的点\r\n」result={A(0),B(2)}\r\n刷新距离： 通过 B(2) 为桥梁，刷新距离。\r\n例如 AD = 6 &lt; AB + BD = 4 以 B(2)\r\n为桥梁的距离更短，就刷新「未求出最短路径点」D(6) 的距离为 D(4)\r\nnotFound={C(∞),D(4)}\r\n同理刷新 C(∞) 的距离为 C(5) ，最后结果如下：\r\n「未求出最短路径点」 notFound={C(5),D(4)}\r\n，「已求出最短路径的点」result=&#123;A(0),B(2)&#125;\r\n\r\n\r\nimg\r\n\r\n然后，从「未求出最短路径的点」notFound 中取出 最短路径的点 D(4)\r\n，然后通过 D(4) 为桥梁 刷新「未求出最短路径的点」的距离\r\n同理，最后结果如下：\r\n「未求出最短路径点」 notFound={C(5)}\r\n，「已求出最短路径的点」result={A(0),B(2),D(4)}\r\n\r\n\r\nimg\r\n\r\n然后，从「未求出最短路径的点」notFound 中取出 最短路径的点 C(5)\r\n，算法结束\r\nresult={A(0),B(2),D(4),C(5)} 就是最终所求的 最短距离\r\n\r\n\r\nimg\r\n\r\n\r\n代码\r\n\r\n这里使用 -1 表无穷大，下面是 Java 代码和测试案例\r\npublic class Dijkstra &#123;\n    public static int[] dijkstra(int[][] graph,int startVertex)&#123;\n        &#x2F;&#x2F;初始化 以求出最短路径的点 result[]\n        int length &#x3D; graph.length;\n        int[] result &#x3D; new int[length];\n        for (int i &#x3D; 0; i &lt; length; i++) &#123;\n            result[i] &#x3D; -1;\n        &#125;\n        result[startVertex] &#x3D; 0 ;\n        \n        &#x2F;&#x2F; 初始化 未求出最短路径的点 notFound[]\n        int[] notFound &#x3D; new int[length];\n        for (int i &#x3D; 0; i &lt; length; i++) &#123;\n            notFound[i] &#x3D; graph[startVertex][i];\n        &#125;\n        notFound[startVertex] &#x3D; -1;\n        \n        &#x2F;&#x2F; 开始 Dijkstra 算法\n        for (int i &#x3D; 1; i &lt; length; i++) &#123;\n            &#x2F;&#x2F;1. 从「未求出最短路径的点」notFound 中取出 最短路径的点\n            &#x2F;&#x2F;1.1 找到最短距离的点\n            int min &#x3D; Integer.MAX_VALUE;\n            int minIndex &#x3D; 0;\n            for (int j &#x3D; 0; j &lt; length; j++) &#123;\n                if (notFound[j] &gt; 0 &amp;&amp; notFound[j] &lt; min)&#123;\n                    min &#x3D; notFound[j];\n                    minIndex &#x3D; j;\n                &#125;\n            &#125;\n            &#x2F;&#x2F;1.2 将最短距离的点 取出 放入结果中\n            result[minIndex] &#x3D; min;\n            notFound[minIndex] &#x3D; -1;\n            \n            &#x2F;&#x2F;2. 刷新 「未求出最短距离的点」 notFound[] 中的距离\n            &#x2F;&#x2F;2.1 遍历刚刚找到最短距离的点 (B) 的出度 (BA、BB、BC、BD)\n            for (int j &#x3D; 0; j &lt; length; j++) &#123;\n                &#x2F;&#x2F; 出度可通行(例如 BD:graph[1][3]  &gt; 0)\n                &#x2F;&#x2F; 出度点不能已经在结果集 result中(例如 D: result[3] &#x3D;&#x3D; -1)\n                if (graph[minIndex][j] &gt; 0\n                &amp;&amp; result[j] &#x3D;&#x3D; -1)&#123;\n                    int newDistance &#x3D; result[minIndex] + graph[minIndex][j];\n                    &#x2F;&#x2F;通过 B 为桥梁，刷新距离\n                    &#x2F;&#x2F;（比如&#96;AD &#x3D; 6 &lt; AB + BD &#x3D; 4&#96; 就刷新距离）（ -1 代表无限大）\n                    if (newDistance &lt; notFound[j] || notFound[j]&#x3D;&#x3D;-1)&#123;\n                        notFound[j] &#x3D; newDistance;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        return result;\n    &#125;\n    &#x2F;** 测试案例 *&#x2F;\n    public static void main(String[] args) &#123;\n        char[] vertices &#x3D; new char[]&#123;&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;&#125;;\n        int[][] graph &#x3D; new int[][]&#123;\n            &#123;0, 2, -1, 6&#125;, \n            &#123;2, 0, 3, 2&#125;, \n            &#123;-1, 3, 0, 2&#125;, \n            &#123;6, 2, 2, 0&#125;\n        &#125;;\n        int[] dijkstra &#x3D; dijkstra(graph, 0);\n        for (int i : dijkstra) &#123;\n            System.out.println(i);\n        &#125;\n    &#125;\n&#125;\r\n测试结果 0\n2\n5\n4 Dijkstra算法详解 通俗易懂\r\n- 知乎 (zhihu.com)\r\n另题：\r\n\r\n\r\nimg\r\n\r\n","slug":"Algorithm/Dijkstra","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Shortest Path Algorithm","author_index":"JBR_Bunjie"},{"id":"4bbde60d3dafb255adad1c9293392efa","title":"全排列","content":"Permutations - 全排列\r\n顾名思义，就是找出当前元素所有可行的序列\r\n一个朴素的思想是递归，这种方式简单但并不高效快捷\r\n以两个示例来进行算法说明：\r\nExample1:\r\n\r\n实验五 数据输出\r\n实验准备 理解数据输入、输出的技巧。\r\n实验目的 理解算法设计的数学基本思想，理解算法程序化实现的技巧。\r\n实验过程 输出1,2,3,4,5,6这六个元素的所有全排列。\r\n\r\ndef permutations(arr: list, position: int, end: int):\n    if position &#x3D;&#x3D; end:\n        # 完成一次排列，输出结果，返回上层\n        print(arr)\n    else:\n        # 采用递归解决问题\n        for index in range(position, end):\n            # 每进入一次函数，都会在当前位置山建立循环，这个循环会将所有的锁具都和当前数进行一次交换\n            # 由于每单次循环都会将数据列表重置还原，所以不会对下一次交换产生影响导致重复\n            # 故从当前的position开始，与end之前的所有数据交换次序，就可以得到所有内容\n            arr[index], arr[position] &#x3D; arr[position], arr[index]\n            permutations(arr, position + 1, end)\n            arr[index], arr[position] &#x3D; arr[position], arr[index]  # 还原到交换前的状态，为了进行下一次交换\n\npermutations(arr, 0, len(arr))\nprint(&quot;共720条数据&quot;)  # 6*5*4*3*2*1 &#x3D;&#x3D; 720\r\nExample2: 46. 全排列 -\r\n力扣（LeetCode） (leetcode-cn.com)\r\nclass Solution:\n    def permute(self, nums: List[int]) -&gt; List[List[int]]:\n        self.result &#x3D; []\n        self.generatation(nums, 0, len(nums))\n        return self.result\n\n    def generatation(self,nums, start, end):\n        if start &#x3D;&#x3D; end:\n            # print(nums)\n            self.result.append([t for t in nums])\n            return\n        \n        for i in range(start, end):\n            nums[i], nums[start] &#x3D; nums[start], nums[i]\n            self.generatation(nums, start+1,end)\n            nums[start], nums[i] &#x3D; nums[i], nums[start]\r\n1.6\r\n字符串的全排列 | 编程之法：面试和算法心得 (gitbooks.io)\r\n","slug":"Algorithm/Permutations","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"穷举","author_index":"JBR_Bunjie"},{"id":"7dbcf1e35df66bdccacdaed2ecd943d3","title":"利用递归、无循环地打印数组","content":"ReverseOutputWithoutCycle\r\n描述：不用循环，不逐一赋值地把一个数组逆序输出\r\n循环 -&gt; 递归；即用递归去承担原本循环的工作\r\n即：\r\nvoid Print(int[] arr, int len) &#123;\n    if (len &gt; 0) &#123;\n        Console.printline(arr[len-1] + &quot;\\n&quot;);\n        Print(arr, len - 1);\n    &#125;\n&#125;\r\n","slug":"Algorithm/ReverseOutputWithoutCycle","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Recursion","author_index":"JBR_Bunjie"},{"id":"08152463b75b8ab3478d28a28a35a8b9","title":"中国邮递员问题","content":"The Route of the Postman\r\nReference\r\n\r\nThe\r\nChinese-Postman-Method (tum.de)\r\n邮递员问题 -\r\n维基百科，自由的百科全书 (wikipedia.org)\r\n中国邮递员问题\r\n| Junnor.G (cfonheart.github.io)\r\n\r\nDetails\r\n\r\n邮递员问题（也称邮路问题，Route\r\nInspection Problem，或中国邮路问题,China Route\r\nInspection Problem，或中国邮递员问题Chinese Postman\r\nProblem）是一个图论问题。此问题为在一个连通的无向图中找到一最短的封闭路径，且此路径需通过所有边至少一次。\r\n简单来说，邮递员问题就是在一个已知的地区，邮差要设法找到一条最短路径，可以走过此地区所有的街道，且最后要回到出发点。\r\n\r\n一笔画问题 -\r\n维基百科，自由的百科全书 (wikipedia.org)\r\n问题解决\r\n\r\n\r\n图本身就是一个欧拉回路图，那么直接走一个欧拉回路就访问了所有路径并回到了起点\r\n\r\n（欧拉回路图的前提条件是每个点的度数都是偶数）\r\n\r\n图不是一个欧拉回路图，需要对某些边重复走多次回到起点，等价于添加了一些已经存在的重边，构建了欧拉回路。\r\n\r\n不是欧拉回路需要通过增加一些边使得图变成一个欧拉回路，并能保证问题的最优解，添加的边权值和一定是尽可能短的。\r\n\r\n计算度数为奇数的点\r\n算出所有点之间的最短路径\r\n奇度数的点一定为偶数，点与点之间构建二分图，权值为两点之间的最短路，找到一个最小权值匹配集\r\n对于匹配集，找到每一个匹配集两点之间形成的最短路径，那么这条最短路径就需要加入到额外的边中，且一定能保证这条路径上除了这两个匹配的奇度数点度数加了1变成了偶数，其他所有中间点都是加了2，不影奇偶性。\r\n所有边都添加好后，就是一个欧拉回路了，计算从起点开始的欧拉回路路径\r\n\r\n\r\n","slug":"Algorithm/The Chinese Postman Problem","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Shortest Route","author_index":"JBR_Bunjie"},{"id":"9fd0e4d3dba46b1add7af94a3f9b782a","title":"Sugiyama Algorithm","content":"划时代的自动布局算法：sugiyama算法\r\nsugiyama algorithm steps\r\nof the framework is to divide the task of drawing a graph into\r\nseveral subproblems, most of which closely resemble other well known\r\nproblems within computer science. That way one can use algorithms for\r\nthe similar problems to solve the Sugiyama subproblems and thereby\r\nsimplify the graph layout process. The different steps of the method are\r\nillustrated in figure 2. They are the following:\r\n\r\nCycle removal\r\n\r\nFirst the possibly cyclic graph must be made acyclic by removing\r\ncycles, done by reversing some edges.\r\n\r\nLayer assignment\r\n\r\nSecond, the vertices are assigned to layers and dummy vertices and\r\ndummy edges are introduced for every edge that spans over more than two\r\nlayers so as to create a proper layering [2], i.e. one where every edge\r\nhas its endpoints in adjacent layers.\r\n\r\nVertex ordering\r\n\r\nThird, the vertices are ordered within their layers to minimise edge\r\ncrossings.\r\n\r\nCoordinate assignment\r\n\r\nFourth and last, the vertices are assigned coordinates to create a\r\nbalanced graph.\r\nsugiyama barycenter算法内容\r\n两层间的情况：\r\nn层间的情况：\r\n纯python实现：\r\n\r\n原论文地址：\r\nMethods for\r\nVisual Understanding of Hierarchical System Structures | IEEE Journals\r\n&amp; Magazine | IEEE Xplore\r\n所实现算法的仓库：\r\n视频教程：\r\n(40)\r\nHierarchical Drawings: Sugiyama Framework | Visualization of Graphs -\r\nLecture 8 - YouTube\r\nMore Resource:\r\n161388.pdf\r\n(chalmers.se)\r\n","slug":"Algorithm/Sugiyama","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Auto Layout","author_index":"JBR_Bunjie"},{"id":"e7ccb6064d60a08f73c48322b41c41c6","title":"三角形","content":"求面积\r\n1.底高求面积\r\n已知三角形底a，高h，则 \\[\r\nS = \\frac{a·h}{2}\r\n\\]\r\n2.海伦公式\r\n已知三角形三边a,b,c，则 \\[\r\n\\begin{aligned}\r\np &amp;= \\frac{a+b+c}{2}\\\\\r\nS &amp;= \\sqrt{[p(p - a)(p - b)(p - c)]}\\\\\r\n&amp;=\\sqrt{[(1/16)(a+b+c)(a+b-c)(a+c-b)(b+c-a)]}\\\\\r\n&amp;=1/4\\sqrt{[(a+b+c)(a+b-c)(a+c-b)(b+c-a)]}\r\n\\end{aligned}\r\n\\]\r\n3.边角公式\r\n已知三角形两边a,b,这两边夹角\\(\\alpha\\)，则有： \\[\r\n\\begin{aligned}\r\nS = \\frac{a·b·\\sin\\alpha}{2}\r\n\\end{aligned}\r\n\\] 即两夹边之积乘夹角正弦值的一半。\r\n4.内切圆面积公式\r\n设三角形三边分别为a、b、c，内切圆半径为r\r\n则三角形面积 \\[\r\nS = \\frac{(a+b+c)·r}{2}\r\n\\]\r\n5.外接圆面积公式\r\n设三角形三边分别为a、b、c，外接圆半径为R\r\n则三角形面积 \\[\r\n\\begin{aligned}\r\nS &amp;= \\frac{a · b · c}{4R}\\\\\r\n&amp;= 2R^2 · \\sin{A} · \\sin{B} · \\sin{C}\r\n\\end{aligned}\r\n\\]\r\n6.行列式形式\r\n\\[\r\nS = \\frac{1}{2}\r\n\\left|\r\n\\begin{array}{cccc}\r\na&amp;b&amp;1\\\\\r\nc&amp;d&amp;1\\\\\r\ne&amp;f&amp;1\r\n\\end{array}\r\n\\right|\r\n\\]\r\n为三阶行列式，此三角形\\(ABC\\)在平面直角坐标系内\\(A(a,b), B(c,d), C(e,f)\\)，这里\\(ABC\\)选取最好按逆时针顺序从右上角开始取，因为这样取得出的结果一般都为正值，如果不按这个规则取，可能会得到负值，但不要紧，只要取绝对值就可以了，不会影响三角形面积的大小。\r\n7.中线面积公式\r\nMa,Mb,Mc为三角形的中线长. \\[\r\nS=\\sqrt{[(Ma+Mb+Mc)*(Mb+Mc-Ma)*(Mc+Ma-Mb)*(Ma+Mb-Mc)]/3}\r\n\\]\r\n单色三角形\r\nDescription\r\n在空间中给出了n个点。这些点任三点不共线，并且每两个点之间都有一条线相连，每一条线不是红的就是黑的。在这些点和线组成的三角形中，如果一个三角形的三条边的颜色都相同，那么我们就称这个三角形为单色三角形。现给出所有涂红色的线，试求出单色三角形的数目。\r\nmathematics side\r\nQuestion:\r\n给定空间里n(n&lt;=1000)个点，假设任意三个点都不共线。\r\n将任意两点之间的连线涂上红色或者黑色。\r\n问3条边同色的三角形个数。\r\n\r\nAnswer:\r\n由于三角形总数C(n,3)，所以求出异色三角形个数就求出了同色三角形个数。\r\n值得注意的是，当我们比较一个三角形是否是单色三角形时，我们实际比较的是三角形中的任意两条边，而不是比较一个“三角形”\r\n利用这样的比较关系，我们比较的对象是单个顶点而不是每个三角形，易知：一个异色三角形存在两个顶点，该三角形中与它们相邻的两边是不同色的；而对从一个顶点出发的两条异色边都属于一个异色三角形。这是个一对二的关系。\r\n已知第i个点会连接总共n-1条边。设第i个点连接了a条红边、n-1-a条黑边，由于边之间的组合关系，这些边一定属于a(n-1-a)个不同的异色三角形。由于异色三角形都会被考虑两次，所以最终的答案为C(n,\r\n3) - sigmaΣ(i from 1 to n)a(n-1-a)/2\r\n请注意，每个i下的a都是不同的，为了彰显这之中的关联，可以改设为ai，故得答案：\r\nC(n, 3) - Σ(i from 1 to n) ai * (n - 1 - ai) / 2\r\n\r\nprogramming side\r\nQuestion:\r\n任务：\r\n请写一个程序：\r\n从文本文件中读入点数和对红色连线的描述；\r\n找出该图中红色三角形的数目；\r\n把结果输出到文件TRO.OUT中。\r\n输入格式：\r\n在文本文件TRO.IN的第一行包括一个整数n，3 &lt;= n &lt;=\r\n1000，为空间中的点数。\r\n该文件的第二行为一个整数m，0 &lt;= m &lt;=\r\n250000，为红色连线的数目。\r\n以下的m行中每行为两个用空格分开的整数p和k，1 &lt;= p &lt; k &lt;=\r\nn，表示第p点和第k号点之间的连线为红色。\r\n输出格式：\r\n你应该在文本文件TRO.OUT输出唯一的一个整数——同色三角形的数目。\r\n样例：\r\n输入\r\n\r\n6 9 1 2 2 3 2 5 1 4 1 6 3 4 4 5 5 6 3 6\r\n\r\n输出\r\n\r\n2\r\n\r\nAnswer:\r\n按照在mathematics\r\nside中的思路，我们可以发现，单个点的比较中，是不存在“方向”的，或者说，所比较的每条线都是双向的。而同时也不在意当前点对点的具体内容，我们只在意当前点下，具体\r\n有 多少“红线”与“黑线”\r\n故我们用一个字典来记录各个顶点下的线数即可\r\n#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdio&gt;\n \nusing namespace std;\n \nconst int maxn &#x3D; 200010;\ntypedef long long LL;\n \nint a[maxn];\nint cnt[maxn];\nint n,num;\nint ele[100];\n \nvoid fen(int x)&#x2F;&#x2F;素因子分解\n&#123;\n    num&#x3D;0;\n    for(int i&#x3D;2;i*i&lt;&#x3D;x;i++)&#123;\n        if(x%i&#x3D;&#x3D;0)&#123;\n            ele[num++]&#x3D;i;\n            while(x%i&#x3D;&#x3D;0)\n                x&#x2F;&#x3D;i;\n        &#125;\n    &#125;\n    if(x&gt;1) ele[num++]&#x3D;x;\n&#125;\n \nvoid init()&#x2F;&#x2F;预处理与a[i]不互质的数的个数\n&#123;\n    memset(cnt,0,sizeof(cnt));\n    scanf(&quot;%d&quot;,&amp;n);\n    for(int i&#x3D;0;i&lt;n;i++)&#123;\n        scanf(&quot;%d&quot;,&amp;a[i]);\n        fen(a[i]);\n        for(int j&#x3D;1;j&lt;(1&lt;&lt;num);j++)&#123;\n            int tmp&#x3D;1;\n            for(int k&#x3D;0;k&lt;num;k++)\n                if((1&lt;&lt;k)&amp;j) tmp*&#x3D;ele[k];\n            cnt[tmp]++;\n        &#125;\n    &#125;\n&#125;\n \nLL solve()\n&#123;\n    LL ans&#x3D;n;\n    ans&#x3D;ans*(n-1)*(n-2)&#x2F;6;&#x2F;&#x2F;防止爆int\n    LL sum&#x3D;0;\n    for(int i&#x3D;0;i&lt;n;i++)&#123;&#x2F;&#x2F;容斥原理求与a[i]不互质的数的个数\n        fen(a[i]);\n        LL tmp&#x3D;0;\n        for(int j&#x3D;1;j&lt;(1&lt;&lt;num);j++)&#123;\n            LL ret &#x3D; 1;\n            int t&#x3D;0;\n            for(int k&#x3D;0;k&lt;num;k++)&#123;\n                if((1&lt;&lt;k)&amp;j)&#123;\n                    ret*&#x3D;ele[k];\n                    t++;\n                &#125;\n            &#125;\n            if(t&amp;1) tmp+&#x3D;cnt[ret];\n            else tmp-&#x3D;cnt[ret];\n        &#125;\n        if(tmp&#x3D;&#x3D;0) continue;\n        else sum+&#x3D;(n-tmp)*(tmp-1);\n        &#x2F;&#x2F;cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;tmp&lt;&lt;&quot; &quot;&lt;&lt;(n-tmp)*(tmp-1)&#x2F;2&lt;&lt;endl;\n    &#125;\n    return ans-sum&#x2F;2;\n&#125;\nint main()\n&#123;\n    int t;\n    scanf(&quot;%d&quot;,&amp;t);\n    while(t--)&#123;\n        init();\n        LL ans&#x3D;solve();\n        printf(&quot;%I64d\\n&quot;,ans);\n    &#125;\n    return 0;\n&#125;\r\n","slug":"Algorithm/三角形面积计算","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"triangle area","author_index":"JBR_Bunjie"},{"id":"c7cd6315021c2b49c9efb80c79e420a8","title":"大数运算","content":"前言：\r\n在计算机中数字表示的范围是有限制的，比如我们熟知的 int、float、double\r\n等数据类型所能表示的范围都是有限的，如果我们要对位数达到几十位、几百位、上千位的大整数进行计算，这些数据类型显然不能满足我们的要求，因此我们需要通过算法来实现这些功能。\r\n1、大数加法\r\n两个大数我们可以用数组来保存，然后在数组中逐位进行相加，再判断该位相加后是否需要进位，为了方便计算，我们将数字的低位放在数组的前面，高位放在后面。\r\n下面是两个正的大整数相加算法的C语言参考代码：\r\n#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n\n#define MAX 1000    &#x2F;&#x2F; 大数的最大位数\n\n\n&#x2F;*\n  大数加法\n  参数：\n  num1为第一个大数，用字符数组保存\n  num2为第二个大数\n  sum数组保存相加的结果  即：num1+num2&#x3D;sum\n  返回值：返回数组sum的有效长度，即计算结果的位数\n *&#x2F;\nint Addition(char num1[], char num2[], int sum[])\n&#123;\n    int i, j, len;\n    int n2[MAX] &#x3D; &#123;0&#125;;\n    int len1 &#x3D; strlen (num1); &#x2F;&#x2F; 计算数组num1的长度，即大数的位数\n    int len2 &#x3D; strlen (num2); &#x2F;&#x2F; 计算数组num2的长度，即大数的位数\n\n    len &#x3D; len1&gt;len2 ? len1 : len2; &#x2F;&#x2F; 获取较大的位数\n    &#x2F;&#x2F;将num1字符数组的数字字符转换为整型数字，且逆向保存在整型数组sum中，即低位在前，高位在后\n    for (i &#x3D; len1-1, j &#x3D; 0; i &gt;&#x3D; 0; i--, j++)\n        sum[j] &#x3D; num1[i] - &#39;0&#39;;\n    &#x2F;&#x2F; 转换第二个数\n    for (i &#x3D; len2-1, j &#x3D; 0; i &gt;&#x3D; 0; i--, j++)\n        n2[j] &#x3D; num2[i] - &#39;0&#39;;\n    &#x2F;&#x2F; 将两个大数相加\n    for (i &#x3D; 0; i &lt;&#x3D; len; i++)\n    &#123;\n        sum[i] +&#x3D; n2[i];  &#x2F;&#x2F; 两个数从低位开始相加\n        if (sum[i] &gt; 9)   &#x2F;&#x2F; 判断是否有进位\n        &#123;   &#x2F;&#x2F; 进位\n            sum[i] -&#x3D; 10;\n            sum[i+1]++;\n        &#125;\n    &#125;\n    if(sum[len] !&#x3D; 0)  &#x2F;&#x2F; 判断最高位是否有进位\n        len++;\n    return len;   &#x2F;&#x2F; 返回和的位数\n&#125;\n\nint main()\n&#123;\n    int i, len;\n    int sum[MAX] &#x3D; &#123;0&#125;; &#x2F;&#x2F; 存放计算的结果，低位在前，高位在后，即sum[0]是低位\n    char num1[] &#x3D; &quot;1234567891234567891234&quot;; &#x2F;&#x2F; 第一个大数\n    char num2[] &#x3D; &quot;2345678912345678913345&quot;; &#x2F;&#x2F; 第二个大数\n    len &#x3D; Addition(num1, num2, sum);    &#x2F;&#x2F; 两数相加\n    printf(&quot;%s\\n  +\\n%s\\n  &#x3D;\\n&quot;, num1, num2);\n    &#x2F;&#x2F; 反向输出求和结果\n    for (i &#x3D; len-1; i &gt;&#x3D; 0; i--)\n        printf(&quot;%d&quot;, sum[i]);\n    printf(&quot;\\n&quot;);\n    return 0;\n&#125;\n\r\n2、大数减法\r\n相减算法也是从低位开始减的。先要判断被减数和减数哪一个位数长，若被减数位数长是正常的减法；若减数位数长，则用被减数减去减数，最后还要加上负号；当两数位数长度相等时，最好比较哪一个数字大，否则负号处理会很繁琐；处理每一项时要，如果前一位相减有借位，就先减去上一位的借位，无则不减，再去判断是否能够减开被减数，如果减不开，就要借位后再去减，同时置借位为1，否则置借位为0。\r\n下面是C语言参考代码：\r\n#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n\n#define MAX 1000    &#x2F;&#x2F; 大数的最大位数\n\n&#x2F;*\n  大数减法\n  参数：\n  num1为被减数，用字符数组保存\n  num2为减数\n  sum数组保存相减的结果   即：num1-num2&#x3D;sum\n  返回值：返回数组sum的有效长度，即计算结果的位数\n *&#x2F;\nint Subtraction(char num1[], char num2[], int sum[])\n&#123;\n    int i, j, len, blag;\n    char *temp;\n    int n2[MAX] &#x3D; &#123;0&#125;;\n    int len1 &#x3D; strlen(num1); &#x2F;&#x2F; 计算数组num1的长度，即大数的位数\n    int len2 &#x3D; strlen(num2); &#x2F;&#x2F; 计算数组num2的长度，即大数的位数\n\n    &#x2F;&#x2F; 在进行减法之前要进行一些预处理\n    blag &#x3D; 0; &#x2F;&#x2F; 为0表示结果是正整数，为1表示结果是负整数\n    if(len1 &lt; len2) &#x2F;&#x2F; 如果被减数位数小于减数\n    &#123;\n        blag &#x3D; 1; &#x2F;&#x2F; 标记结果为负数\n        &#x2F;&#x2F; 交换两个数，便于计算\n        temp &#x3D; num1;\n        num1 &#x3D; num2;\n        num2 &#x3D; temp;\n        len &#x3D; len1;\n        len1 &#x3D; len2;\n        len2 &#x3D; len;\n    &#125;\n    else if(len1 &#x3D;&#x3D;len2) &#x2F;&#x2F; 如果被减数的位数等于减数的位数\n    &#123;\n        &#x2F;&#x2F; 判断哪个数大\n        for(i &#x3D; 0; i &lt; len1; i++)\n        &#123;\n            if(num1[i] &#x3D;&#x3D; num2[i])\n                continue;\n            if(num1[i] &gt; num2[i])\n            &#123;\n                blag &#x3D; 0; &#x2F;&#x2F; 标记结果为正数\n                break;\n            &#125;\n            else\n            &#123;\n                blag &#x3D; 1; &#x2F;&#x2F; 标记结果为负数\n                &#x2F;&#x2F; 交换两个数，便于计算\n                temp &#x3D; num1;\n                num1 &#x3D; num2;\n                num2 &#x3D; temp;\n                break;\n            &#125;\n        &#125;\n    &#125;\n    len &#x3D; len1&gt;len2 ? len1 : len2; &#x2F;&#x2F; 获取较大的位数\n    &#x2F;&#x2F;将num1字符数组的数字转换为整型数且逆向保存在整型数组sum中，即低位在前，高位在后\n    for (i &#x3D; len1-1, j &#x3D; 0; i &gt;&#x3D; 0; i--, j++)\n        sum[j] &#x3D; num1[i] - &#39;0&#39;;\n    &#x2F;&#x2F; 转换第二个数\n    for (i &#x3D; len2-1, j &#x3D; 0; i &gt;&#x3D; 0; i--, j++)\n        n2[j] &#x3D; num2[i] - &#39;0&#39;;\n    &#x2F;&#x2F; 将两个大数相减\n    for (i &#x3D; 0; i &lt;&#x3D; len; i++)\n    &#123;\n        sum[i] &#x3D; sum[i] - n2[i]; &#x2F;&#x2F; 两个数从低位开始相减\n        if (sum[i] &lt; 0)   &#x2F;&#x2F; 判断是否有借位\n        &#123;    &#x2F;&#x2F; 借位\n            sum[i] +&#x3D; 10;\n            sum[i+1]--;\n        &#125;\n    &#125;\n    &#x2F;&#x2F; 计算结果长度\n    for (i &#x3D; len1-1; i&gt;&#x3D;0 &amp;&amp; sum[i] &#x3D;&#x3D; 0; i--)\n        ;\n    len &#x3D; i+1;\n    if(blag&#x3D;&#x3D;1)\n    &#123;\n        sum[len] &#x3D; -1;  &#x2F;&#x2F; 在高位添加一个-1表示负数\n        len++;\n    &#125;\n    return len;   &#x2F;&#x2F; 返回结果的位数\n&#125;\n\nint main()\n&#123;\n    int i, len;\n    int sum[MAX] &#x3D; &#123;0&#125;; &#x2F;&#x2F; 存放计算的结果，低位在前，高位在后，即sum[0]是低位\n    char num1[] &#x3D; &quot;987654321987654321&quot;; &#x2F;&#x2F; 第一个大数\n    char num2[] &#x3D; &quot;123456789123456789&quot;; &#x2F;&#x2F; 第二个大数\n    len &#x3D; Subtraction(num1, num2, sum);    &#x2F;&#x2F; 两数相减\n    &#x2F;&#x2F; 输出结果\n    printf(&quot;%s\\n  -\\n%s\\n  &#x3D;\\n&quot;, num1, num2);\n    if(sum[i&#x3D;len-1] &lt; 0) &#x2F;&#x2F; 根据高位是否是-1判断是否是负数\n    &#123;\n        printf(&quot;-&quot;); &#x2F;&#x2F; 输出负号\n        i--;\n    &#125;\n    for (; i &gt;&#x3D; 0; i--)\n        printf(&quot;%d&quot;, sum[i]);\n    printf(&quot;\\n&quot;);\n    return 0;\n&#125;\r\n3、大数乘法\r\n首先说一下乘法计算的算法，从低位向高位乘，在竖式计算中，我们是将乘数第一位与被乘数的每一位相乘，记录结果，之后，用第二位相乘，记录结果并且左移一位，以此类推，直到计算完最后一位，再将各项结果相加，得出最后结果。\r\n计算的过程基本上和小学生列竖式做乘法相同。为了编程方便，并不急于处理进位，而是将进位问题留待最后统一处理。\r\n总结一个规律: 即一个数的第i 位和另一个数的第j\r\n位相乘所得的数，一定是要累加到结果的第i+j 位上。这里i, j\r\n都是从右往左，从0 开始数。ans[i+j] = a[i]*b[j];\r\n另外注意进位时要处理，当前的值加上进位的值再看本位数字是否又有进位；前导清零。\r\n下面是C语言的两个正大数相乘的参考代码：\r\n#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n\n#define MAX 1000    &#x2F;&#x2F; 大数的最大位数\n\n\n&#x2F;*\n  大数乘法\n  参数：\n  num1为第一个因数，用字符数组保存\n  num2为第二个因数\n  sum数组保存相乘的结果  即：num1*num2&#x3D;sum\n  返回值：返回数组sum的有效长度，即计算结果的位数\n *&#x2F;\nint Multiplication(char num1[],char num2[], int sum[])\n&#123;\n    int i, j, len, len1, len2;\n    int a[MAX+10] &#x3D; &#123;0&#125;;\n    int b[MAX+10] &#x3D; &#123;0&#125;;\n    int c[MAX*2+10] &#x3D; &#123;0&#125;;\n\n    len1 &#x3D; strlen(num1);\n    for(j &#x3D; 0, i &#x3D; len1-1; i &gt;&#x3D; 0; i--) &#x2F;&#x2F;把数字字符转换为整型数\n        a[j++] &#x3D; num1[i]-&#39;0&#39;;\n    len2 &#x3D; strlen(num2);\n    for(j &#x3D; 0, i &#x3D; len2-1; i &gt;&#x3D; 0; i--)\n        b[j++] &#x3D; num2[i]-&#39;0&#39;;\n\n    for(i &#x3D; 0; i &lt; len2; i++)&#x2F;&#x2F;用第二个数乘以第一个数,每次一位\n    &#123;\n        for(j &#x3D; 0; j &lt; len1; j++)\n        &#123;\n            c[i+j] +&#x3D; b[i] * a[j]; &#x2F;&#x2F;先乘起来,后面统一进位\n        &#125;\n    &#125;\n\n    for(i&#x3D;0; i&lt;MAX*2; i++) &#x2F;&#x2F;循环统一处理进位问题\n    &#123;\n        if(c[i]&gt;&#x3D;10)\n        &#123;\n            c[i+1]+&#x3D;c[i]&#x2F;10;\n            c[i]%&#x3D;10;\n        &#125;\n    &#125;\n\n    for(i &#x3D; MAX*2; c[i]&#x3D;&#x3D;0 &amp;&amp; i&gt;&#x3D;0; i--); &#x2F;&#x2F;跳过高位的0\n    len &#x3D; i+1; &#x2F;&#x2F; 记录结果的长度\n    for(; i&gt;&#x3D;0; i--)\n        sum[i]&#x3D;c[i];\n    return len;\n&#125;\n\nint main()\n&#123;\n    int i, len;\n    int sum[MAX*2+10] &#x3D; &#123;0&#125;; &#x2F;&#x2F; 存放计算的结果，低位在前，高位在后，即sum[0]是低位\n    char num1[] &#x3D; &quot;123456789123456789&quot;; &#x2F;&#x2F; 第一个大数\n    char num2[] &#x3D; &quot;123456789123456789&quot;; &#x2F;&#x2F; 第二个大数\n    len &#x3D; Multiplication(num1, num2, sum);\n    &#x2F;&#x2F; 输出结果\n    printf(&quot;%s\\n  *\\n%s\\n  &#x3D;\\n&quot;, num1, num2);\n    for(i &#x3D; len-1; i&gt;&#x3D;0; i--)\n        printf(&quot;%d&quot;, sum[i]);\n    printf(&quot;\\n&quot;);\n    return 0;\n&#125;\r\n4、大数除法\r\n大数除法是四则运算里面最难的一种。不同于一般的模拟，除法操作不是模仿手工除法，而是利用减法操作来实现的。其基本思想是反复做除法，看从被除数里面最多能减去多少个除数，商就是多少。逐个减显然太慢，要判断一次最多能减少多少个整数(除数)的10的n次方。\r\n以7546除以23为例：\r\n先用7546减去23的100倍，即减去2300，可以减3次，余下646，此时商就是300\r\n(300=100*3)；\r\n然后646减去23的10倍，即减去230，可以减2次，余下186，此时商就是320\r\n(320=300+10*2)；\r\n然后186减去23，可以减8次，余下2，此时商就是328 (328=320+1*8)；\r\n因为2除以23的结果小于1，而我们又不用计算小数点位，所以不必再继续算下去了。\r\n下面是C语言的两个正大数相除的参考代码，计算结果中没有小数：\r\n#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#define MAX 1000    &#x2F;&#x2F; 大数的最大位数\n\n&#x2F;&#x2F; 注：\n&#x2F;&#x2F; 本代码在以下博客代码中进行修改：\n&#x2F;&#x2F; http:&#x2F;&#x2F;www.cnblogs.com&#x2F;javawebsoa&#x2F;archive&#x2F;2013&#x2F;08&#x2F;01&#x2F;3231078.html\n&#x2F;&#x2F;\n\n\n&#x2F;*\n  函数SubStract功能：\n  用长度为len1的大整数p1减去长度为len2的大整数p2\n  结果存在p1中，返回值代表结果的长度\n  不够减：返回-1 ， 正好够：返回0\n*&#x2F;\nint SubStract(int *p1, int len1, int *p2, int len2)\n&#123;\n    int i;\n    if(len1 &lt; len2)\n        return -1;\n    if(len1 &#x3D;&#x3D; len2 )\n    &#123;                        &#x2F;&#x2F; 判断p1 &gt; p2\n        for(i &#x3D; len1-1; i &gt;&#x3D; 0; i--)\n        &#123;\n            if(p1[i] &gt; p2[i])   &#x2F;&#x2F; 若大，则满足条件，可做减法\n                break;\n            else if(p1[i] &lt; p2[i]) &#x2F;&#x2F; 否则返回-1\n                return -1;\n        &#125;\n    &#125;\n    for(i &#x3D; 0; i &lt;&#x3D; len1-1; i++)  &#x2F;&#x2F; 从低位开始做减法\n    &#123;\n        p1[i] -&#x3D; p2[i];         &#x2F;&#x2F; 相减\n        if(p1[i] &lt; 0)           &#x2F;&#x2F; 若是否需要借位\n        &#123;   &#x2F;&#x2F; 借位\n            p1[i] +&#x3D; 10;\n            p1[i+1]--;\n        &#125;\n    &#125;\n    for(i &#x3D; len1-1; i &gt;&#x3D; 0; i--)  &#x2F;&#x2F; 查找结果的最高位\n    &#123;\n        if( p1[i] )             &#x2F;&#x2F;最高位第一个不为0\n            return (i+1);       &#x2F;&#x2F;得到位数并返回\n    &#125;\n    return 0;                   &#x2F;&#x2F;两数相等的时候返回0\n&#125;\n\n\n&#x2F;*\n  大数除法---结果不包括小数点\n  num1 被除数\n  num2 除数\n  sum  商，存放计算的结果，即：num1&#x2F;num2&#x3D;sum\n  返回数组sum的有效长度，即商的位数\n*&#x2F;\nint Division(char num1[], char num2[], char sum[])\n&#123;\n    int k, i, j;\n    int len1, len2, len&#x3D;0;     &#x2F;&#x2F;大数位数\n    int dValue;                &#x2F;&#x2F;两大数相差位数\n    int nTemp;                 &#x2F;&#x2F;Subtract函数返回值\n    int num_a[MAX] &#x3D; &#123;0&#125;;      &#x2F;&#x2F;被除数\n    int num_b[MAX] &#x3D; &#123;0&#125;;      &#x2F;&#x2F;除数\n    int num_c[MAX] &#x3D; &#123;0&#125;;      &#x2F;&#x2F;商\n\n    len1 &#x3D; strlen(num1);       &#x2F;&#x2F;获得大数的位数\n    len2 &#x3D; strlen(num2);\n\n    &#x2F;&#x2F;将数字字符转换成整型数，且翻转保存在整型数组中\n    for( j &#x3D; 0, i &#x3D; len1-1; i &gt;&#x3D; 0; j++, i-- )\n        num_a[j] &#x3D; num1[i] - &#39;0&#39;;\n    for( j &#x3D; 0, i &#x3D; len2-1; i &gt;&#x3D; 0; j++, i-- )\n        num_b[j] &#x3D; num2[i] - &#39;0&#39;;\n\n    if( len1 &lt; len2 )          &#x2F;&#x2F;如果被除数小于除数，直接返回-1，表示结果为0\n    &#123;\n        return -1;\n    &#125;\n    dValue &#x3D; len1 - len2;      &#x2F;&#x2F;相差位数\n    for (i &#x3D; len1-1; i &gt;&#x3D; 0; i--)    &#x2F;&#x2F;将除数扩大，使得除数和被除数位数相等\n    &#123;\n        if (i &gt;&#x3D; dValue)\n            num_b[i] &#x3D; num_b[i-dValue];\n        else                         &#x2F;&#x2F;低位置0\n            num_b[i] &#x3D; 0;\n    &#125;\n    len2 &#x3D; len1;\n    for(j &#x3D; 0; j &lt;&#x3D; dValue; j++ )    &#x2F;&#x2F;重复调用，同时记录减成功的次数，即为商\n    &#123;\n        while((nTemp &#x3D; SubStract(num_a, len1, num_b+j, len2-j)) &gt;&#x3D; 0)\n        &#123;\n            len1 &#x3D; nTemp;            &#x2F;&#x2F;结果长度\n            num_c[dValue-j]++;       &#x2F;&#x2F;每成功减一次，将商的相应位加1\n        &#125;\n    &#125;\n    &#x2F;&#x2F; 计算商的位数，并将商放在sum字符数组中\n    for(i &#x3D; MAX-1; num_c[i] &#x3D;&#x3D; 0 &amp;&amp; i &gt;&#x3D; 0; i-- );  &#x2F;&#x2F;跳过高位0，获取商的位数\n    if(i &gt;&#x3D; 0)\n        len &#x3D; i + 1; &#x2F;&#x2F; 保存位数\n    for(j &#x3D; 0; i &gt;&#x3D; 0; i--, j++)     &#x2F;&#x2F; 将结果复制到sum数组中\n        sum[j] &#x3D; num_c[i] + &#39;0&#39;;\n    sum[j] &#x3D; &#39;\\0&#39;;   &#x2F;&#x2F; sum字符数组结尾置0\n    return len;      &#x2F;&#x2F; 返回商的位数\n&#125;\n\n\nint main()\n&#123;\n    int i;\n    int len;                &#x2F;&#x2F; 商的位数\n    char num1[MAX] &#x3D; &quot;1234567899876543210&quot;;   &#x2F;&#x2F; 第一个大数\n    char num2[MAX] &#x3D; &quot;20160415123025&quot;;              &#x2F;&#x2F; 第二个大数\n    char sum[MAX] &#x3D; &#123;0&#125;;    &#x2F;&#x2F; 计算结果\n\n    &#x2F;&#x2F;scanf(&quot;%s&quot;, num1);      &#x2F;&#x2F;以字符串形式读入大数\n    &#x2F;&#x2F;scanf(&quot;%s&quot;, num2);\n\n    len &#x3D; Division(num1, num2, sum);\n\n    &#x2F;&#x2F;输出结果\n    printf(&quot;%s\\n  ÷\\n%s\\n  &#x3D;\\n&quot;, num1, num2);\n    if( len&gt;&#x3D;0 )\n    &#123;\n        for(i &#x3D; 0; i &lt; len; i++ )\n            printf(&quot;%c&quot;, sum[i]);\n    &#125;\n    else\n    &#123;\n        printf(&quot;0&quot;);\n    &#125;\n    printf(&quot;\\n&quot;);\n\n    return 0;\n&#125;\r\n","slug":"Algorithm/大数四则运算","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"calculate","author_index":"JBR_Bunjie"},{"id":"88fe004551a3de4348d535f91c34c293","title":"字符画","content":"字符画\r\n另类应用\r\n当你需要在shell里查看图片时\r\n现有框架\r\nascii-image-converter TheZoraiz/ascii-image-converter:\r\nA cross-platform command-line tool to convert images into ascii art and\r\nprint them on the console. Now supports braille art!\r\n(github.com)\r\n原理\r\n字符画是一系列字符的组合，我们可以把字符看作是比较大块的像素，一个字符能表现一种颜色，字符的种类越多，可以表现的颜色也越多，图片也会更有层次感。\r\n最终显示的是黑白色的字符画，那么彩色的图\r\n片怎么转换成黑白的呢？这里就需要了解灰度值的概念了。\r\n灰度值：指黑白图像中点的颜色深度，范围一般从0到255，白色为255，黑色为0，故黑白图片也称灰度图像。\r\n我们利用下面的公式将像素的RGB值转换成灰度值：\r\ngray ＝ 0.2126 * r + 0.7152 * g + 0.0722\r\n* b\r\n用不同的字符代表不同的灰度值，字符的种类和数量可以根据自己需要的效果进行调整，最好从前往后可以看到明显的变化，最后一个字符为空格符最佳：\r\nascii_char &#x3D; list(&quot;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft&#x2F;\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\\&quot;^&#96;&#39;. &quot;)\r\n图片转字符画的关键思想是将图片的灰度值与你自己设定的字符集之间建立映射关系，不同区间的灰度值对应不同的字符，之后将图片每一个像素对应的字符打印出来就是我们要的字符画啦~\r\n这里提供两种方法：\r\n\r\n获取图片的RGB值，利用公式： Gray = R0.299 + G0.587 + B*0.114\r\n计算可得每个像素点的灰度值，之后再建立映射即可。\r\n先将彩色图片转换为黑白图片，然后直接将每个像素点的灰度值与字符集建立映射。\r\n\r\n实现思路？\r\n思路也很简单，通过像素的灰度来映射出ASCII字符。灰度值越大，所映射的ASCII字符占的单位面积越大，也就是看起来越黑。\r\n（例如某点的灰度是0，那么对应的字符就是空格；类似的，灰度为255时，对应的字符就是“$”）\r\n实际操作起来会遇到的问题就是：\r\n图片太大，输出后的文本即使使用最小字体也看不全\r\nASCII字符不是方形像素（长宽比不是1:1）\r\n处理方法就是对图片的大小数据进行处理（而不是原图修改）然后映射。\r\n总体上来说制作字符画还是比较简单的，需要处理的情况没有那么多。\r\n黑白字符画\r\n黑白字符画应该是难度最低的了。大致思路是这样的：\r\n\r\n设计一个从深到浅（0~255，黑~白）的字符列表；\r\n将原图转为黑白，并量化（quantization，如从 0~255 量化为\r\n0~16）从而匹配字符列表的长度；\r\n将图片缩放为一个很小的图（如宽度 100）；\r\n将每一个像素点的亮度转为对应字符；\r\n输出为 .txt 文件。\r\n\r\n彩色字符画\r\n\r\n将原图缩放为一个很小的缩略图（如宽度 100）；\r\n新建一个大的白色或黑色画布；\r\n计算好每个字符在画布上的位置，将缩略图中每一个像素点转为颜色相同的字符，并打印在画布指定位置上；\r\n将画布输出为图像（如 .png）文件。\r\n\r\nReference：\r\n字符画——从入门到不屑 - 知乎\r\n(zhihu.com)\r\n","slug":"Algorithm/字符画","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"String Processing","author_index":"JBR_Bunjie"},{"id":"61e7c8da8f21c01a5499770adb3ae992","title":"平面分割问题","content":"直线切割平面问题\r\nReference：\r\n\r\n平面分割_xzx9的博客-CSDN博客_平面分割空间\r\n平面分割类问题总结\r\n- Yeader - 博客园 (cnblogs.com)\r\n\r\nDetail：\r\n【题型一】直线分割平面\r\n\r\n在一个平面上有一个圆和n条直线，这些直线中每一条在圆内同其他直线相交，假设没有3条直线相交于一点，试问这些直线将圆分成多少区域。\r\n\r\n分析： \r\n当添加第N条，为了使平面最多，\r\n则第N条直线要与前面的N-1条直线都相交，且没有任何三条直线相交一个点。\r\n则添加第N条直线会多N-1个交点。同时：由于每增加N个交点，就增加N+1个平面，所以添加的第N条直线来会在之前的基础上增加N个平面。\r\n若用F[i]表示i条直线能把平面切分成的个数。 \\[\r\n\\begin{aligned}\r\nF(1)&amp;=2;\\\\\r\nF(n)&amp;=F[n-1]+n;\r\n\\end{aligned}\r\n\\]\r\n可得递推结果： \\[\r\nF(n)=1+n*(n+1)/2\r\n\\]\r\n【题型二】平面分割空间（HDU\r\n1290）\r\n\\[\r\nF(n)=(n^3+5n)/6+1\r\n\\]\r\n全面考虑，注意平面是可以倾斜的！\r\n还有更多？\r\n【题型三】折线分割平面（HDU 2050）\r\n【题型四】圆形划分区域\r\n","slug":"Algorithm/平面切割","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Geometry,plane","author_index":"JBR_Bunjie"},{"id":"920b0f28d25f5984040e129525c64cc1","title":"Floor method","content":"以python为例：\r\n\r\nint()进行强制类型转化\r\nround()函数\r\nformat()函数\r\n两个精巧的数学计算\r\n\r\na &#x3D; 60.89564\n\na&#x2F;&#x2F;1\na-(a+1)%1\n(a+B-1)&#x2F;&#x2F;B # 向上取整\r\n","slug":"Algorithm/小数取整","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Number Processing","author_index":"JBR_Bunjie"},{"id":"0cac3f987485de1d75a5a244c4c39f42","title":"面经贴001","content":"1\r\nUnity\r\n工作经历+近期面试经历_weixin_33912246的博客-CSDN博客\r\n\r\n1.不要过多去问关于加班的问题，如果有熟人在里面直接问熟人好了。或者等拿到offer的时候再问。游戏公司情况比较特殊，加班普遍严重。（当然，技巧归技巧，我个人观点并不认为问清楚加班情况和愿意不愿意加班有什么必然联系。这是双方选择的过程，本来我们就应该有知情权。你给我的钱只够买我一斤的体力脑力，我凭什么卖3斤给你？嗯？）\r\n2.技术老大问技术和职业困惑，主管boss问公司发展和职业发展，HR问生活。（这是我和大学同学交流面试疑惑时，他的原话。挺有道理）\r\n3.平常做项目，学习，多问个为什么。不要只顾埋头写逻辑，多想多学一些底层的东西。知其然，且知其所以然。（虽然作为一个搬砖级的程序员来说，平常更多的只是写逻辑就行了，但如果想要进阶的话，还是多深究一下。想当将军的士兵会让面试者更喜欢吧）\r\n4.关于知识点：几次面试比较常规的知识点是：C#（GC，装拆箱，ref/out，容器，迭代器），Lua（元表，面向对象），算法，数据结构，渲染（流程），性能优化。（这个肯定不全面，只是我基于最近面试的总结）\r\n\r\n想法：\r\n\r\n看情况，看资本\r\n了解你自己的能力，去了解你自己的公司\r\n\r\n知识点简明内容：\r\nC# GC\r\nC# 装拆箱\r\n","slug":"ExperiencesForJob/1","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"面经","author_index":"JBR_Bunjie"},{"id":"018a847738d23737cfe4d3b9bbf1a909","title":"面经贴002","content":"2\r\n作为Unity程序员需要掌握的技能_海洋_的博客-CSDN博客_unity\r\n在职技能\r\n","slug":"ExperiencesForJob/2","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"面经","author_index":"JBR_Bunjie"},{"id":"86f05433afcd220f1d55c4667ed9f60c","title":"Http Explanations","content":"\r\nHypertext Transfer Protocol (HTTP) is an application-layer\r\nprotocol for transmitting hypermedia documents, such as HTML. It was\r\ndesigned for communication between web browsers and web servers, but it\r\ncan also be used for other purposes. HTTP follows a classical client-server\r\nmodel, with a client opening a connection to make a request, then\r\nwaiting until it receives a response. HTTP is a stateless\r\nprotocol, meaning that the server does not keep any data (state)\r\nbetween two requests.\r\n\r\nOverview:\r\n\r\n\r\nimg\r\n\r\nComponents\r\nof HTTP-based systems\r\nHTTP is a client-server protocol: requests are sent by one entity,\r\nthe user-agent (or a proxy on behalf of it). Most of\r\nthe time the user-agent is a Web browser, but it can be anything, for\r\nexample, a robot that crawls the Web to populate and maintain a search\r\nengine index.\r\nEach individual request is sent to a server, which handles it and\r\nprovides an answer called the response. Between the client and\r\nthe server there are numerous entities, collectively called proxies,\r\nwhich perform different operations and act as gateways or caches,\r\nfor example\r\nIn reality, there are more computers between a browser and the server\r\nhandling the request: there are routers, modems, and more. Thanks to the\r\nlayered design of the Web, these are hidden in the network and transport\r\nlayers. HTTP is on top, at the application layer. Although important for\r\ndiagnosing network problems, the underlying layers are mostly irrelevant\r\nto the description of HTTP.\r\nClient:\r\nthe user-agent\r\nThe user-agent is any tool that acts on behalf of the user.\r\nThis role is primarily performed by the Web browser, but it may also be\r\nperformed by programs used by engineers and Web developers to debug\r\ntheir applications.\r\nThe browser is always the entity initiating the\r\nrequest. It is never the server (though some mechanisms have been added\r\nover the years to simulate server-initiated messages).\r\nTo display a Web page, the browser sends an original request\r\nto fetch the HTML document that represents the page. It then parses this\r\nfile, making additional requests corresponding to execution scripts,\r\nlayout information (CSS) to display, and sub-resources contained within\r\nthe page (usually images and videos). The Web browser then combines\r\nthese resources to present the complete document, the Web page. Scripts\r\nexecuted by the browser can fetch more resources in later phases and the\r\nbrowser updates the Web page accordingly.\r\nThe\r\nWeb server\r\nOn the opposite side of the communication channel is the server,\r\nwhich serves the document as requested by the client. A server\r\nappears as only a single machine virtually; but it may actually be a\r\ncollection of servers sharing the load (load balancing), or a complex\r\npiece of software interrogating other computers (like cache, a DB\r\nserver, or e-commerce servers), totally or partially generating the\r\ndocument on demand.\r\nA server is not necessarily a single machine, but several server\r\nsoftware instances can be hosted on the same machine. With HTTP/1.1 and\r\nthe Host\r\nheader, they may even share the same IP address.\r\nProxies\r\nBetween the Web browser and the server, numerous computers and\r\nmachines relay the HTTP messages. Due to the layered structure of the\r\nWeb stack, most of these operate at the transport, network or physical\r\nlevels, becoming transparent at the HTTP layer and potentially having a\r\nsignificant impact on performance. Those operating at the application\r\nlayers are generally called proxies. These can be\r\ntransparent, forwarding on the requests they receive without altering\r\nthem in any way, or non-transparent, in which case they will change the\r\nrequest in some way before passing it along to the server. Proxies may\r\nperform numerous functions:\r\n\r\ncaching (the cache can be public or private, like the browser\r\ncache)\r\nfiltering (like an antivirus scan or parental controls)\r\nload balancing (to allow multiple servers to serve different\r\nrequests)\r\nauthentication (to control access to different resources)\r\nlogging (allowing the storage of historical information)\r\n\r\nBasic\r\naspects of HTTP\r\nHTTP\r\nis simple\r\nHTTP is generally designed to be simple and human readable, even with\r\nthe added complexity introduced in HTTP/2 by encapsulating HTTP messages\r\ninto frames. HTTP messages can be read and understood by humans,\r\nproviding easier testing for developers, and reduced complexity for\r\nnewcomers.\r\nHTTP\r\nis extensible\r\nIntroduced in HTTP/1.0, HTTP\r\nheaders make this protocol easy to extend and experiment with. New\r\nfunctionality can even be introduced by a simple agreement between a\r\nclient and a server about a new header's semantics.\r\nHTTP\r\nis stateless, but not sessionless\r\nHTTP is stateless: there is no link between two requests being\r\nsuccessively carried out on the same connection. This immediately has\r\nthe prospect of being problematic for users attempting to interact with\r\ncertain pages coherently, for example, using e-commerce shopping\r\nbaskets. But while the core of HTTP itself is stateless, HTTP cookies\r\nallow the use of stateful sessions. Using header extensibility, HTTP\r\nCookies are added to the workflow, allowing session creation on each\r\nHTTP request to share the same context, or the same state.\r\nHTTP\r\nand connections\r\nA connection is controlled at the transport layer, and therefore\r\nfundamentally out of scope for HTTP. HTTP doesn't require the underlying\r\ntransport protocol to be connection-based; it only requires it to be\r\nreliable, or not lose messages (at minimum, presenting an error\r\nin such cases). Among the two most common transport protocols on the\r\nInternet, TCP is reliable and UDP isn't. HTTP therefore relies on the\r\nTCP standard, which is connection-based.\r\nBefore a client and server can exchange an HTTP request/response\r\npair, they must establish a TCP connection, a process which requires\r\nseveral round-trips. The default behavior of HTTP/1.0 is to open a\r\nseparate TCP connection for each HTTP request/response pair. This is\r\nless efficient than sharing a single TCP connection when multiple\r\nrequests are sent in close succession.\r\nIn order to mitigate this flaw, HTTP/1.1 introduced\r\npipelining (which proved difficult to implement) and\r\npersistent connections: the underlying TCP connection can be\r\npartially controlled using the Connection\r\nheader. HTTP/2 went a step further by multiplexing messages over a\r\nsingle connection, helping keep the connection warm and more\r\nefficient.\r\nExperiments are in progress to design a better transport protocol\r\nmore suited to HTTP. For example, Google is experimenting with QUIC which builds on UDP\r\nto provide a more reliable and efficient transport protocol.\r\nAn\r\noverview of HTTP - HTTP | MDN (mozilla.org)\r\n","slug":"Internet Protocol/Http","date":"2022-12-23T04:23:23.000Z","categories_index":"Protocol Theory","tags_index":"Computer Network","author_index":"JBR_Bunjie"},{"id":"aa8ff1f4cd866ae3e0deaae5a8bc6249","title":"OSI Model Explanations","content":"The OSI Model Defined\r\nThe OSI Model (Open Systems Interconnection Model) is a conceptual\r\nframework used to describe the functions of a networking system. The OSI\r\nmodel characterizes computing functions into a universal set of rules\r\nand requirements in order to support interoperability between different\r\nproducts and software. In the OSI reference model, the communications\r\nbetween a computing system are split into seven different abstraction\r\nlayers: Physical, Data Link, Network, Transport, Session, Presentation,\r\nand Application.\r\nCreated at a time when network computing was in its infancy, the OSI\r\nwas published in 1984 by the International Organization for\r\nStandardization (ISO). Though it does not always map directly to\r\nspecific systems, the OSI Model is still used today as a means to\r\ndescribe Network Architecture.\r\nThe 7 Layers of the OSI\r\nModel\r\nPhysical Layer\r\nThe lowest layer of the OSI Model is concerned with electrically or\r\noptically transmitting raw unstructured data bits across the network\r\nfrom the physical layer of the sending device to the physical layer of\r\nthe receiving device. It can include specifications such as voltages,\r\npin layout, cabling, and radio frequencies. At the physical layer, one\r\nmight find “physical” resources such as network hubs, cabling,\r\nrepeaters, network adapters or modems.\r\nData Link Layer\r\nAt the data link layer, directly connected nodes are used to perform\r\nnode-to-node data transfer where data is packaged into frames. The data\r\nlink layer also corrects errors that may have occurred at the physical\r\nlayer.\r\nThe data link layer encompasses two sub-layers of its own. The first,\r\nmedia access control (MAC), provides flow control and multiplexing for\r\ndevice transmissions over a network. The second, the logical link\r\ncontrol (LLC), provides flow and error control over the physical medium\r\nas well as identifies line protocols.\r\nNetwork Layer\r\nThe network layer is responsible for receiving frames from the data\r\nlink layer, and delivering them to their intended destinations among\r\nbased on the addresses contained inside the frame. The network layer\r\nfinds the destination by using logical addresses, such as IP (internet\r\nprotocol). At this layer, routers are a crucial component used to quite\r\nliterally route information where it needs to go between networks.\r\nTransport Layer\r\nThe transport layer manages the delivery and error checking of data\r\npackets. It regulates the size, sequencing, and ultimately the transfer\r\nof data between systems and hosts. One of the most common examples of\r\nthe transport layer is TCP or the Transmission Control Protocol.\r\nSession Layer\r\nThe session layer controls the conversations between different\r\ncomputers. A session or connection between machines is set up, managed,\r\nand termined at layer 5. Session layer services also include\r\nauthentication and reconnections.\r\nPresentation Layer\r\nThe presentation layer formats or translates data for the application\r\nlayer based on the syntax or semantics that the application accepts.\r\nBecause of this, it at times also called the syntax layer. This layer\r\ncan also handle the encryption and decryption required by the\r\napplication layer.\r\nApplication Layer\r\nAt this layer, both the end user and the application layer interact\r\ndirectly with the software application. This layer sees network services\r\nprovided to end-user applications such as a web browser or Office 365.\r\nThe application layer identifies communication partners, resource\r\navailability, and synchronizes communication.\r\nWhat is the\r\nOSI Model? The 7 Layers Explained | Forcepoint\r\n一文看懂网络七层协议/OSI七层模型\r\n- 知乎 (zhihu.com)\r\n图解OSI七层模型 -\r\n简书 (jianshu.com)\r\n","slug":"Internet Protocol/OSI","date":"2022-12-23T04:23:23.000Z","categories_index":"Protocol Theory","tags_index":"Computer Network","author_index":"JBR_Bunjie"},{"id":"d5ce47e1ac59ed5b28424dda2538d8ad","title":"URL Explanations","content":"General: What is URI? and URL?\r\nhttp\r\n- What is the difference between a URI, a URL and a URN? - Stack\r\nOverflow\r\n\r\n最简单易懂的：\r\nURL - http://example.com/some/page.html\r\nURI - /some/page.html\r\n\r\nHTTP 协议中 URI 和\r\nURL 有什么区别？ - 知乎 (zhihu.com)\r\nURL：(Uniform Resource Locator 的缩写，统一资源定位符)\r\nURI：(Uniform Resource Identifier 的缩写，统一资源标识符)\r\nURN：(Uniform Resource Name 的缩写，统一资源标识符)\r\n其实名字就已经非常明显了：\r\nIdentifier: 重点是表示特定的资源。\r\nLocator: 通过位置来表示资源。\r\nName: 通过名字来表示资源。\r\nURI 在于I(Identifier)，是统一资源标示符，可以唯一标识一个资源。\r\nURL在于L(Locater)，一般来说（URL）统一资源定位符，可以提供找到该资源的路径，比如\r\nhttps://github.com/JBR-Bunjie/JBR-Bunjie/blob/main/back.jpg\r\n但URL又是URI，因为它可以标识一个资源，所以URL又是URI的子集—&gt;URI\r\n属于 URL 更高层次的抽象，一种字符串文本标准。\r\nencoding and decoding in URL\r\nURL编码通常也被称为百分号编码（percent-encoding），是因为它的编码方式非常简单：\r\n使用%加上两位的字符——0123456789ABCDEF——代表一个字节的十六进制形式。\r\n\r\nencodeURI()\r\n- JavaScript | MDN (mozilla.org)\r\ndecodeURI()\r\n- JavaScript | MDN (mozilla.org)\r\n\r\nURL编码要做的，就是将每一个非安全的ASCII字符都被替换为“%xx”格式，而对于非ASCII字符，RFC文档建议使用utf-8对其进行编码得到相应的字节，然后对每个字节执行百分号编码。\r\n如 中文 使用 UTF-8 字符集得到的字节为\r\n0xE4 0xB8 0xAD 0xE6 0x96 0x87，经过Url编码之后得到\r\n%E4%B8%AD%E6%96%87。\r\n一些常见的特殊字符换成相应的十六进制的值：\r\n+   %20   \n&#x2F;   %2F   \n?   %3F   \n%   %25   \n#   %23   \n&amp;   %26  \r\n用python测试编码：\r\n&gt; &quot;中文&quot;.encode(encoding&#x3D;&quot;utf8&quot;)\nb&#39;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#39;\n\n&gt; b&quot;\\x2f&quot;.decode()\n&#39;&#x2F;&#39;\r\nURL的编码和解码 -\r\n何必等明天 - 博客园 (cnblogs.com)\r\nEvery char in the address bar will be encoded in ansi or utf8.\r\nencodeURI(&#39;https:&#x2F;&#x2F;mzh.moegirl.org.cn&#x2F;乐正绫&#39;)\ndecodeURI(&quot;https:&#x2F;&#x2F;mzh.moegirl.org.cn&#x2F;%E4%B9%90%E6%AD%A3%E7%BB%AB&quot;)\r\nimp\nurllib.parse.unquote(a)\r\n","slug":"Internet Protocol/URL,URI,URN","date":"2022-12-23T04:23:23.000Z","categories_index":"Protocol Theory","tags_index":"Computer Network","author_index":"JBR_Bunjie"},{"id":"23e47bb6f32c19be2d53fa043d58a084","title":"E-mail格式记录","content":"e-mail的格式主要包括4项：\r\nTo：即这个e-mail发给谁，通常是接受者的电子邮件信箱。\r\nFrom：即这个e-mail是谁发的，通常是发送者的电子邮件信箱。\r\nCC: carbon copy\r\n的缩写，愿意是用复写纸预写副本，在e-mail\r\n中为“抄送”之意，即可同时把此邮件发给其他的人，有时也可写成copy to\r\nSubject：即主题，也就是这封e-mail的主要内容是什么。\r\n","slug":"Softwares/E-Mail Format and Explanation","date":"2022-12-23T04:23:23.000Z","categories_index":"Coding Software","tags_index":"E-mail","author_index":"JBR_Bunjie"},{"id":"b0298187d3b43e42af9c0e2b93f65724","title":"Birthday Paradox","content":"生日悖论-birthday paradox\r\n一个很简单的概率关系，由于其反直觉而称为“悖论”：\r\n一个房间要多少人，则两个人的生日相同的概率\r\n\r\n\r\n\r\n对应情况\r\n所需人数\r\n\r\n\r\n\r\n\r\n大于50%？\r\n23人\r\n\r\n\r\n大于70%？\r\n30人\r\n\r\n\r\n大于97%？\r\n50人\r\n\r\n\r\n大于99%？\r\n57人\r\n\r\n\r\n\r\n可以发现，概率大于99%所需的人数 只是总数的1 / 6不到而已！\r\n每个人生日 都不同 的 阶乘\r\n形式为：\r\n\r\n\r\nimg\r\n\r\n故至少有两个人生日相同的概率就是上述结果的补，即：\r\n生日悖论 - 知乎\r\n(zhihu.com)\r\n鸽笼理论-pigeonhole\r\nprinciple\r\n又叫抽屉原理\r\n如果有n种n+1个物品，那么至少有一种有两个物品\r\n这种基本概念也没什么太多好阐释的，主要是鸽笼定理在思维上可能会造成一些奇怪的突破口\r\n有几个衍生的阐述形式：\r\n形式一：如果把n+1(n是正整数)个对象放入n个盒子里，那么至少有一个盒子中放入两个或者两个以上的对象。证明：假设每个盒子中都少于两个对象，那么总数不可能为n+1个对象，与前提矛盾。\r\n形式二：如果把m个对象放到n个盒子里（m,n都是正整数），那么至少有一个盒子中放入[m-1/n]+1个的对象。注：[m-1/n]中的[]代表着m-1/n的整数部分。证明：假设每个盒子中都少于或者等于[m-1/n]对象，那么对象的总数将不会多于n*[m-1/n]个，从而少于或者等于m-1个，与前提矛盾。\r\n应用——生日攻击\r\n生日悖论与鸽笼理论组合的可被应用于设计密码学攻击方法——生日攻击。\r\n即 N 位长度的哈希表可能发生碰撞测试次数不是 2^N 次而是只有 2^(N/2) +\r\n1 次\r\n\r\n如果输出是256位，我们随机地选择输入，并计算哈希值，在检验第2^256 +\r\n1个输入之前便很可能找到碰撞。\r\n实际上，如果我们随机选择2^128 +\r\n1个输入，找到至少两个相同哈希值的概率为99%，而2 ^ 130 + 1 则高达\r\n99.8%。\r\n\r\n具体场景可以看：密码学：生日攻击_Linuxest-CSDN博客_生日攻击\r\n算法题\r\n鸽笼原理&amp;容斥原理_LazyCrazyCat的博客-CSDN博客_鸽笼定理\r\n","slug":"Algorithm/BirthdayParadox/生日悖论&鸽笼理论-birthday paradox&pigeonhole principle","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"String Processing","author_index":"JBR_Bunjie"},{"id":"26cdbb886310bf39cb3aaad08f67e70b","title":"售货员问题！","content":"一、题目\r\n\r\n一个售货员必须访问n个城市，恰好访问每个城市一次，并最终回到出发城市。\r\n售货员从城市i到城市j的旅行费用是一个整数，旅行所需的全部费用是他旅行经过的的各边费用之和，而售货员希望使整个旅行费用最低。\r\n（等价于求图的最短哈密尔顿回路问题）令G=(V,\r\nE)是一个带权重的有向图，顶点集V=(v0, v1, ...,\r\nvn-1)。从图中任一顶点vi出发，经图中所有其他顶点一次且只有一次，最后回到同一顶点vi的最短路径。\r\n\r\n二、测试用例\r\n\r\n\r\nimg\r\n\r\n其中1,2,3,4,5代表五个城市。此模型可抽象为图，可用邻接矩阵c表示，如下图所示：\r\n\r\n\r\nimg\r\n\r\n三、动态规划方程\r\n假设从顶点s出发，令d(i,\r\nV)表示从顶点i出发经过V(是一个点的集合)中各个顶点一次且仅一次，最后回到出发点s的最短路径长度。\r\n​ 推导：(分情况来讨论)\r\n​ ①当V为空集，那么d()，表示直接从i回到s了，此时\r\n且 \r\n​\r\n②如果V不为空，那么就是对子问题的最优求解。你必须在V这个城市集合中，尝试每一个，并求出最优解。\r\n​ \r\n​ 注：表示选择的城市和城市i的距离，是一个子问题。\r\n​ 综上所述，TSP问题的动态规划方程就出来了：\r\n\r\n\r\nimg\r\n\r\n四、用例分析\r\n现在对问题定义中的例子来说明TSP的求解过程。(假设出发城市是 0城市)\r\n\r\n\r\nimg\r\n\r\n\r\n\r\nimg\r\n\r\n这里只画出了d(1,{2,3,4}),由于篇幅有限这里就不画了。\r\n①我们要求的最终结果是d(0,{1,2,3,4}),它表示，从城市0开始，经过{1,2,3,4}之中的城市并且只有一次，求出最短路径.。\r\n②d(0,{1,2,3,4})是不能一下子求出来的，那么他的值是怎么得出的呢？看上图的第二层，第二层表明了d(0,{1,2,3,4})所需依赖的值。那么得出：\r\n\r\n③d(1,{2,3,4})，d(2,{1,3,4})，d(3,{1,2,4})，d(4,{1,2,3})同样也不是一步就能求出来的，它们的解一样需要有依赖，就比如说d(1,{2,3,4})\r\n\r\nd(2,{1,3,4})，d(3,{1,2,4})，d(4,{1,2,3})同样需要这么求。\r\n④按照上面的思路，只有最后一层的，当V为空集时，就可以满足\r\n且 该条件，直接求出dp数组部分的值。\r\n五、数据结构\r\n由上述动态规划公式d(i,V)表示从顶点i出发经过V(是一个点的集合)中各个顶点一次且仅一次，最后回到出发点s的最短路径长度。根据上述给的测试用例有5个城市编号0,1,2,3,4。那么访问n个城市，恰好访问每个城市一次，并最终回到出发城市的嘴短距离可表示为d(0,{1,2,3,4}),那么问题来了我们用什么数据结构表示d(i,V)，这里我们就可二维数据dp[N][M]来表示，N表示城市的个数，M表示集合的数量，即,之所以这么表示因为集合V有个子集。根据测试用例可得出如下dp数组表格：\r\n\r\n\r\nimg\r\n\r\n那么你们可能就有疑问了，为什么这么表示？这里说明一下比如集合{1,2,3,4}为什么用15表示，我们可以把集合中元素看成二进制1的位置（二进制从右开始看），1表示从右开始第一位为1,2表示从又开始第二位为1，所以集合{1,2,3,4}可表示二进制（1111）转化为十进制为15。再举个例子比如集合{1,3}表示为二进制为0101，十进制为5。所以我们求出dp[0][15]（通用表示dp[0][]）就是本题的最终解。\r\n注意：\r\n\r\n对于第y个城市，他的二进制表达为，1&lt;&lt;(y-1)。\r\n对于数字x，要看它的第i位是不是1，那么可以通过判断布尔表达式 (((x\r\n&gt;&gt; (i - 1) ) &amp; 1) == 1或者（x &amp; (1&lt;&lt;(i-1))）!=\r\n0的真值来实现。\r\n由动态规划公式可知，需要从集合中剔除元素。假如集合用索引x表示，要剔除元素标号为i,我们异或运算实现减法，其运算表示为：\r\nx = x ^ (1&lt;&lt;(i - 1))。\r\n\r\n六、最短路径顶点的计算\r\n我们先计算dp[N][M]数组之后，我可以用dp数组来反向推出其路径。其算法思想如下：\r\n比如在第一步时，我们就知道那个值最小，如下图所示：\r\n\r\n\r\nimg\r\n\r\n因为dp[][]数组我们已经计算出来了，由计算可知C01+d(1,{2,3,4})最小，所以一开始从起始点0出发，经过1。接下来同样计算d(1,{2,3,4})\r\n\r\n\r\nimg\r\n\r\n由计算可知C14+d(4,{2,3})所以0---&gt;1----&gt;4，接下来同理求d(4,{2,3})，这里就省略，读者可以自行计算。最终计算出来的路径为：0---&gt;1---&gt;4---&gt;2---&gt;3---&gt;0\r\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n#include &lt;cstring&gt;\n#include &lt;vector&gt;\n \nusing namespace std;\n \n#define N 5\n#define INF 10e7\n#define min(a,b) ((a&gt;b)?b:a)\n \nstatic const int M &#x3D; 1 &lt;&lt; (N-1);\n&#x2F;&#x2F;存储城市之间的距离\nint g[N][N] &#x3D; &#123;&#123;0,3,INF,8,9&#125;,\n               &#123;3,0,3,10,5&#125;,\n               &#123;INF,3,0,4,3&#125;,\n               &#123;8,10,4,0,20&#125;,\n               &#123;9,5,3,20,0&#125;&#125;;\n\n&#x2F;&#x2F;保存顶点i到状态s最后回到起始点的最小距离\nint dp[N][M];\n\n&#x2F;&#x2F;保存路径\nvector&lt;int&gt; path;\n \n&#x2F;&#x2F;核心函数，求出动态规划dp数组\nvoid TSP()&#123;\n    &#x2F;&#x2F;初始化dp[i][0]\n    for(int i &#x3D; 0; i &lt; N; i++)\n        dp[i][0] &#x3D; g[i][0];\n    \n    &#x2F;&#x2F;求解dp[i][j]\n    for(int j &#x3D; 1; j &lt; M; j++ ) &#123;\n        for(int i &#x3D; 0; i &lt; N; i++ ) &#123;\n            dp[i][j] &#x3D; INF;\n            &#x2F;&#x2F;如果集和j(或状态j)中包含结点i,则不符合条件退出\n            if( ((j &gt;&gt; (i-1)) &amp; 1) &#x3D;&#x3D; 1)\n                continue;\n            \n            for(int k &#x3D; 1; k &lt; N; k++) &#123;\n                if( ((j &gt;&gt; (k-1)) &amp; 1) &#x3D;&#x3D; 0)\n                    continue;\n                \n                if( dp[i][j] &gt; g[i][k] + dp[k][j^(1&lt;&lt;(k-1))] )\n                    dp[i][j] &#x3D; g[i][k] + dp[k][j^(1&lt;&lt;(k-1))] ;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n&#x2F;&#x2F;判断结点是否都以访问,不包括0号结点\nbool isVisited(bool visited[])&#123;\n    for(int i &#x3D; 1 ; i&lt;N ;i++)\n        if(visited[i] &#x3D;&#x3D; false)\n            return false;\n    return true;\n&#125;\n\n&#x2F;&#x2F;获取最优路径，保存在path中,根据动态规划公式反向找出最短路径结点\nvoid getPath()&#123;\n    &#x2F;&#x2F;标记访问数组\n    bool visited[N] &#x3D; &#123;false&#125;;\n    &#x2F;&#x2F;前驱节点编号\n    int pioneer &#x3D; 0 ,min &#x3D; INF, S &#x3D; M - 1,temp ;\n    &#x2F;&#x2F;把起点结点编号加入容器\n    path.push_back(0);\n \n    while(!isVisited(visited))&#123;\n        for(int i&#x3D;1; i&lt;N;i++)\n            if(visited[i] &#x3D;&#x3D; false &amp;&amp; (S&amp;(1&lt;&lt;(i-1))) !&#x3D; 0)\n                if(min &gt; g[i][pioneer] + dp[i][(S^(1&lt;&lt;(i-1)))])\n                    min &#x3D; g[i][pioneer] + dp[i][(S^(1&lt;&lt;(i-1)))] ;\n                    temp &#x3D; i;\n            \n        pioneer &#x3D; temp;\n        path.push_back(pioneer);\n        visited[pioneer] &#x3D; true;\n        S &#x3D; S ^ (1&lt;&lt;(pioneer - 1));\n        min &#x3D; INF;\n    &#125;\n&#125;\n\n&#x2F;&#x2F;输出路径\nvoid printPath()&#123;\n    cout&lt;&lt;&quot;最小路径为：&quot;;\n    vector&lt;int&gt;::iterator  it &#x3D; path.begin();\n    for(it ; it !&#x3D; path.end();it++)\n        cout&lt;&lt;*it&lt;&lt;&quot;---&gt;&quot;;\n    &#x2F;&#x2F;单独输出起点编号\n    cout&lt;&lt;0;\n&#125;\n \nint main()\n&#123;\n    TSP();\n    cout&lt;&lt;&quot;最小值为：&quot;&lt;&lt;dp[0][M-1]&lt;&lt;endl;\n    getPath();\n    printPath();\n    return 0;\n&#125;\r\n八、测试结果及性能分析\r\n\r\n\r\nimg\r\n\r\n时间复杂度：\r\n空间复杂度：\r\n旅行商问题（动态规划方法，超级详细的）_仁者乐山智者乐水的博客-CSDN博客_旅行商问题\r\n","slug":"Algorithm/DP/Traveling Salesman Problem","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"DP","author_index":"JBR_Bunjie"},{"id":"01d132f13ac67dff21350f57c338a855","title":"拓扑排序","content":"拓扑排序\r\nReference：\r\n拓扑排序（Topological\r\nSorting） | 神奕的博客 (songlee24.github.io)\r\nDetail：\r\n\r\n在图论中，拓扑排序（Topological\r\nSorting）是一个有向无环图（DAG, Directed Acyclic\r\nGraph）的所有顶点的线性序列。且该序列必须满足下面两个条件：\r\n\r\n每个顶点出现且只出现一次。\r\n若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B\r\n的前面。\r\n\r\n有向无环图（DAG）才有拓扑排序，非DAG图没有拓扑排序一说。\r\n\r\n在sugiyama算法的“分层”步骤中，我们相当于直接用到了这种思路\r\n唯一的不同是：\r\n拓扑排序根据顺序剔除边后入度为零的全部节点生成了一个序列\r\n而sugiyama将当前所有为零的节点并入独立的一整层\r\n用途？\r\n\r\n拓扑排序通常用来“排序”具有依赖关系的任务。\r\n比如，如果用一个DAG图来表示一个工程，其中每个顶点表示工程中的一个任务，用有向边\r\n表示在做任务 B 之前必须先完成任务\r\nA。故在这个工程中，任意两个任务要么具有确定的先后关系，要么是没有关系，绝对不存在互相矛盾的关系（即环路）。\r\n\r\n","slug":"Algorithm/SORT/Topological Sort","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Sort","author_index":"JBR_Bunjie"},{"id":"991c84bc86acdc32c9243fba302e2655","title":"Hash Function","content":"简明Hash function教程\r\n\r\n请注意！这篇文档是关于散列函数Hash function的，如果需要了解Hash\r\ntable相关内容请查阅“简明Hash table教程”等相关文章\r\n\r\n引子\r\n在各种下载站的资源页面下方，经常会有如下以SHA开头的特殊字段\r\n\r\nSHA1：9B71AD5604B3816BCC7E9AFA3052AE7D823163E8\r\n\r\n或者是或MD5开头的特殊字段\r\n\r\nMD5：124756ef340daf80196b4124686d651c\r\n\r\n这些特殊字段既非下载链接，也特定网址。那么这些特殊的字段都有什么用？\r\n想要解决这个问题，我们需要先了解一下什么是Hash算法\r\nHash算法\r\n什么是Hash？\r\n先简单介绍一下Hash算法\r\n\r\n散列函数（Hash\r\nfunction）又称散列算法、哈希函数，是一种从任何一种数据中创建数字“指纹”的方法。\r\n\r\n\r\n请注意！Hash算法并非特指某一种算法，而是所有满足Hash算法的一整类算法的统称\r\n\r\nHash算法的实际效果为：对任意一组输入数据进行计算处理，并最终得到一个固定长度的输出摘要。\r\n经典的比如经MD5算法运算后的结果只有16位或者32位16进制字符，而SHA-1的结果为40位16进制字符\r\n试着去生成一串Hash Code吧\r\n现在打开你的任何一款ide，通过MD5方法来对你好啊这串字符进行处理，如下是Python对之进行处理的例子\r\nimport hashlib\nstr1 &#x3D; &quot;你好呀&quot; # 准备Hash算法需要处理的数据块\nm &#x3D; hashlib.md5() # 确定特定的Hash算法\nm.update(str1.encode(&quot;utf8&quot;)) # 执行该算法\nprint(m.hexdigest(), type(m.hexdigest())) # 查验输出结果\n\n# python提供了一个build-in function：hash，但是它有点特殊，具体了解可以参照下文：\n# https:&#x2F;&#x2F;blog.csdn.net&#x2F;cunchi4221&#x2F;article&#x2F;details&#x2F;107474126\r\n检查一下结果：4f65fdb33e0f2bd0de6bd1b41fdea968 &lt;class 'str'&gt;——一个32个字符，32Byte，128bit大小的字符串，和MD5算法规定的长度完全一致。同时，当我们重复执行这个程序时，我们发现程序最终得到的结果和第一次的结果不变！\r\n是的！更进一步地，当我们的数据和Hash算法确定以后，不管是在本地，还是在别的任何设备上再次执行这串代码，它的结果是不会发生变化的。也就是说，一个既定的输入在既定的Hash算法中只会对应一个特定的输出\r\n根据这个特点，我们可以用某种特定的Hash算法来检验资源的完整性：当用户完成资源的下载后，如果本地资源使用对应的Hash算法得到的Hash\r\ncode与下载网站上给出的Hash\r\ncode不相符的话，就意味着你的本地资源有问题，需要进行修复或者重新下载\r\nHash算法还能干什么？\r\n事实上，Hash\r\nCode被大量使用于网站的密码加密中：当用户注册的时候，用户的密码通过某种Hash算法加密后得到一串Hash\r\nCode，服务器就将Hash\r\nCode代替明文密码存储到服务器的数据库中，用户登陆时输入的密码经过加密会再次得到相同的结果，这当然与数据库中存储的内容一致，这样子就完成了用户的验证。\r\n由于Hash算法是一种有损的压缩运算，即在实时的运算中损失了大部分原始数据，这并不是加密而是摘要，同时也导致得到原数据最直接的方式只有再次输入，想要破解一般只能够依靠穷举。故一般认为Hash算法是不可逆运算，所以即便是服务器数据库泄露也不必担心账号被别人盗取\r\n尝试使用Hash算法，并研究它的输出规律\r\n为了研究Hash算法的输出结果的规律，我们需要几个实例\r\npublic class HelloWorld &#123;\n    public static void main(String []args) &#123;\n\t\tSystem.out.println(&quot;hello, java&quot;.hashCode());\n\t\tSystem.out.println(&quot;hello, java&quot;.hashCode()); &#x2F;&#x2F;相同数据输入，查看结果\n        \n        System.out.println(&quot;---------------------------&quot;);\n\t\t\n\t\tSystem.out.println(&quot;hello, jav&quot;.hashCode());\n\t\tSystem.out.println(&quot;hello, java&quot;.hashCode());\n\t\tSystem.out.println(&quot;hello, javav&quot;.hashCode());\n\t\tSystem.out.println(&quot;AaAaA&quot;.hashCode());  \n\t\tSystem.out.println(&quot;AaAaAa&quot;.hashCode());\n\t\tSystem.out.println(&quot;AaAaAaA&quot;.hashCode()); &#x2F;&#x2F; 不同数据输入，查看结果\n\t\t\n        System.out.println(&quot;---------------------------&quot;);\n\t\t\n\t\tSystem.out.println(&quot;AaAaAa&quot;.hashCode());\n\t\tSystem.out.println(&quot;BBAaBB&quot;.hashCode()); &#x2F;&#x2F; 仍然是不同数据输入，再次查看结果\n    &#125;\n&#125;\n\n&#x2F;* outputs：\n2057144552\n2057144552 &#x2F;&#x2F; 相同的输入经过散列表算法运算后得到了相同的输出\n---------------------------\n-1596208487\n2057144552\n-653028210\n62984129\n1952508096\n398208897 &#x2F;&#x2F; 不同的输入“理所当然”地得到了完全不同的输出\n---------------------------\n1952508096\n1952508096 &#x2F;&#x2F; 不同的输入居然得到了相同的输出！\n*&#x2F;\r\n从以上实例中我们可以发现虽然一般的不同字符经过运算后输出的结果是不同的，但是也存在不同字符串在经过运算后得到了相同的输出\r\n特别地，我们将这种两个不同的输入值经过运算后得到了相同的输入值的情况称作是“Hash\r\ncollision”\r\n需要指出的是，发生collision并不可怕，当一个更大的数据集被映射到一个更小的数据集或容器时，一定会出现多对一的情况，这是一件不可避免的事，而算法的优劣只取决于出现collision的频率如何。如果collision出现频次过高，那么就意味着这个Hash算法生成的Hash\r\nCode可以在较短时间内被别人使用穷举等办法来破解其内容——也就是说，它不安全，所以用户需要设置更长更复杂组合的密码，而服务器则需要使用更不容易被破解的Hash算法。\r\n一般来讲输出大小越长的算法，安全性也就越高。只有安全度足够高的Hash算法，即没有任何人能够成功实现碰撞的哈希，才有资格被考虑用在加密场合\r\n\r\n\r\nimage-20210916211845148\r\n\r\n在极限情况下，传统的MD5算法可以保证最多340282366920938463463374607431768211456个数据与结果的一一对应，而SHA-1算法甚至可以保证最多1461501637330902918203684832716283019655932542976个数据，但是由于计算机算力的进步，算法自身的缺陷，现呈的彩虹表等的诸多原因存在，它们已经可以在短时间内被破解，为了保证数据的安全，我们需要使用更安全的Hash算法如SHA-2系列的Hash算法来做数据加密\r\n小结\r\n\r\n什么是Hash算法？\r\n\r\nHash算法，一般译为哈希算法，摘要算法或者散列算法，它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。\r\n\r\n哈希算法的特点？\r\n\r\n相同的输入一定得到相同的输出；\r\n不同的输入大概率得到不同的输出。\r\n\r\n哈希加密的作用：\r\n\r\n完整性校验：MD5，SHA-1\r\n数据加密：SHA-2系列等\r\n\r\n\r\nHash算法是怎么实现的？——以MD5为例\r\nHash算法原理大同小异，大体上的流程包括对原数据块进行切片，再对切片进行细分，并利用每一细分小组的内容按预设算法进行破坏式压缩处理来得到最终的结果，下面以MD5算法为例介绍Hash算法流程\r\n原理概述：\r\nMD5算法先对数据块填充，将不合规的数据标准化。然后进行分组，标准是每512bit为大小分一组。在每一个分组中又进一步划分出16个32位的子分组。设立四个标准幻数，定义四个非线性函数，一个大小为64的常数数组，一个大小为64的位移常量数组。\r\n在计算过程中，根据512位分组的数据进行外循环，在这之中利用每个细分小组进行一轮16次循环一共4轮合64次的内循环。\r\n在单次内部循环中，根据正在进行的轮次运用四个非线性函数中的一个对子分组进行的数据进行处理，将处理的结果与标准幻数相加，并进行下一次循环。当主循环完成时，原标准幻数就与数据紧密联系起来，把所有标准幻数组合到一起，这就是一个基于MD5算法的Hash\r\nCode\r\n\r\n什么是幻数？\r\n不同领域对于幻数这一名称有不同的定义，而MD5中的幻数其实就是在算法中被预设的4个32位的整数，对于一个128位的MD5\r\nHash\r\nCode来说，由4个32位的整数结果彼此组和来得到最终结果貌似是一个不错的选择，而这4个结果就是由这4个标准幻数A,B,C,D根据数据块的内容按照预定算法经过不断演变得到的\r\n\r\n实际使用的标准幻数：\r\nA &#x3D; 0x67452301\nB &#x3D; 0xEFCDAB89\nC &#x3D; 0x98BADCFE\nD &#x3D; 0x10325476 \r\n注意，其实这四个标准幻数和ABCD四个字母全无关系，实际生效的只是他们后面的变量值，而这四个值只是被算法规定如此而已也许这也算是一种另类的私货？\r\n详细流程介绍：\r\n填充\r\n首先将原数据进行补长（长度的度量是bits）到一个对512取模的结果为448的数在补长的过程中，我们先在原数据末尾append\r\n\"1\" bit to message，然后再append \"0\" bits until message length in bits ≡\r\n448 (mod 512)\r\n完成了补长之后，利用最后的64位（512-448=64）来记录填充前的长度(append\r\noriginal length in bits mod 264 to message)\r\n当上述两个操作都完成以后，数据的总长度就是512的倍数了\r\n一定要补长(64+1~512)，内容为100…0（如若消息长448，则填充512+64）\r\n计算\r\n首先把结果分割为N个512位的块：Y0，Y1，…（每一个512位块再细分为16个32比特子组）\r\n每个块都进行一次循环，在当前循环中，我们将整个块再次细分为16个32位的子块\r\n在正式开始循环之前，我们还需要这些东西：\r\n\r\n设立四个标准幻数\r\n\r\n\r\n\r\nimage-20210917110650229\r\n\r\n我们无需考究这四个数字的16进制内容有什么含义，但是规律明显得让人不禁发笑\r\n我们分别以ABCD为名设立四个32位的整数变量，A=0x67452301,B=0xefcdab89,C=0x98badcfe,D=0x10325476，这就是实际使用到的标准幻数\r\n\r\n定义四个非线性函数：\r\n\r\n\r\nimage-20210917103252897\r\n\r\n定义常量数组(正弦函数表)：\r\nfor i in range(0, 64)\n    k[i] &#x3D; math.floor(math.fabs(math.sin(i + 1)) * (2 ** 32))\n# 或者直接赋值：\nk &#x3D; [\n     0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,\n      0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,\n      0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,\n      0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,\n      0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,\n      0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,\n      0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,\n      0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391\n]\r\n\r\n\r\n和为什么标准幻数被定义成那样子一样，解释为什么常量数组是这些东西的理由也只有“它是被定义成这样子的”。不过常量数组有一个优势：我们可以了解这些数字具体是怎么来的：\r\n你应该已经看见了定义常量数组的第一种（即利用正弦函数实时生成的）办法，这就是这些数据产生的来源。\r\n\r\n\r\n定义位移常量:\r\n# md5转换用到的常量，数据都是算法本身规定的\nr &#x3D; [\n    7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,\n\t5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,\n\t4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,\n\t6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21\n]\r\n\r\n\r\n事实上：所有常量都是经由算法规定的，毕竟只有经过被“规定”的步骤才能保证结果的一致性\r\n\r\n循环计算\r\n循环分为内层和外层，外层是对512块进行循环，内层则对32位子块进行循环\r\n每次外层循环中，我们共会进行四轮内层循环，每次内层循环我们都会按顺序对单个32位子块进行处理\r\nfor i in outside: # 外层循环\n    for t in range(0, 64): # 内层总循环\n        if 0 ≤ i ≤ 15:\n            f &#x3D; (b &amp; c) | (~b &amp; d) # 临时变量f，实际上是存储了当前轮次的非线性函数的结果\n            g &#x3D; i # 存储当前轮次下的第几次\n        else if 16 ≤ i ≤ 31:\n            f &#x3D; (d &amp; b) | ((~d) &amp; c)\n            g &#x3D; (5×i + 1) % 16\n        else if 32 ≤ i ≤ 47:\n            f &#x3D; b ^ c ^ d\n            g &#x3D; (3×i + 5) % 16\n        else if 48 ≤ i ≤ 63:\n            f &#x3D; c ^ (b | (~ d))\n            g &#x3D; (7×i) % 16\n        temp &#x3D; d\n        d &#x3D; c\n        c &#x3D; b\n        b &#x3D; ((a + f + k[i] + w[g]) &lt;&lt; r[i]) + b\n        # w[g]是当前顺序下的32位数据子块,k[i]是我们已经生成好的常量数组,r[i]则是当前轮次所使用到的左移量\n        a &#x3D; temp\n    A &#x3D; A + a\n    B &#x3D; B + b \n    C &#x3D; C + c\n    D &#x3D; D + d\r\n每次：一个输入128位，另一个输入512位，结果输出128位，用于下一轮输入\r\n\r\n结果\r\n\r\ndigest &#x3D; str(A) + str(B) + str(C) + str(D)\r\n//最后一步的输出即为散列结果，共128位。\r\n又如SHA-1等算法原理与MD5大同小异，主要的变化之处在于：增加初始的标准幻数个数，增加循环轮数与参与范围，改变变换的非线性函数等\r\n怎么改进Hash算法？\r\n虽然我们认为哈希算法是一种“有损的压缩运算”，但是其攻击手段并不少，而当今Hash解密网站更是不胜枚举\r\nmd5在线解密破解,md5解密加密\r\n(cmd5.com)\r\n彩虹表\r\nRainbow table -\r\nWikipedia\r\n（总结）密码破解之王：Ophcrack彩虹表(Rainbow\r\nTables)原理详解（附：120G彩虹表下载） (ha97.com)\r\n什么是彩虹表？ - 知乎用户的回答 - 知乎\r\nhttps://www.zhihu.com/question/19790488/answer/19290308\r\n“加盐”(salting)\r\n\r\n给密码加一个随即的前缀或者后缀，然后再进行hash。这个随即的后缀或者前缀成为“盐”。通过加盐，相同的密码经过hash后就可以得到不一样的字符串了。检查用户输入的密码是否正确的时候，我们也还需要这个盐，所以盐一般都是跟hash一起保存在数据库里，或者作为hash字符串的一部分。\r\n盐不需要保密，只要盐是随机的话，查表，彩虹表都会失效。因为攻击者无法事先知道盐是什么，也就没有办法预先计算出查询表和彩虹表。如果每个用户都是使用了不同的盐，那么反向查表攻击也没法成功。\r\n\r\n因为能取得的“最好的结果”，也就是取得加盐后的密码，那究竟哪部分是我们添加的“盐”呢，黑客不知道\r\n下面是另一角度的思考：\r\n\r\n为什么加盐哈希可以抵御彩虹表\r\n彩虹表在生成的过程中，针对的是特定的函数H，H如果发生了改变，则已有的彩虹表数据就完全无法使用。\r\n生成彩虹表需要先预先选定一些口令，再一步步生成。然而如果加盐的话，会导致之前生成的那些口令都没有用了。（正确的口令需要有加了盐的格式），因此可以抵御彩虹表攻击。\r\n\r\n详见：\r\n加盐hash保存密码的正确方式\r\n- D＆G (wooyun.js.org)\r\n彩虹表攻击\r\n- 莫须有- - 博客园 (cnblogs.com)\r\n","slug":"Algorithm/HashFunction/HashFunction","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Hash","author_index":"JBR_Bunjie"},{"id":"120c49bf67650504f15740668777cd42","title":"Heap Sort - 堆排序","content":"Heap Sort - 堆排序\r\nReference：\r\n\r\nRecommend：堆排序之JAVA实现月光下一只赏月的猪的博客-CSDN博客java\r\n堆排序\r\n（高效率排序算法三）堆排序_送人玫瑰手留余香的博客-CSDN博客_堆排序效率\r\n1.7 堆排序 |\r\n菜鸟教程 (runoob.com)\r\n\r\nDetail：\r\n\r\n两个定义：\r\n\r\n\r\n大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；\r\n小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；\r\n\r\n\r\n步骤描述：\r\n\r\n\r\n\r\n创建一个堆 H[0……n-1]；\r\n把堆首（最大值）和堆尾互换；\r\n把堆的尺寸缩小 1，并调用\r\nshift_down(0)，目的是把新的数组顶端数据调整到相应位置；\r\n重复步骤 2，直到堆的尺寸为 1。\r\n\r\n\r\n\r\n分析：\r\n\r\n堆排序的平均时间复杂度为 Ο(nlogn)。\r\nCode：\r\nCode - JavaScript\r\nvar len;    &#x2F;&#x2F; 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量\n\nfunction buildMaxHeap(arr) &#123;   &#x2F;&#x2F; 建立大顶堆\n    len &#x3D; arr.length;\n    for (var i &#x3D; Math.floor(len&#x2F;2); i &gt;&#x3D; 0; i--) &#123;\n        heapify(arr, i);\n    &#125;\n&#125;\n\nfunction heapify(arr, i) &#123;     &#x2F;&#x2F; 堆调整\n    var left &#x3D; 2 * i + 1,\n        right &#x3D; 2 * i + 2,\n        largest &#x3D; i;\n\n    if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;\n        largest &#x3D; left;\n    &#125;\n\n    if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;\n        largest &#x3D; right;\n    &#125;\n\n    if (largest !&#x3D; i) &#123;\n        swap(arr, i, largest);\n        heapify(arr, largest);\n    &#125;\n&#125;\n\nfunction swap(arr, i, j) &#123;\n    var temp &#x3D; arr[i];\n    arr[i] &#x3D; arr[j];\n    arr[j] &#x3D; temp;\n&#125;\n\nfunction heapSort(arr) &#123;\n    buildMaxHeap(arr);\n\n    for (var i &#x3D; arr.length-1; i &gt; 0; i--) &#123;\n        swap(arr, 0, i);\n        len--;\n        heapify(arr, 0);\n    &#125;\n    return arr;\n&#125;\r\nCode - Python\r\ndef buildMaxHeap(arr):\n    import math\n    for i in range(math.floor(len(arr)&#x2F;2),-1,-1):\n        heapify(arr,i)\n\ndef heapify(arr, i):\n    left &#x3D; 2*i+1\n    right &#x3D; 2*i+2\n    largest &#x3D; i\n    if left &lt; arrLen and arr[left] &gt; arr[largest]:\n        largest &#x3D; left\n    if right &lt; arrLen and arr[right] &gt; arr[largest]:\n        largest &#x3D; right\n\n    if largest !&#x3D; i:\n        swap(arr, i, largest)\n        heapify(arr, largest)\n\ndef swap(arr, i, j):\n    arr[i], arr[j] &#x3D; arr[j], arr[i]\n\ndef heapSort(arr):\n    global arrLen\n    arrLen &#x3D; len(arr)\n    buildMaxHeap(arr)\n    for i in range(len(arr)-1,0,-1):\n        swap(arr,0,i)\n        arrLen -&#x3D;1\n        heapify(arr, 0)\n    return arr\r\n","slug":"Algorithm/SORT/Heap Sort","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Sort","author_index":"JBR_Bunjie"},{"id":"0d08c32366a524bf34b2dc2c2fb0333a","title":"Boyer Moore Algorithm","content":"Boyer Moore Algorithm\r\nGeneral\r\n高效，可靠，应用广泛：各种文本编辑器的\"查找\"功能（Ctrl+F），大多采用Boyer-Moore算法\r\n1977年，德克萨斯大学的Robert S. Boyer教授和J Strother\r\nMoore教授发明了这种算法。\r\nDetail\r\n\"坏字符规则\"\r\n\r\n后移位数 = 坏字符的位置 - 搜索词中的上一次出现位置\r\n\r\n如果\"坏字符\"不包含在搜索词之中，则上一次出现位置为 -1。\r\n\"好后缀规则\"\r\n\r\n后移位数 = 好后缀的(最后)位置 - 后缀(在搜索词中)的上一次出现位置\r\n\r\n注意点：\r\n\r\n\"好后缀\"的位置以最后一个字符为准。假定\"ABCDEF\"的\"EF\"是好后缀，则它的位置以\"F\"为准，即5（从0开始计算）\r\n如果\"好后缀\"在搜索词中只出现一次，则它的上一次出现位置为\r\n-1。比如，\"EF\"在\"ABCDEF\"之中只出现一次，则它的上一次出现位置为-1（即未出现）\r\n如果\"好后缀\"有多个，则除了最长的那个\"好后缀\"，其他\"好后缀\"的上一次出现位置必须在头部。比如，假定\"BABCDAB\"的\"好后缀\"是\"DAB\"、\"AB\"、\"B\"，请问这时\"好后缀\"的上一次出现位置是什么？回答是，此时采用的好后缀是\"B\"，它的上一次出现位置是头部，即第0位。这个规则也可以这样表达：如果最长的那个\"好后缀\"只出现一次，则可以把搜索词改写成如下形式进行位置计算\"(DA)BABCDAB\"，即虚拟加入最前面的\"DA\"\r\n\r\nCode\r\npublic static int pattern(String pattern, String target) &#123;\n    int tLen &#x3D; target.length();&#x2F;&#x2F;主串的长度\n    int pLen &#x3D; pattern.length();&#x2F;&#x2F;模式串的长度\n\n\t&#x2F;&#x2F;如果模式串比主串长，没有可比性，直接返回-1\n    if (pLen &gt; tLen) &#123;\n        return -1;\n    &#125;\n\n    int[] bad_table &#x3D; build_bad_table(pattern);&#x2F;&#x2F; 获得坏字符数值的数组，实现看下面\n    int[] good_table &#x3D; build_good_table(pattern);&#x2F;&#x2F; 获得好后缀数值的数组，实现看下面\n\n    for (int i &#x3D; pLen - 1, j; i &lt; tLen;) &#123;\n        System.out.println(&quot;跳跃位置：&quot; + i);\n        &#x2F;&#x2F;这里和上面实现坏字符的时候不一样的地方，我们之前提前求出坏字符以及好后缀\n        &#x2F;&#x2F;对应的数值数组，所以，我们只要在一边循环中进行比较。还要说明的一点是，这里\n        &#x2F;&#x2F;没有使用skip记录跳过的位置，直接针对主串中移动的指针i进行移动\n        for (j &#x3D; pLen - 1; target.charAt(i) &#x3D;&#x3D; pattern.charAt(j); i--, j--) &#123;\n            if (j &#x3D;&#x3D; 0) &#123;&#x2F;&#x2F;指向模式串的首字符，说明匹配成功，直接返回就可以了\n                System.out.println(&quot;匹配成功，位置：&quot; + i);\n                &#x2F;&#x2F;如果你还要匹配不止一个模式串，那么这里直接跳出这个循环，并且让i++\n                &#x2F;&#x2F;因为不能直接跳过整个已经匹配的字符串，这样的话可能会丢失匹配。\n&#x2F;&#x2F;\t\t\t\t\ti++;   &#x2F;&#x2F; 多次匹配\n&#x2F;&#x2F;\t\t\t\t\tbreak;\n                return i;\n            &#125;\n        &#125;\n        &#x2F;&#x2F;如果出现坏字符，那么这个时候比较坏字符以及好后缀的数组，哪个大用哪个\n        i +&#x3D; Math.max(good_table[pLen - j - 1], bad_table[target.charAt(i)]);\n    &#125;\n    return -1;\n&#125;\n\n&#x2F;&#x2F;字符信息表\npublic static int[] build_bad_table(String pattern) &#123;\n    final int table_size &#x3D; 256;&#x2F;&#x2F;上面已经解释过了，字符的种类\n    int[] bad_table &#x3D; new int[table_size];&#x2F;&#x2F;创建一个数组，用来记录坏字符出现时，应该跳过的字符数\n    int pLen &#x3D; pattern.length();&#x2F;&#x2F;模式串的长度\n\n    for (int i &#x3D; 0; i &lt; bad_table.length; i++) &#123;\n        bad_table[i] &#x3D; pLen;  \n        &#x2F;&#x2F;默认初始化全部为匹配字符串长度,因为当主串中的坏字符在模式串中没有出\n        &#x2F;&#x2F;现时，直接跳过整个模式串的长度就可以了\n    &#125;\n    for (int i &#x3D; 0; i &lt; pLen - 1; i++) &#123;\n        int k &#x3D; pattern.charAt(i);&#x2F;&#x2F;记录下当前的字符ASCII码值\n        &#x2F;&#x2F;这里其实很值得思考一下，bad_table就不多说了，是根据字符的ASCII值存储\n        &#x2F;&#x2F;坏字符出现最右的位置，这在上面实现坏字符的时候也说过了。不过你仔细思考\n        &#x2F;&#x2F;一下，为什么这里存的坏字符数值，是最右的那个坏字符相对于模式串最后一个\n        &#x2F;&#x2F;字符的位置？为什么？首先你要理解i的含义，这个i不是在这里的i，而是在上面\n        &#x2F;&#x2F;那个pattern函数的循环的那个i，为了方便我们称呼为I，这个I很神奇，虽然I是\n        &#x2F;&#x2F;在主串上的指针，但是由于在循环中没有使用skip来记录，直接使用I随着j匹配\n        &#x2F;&#x2F;进行移动，也就意味着，在某种意义上，I也可以直接定位到模式串的相对位置，\n        &#x2F;&#x2F;理解了这一点，就好理解在本循环中，i的行为了。\n\n\t\t&#x2F;&#x2F;其实仔细去想一想，我们分情况来思考，如果模式串的最\n        &#x2F;&#x2F;后一个字符，也就是匹配开始的第一个字符，出现了坏字符，那么这个时候，直\n        &#x2F;&#x2F;接移动这个数值，那么正好能让最右的那个字符正对坏字符。那么如果不是第一个\n        &#x2F;&#x2F;字符出现坏字符呢？这种情况你仔细想一想，这种情况也就意味着出现了好后缀的\n        &#x2F;&#x2F;情况，假设我们将最右的字符正对坏字符\n        bad_table[k] &#x3D; pLen - 1 - i;\n    &#125;\n    return bad_table;\n&#125;\n\n&#x2F;&#x2F;匹配偏移表\npublic static int[] build_good_table(String pattern) &#123;\n    int pLen &#x3D; pattern.length();&#x2F;&#x2F;模式串长度\n    int[] good_table &#x3D; new int[pLen];&#x2F;&#x2F;创建一个数组，存好后缀数值\n    &#x2F;&#x2F;用于记录最新前缀的相对位置，初始化为模式串长度，因为意思就是当前后缀字符串为空\n    &#x2F;&#x2F;要明白lastPrefixPosition 的含义\n    int lastPrefixPosition &#x3D; pLen;\n\n    for (int i &#x3D; pLen - 1; i &gt;&#x3D; 0; --i) &#123;\n        if (isPrefix(pattern, i + 1)) &#123;\n        &#x2F;&#x2F;如果当前的位置存在前缀匹配，那么记录当前位置\n            lastPrefixPosition &#x3D; i + 1;\n        &#125;\n        good_table[pLen - 1 - i] &#x3D; lastPrefixPosition - i + pLen - 1;\n    &#125;\n\n    for (int i &#x3D; 0; i &lt; pLen - 1; ++i) &#123;\n    &#x2F;&#x2F;计算出指定位置匹配的后缀的字符串长度\n        int slen &#x3D; suffixLength(pattern, i);\n        good_table[slen] &#x3D; pLen - 1 - i + slen;\n    &#125;\n    return good_table;\n&#125;\n\n&#x2F;&#x2F;前缀匹配\nprivate static boolean isPrefix(String pattern, int p) &#123;\n    int patternLength &#x3D; pattern.length();&#x2F;&#x2F;模式串长度\n    &#x2F;&#x2F;这里j从模式串第一个字符开始，i从指定的字符位置开始，通过循环判断当前指定的位置p\n    &#x2F;&#x2F;之后的字符串是否匹配模式串前缀\n    for (int i &#x3D; p, j &#x3D; 0; i &lt; patternLength; ++i, ++j) &#123;\n        if (pattern.charAt(i) !&#x3D; pattern.charAt(j)) &#123;\n            return false;\n        &#125;\n    &#125;\n    return true;\n&#125;\n\n&#x2F;&#x2F;后缀匹配\nprivate static int suffixLength(String pattern, int p) &#123;\n    int pLen &#x3D; pattern.length();\n    int len &#x3D; 0;\n    for (int i &#x3D; p, j &#x3D; pLen - 1; i &gt;&#x3D; 0 &amp;&amp; pattern.charAt(i) &#x3D;&#x3D; pattern.charAt(j); i--, j--) &#123;\n        len +&#x3D; 1;\n    &#125;\n    return len;\n&#125;\r\nReference\r\n\r\n字符串匹配的Boyer-Moore算法\r\n- 阮一峰的网络日志 (ruanyifeng.com)\r\n不用找了，学习BM算法，这篇就够了（思路+详注代码）_BoCong-Deng的博客-CSDN博客_bm算法\r\n\r\n","slug":"Algorithm/String Processing/Boyer Moore Algorithm","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"String Processing","author_index":"JBR_Bunjie"},{"id":"53896b079468d4c41963b2300dea196e","title":"KMP","content":"KMP算法\r\nKMP算法作用简介：\r\n在计算机科学中，Knuth-Morris-Pratt字符串查找算法（简称为KMP算法）可在一个字符串S内查找一个词W的出现位置。一个词在不匹配时本身就包含足够的信息来确定下一个匹配可能的开始位置，此算法利用这一特性以避免重新检查先前配对的字符。\r\nKMP算法原理：\r\n1.前缀与后缀\r\n\r\n几个必须明确的概念：前缀、后缀、相同前缀后缀的最大长度（为表述方便，下文均用公共最大长指代）\r\n\r\nabcdef的前缀：a、ab、abc、abcd、abcde（注意：abcdef不是前缀）\r\nabcdef的后缀：f、ef、def、cdef、bcdef（注意：abcdef不是后缀）\r\nabcdef的公共最大长：0（因为其前缀与后缀没有相同的）\r\nababa的前缀：a、ab、aba、abab\r\nababa的后缀：a、ba、aba、baba\r\nababa的公共最大长：3（因为他们的公共前缀后缀中最长的为aba，长度3）\r\n\r\n\r\n2.确定PMT (Partial Match\r\nTable)\r\n\r\n\"部分匹配值\"就是\"前缀\"和\"后缀\"的最长的共有元素的长度。以\"ABCDABD\"为例，\r\n\r\n\"A\"的前缀和后缀都为空集，共有元素的长度为0；其value为\r\n\"AB\"的前缀为[A]，后缀为[B]，共有元素的长度为0；　　\r\n\"ABC\"的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；　　\r\n\"ABCD\"的前缀为[A, AB, ABC]，后缀为[BCD, CD,\r\nD]，共有元素的长度为0；　　\r\n\"ABCDA\"的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA,\r\nA]，共有元素为\"A\"，长度为1；　　\r\n\"ABCDAB\"的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB,\r\nAB, B]，共有元素为\"AB\"，长度为2；　　\r\n\"ABCDABD\"的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD,\r\nCDABD, DABD, ABD, BD, D]，共有元素的长度为0。\r\n\r\n\r\n得表：\r\n\r\n\r\nimg\r\n\r\nKMP算法的Python实现：\r\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -&gt; int:\n        def KMP(s, p):\n            &quot;&quot;&quot;\n            s 为主串\n            p 为模式串\n            如果 t 里有 p，返回打头下标\n            &quot;&quot;&quot;\n            nex &#x3D; getNext(p)\n            i &#x3D; 0\n            j &#x3D; 0   # 分别是 s 和 p 的指针\n            while i &lt; len(s) and j &lt; len(p):\n                if j &#x3D;&#x3D; -1 or s[i] &#x3D;&#x3D; p[j]: # j &#x3D;&#x3D; -1 是由于 j &#x3D; next[j]产生\n                    i +&#x3D; 1\n                    j +&#x3D; 1\n                else:\n                    j &#x3D; nex[j]\n\n            if j &#x3D;&#x3D; len(p): # j 走到了末尾，说明匹配到了\n                return i - j\n            else:\n                return -1\n\n        def getNext(p):\n            &quot;&quot;&quot;\n            p 为模式串\n            返回 next 数组，即部分匹配表\n            &quot;&quot;&quot;\n            nex &#x3D; [0] * (len(p) + 1)\n            nex[0] &#x3D; -1\n            i &#x3D; 0\n            j &#x3D; -1\n            while i &lt; len(p):\n                if j &#x3D;&#x3D; -1 or p[i] &#x3D;&#x3D; p[j]:\n                    i +&#x3D; 1\n                    j +&#x3D; 1\n                    nex[i] &#x3D; j     # 这是最大的不同：记录next[i]\n                else:\n                    j &#x3D; nex[j]\n\n            return nex\n        \n        return KMP(haystack, needle)\r\nReference\r\n\r\n字符串匹配的KMP算法\r\n- 阮一峰的网络日志 (ruanyifeng.com)\r\n如何更好地理解和掌握 KMP 算法? - 白鱼咸蛋笨大的回答 - 知乎\r\nhttps://www.zhihu.com/question/21923021/answer/642165149\r\n如何更好地理解和掌握 KMP 算法? - 海纳的回答 - 知乎\r\nhttps://www.zhihu.com/question/21923021/answer/281346746\r\n(第一个示例比较特殊)\r\n\r\n","slug":"Algorithm/String Processing/KMP","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"String Processing","author_index":"JBR_Bunjie"},{"id":"3300e6e8edea21eb33ad89b2150bf9cc","title":"R&K Algorithm","content":"Rabin–Karp algorithm -\r\n拉宾-卡普算法\r\n拉宾-卡普算法（英語：Rabin–Karp\r\nalgorithm）或卡普-拉宾算法（Karp–Rabin algorithm）\r\nGeneral\r\nRabin-Karp\r\n算法是由 Richard M.\r\nKarp和 Michael O.\r\nRabin创建的字符串搜索算法\r\nKR Algorithm使用散列来查找文本中的一组模式字符串中的任何一个。\r\nDetail\r\n假设我们有一个文本： yeminsajid\r\n，我们想知道文本中是否存在模式 nsa\r\n。要计算散列和滚动散列，我们需要使用素数。这可以是任何素数。让我们在这个例子中使用\r\nprime = 11\r\n。我们将使用以下公式确定哈希值：\r\n(1st letter) X (prime) + (2nd letter) X (prime)¹ + (3rd letter) X (prime)² X + ......\r\n我们将表示：\r\na -&gt; 1    g -&gt; 7    m -&gt; 13   s -&gt; 19   y -&gt; 25\nb -&gt; 2    h -&gt; 8    n -&gt; 14   t -&gt; 20   z -&gt; 26\nc -&gt; 3    i -&gt; 9    o -&gt; 15   u -&gt; 21\nd -&gt; 4    j -&gt; 10   p -&gt; 16   v -&gt; 22\ne -&gt; 5    k -&gt; 11   q -&gt; 17   w -&gt; 23\nf -&gt; 6    l -&gt; 12   r -&gt; 18   x -&gt; 24\r\nnsa 的哈希值为 ： \\[\r\nHASH(nsa) = 14 * 11^0 + 19 * 11^1 + 1 * 11^2 = 344\r\n\\]\r\n现在我们找到文本的滚动哈希值。如果滚动哈希与模式的哈希值匹配，我们将检查字符串是否匹配。因为我们的模式有\r\n3 个字母，我们将采取 1 日 3 封\r\nYEM 从我们的文本，并计算哈希值。我们得到： \\[\r\nHASH(yem) = 25 * 11^0 + 5 * 11^1 + 13 * 11^2 = 1653\r\n\\]\r\n此值与我们的模式的哈希值不匹配。所以字符串在这里不存在。现在我们需要考虑下一步。计算下一个字符串\r\nemi\r\n的哈希值。我们当然可以直接重新从。但这将是相当微不足道的，并且会花费更多。相反，我们使用另一种技术。\r\n\r\n我们从当前哈希值中减去 Previous String 中的\r\n第一个字母的 即 y\r\n的值。即：1653 - 25 = 1628。\r\n再次除以设定的素数 prime——11，可得：1628 / 11 =\r\n148`。\r\n最后加上新的字母 *（素数）^ m -\r\n1，可得：148 + 9 X 11² = 1237。\r\n\r\n新的哈希值不等于我们的模式哈希值。继续前进直到 a\r\n(nsa)，有：\r\nPrevious String: ins\nFirst Letter of Previous String: i(9)\nNew Letter: a(1)\nNew String: &quot;nsa&quot;\n------------------------------\n2462 - 9 &#x3D; 2453\n2453 &#x2F; 11 &#x3D; 223\n223 + 1 X 11² &#x3D; 344\r\n这是一个匹配！\r\n现由于两个字符串都匹配，因此匹配字符串存在于目标字符串中，现在我们只需要返回目标字符串匹配字段的起始位置即可。\r\nCode\r\nKR - JS\r\n&#x2F;**\n * @param &#123;string&#125; haystack\n * @param &#123;string&#125; needle\n * @return &#123;number&#125;\n *&#x2F;\n&#x2F;*\n\n*&#x2F;\n&#x2F;**\n * @param &#123;string&#125; haystack\n * @param &#123;string&#125; needle\n * @return &#123;number&#125;\n *&#x2F;\nvar strStr &#x3D; function(haystack, needle)&#123;\n    if(needle.length &#x3D;&#x3D; 0) return 0;\n    let n &#x3D; haystack.length;\n    let m &#x3D; needle.length;\n    let s &#x3D; &#39; &#39;+haystack;\n    let t &#x3D; &#39; &#39;+needle;\n    \n    &#x2F;&#x2F;String添加一个重新确定字符值得方法\n    String.prototype.newCode &#x3D; function()&#123;\n        return this.charCodeAt()-97+1;\n    &#125;\n    &#x2F;&#x2F;确定模数 尽量避免冲突\n    let p &#x3D; 999991, d &#x3D; 131;\n    &#x2F;&#x2F;计算thash\n    let tHash &#x3D; 0;\n    for(let i&#x3D;1; i&lt;&#x3D;m; i++)&#123;\n        tHash &#x3D; (tHash*d + t[i].newCode()) % p;\n    &#125;\n    &#x2F;&#x2F;计算sHash子串的值\n    let sHash &#x3D; new Array(n+1);\n    sHash[0] &#x3D; 0;\n    for(let i&#x3D;1; i&lt;&#x3D;n; i++)&#123;\n        sHash[i] &#x3D; (sHash[i-1]*d + s[i].newCode()) % p;\n    &#125;\n   \n\n    &#x2F;&#x2F;hello ll\n    for(let i&#x3D;m; i&lt;&#x3D;n; i++)&#123;\n        if(calcHash(i-m, i, m) &#x3D;&#x3D; tHash)&#123;\n            return i-m;\n        &#125;\n    &#125;\n    return -1;\n    function calcHash(l, r, len)&#123;\n        &#x2F;&#x2F;_hello  求ll的hash\n        &#x2F;&#x2F;先求_hell的hash, 再求_he的hash进行补位\n        &#x2F;&#x2F;_hell - _he00 就是ll\n        &#x2F;&#x2F;注意相减的时候为避免负数，可以先加上模数。再取模\n        return (sHash[r] - (sHash[l]*myPow(d, len, p))%p + p) % p;\n    &#125;\n&#125;\nfunction myPow(x,n, m)&#123;\n    function helper(x,n)&#123;\n        if(n&#x3D;&#x3D;0) return 1.0;\n        let y &#x3D; helper(x, n&#x2F;2 | 0);\n        return n%2 &#x3D;&#x3D;0 ? (y*y)%m: (y*y*x)%m;\n    &#125;\n    return n&gt;&#x3D;0? helper(x, n) : 1.0&#x2F;helper(x, n);\n&#125;\r\nReference\r\n\r\nRabin-Karp\r\n算法简介 | 他山教程，只选择最优质的自学材料 (tastones.com)\r\n28.\r\n实现 strStr() 题解 - 力扣（LeetCode） (leetcode-cn.com)\r\n\r\n","slug":"Algorithm/String Processing/KR&RK","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"String Processing","author_index":"JBR_Bunjie"},{"id":"9804ef7a4cf22f333e494cd94f29c482","title":"Cpp `#pragma Once` and `#ifndef`","content":"Source\r\n\r\n在 C++ 中防止头文件被重复包含时为什么同时使用 #ifndef 和 #pragma\r\nonce？ - 望山的回答 - 知乎\r\nhttps://www.zhihu.com/question/40990594/answer/1675549910\r\n#pragma\r\nonce - 维基百科，自由的百科全书 (wikipedia.org)\r\n\r\n结论：\r\n请同时使用#ifdef与#pragma once\r\n解释：如果所用的编译器支持#pragma once，则可以加快我们的编译速度；如果不支持，也会有#ifdef语句来兜底\r\n\r\n使用#pragma once代替include防范将加快编译速度，因为这是一种高阶的机制；编译器会自动比对档案名称或inode而不需要在标头档去判断#ifndef和#endif。\r\n\r\n\r\n使用#ifndef的话，缺点不单单是需要多写两行代码和想出一个合适的#define名字，更大的缺点是它要求编译器一直扫描到文件尾，找到对应的#endif，才能确定你的意图是整个头文件都要略过。然而这时候已经花费了许多CPU时间（和电能），前面做的那么多都是白忙。\r\n\r\n","slug":"Language Learning/CPP/[F]PragmaOnce","date":"2022-12-23T04:23:23.000Z","categories_index":"Coding Language","tags_index":"CPP","author_index":"JBR_Bunjie"},{"id":"b7afcba22e06e2e680735e918e5fcad8","title":"Encoding Methods","content":"计算机编码梳理\r\nASCII码\r\n描述\r\n这是计算机编码发展历程里的第一阶段：ASCII码，即：American Standard Code for Information Interchange，美国信息交换标准代码\r\n设计思路：\r\n在计算机内部存储单元的最小单位时Byte。不过Byte仍然可以细分：每一个二进制位是一个bit，有0和1两种状态。8个bit构成一个byte——所有的信息最终都表示为一个二进制的字符串。\r\n在这个基础上，如果利用0和1各代表一个状态，由于一个byte有8个bit，故总共可以表示2的8次方＝256个状态。若是每个状态对应一个符号，一个byte可以表示256个符号，也就是从0000000到11111111。\r\n根据这个思路，美国在上个世纪60年代制定了一套字符编码，用于安排控制字符、英语字符、数字等符号与二进制位之间对应的关系，形成了大名鼎鼎的ASCII码。\r\n但ASCII码一共只规定了128个字符的编码，比如空格\"SPACE\"是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，而由于使用了8位二进制，故规定最前面的第一位二进制数则为0。\r\n\r\n可以访问：ASCII Code - The\r\nextended ASCII table (ascii-code.com)了解\r\n\r\n现状：\r\n时至今日，仍然有很多语言采用这一编码作为默认编码，比如Python2等语言\r\n\r\nPython2的 默认编码是ASCII，不能识别中文字符，需要显式指定字符编码；\r\n而Python3的默认编码改为了Unicode，可以识别中文字符\r\n\r\n采用ASCII编码主要的字符集：Windows-1252字符集、ISO8859-1字符集\r\nASCII实现思路\r\n\r\n所有的控制字符(比如CR回车、DEL删除等)编码在0-31范围以及127中。\r\n把所有的标点符号，英文大小写全部放在32-126范围中。\r\n\r\nASCII实现形式\r\n\r\n0xxxx xxxx\r\n\r\n示例\r\nString str &#x3D; new String(&quot;华侨永亨银行&quot;);\n&#x2F;&#x2F; 采用UTF-8编码得到字节数组\nbyte[] bytes &#x3D; str.getBytes(&quot;UTF-8&quot;);\n&#x2F;&#x2F; bytes: &#123;e5 8d 8e e4 be a8 e6 b0 b8 e4 ba a8 e9 93 b6 e8 a1 8c&#125;\n&#x2F;&#x2F; 注意第二个字节0x8d，在下面的编解码中被自动转换成了3f\n\n&#x2F;&#x2F; 采用Windows-1252解码得到字符串\nstr &#x3D; new String(bytes, &quot;Windows-1252&quot;);\n&#x2F;&#x2F; 采用windows-1252编码，还原字节数组\nbytes &#x3D; str.getBytes(&quot;Windows-1252&quot;);\n&#x2F;&#x2F; bytes: &#123;e5 3f 8e e4 be a8 e6 b0 b8 e4 ba a8 e9 93 b6 e8 a1 8c&#125;\n\n&#x2F;&#x2F; 采用UTF-8解码，预期得到原字符串\nstr &#x3D; new String(bytes, &quot;UTF-8&quot;);\n&#x2F;&#x2F; str: ???侨永亨银行,第一个字被永久性破坏\n&#x2F;&#x2F; 引自：https:&#x2F;&#x2F;blog.csdn.net&#x2F;zou8944&#x2F;article&#x2F;details&#x2F;79859112\r\n\r\n不过，这个例子对Python不生效，因为python取了个巧:\r\n\r\n\r\nimage-20210910211848379\r\n\r\n\r\n\r\nrestsdafa\r\n\r\n\r\nGB2312&amp;GBK\r\n说明\r\n英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。\r\n以中文为例，汉字有10万左右，即使是常用字也有六七千，必须得用多个字节来表示。\r\n最先诞生的是GB2312编码。对于该编码，我们只需要明白以下两点：\r\n\r\n该编码可以表示大概7000左右个字符。其中有中文及一些常见的拉丁字母等。基本可以覆盖我们日常打字使用。\r\n该编码完全兼容ASCII码，计算机去读的时候首先判断最高位，如果是0，那么这个字符只占用一个字节，表示的内容跟ASCII码表示的一样。如果该字符最高位是1，那么该字节连同下一个字节表示一个中文汉字。所以平常咱们常说的英文一个字节，中文两个字节其实是从这里来的。\r\n\r\nGB2312实现形式\r\n\r\n0xxxxxxx：表示为ASCII字符\r\n1xxxxxxx 1xxxxxxx：表示为汉字\r\n\r\n后来？\r\n两个字节最多可以表示的字符数是\r\n2^16＝65536，如果要求首位必须是1，那么最多可以表示 32768\r\n个字符，但是GB2312\r\n只用了其中的7000左右的字符。这显然是没有做到物尽其用，而且如果有些特殊的中文，GB2312根本表示不了。所以GBK就应运而生了。\r\nGBK\r\n就尽量将能用到的状态都表示成中文字符了，当然最终还是有些状态没办法用（具体可以自行查找文档），最终可以表示23940个字符，其中有21003是汉字。\r\nGBK是完全兼容GB2312的，所以GBK的应用是很广泛的，而且从Windows95开始，Windows的中文版默认中文支持就是GBK编码。你可以通过在cmd下输入chcp命令来查看你当前系统的默认编码\r\n\r\n在GBK后还有GB18030等，不再解释\r\n\r\nGBK实现形式：\r\n\r\n0xxxxxxx：表示为ASCII字符\r\n1xxxxxxx xxxxxxxx：表示为汉字\r\n\r\nUnicode\r\nGBK基本解决了中文编码问题，但另外一个大问题随之而来，那就是国际化。\r\n从我们的视角看，我们按照这种方式来表示简体中文和英文，成了是成了，可是繁体中文怎么表示？日文又怎么表示？\r\n而又从他们的视角看，当然他们也利用最高位来做文章，发明了big5（台湾繁体），JIS（日文）等兼容ASCII码的编码格式，但是这几种编码之间是并不兼容的。一段GBK编码的文件在台湾友人的电脑里打开就是乱码了。\r\n这时候，Unicode就诞生了。\r\nUnicode – The World Standard for\r\nText and Emoji\r\n完全弄明白Unicode的细节是非常困难的，我们也是明白以下几点就够了：\r\n\r\nUnicode\r\n只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。\r\nUnicode\r\n编码是给世界上所有的符号都分配了一个码。GBK最多也只能表示3万多的汉字，康熙字典里面的大部分汉字都没法用GBK表示，但是Unicode就能，它(大概)可以表示这个星球上所有的符号。\r\nUnicode有UCS-2和UCS-4两种编码，2和4都是代表字节的意思，也就是说前者用两个字节表示，后者用4个字节表示。所以，UCS-2的表示范围是65536个字符，而UCS-4则可以表示超过22亿个字符，我想这真的是可以表示所有的字符了。其实日常使用我们用的只是UCS-2，一般说的Unicode编码也是只它。它包含了所有的简体中文，现用的繁体中文，火星文，以及其他国家的现用文字。古籍中的文字就得去UCS-4中去找了。\r\n\r\n值得注意的是：Unicode中，中文的编码范围为4E00-9FCF，其中9FC4-9FCF之间的区间没有使用。\r\n一个比较突出的问题就是这个区间全部都是文字，而中文标点没有包含在其中，反而散落在各个位置。同时，一些特殊的文字和中文部首以及一些特殊符号也不在此范围内，需要特别注意。\r\nUTF-8\r\n说明\r\n很遗憾，Unicode并不是完美的。不完美的地方主要有两点：\r\n1）不兼容ASCII码。因为Unicode是用两个字节表示，ASCII码范围内的字符都被扩充成了两个字节，前面又补了8个0。所以，如果你的电脑只支持Unicode编码的话，所有的英文资料全都没法阅读了。\r\n2）占用的存储变大，如果涉及到传输，所耗费的流量也会变大。中文文本还好，英文就相当明显。纯英文文本所消耗的存储比以前增大了一倍。\r\n这个时候就出现了诸如UTF-8等实现方式。这里我们只讨论UTF-8，因为它是使用最广泛的。它弥补了Unicode的缺陷，同时主要有以下几个优点。\r\n\r\nUTF-8与Unicode是一一对应的。所以UTF-8是国际化的编码方式。\r\nUTF-8是针对Unicode的可变长度字符编码，最短一个字节，最长3个字节，1个字节表示的就是ASCII码，所以UTF-8是完全兼容ASCII码的。\r\n正是因为UTF-8的变长实现，解决了Unicode的存储多的问题。可能有朋友要问了，UTF-8最多需要用3个字节表示，而Unicode只需要两个，怎么能说UFT-8会省存储呢？因为目前英文是最通用的语言，大部分字符都是ASCII码。\r\n\r\n但UTF-8并不是一点缺点也没有，因为变长表示，所以一段UTF-8编码没法一下子算出有多少个字符。而这一点能力对于以上几种编码格式来说是轻而易举的。所以当今世界上没有最完美的字符编码，只有最合适某个场景的编码。\r\nUTF-8具体实现\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n范围\r\n字节数\r\n存储格式\r\n\r\n\r\n\r\n\r\n0x0000~0x007F (0 ~ 127)\r\n1字节\r\n0xxxxxxx\r\n\r\n\r\n0x0080~0x07FF(128 ~ 2047)\r\n2字节\r\n110xxxxx 10xxxxxx\r\n\r\n\r\n0x0800~FFFF(2048 ~ 65535)\r\n3字节\r\n1110xxxx 10xxxxxx 10xxxxxx\r\n\r\n\r\n0x10000~1FFFFFF(65536 ~ 2097152)\r\n4字节\r\n11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n\r\n\r\n0x2000000~0x3FFFFFF\r\n5字节\r\n111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n\r\n\r\n0x4000000~0x7FFFFFFF)\r\n6字节\r\n1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n\r\n\r\n\r\n番外：多字节编码的一些概念\r\n大尾(big endian)和小尾(little\r\nendian)\r\n大尾和小尾是CPU处理多字节数的不同方式。例如“汉”字的Unicode编码是6C49。那么写到文件里时，究竟是将6C写在前面，还是将49写在前面？如果将6C写在前面，就是big\r\nendian。还是将49写在前面，就是little endian。\r\nBOM\r\nUTF-8以字节为编码单元，故没有字节序的问题。而UTF-16以两个字节为编码单元，在解释一个UTF-16文本前，首先要弄清楚每个编码单元的字节序。例如收到一个“奎”的Unicode编码是594E，“乙”的Unicode编码是4E59。如果我们收到UTF-16字节流“594E”，那么这是“奎”还是“乙”？\r\nUnicode规范中推荐的标记字节顺序的方法是BOM，即Byte Order\r\nMark。BOM是一个有点小聪明的想法：\r\n在UCS编码中有一个叫做\"ZERO WIDTH NO-BREAK SPACE\"的字符，它的编码是FEFF。而FFFE在UCS中是不存在的字符，所以不应该出现在实际传输中。UCS规范建议我们在传输字节流前，先传输字符\"ZERO WIDTH NO-BREAK SPACE\"。这样如果接收者收到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是Little-Endian的。因此字符\"ZERO WIDTH NO-BREAK SPACE\"又被称作BOM。\r\nUTF-8不需要BOM来表明字节顺序，但可以用BOM来表明编码方式。字符\"ZERO WIDTH NO-BREAK SPACE\"的UTF-8编码是EF BB BF（读者可以用我们前面介绍的编码方法验证一下）。所以如果接收者收到以EF BB BF开头的字节流，就知道这是UTF-8编码了。\r\n不过话又说回来：理论上说，UTF-8并没有大小尾的困扰，所以并不需要BOM。但是一些Windows应用会指定大小尾，比如Notepad，而且Excel在没有指定BOM的UTF-8文件进行读取时会使用Windows的codepage，从而出现错误。\r\n","slug":"Language Learning/Encoding/Endcoding","date":"2022-12-23T04:23:23.000Z","categories_index":"Coding Language","tags_index":"ASCII,U","author_index":"JBR_Bunjie"},{"id":"761a62d925d7b04621f13a2ac3196dda","title":"Markdown type","content":"我展示的是一级标题\r\n我展示的是二级标题\r\n一、二级标题上不能有东西\r\n一级标题\r\n二级标题\r\n三级标题\r\n四级标题\r\n五级标题\r\n六级标题\r\n斜体文本 斜体文本 粗体文本\r\n粗体文本 粗斜体文本\r\n粗斜体文本\r\n分隔线:\r\n\r\n\r\n\r\n\r\n\r\n删除线: BAIDU.COM\r\n下划线: 带下划线文本\r\n上标：\r\n23\r\n下标：\r\nH2O\r\n高亮：\r\n==22==\r\n内联公式：\r\n\\(\\LaTeX\\)\r\n无序列表：\r\n\r\n第一项\r\n第二项\r\n第三项\r\n第一项\r\n第二项\r\n第三项\r\n第一项\r\n第二项\r\n第三项\r\n\r\n有序列表:\r\n\r\n第一项\r\n第二项\r\n第三项\r\n\r\n允许列表嵌套\r\n区块\r\n\r\n区块引用1 区块引用2 区块引用3 最外层 &gt; 第一层嵌套 &gt; &gt; &gt;\r\n第二层嵌套\r\n\r\n区块中使用列表: &gt; 区块中使用列表 &gt; 1. 第一项\r\n&gt; 2. 第二项 &gt; + 第一项 &gt; + 第二项 &gt; + 第三项\r\n列表中使用区块 如果要在列表项目内放进区块，\r\n那么就需要在 &gt; 前添加四个空格的缩进。\r\n区块中使用列表实例如下：\r\n\r\n第一项 &gt; 区块引用1 &gt; 区块引用2\r\n第二项\r\n\r\n代码 printf() 函数\r\n可以用 ``` 包裹一段代码， 并指定一种语言（也可以不指定）：\r\n$(document).ready(function () &#123;\n    alert(&#39;RUNOOB&#39;);\n&#125;);\r\n链接\r\n这是一个链接：google\r\n或者直接放上地址：https://google.com\r\n\r\n还可以通过变量来设置一个链接，变量赋值在文档末尾进行：\r\n这个链接用 1 作为网址变量 Google\r\n这个链接用 runoob 作为网址变量 Runoob\r\n然后在文档的结尾为变量赋值（网址）\r\n\r\n图片\r\n![alt 属性文本](图片地址 &quot;可选标题&quot;)\r\n\r\n\r\nRUNOOB 图标\r\n\r\nMarkdown 还没有办法指定图片的高度与宽度\r\n如果你需要的话，你可以使用普通的  标签。\r\n\r\n表格\r\n\r\n\r\n\r\n左对齐\r\n右对齐\r\n居中对齐\r\n\r\n\r\n\r\n\r\n单元格\r\n单元格\r\n单元格\r\n\r\n\r\n单元格\r\n单元格\r\n单元格\r\n\r\n\r\n\r\n支持的 HTML 元素 不在 Markdown 涵盖范围之内的标签\r\n都可以直接在文档里面用 HTML 撰写\r\n目前支持的 HTML 元素有：      \r\n等，可自行尝试\r\n转义 md使用了很多特殊符号来表示特定的意义\r\n如果需要显示特定的符号则需要使用转义字符 md使用反斜杠转义特殊字符：\r\n文本加粗\r\n** 正常显示星号 **\r\nmd支持以下这些符号前面加上反斜杠 来帮助插入普通的符号：   反斜线 `\r\n反引号\r\n\r\n星号 _ 下划线 {} 花括号 [] 方括号 () 小括号 # 井字号\r\n加号\r\n减号 . 英文句点 ! 感叹号\r\n\r\n数学公式：\r\nLaTeX数学符号大全_LCCFlccf的博客-CSDN博客_latex\r\n数学符号\r\n【Markdown笔记】数学公式\r\n三角函数_dadalaohua的博客-CSDN博客_markdown 三角函数\r\nmarkdown最全数学公式速查_博客-CSDN博客_markdown数学公式\r\nMarkdown中的行列式和矩阵(LaTex)\r\n- 简书 (jianshu.com)\r\n输入公式：\r\n最速解决：\r\n在线LaTeX公式编辑器-编辑器\r\n(latexlive.com)\r\n公式标签：\r\n在行内输入：$\r\n$符号，在这两个符号之间输入LaTex语法，即可实现在行内插入公式。\r\n在行间输入：\\[\r\n\\]符号，在这两对符号之间输入LaTex语法，即可实现在行间插入公式。\r\n示例：\r\n\\(\\alpha\\)、\\(\\beta\\)、\\(\\chi\\)、\\(\\Delta\\)、\\(\\Gamma\\)、\\(\\Theta\\) \\[\r\n\\alpha\r\n\\]\r\n公式语法：\r\n换行：\r\n\\\\\r\n对齐：\r\n&amp;对齐\r\n\r\n一般对齐：\r\n\r\n\\[\r\n\\begin{aligned}\r\n&amp;y=kx+b\\\\\r\n&amp;y=kx^2+b\\\\\r\n\\end{aligned}\r\n\\]\r\n\r\n等号对齐\r\n\r\n\\[\r\n\\begin{aligned}\r\ny=&amp;kx+b\\\\\r\nkx^2+b=&amp;y\\\\\r\n\\end{aligned}\r\n\\]\r\n\r\n灵活对齐\r\n\r\n\\[\r\n\\begin{aligned}\r\n&amp;y&amp;&amp;=kx+b\\\\\r\n&amp;kx^2+b&amp;&amp;=y\\\\\r\n\\end{aligned}\r\n\\]\r\n中心对齐：\r\ndefault\r\n分数：\r\n求和：\r\n\r\n参数位于右方：_{i=1}^{n}\r\n参数位于上下方：_{i=1}^{n}\r\n\r\n求导：\r\n\r\nd - 求导：\r\n∂ - 偏导：\r\n∇ - 梯度：f\r\n\r\n附录：\r\n1.字母的LaTex语法\r\n希腊字母\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n希腊字母小写、大写\r\nLaTeX形式\r\n希腊字母小写、大写\r\nLaTeX形式\r\n\r\n\r\n\r\n\r\nα A\r\nA\r\nμ N\r\nN\r\n\r\n\r\nβ B\r\nB\r\nξ Ξ\r\n\r\n\r\n\r\nγ Γ\r\n\r\no O\r\no O\r\n\r\n\r\nδ Δ\r\n\r\nπ Π\r\n\r\n\r\n\r\nϵ ε E\r\nE\r\nρ ϱ P\r\nP\r\n\r\n\r\nζ Z\r\nZ\r\nσ Σ\r\n\r\n\r\n\r\nη H\r\nH\r\nτ T\r\nT\r\n\r\n\r\nθ ϑ Θ\r\n\r\nυ Υ\r\n\r\n\r\n\r\nι I\r\nI\r\nϕ φ Φ\r\n\r\n\r\n\r\nκ K\r\nK\r\nχ X\r\nX\r\n\r\n\r\nλ Λ\r\n\r\nψ Ψ\r\n\r\n\r\n\r\nμ M\r\nM\r\nω Ω\r\n\r\n\r\n\r\n\r\n2.常用运算符\r\n\r\n\r\n\r\n运算符\r\nlatex\r\n\r\n\r\n\r\n\r\n\\(\\le\\)\r\n\r\n\r\n\r\n\\(\\ge\\)\r\n\r\n\r\n\r\n\\(\\neq\\)\r\n或 \r\n\r\n\r\n\\(\\equiv\\)\r\n\r\n\r\n\r\n\\(\\triangleq\\)\r\n\r\n\r\n\r\n\\(\\rightarrow\\)\r\n\r\n\r\n\r\n\\(\\infty\\)\r\n\r\n\r\n\r\n\\(\\in\\)\r\n\r\n\r\n\r\n\\(\\subset\\)\r\n\r\n\r\n\r\n\\(\\subseteq\\)\r\n\r\n\r\n\r\n\\(\\supset\\)\r\n\r\n\r\n\r\n\\(\\supseteq\\)\r\n\r\n\r\n\r\n\\(\\times\\)\r\n\r\n\r\n\r\n\\(\\cdot\\)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","slug":"Language Learning/MARK LANGUAGE/Markdown","date":"2022-12-23T04:23:23.000Z","categories_index":"Coding Language","tags_index":"Markdown","author_index":"JBR_Bunjie"},{"id":"7c38d39e738512a528b01881f848d2e4","title":"Game Dev Recordings","content":"STAGE 1: Project Setup\r\n\r\nCreate a 2D URP Project\r\nSet Preset for Textures\r\n\r\n16px * 16px grid\r\n\r\nApply preset manually to all existing pixel art\r\n\r\nSTAGE 2: Install Art Packs\r\n\r\nAnimated Pixel\r\nAdventurer by rvros (itch.io)\r\nFantasy\r\nKnight - Free Pixelart Animated Character by aamatniekss\r\n(itch.io)\r\nhttps://managore.itch.io/m5x7 Typeface / Font\r\nhttps://aamatniekss.itch.io/free-pixelart-tileset-cute-forest\r\nhttps://henrysoftware.itch.io/pixel-food\r\nKyrise's\r\nFree 16x16 RPG Icon Pack by Kyrise (itch.io)\r\nMonsters\r\nCreatures Fantasy by LuizMelo (itch.io)\r\nLegendary\r\nJRPG Battle Music Pack FREE by YouFulca (itch.io)\r\nRPG\r\nEssentials SFX - Free! by Leohpaz (itch.io)\r\n\r\nSTAGE 3: Install\r\nNecessary Unity Packages\r\n\r\nIntsall \"Cinemachine\"\r\nInstall \"Input System\"\r\nChange Project Setting: Turn off Reload Domain(faster loading\r\nof scenes in editor)(may cause some potential errors)\r\n\r\nSTAGE 4: Create Background\r\n\r\n创建背景: sprite renderer\r\n设定sorting layer\r\n\r\nLayer、Sorting Layer and Order in Layer\r\nSTAGE 5: Setup\r\nplayer(basic move: left and right)\r\n\r\nSpriteRenderer\r\nRigidbody2D: diff with \"rigidbody\"\r\nprefabs: make and change\r\nPlayer Input Component: with assert needed\r\nPlayerController script movement: start to write the control\r\nscript\r\n\r\n\r\nBroadcastmessage sends a message to an object AND all of\r\nits children\r\nSendMessageUpwards sends a message to all parent game\r\nobjects.\r\n\r\nReference:\r\nTUTORIAL LINKS:\r\nLearn\r\nHow to Make a 2D Platformer in Unity 2022 - FULL GAMEDEV COURSE! -\r\nYouTube\r\nDOWNLOAD LINKS:\r\n\r\n\r\n\r\n","slug":"Technical Artist/2D_Platform_Game_Dev/2DGAME","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Experience Recordings","author_index":"JBR_Bunjie"},{"id":"c501575a20c82b47e7d6e471fd5a77bc","title":"LUA急速入门","content":"安装\r\n# for ubuntu\napt install lua5.4\n\n# for windows\n# Go to github to install lua_for_windows\r\n代码执行\r\n交互式编程\r\nlua5.4已经支持了交互式编程，这样我们可以直接在命令行中输入程序语句并立即查看执行结果\r\n~#: lua\nLua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio\n&gt; print(&quot;Hello World&quot;)\nHello World\n&gt; \n-- 退出交互式编程状态：Ctrl+D(发送退出信号)、Ctrl+C(强制中断)、os.exit()\r\n脚本式编程\r\n传统的lua编写过程，和别的语言并无二致\r\n#!&#x2F;someDir&#x2F;bin&#x2F;lua --我们指定了 Lua 的解释器 &#x2F;someDir&#x2F;bin directory，加上 # 号标记后，解释器会忽略它。当我们为脚本添加可执行权限后，就可以通过输入 .&#x2F;hello.lua 来快速执行该脚本了\n\nprint(&quot;Hello World！&quot;)\nprint(&quot;www.runoob.com&quot;)\n\n-- 完成编写后，我们通过 lua hello.lua 的方式来执行该脚本\r\n变量：\r\n作用域\r\nLua中，所有创建的变量，默认为全局变量\r\n而对于删除一个全局变量，我们只需将变量赋为nil\r\n当然，你也可以用 local 来设置局部变量\r\n\r\n应尽可能多地使用局部变量：\r\n\r\n避免命名冲突与逻辑错误\r\n访问局部变量的速度比全局变量更快\r\n\r\n\r\n数据类型\r\nLua 是动态类型语言，变量不要类型定义,只需要为变量赋值。\r\n值可以存储在变量中，作为参数传递或结果返回。\r\n你总是可以通过 type(x) 来检查数据类型\r\ntype(nil) &#x3D;&#x3D; nil; -- false\ntype(nil) &#x3D;&#x3D; &quot;nil&quot; -- true\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n数据类型\r\n描述\r\n\r\n\r\n\r\n\r\nnil\r\n只有值nil属于该类，代表被删除、不存在等，是表示一个无效值（在条件表达式中相当于false）\r\n\r\n\r\nboolean\r\n包含两个值：false和true。\r\n\r\n\r\nnumber\r\n表示双精度类型的实浮点数\r\n\r\n\r\nstring\r\n字符串由一对双引号或单引号来表示\r\n\r\n\r\nfunction\r\n由 C 或\r\nLua 编写的函数\r\n\r\n\r\nuserdata\r\n表示任意存储在变量中的C数据结构**\r\n\r\n\r\nthread\r\n表示执行的独立线路，用于执行协同程序\r\n\r\n\r\ntable\r\n字典或者\"关联数组\"。其索引可以是数字、字符串或表类型。我们用\"构造表达式\"来创建表\r\n\r\n\r\n\r\ntable\r\n实例：\r\n-- table_test.lua 脚本文件\na &#x3D; &#123;&#125; -- 创建空表\na[&quot;key&quot;] &#x3D; &quot;value&quot; -- 添加键值对\nkey &#x3D; 10\na[key] &#x3D; 22\na[key] &#x3D; a[key] + 11\nfor k, v in pairs(a) do\n    print(k .. &quot; : &quot; .. v)\nend\n-- 结果：\n-- key : value\n-- 10 : 33\r\n索引：\r\n不同于其他语言的数组把 0 作为数组的初始索引，在 Lua\r\n里表的默认初始索引一般以 1 开始。\r\n-- table_test2.lua 脚本文件\nlocal tbl &#x3D; &#123;&quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;, &quot;grape&quot;&#125;\nfor key, val in pairs(tbl) do\n    print(&quot;Key&quot;, key)\nend\n\n-- Key    1\n-- Key    2\n-- ..\r\n无序：\r\ntab &#x3D; &#123;&quot;Hello&quot;,&quot;World&quot;,a&#x3D;1,b&#x3D;2,z&#x3D;3,x&#x3D;10,y&#x3D;20,&quot;Good&quot;,&quot;Bye&quot;&#125;\nfor k,v in pairs(tab) do\n    print(k..&quot;  &quot;..v)\nend\r\n如上代码输出结果存在一定规律，\"Hello\"、\"World\"、\"Good\"、\"Bye\"是表中的值，在存储时是按照顺序存储的，并且不同于其他脚本语言，Lua是从1开始排序的，因此，使用pairs遍历打印输出时，会先按照顺序输出表的值，然后再按照键值对的键的哈希值打印。\r\n1  Hello\n2  World\n3  Good\n4  Bye\ny  20\nx  10\nz  3\nb  2\na  1 \r\n构建数组\r\n我们可以使用整数索引来访问数组元素，如果指定的索引没有值则返回\r\nnil\r\narray &#x3D; &#123;&quot;Lua&quot;, &quot;Tutorial&quot;&#125;\n\nfor i&#x3D; 0, 2 do\n   print(array[i])\nend\n\n-- nil\n-- Lua\n-- Tutorial\r\n\"指针\"\r\n当我们为 table a 并设置元素，然后将 a 赋值给 b，则 a 与 b\r\n都会指向同一个内存。而当 a 设置为 nil 时，Lua只会回收变量 a 本身，而 b\r\n仍然能访问原 table 的元素。这种规则同样适用于传参数的情况\r\nmytable[&quot;wow&quot;] &#x3D; &quot;修改前&quot;\nprint(&quot;mytable 索引为 wow 的元素是 &quot;, mytable[&quot;wow&quot;])\n\n-- alternatetable和mytable的是指同一个 table\nalternatetable &#x3D; mytable\n\nprint(&quot;mytable 索引为 wow 的元素是 &quot;, alternatetable[&quot;wow&quot;])\nalternatetable[&quot;wow&quot;] &#x3D; &quot;修改后&quot;\nprint(&quot;mytable 索引为 wow 的元素是 &quot;, mytable[&quot;wow&quot;])\n\n-- 释放变量\nalternatetable &#x3D; nil\nprint(&quot;alternatetable 是 &quot;, alternatetable)\n\n-- mytable 仍然可以访问\nprint(&quot;mytable 索引为 wow 的元素是 &quot;, mytable[&quot;wow&quot;])\n\n-- mytable 索引为 wow 的元素是     修改前\n-- mytable 索引为 wow 的元素是     修改前\n-- mytable 索引为 wow 的元素是     修改后\n-- alternatetable 是     nil\n-- mytable 索引为 wow 的元素是     修改后\r\n插入删除\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n方法\r\n用途\r\n\r\n\r\n\r\n\r\ntable.insert (table, [pos,] value):\r\n在table的数组部分指定位置(pos)插入值为value的一个元素.\r\npos参数可选, 默认为数组部分末尾.\r\n\r\n\r\ntable.remove (table [, pos])\r\n返回table数组部分位于pos位置的元素. 其后的元素会被前移.\r\npos参数可选, 默认为table长度, 即从最后一个元素删起。\r\n\r\n\r\n\r\nSort\r\n\r\ntable.sort (list [, comp])\r\nSorts the list elements in a given order, in-place, from\r\nlist[1] to list[#list]. If comp\r\nis given, then it must be a function that receives two list elements and\r\nreturns true when the first element must come before the second in the\r\nfinal order, so that, after the sort, i &lt;= j implies\r\nnot comp(list[j],list[i]). If comp is not\r\ngiven, then the standard Lua operator &lt; is used\r\ninstead.\r\n\r\nfunction\r\n在 Lua 中，函数是被看作是\"第一类值（First-Class Value）\"\r\n值得注意的是，我们可以临时创建一个匿名函数来进行参数传递：\r\ntestFun(tab,\n    function(key, val)\n        return key - val;\n    end\n);\r\nthread\r\n\r\n在 Lua\r\n里，最主要的线程是协同程序（coroutine）。它跟线程（thread）差不多，拥有自己独立的栈、局部变量和指令指针，可以跟其他协同程序共享全局变量和其他大部分东西。\r\n线程跟协程的区别：线程可以同时多个运行，而协程任意时刻只能运行一个，并且处于运行状态的协程只有被挂起（suspend）时才会暂停。\r\n\r\n字符串\r\n定义\r\nLua 语言中字符串可以使用以下三种方式来表示：\r\n\r\n单引号间的一串字符。\r\n双引号间的一串字符。\r\n[[** 与 **]] 间的一串字符。\r\n\r\n特别的，我们可以通过嵌套来给字符串中加入引号：\r\na &#x3D; &quot;&#39;test&#39;&quot;\nprint(a) -- &#39;a&#39;\r\n字符串格式化\r\nLua 提供了 string.format()\r\n函数来生成具有特定格式的字符串，这个函数的格式很像 C 语言中的\r\nprintf()。同时由于格式字符串的存在,\r\n使得产生的长字符串可读性大大提高了。\r\n格式字符串可能包含以下的转义码:\r\n\r\n%c - 接受一个数字, 并将其转化为ASCII码表中对应的字符\r\n%d, %i - 接受一个数字并将其转化为有符号的整数格式\r\n%o - 接受一个数字并将其转化为八进制数格式\r\n%u - 接受一个数字并将其转化为无符号整数格式\r\n%x - 接受一个数字并将其转化为十六进制数格式, 使用小写字母\r\n%X - 接受一个数字并将其转化为十六进制数格式, 使用大写字母\r\n%e - 接受一个数字并将其转化为科学记数法格式, 使用小写字母e\r\n%E - 接受一个数字并将其转化为科学记数法格式, 使用大写字母E\r\n%f - 接受一个数字并将其转化为浮点数格式\r\n%g(%G) - 接受一个数字并将其转化为%e(%E,\r\n对应%G)及%f中较短的一种格式\r\n%q - 接受一个字符串并将其转化为可安全被Lua编译器读入的格式\r\n%s - 接受一个字符串并按照给定的参数格式化该字符串\r\n\r\n为进一步细化格式, 可以在%号后添加参数. 参数将以如下的顺序读入:\r\n\r\n\r\n符号: 一个+号表示其后的数字转义符将让正数显示正号.\r\n默认情况下只有负数显示符号.\r\n\r\n\r\n占位符: 一个0, 在后面指定了字串宽度时占位用.\r\n不填时的默认占位符是空格.\r\n\r\n\r\n对齐标识: 在指定了字串宽度时, 默认为右对齐,\r\n增加-号可以改为左对齐.\r\n\r\n\r\n宽度数值\r\n\r\n\r\n小数位数/字串裁切: 在宽度数值后增加的小数部分n,\r\n若后接f(浮点数转义符, 如%6.3f)则设定该浮点数的小数只保留n位,\r\n若后接s(字符串转义符, 如%5.3s)则设定该字符串只显示前n位.\r\n\r\n\r\n匹配\r\nLua 中的匹配模式直接用常规的字符串来描述。 它用于模式匹配函数\r\nstring.find, string.gmatch, string.gsub,\r\nstring.match。\r\n字符类指可以匹配一个特定字符集合内任何字符的模式项。比如，字符类\r\n%d 匹配任意数字。所以你可以使用模式串\r\n%d%d/%d%d/%d%d%d%d 搜索 dd/mm/yyyy\r\n格式的日期：\r\ns &#x3D; &quot;Deadline is 30&#x2F;05&#x2F;1999, firm&quot;\ndate &#x3D; &quot;%d%d&#x2F;%d%d&#x2F;%d%d%d%d&quot;\nprint(string.sub(s, string.find(s, date)))    --&gt; 30&#x2F;05&#x2F;1999\r\n赋值语句：\r\n-- Lua 可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量\na, b &#x3D; 10, 2*x           -- a&#x3D;10; b&#x3D;2*x\n\n-- 遇到赋值语句Lua会先计算右边所有的值然后再执行赋值操作，所以我们可以这样进行交换变量的值：\nx, y &#x3D; y, x              -- swap &#39;x&#39; for &#39;y&#39;\n\n-- 当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：\na. 变量个数 &gt; 值的个数      -- 按变量个数补足nil\nb. 变量个数 &lt; 值的个数      -- 多余的值会被忽略\n--&gt; 常见的错误情况:\na, b, c &#x3D; 0\nprint(a,b,c)             --&gt; 0   nil   nil\r\n循环\r\n相对于其它语言来说，Lua的循环结构是特殊而合理的：\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n方法名称\r\n描述\r\n\r\n\r\n\r\n\r\nwhile\r\n循环\r\n在条件为 true\r\n时，让程序重复地执行某些语句。执行语句前会先检查条件是否为 true。\r\n\r\n\r\nfor\r\n循环\r\n重复执行指定语句，重复次数可在 for 语句中控制。\r\n\r\n\r\nrepeat...until\r\n重复执行循环，直到 指定的条件为真时为止\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n控制语句\r\n描述\r\n\r\n\r\n\r\n\r\nbreak\r\n语句\r\n退出当前循环或语句，并开始脚本执行紧接着的语句。\r\n\r\n\r\ngoto 语句\r\n将程序的控制点转移到一个标签处。\r\n\r\n\r\n\r\n值得注意的是，lua中并不包含 continue 控制语句，要想实现\r\ncontinue 的功能，我们可以利用 goto 语句：\r\nfor i&#x3D;1, 10 do\n\tif i % 2 &#x3D;&#x3D; 0 then goto continue end\n    print(i)\n    ::continue::\nend\r\n\r\nloops\r\n- Why does Lua have no \"continue\" statement? - Stack Overflow\r\n\r\n流程控制\r\n我们利用 if...elseif...else 语句来完成流程控制\r\nif( 布尔表达式 1) then\n   --[ 在布尔表达式 1 为 true 时执行该语句块 --]\nelseif( 布尔表达式 2) then\n   --[ 在布尔表达式 2 为 true 时执行该语句块 --]\nelse \n   --[ 如果以上布尔表达式都不为 true 则执行该语句块 --]\nend\r\n函数\r\n\r\n在Lua中，函数是对语句和表达式进行抽象的主要方法。\r\n\r\nLua 函数主要有两种用途：\r\n\r\n1.完成指定的任务，这种情况下函数作为调用语句使用；\r\n2.计算并返回值，这种情况下函数作为赋值语句的表达式使用。\r\n\r\n函数定义\r\nLua 编程语言函数定义格式如下：\r\noptional_function_scope function function_name( argument1, argument2, argument3..., argumentn)\n    function_body\n    return result_params_comma_separated\nend\r\n\r\noptional_function_scope:\r\n该参数是可选的指定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字\r\nlocal。\r\nfunction_name: 指定函数名称。\r\nargument1, argument2, argument3..., argumentn:\r\n函数参数，多个参数以逗号隔开，函数也可以不带参数。\r\nfunction_body:\r\n函数体，函数中需要执行的代码语句块。\r\nresult_params_comma_separated:\r\n函数返回值，Lua语言函数可以返回多个值，每个值以逗号隔开。\r\n\r\n\"重载\"\r\n关于函数的\"重载\"能力：Lua能自动去适应传入的参数，如果传入的参数个数多于定义的个数，则会自动忽略后面多于的参数，如果传入的参数个数少于定义的个数，则会将不足的参数用nil补齐。如：\r\nfunction Add(a,b,c)\n     if c &#x3D;&#x3D; nil then\n         return a + b\n     else\n         return a + b + c\n     end\nend\r\n可变参数：\r\n\r\nLua 函数可以接受可变数目的参数，和 C\r\n语言类似，在函数参数列表中使用三点 ...\r\n表示函数有可变的参数。\r\n\r\nfunction average(...)\n   result &#x3D; 0\n   local arg&#x3D;&#123;...&#125;    --&gt; arg 为一个表，局部变量\n   for i,v in ipairs(arg) do\n      result &#x3D; result + v\n   end\n   print(&quot;总共传入 &quot; .. #arg .. &quot; 个数&quot;)\n   return result&#x2F;#arg\nend\n\nprint(&quot;平均值为&quot;,average(10,5,3,4,5,6))\r\n我们常将可变参数通过 &#123;...&#125;\r\n来组合为table，此时，我们可以通过select方法来访问可变参数的信息：\r\n\r\nselect('#', …) 返回可变参数的长度。\r\nselect(n, …) 用于返回从起点 n\r\n开始到结束位置的所有参数列表。\r\n\r\n请注意，select方法中的参数并非是table，这当然意味着select只适用于可变参数，不适合table\r\n\r\nselect (index, ···)\r\nIf index is a number, returns all arguments after argument number\r\nindex; a negative number indexes from the end (-1 is the last argument).\r\nOtherwise, index must be the string \"#\", and select returns the total\r\nnumber of extra arguments it received.\r\n\r\n运算符\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n操作符\r\n描述\r\n实例\r\n\r\n\r\n\r\n\r\n^\r\n乘幂\r\n10^2 输出结果 100\r\n\r\n\r\n//\r\n整除(&gt;=lua5.3)\r\n5//2 输出结果 2\r\n\r\n\r\n~=\r\n不等于\r\n(1 ~= 2) 为 true。\r\n\r\n\r\nand\r\n逻辑与\r\n(true and false) 为 false。\r\n\r\n\r\nor\r\n逻辑或\r\n(false or false) 为 true。\r\n\r\n\r\nnot\r\n逻辑非\r\nnot(true and false) 为 true。\r\n\r\n\r\n.\r\n连接两个字符串\r\na..b，若a为 \"Hello \" ，b为 \"World\",\r\n输出结果为 \"Hello World\"\r\n\r\n\r\n#\r\n一元运算符，返回字符串或表的长度。\r\n#\"Hello\" 返回 5\r\n\r\n\r\n\r\n特别的，当对\r\ntable 使用 # 运算时会遇到的问题\r\n&gt; a &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, nil, &quot;3&quot;&#125;\n&gt; #a\n4\n&gt; b &#x3D; &#123;&quot;1&quot;, &quot;2&quot;,&quot;3&quot;, nil&#125;\n&gt; #b\n3\r\n其获取长度时，依靠的其实是最大索引值：\r\n在获取表的长度时，根据的是表的最大索引的值:\r\ntab1 &#x3D; &#123;&quot;1&quot;,&quot;2&quot;&#125;\nprint(&quot;tab1长度&quot;..#tab1)\n\ntab2 &#x3D; &#123;key1&#x3D;&quot;1&quot;,&quot;2&quot;&#125;\nprint(&quot;tab2长度&quot;..#tab2)\n\ntab3 &#x3D; &#123;&#125;\ntab3[1]&#x3D;&quot;1&quot;\ntab3[2]&#x3D;&quot;2&quot;\ntab3[4]&#x3D;&quot;4&quot;\nprint(&quot;tab3长度&quot;..#tab3)\n\n-- tab1长度2\n-- tab2长度1\n-- tab3长度4\r\n而当下标越位超过 1 时：\r\n下标越过 1 位以上，长度还是为 2：\r\ntab3&#x3D;&#123;&#125;\ntab3[1]&#x3D;&quot;1&quot;\ntab3[2]&#x3D;&quot;2&quot;\ntab3[5]&#x3D;&quot;5&quot;\nprint(&quot;tab3的长度&quot;,#tab3)\n\n-- tab3的长度    2\r\n\r\n当我们获取 table 的长度的时候无论是使用 # 还是\r\ntable.getn\r\n其都会在索引中断的地方停止计数，而导致无法正确取得 table 的长度。\r\n可以使用以下方法来代替：\r\n&gt;function table_leng(t)\n local leng&#x3D;0\n for k, v in pairs(t) do\n   leng&#x3D;leng+1\n end\n return leng;\n&gt;end\r\n\r\n实现三目运算\r\n使用 Lua 的逻辑运算符实现就需要一些小技巧，写法如下（具体可查看Lua\r\n中的三目运算符）\r\n(condition and &#123;result1&#125; or &#123;result2&#125;)[1]\r\n例：\r\nlocal isAppel &#x3D; false\nprint(isAppel and &quot;苹果&quot; or &quot;梨&quot;)\r\n原理：\r\n\r\n\r\n(A and B), 若 A 为 false 返回 A(返回false) ;\r\n(A or B), 若 A 为 false 返回 B ;\r\n除 nil 外其他数据类型被当做 true\r\n\r\n\r\n元表\r\nLua中我们使用元表来增强Table的表现：通过为table赋予元表，我们可以改变对table进行操作时的默认行为，以达到更多的效果。\r\n当我们为一个 table 指定好对应的 metatable\r\n后，我们就可以为元表增添即时字段来修改上层 table 行为了\r\n为指定的表设定元表\r\n两个主要方法：\r\n\r\nsetmetatable(table, metatable): 对指定 table\r\n设置元表(metatable)，如果元表(metatable)中存在 __metatable\r\n键值，setmetatable 会失败。\r\ngetmetatable(table):\r\n返回对象的元表(metatable)。\r\n\r\n为元表增添元方法\r\n仅列出部分主要方法\r\n__index 元方法\r\n生效情况：当你通过键来访问 table 的时候，如果这个键没有值，那么 Lua\r\n就会寻找该 table 的 metatable 中的__index 键。当 __index生效时：\r\n__index包含表格\r\n若__index包含一个表格，Lua 会在表格中查找相应的键。\r\nother &#x3D; &#123; foo &#x3D; 3 &#125;\nt &#x3D; setmetatable(&#123;&#125;, &#123; __index &#x3D; other &#125;)\nprint(t.foo) -- 3\nprint(t.bar) -- nil\r\n若__index包含函数\r\n若__index包含一个函数的话，Lua就会调用那个函数，table和键会作为参数传递给函数。\r\nmytable &#x3D; setmetatable(&#123;key1 &#x3D; &quot;value1&quot;&#125;, &#123;\n  __index &#x3D; function(mytable, key)\n    print(mytable, key)\n  end\n&#125;)\nprint(mytable.key1, mytable.key2)\r\n\r\n总结\r\nLua 查找一个表元素时的规则，其实就是如下 3 个步骤:\r\n\r\n1.在表中查找，如果找到，返回该元素，找不到则继续\r\n2.判断该表是否有元表，如果没有元表，返回 nil，有元表则继续。\r\n3.判断元表有没有 __index 方法，如果 __index 方法为 nil，则返回\r\nnil；如果 __index 方法是一个表，则重复 1、2、3；如果 __index\r\n方法是一个函数，则返回该函数的返回值。\r\n\r\n该部分内容来自作者寰子：https://blog.csdn.net/xocoder/article/details/9028347\r\n\r\n__newindex 元方法\r\n生效情况：当你给表的一个缺少的索引赋值，解释器就会查找__newindex\r\n元方法。如果存在则调用该方法而不进行赋值操作。\r\n\r\n__newindex 元方法用来对表更新，__index则用来对表访问 。\r\n\r\n\nmymetatable &#x3D; &#123;&#125;\nmytable &#x3D; setmetatable(&#123;key1 &#x3D; &quot;value1&quot;&#125;, &#123; __newindex &#x3D; mymetatable &#125;)\n\nprint(mytable.key1)\n\nmytable.newkey &#x3D; &quot;新值2&quot;\nprint(mytable.newkey,mymetatable.newkey)\n\nmytable.key1 &#x3D; &quot;新值1&quot;\nprint(mytable.key1,mymetatable.key1)\r\n重载操作符：__add、__sub等元方法：\r\n\r\n以下实例演示了两表相加操作：\r\n实例\r\n&gt;-- 自定义计算表中最大键值函数 table_maxn，即计算表的元素个数\n&gt;function table_maxn(t)\n   local mn &#x3D; 0\n   for k, v in pairs(t) do\n       if mn &lt; k then\n           mn &#x3D; k\n       end\n   end\n   return mn\n&gt;end\n\n&gt;-- 两表相加操作\n&gt;mytable &#x3D; setmetatable(&#123; 1, 2, 3 &#125;, &#123;\n __add &#x3D; function(mytable, newtable)\n   for i &#x3D; 1, table_maxn(newtable) do\n     table.insert(mytable, table_maxn(mytable)+1,newtable[i])\n   end\n   return mytable\n end\n&gt;&#125;)\n\n&gt;secondtable &#x3D; &#123;4,5,6&#125;\n\n&gt;mytable &#x3D; mytable + secondtable\n&gt;for k,v in ipairs(mytable) do\nprint(k,v)\n&gt;end\n\n&gt;-- 以上实例执行输出结果为：\n&gt;-- 1    1\n&gt;-- 2    2\n&gt;-- 3    3\n&gt;-- 4    4\n&gt;-- 5    5\n&gt;-- 6    6\r\n\r\n全部的操作符元方法如下：\r\n\r\n\r\n\r\n模式\r\n描述\r\n\r\n\r\n\r\n\r\n__add\r\n对应的运算符 '+'.\r\n\r\n\r\n__sub\r\n对应的运算符 '-'.\r\n\r\n\r\n__mul\r\n对应的运算符 '*'.\r\n\r\n\r\n__div\r\n对应的运算符 '/'.\r\n\r\n\r\n__mod\r\n对应的运算符 '%'.\r\n\r\n\r\n__unm\r\n对应的运算符 '-'.\r\n\r\n\r\n__concat\r\n对应的运算符 '..'.\r\n\r\n\r\n__eq\r\n对应的运算符 '=='.\r\n\r\n\r\n__lt\r\n对应的运算符 '&lt;'.\r\n\r\n\r\n__le\r\n对应的运算符 '&lt;='.\r\n\r\n\r\n\r\n__call 元方法\r\n\r\n__call: The call operation\r\nfunc(args).\r\nThis event happens when Lua tries to call a non-function\r\nvalue (that is, func is not a function). The\r\nmetamethod is looked up in func. If present, the metamethod\r\nis called with func as its first argument, followed by the\r\narguments of the original call (args). All results of the\r\ncall are the results of the operation. This is the only metamethod that\r\nallows multiple results.\r\n\r\n-- 自定义计算表中最大键值函数 table_maxn，即计算表的元素个数\nfunction table_maxn(t)\n    local mn &#x3D; 0\n    for k, v in pairs(t) do\n        if mn &lt; k then\n            mn &#x3D; k\n        end\n    end\n    return mn\nend\n\n-- 定义元方法__call\nmytable &#x3D; setmetatable(&#123;10&#125;, &#123;\n  __call &#x3D; function(mytable, newtable)\n        sum &#x3D; 0\n        for i &#x3D; 1, table_maxn(mytable) do\n                sum &#x3D; sum + mytable[i]\n        end\n    for i &#x3D; 1, table_maxn(newtable) do\n                sum &#x3D; sum + newtable[i]\n        end\n        return sum\n  end\n&#125;)\nnewtable &#x3D; &#123;10,20,30&#125;\nprint(mytable(newtable)) -- 70\r\n__tostring 元方法\r\n__tostring 元方法用于修改表的输出行为。\r\nmytable &#x3D; setmetatable(&#123; 10, 20, 30 &#125;, &#123;\n    __tostring &#x3D; function(mytable)\n        sum &#x3D; 0\n        for k, v in pairs(mytable) do\n            \tsum &#x3D; sum + v\n            end\n        return &quot;表所有元素的和为 &quot; .. sum\n    end\n&#125;)\nprint(mytable) -- 表所有元素的和为 60\r\n绕开元方法\r\n以__newindex为例：设置了元方法 __newindex\r\n后，在对新索引键(newkey)赋值时，会调用元方法，而自身不再主动进行赋值。而对于已存在的索引键(oldkey)，则会进行赋值，而不调用元方法\r\nnewindex。为了保证我们仍然能实现赋值语句本身的功能，我们在__newindex调用的方法中，会需要绕开该元方法本身直接进行赋值，这时我们需要用到\r\nrawser、rawget\r\n两个函数，它们能在完成本身功能时避免激活元方法\r\n\r\nrawset (table, index, value)\r\nSets the real value of table[index] to\r\nvalue, without using the __newindex metavalue.\r\ntable must be a table, index any value\r\ndifferent from nil and NaN, and value any\r\nLua value.\r\n\r\n\r\nrawget (table, index)\r\nGets the real value of table[index], without using the\r\n__index metavalue. table must be a table;\r\nindex may be any value.\r\n\r\nmytable &#x3D; setmetatable(&#123;key1 &#x3D; &quot;value1&quot;&#125;, &#123;\n    __newindex &#x3D; function(mytable, key, value)\n        rawset(mytable, key, &quot;\\&quot;&quot;..value..&quot;\\&quot;&quot;)\n    end\n&#125;)\n\nmytable.key1 &#x3D; &quot;new value&quot;\nmytable.key2 &#x3D; 4\n\nprint(mytable.key1, mytable.key2) -- new value    &quot;4&quot;\r\n协程 - coroutine：\r\nLua\r\n协同程序(coroutine)与线程比较类似：拥有独立的堆栈，独立的局部变量，独立的指令指针，同时又与其它协同程序共享全局变量和其它大部分东西。\r\n线程和协同程序区别\r\n线程与协同程序的主要区别在于：一个具有多个线程的程序可以同时运行几个线程，而在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确的被要求挂起的时候才会被挂起。\r\n基本语法\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n方法\r\n描述\r\n\r\n\r\n\r\n\r\ncoroutine.create()\r\n创建 coroutine，返回 coroutine\r\n(thread)， 参数是一个函数当和 resume\r\n配合使用的时候就唤醒函数调用\r\n\r\n\r\ncoroutine.resume()\r\n重启 coroutine，和 create 配合使用\r\n\r\n\r\ncoroutine.yield()\r\n挂起 coroutine，将 coroutine\r\n设置为挂起状态这个和 resume 配合使用能有很多有用的效果\r\n\r\n\r\ncoroutine.status()\r\n查看 coroutine 的状态※: coroutine\r\n的状态共三种：dead，suspended，running\r\n\r\n\r\ncoroutine.wrap（）\r\n创建 coroutine\r\n并返回一个函数，如调用该函数就进入 coroutine和\r\ncreate 功能重复\r\n\r\n\r\ncoroutine.running()\r\n返回正在跑的 coroutine，一个 coroutine\r\n就是一个线程当使用running的时候，就是返回一个 corouting\r\n的线程号\r\n\r\n\r\n\r\n-- coroutine_test.lua 文件\nco &#x3D; coroutine.create(\n    function(i)\n        print(i);\n    end) \n-- 刚创建时并未执行\n\ncoroutine.resume(co, 1)   -- 1\nprint(coroutine.status(co))  -- dead -- 执行完毕\n\nprint(&quot;----------&quot;)  -- ----------\n \nco &#x3D; coroutine.wrap(\n    function(i)\n        print(i);\n    end\n)\n \nco(10)  -- 10 -- warp创建和create创建的调用方式是不一样的，因为create返回的是thread对象，而wrap返回的是function\nprint(&quot;----------&quot;)  -- ----------\n \nco2 &#x3D; coroutine.create(function()\n    for i&#x3D;1,10 do\n        print(i)\n        if i &#x3D;&#x3D; 3 then\n            print(coroutine.status(co2))  -- running\n            print(coroutine.running())  -- thread:XXXXXX\n        end\n        coroutine.yield()\n    end\nend)\n\ncoroutine.resume(co2) --1\ncoroutine.resume(co2) --2\ncoroutine.resume(co2) --3\n \nprint(coroutine.status(co2))   -- suspended\nprint(coroutine.running())  -- thread: 0x7fb801c04c88    true\r\n\r\n\r\ncoroutine.creat方法只要建立了一个协程\r\n，那么这个协程的状态默认就是suspend。使用resume方法启动后，会变成running状态；遇到yield时将状态设为suspend；如果遇到return，那么将协程的状态改为dead。\r\ncoroutine.resume方法需要特别注意的一点是，这个方法只要调用就会返回一个boolean值。\r\ncoroutine.resume方法如果调用成功，那么返回true；如果有yield方法，同时返回yield括号里的参数；如果没有yield，那么继续运行直到协程结束；直到遇到return，将协程的状态改为dead，并同时返回return的值。\r\ncoroutine.resume方法如果调用失败(调用状态为dead的协程会导致失败)，那么返回false，并且带上一句\"cannot\r\nresume dead coroutine\"\r\nwrap不会返回boolean值，但是当coroutine执行完dead后，如继续执行该coroutine则会导致程序报错。\r\ncoroutine.yield 除了挂起协程外，还可以同时返回数据给 resume\r\n,并且还可以同时定义下一次唤醒时需要传递的参数。\r\n\r\ncor &#x3D; coroutine.create(function(a)\n    print(&quot;参数 a 值为：&quot;, a);\n    local b, c &#x3D; coroutine.yield(a + 1); --这里表示挂起协程，并且将a+1的值进行返回，并且指定下一次唤醒需要 b,c 两个参数。\n    print(&quot;参数 b, c 值分别为：&quot;, b, c);\n    return b * c; --协程结束，并且返回 b*c 的值。\nend);\n\nprint(&quot;第一次调用：&quot;, coroutine.resume(cor, 1));\nprint(&quot;第二次调用：&quot;, coroutine.resume(cor, 2, 2));\nprint(&quot;第三次调用：&quot;, coroutine.resume(cor));\n\n--[[\n参数 a 值为：    1\n第一次调用：    true    2\n参数 b, c 值分别为：    2    2\n第二次调用：    true    4\n第三次调用：    false    cannot resume dead coroutine ]]\r\ncor &#x3D; coroutine.wrap(function(a)\n    print(&quot;参数 a 值为：&quot;, a);\n    local b, c &#x3D; coroutine.yield(a + 1); --这里表示挂起协程，并且将a+1的值进行返回，并且指定下一次唤醒需要 b,c 两个参数。\n    print(&quot;参数 b, c 值分别为：&quot;, b, c);\n    return b * c; --协程结束，并且返回 b*c 的值。\nend);\n\nprint(&quot;第一次调用：&quot;, cor(1));\nprint(&quot;第二次调用：&quot;, cor(2, 2));\nprint(&quot;第三次调用：&quot;, cor());\n\n--[[\n参数 a 值为：   1\n第一次调用：    2\n参数 b, c 值分别为：    2       2\n第二次调用：    4\nlua: test.lua:18: cannot resume dead coroutine\nstack traceback:\n        [C]: in function &#39;cor&#39;\n        test.lua:18: in main chunk\n        [C]: in ?  ]]\r\n\r\n迭代器\r\n迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。\r\nLua 的迭代器（迭代函数）包含以下两种类型：\r\n\r\n无状态的迭代器\r\n多状态的迭代器\r\n\r\n泛型 for 调用迭代器\r\n泛型 for 的执行过程：\r\n\r\n首先，初始化，计算 in 后面表达式的值，表达式应该返回泛型 for\r\n需要的三个值：迭代函数、状态常量、控制变量；与多值赋值一样，如果表达式返回的结果个数不足三个会自动用\r\nnil 补足，多出部分会被忽略。\r\n第二，将状态常量和控制变量作为参数调用迭代函数（注意：对于 for\r\n结构来说，状态常量没有用处，仅仅在初始化时获取他的值并传递给迭代函数）。\r\n第三，将迭代函数返回的值赋给变量列表。\r\n第四，如果返回的第一个值为nil循环结束，否则执行循环体。\r\n第五，回到第二步再次调用迭代函数\r\n\r\n如：\r\narray &#x3D; &#123;&quot;Google&quot;, &quot;Runoob&quot;&#125;\n\nfor key,value in ipairs(array)\ndo\n   print(key, value)\nend\r\n无状态的迭代器\r\n类似pairs, ipairs的，没有更多信息(状态)的迭代器\r\nfunction square(iteratorMaxCount, currentNumber)\n   if currentNumber &lt; iteratorMaxCount\n   then\n      currentNumber &#x3D; currentNumber+1\n   return currentNumber, currentNumber*currentNumber\n   end\nend\n\nfor i,n in square(3,0) do\n   print(i,n)\nend\r\n多状态的迭代器\r\n为了保存更多信息，使用闭包来构造迭代器\r\narray &#x3D; &#123;&quot;Google&quot;, &quot;Runoob&quot;&#125;\n\nfunction elementIterator (collection)\n   local index &#x3D; 0\n   local count &#x3D; #collection\n   -- 闭包函数\n   return function ()\n      index &#x3D; index + 1\n      if index &lt;&#x3D; count\n      then\n         --  返回迭代器的当前元素\n         return collection[index]\n      end\n   end\nend\n\nfor element in elementIterator(array)\ndo\n   print(element)\nend\r\n模块化\r\n从 Lua 5.1 开始，Lua\r\n加入了标准的模块管理机制，可以把一些公用的代码放在一个文件里，以 API\r\n接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度。\r\n-- 文件名为 Test1.lua\n-- 定义一个名为 module 的模块(Table)\nmodule &#x3D; &#123;&#125;\n \n-- 定义一个常量\nmodule.constant &#x3D; &quot;这是一个常量&quot;\n \n-- 定义一个函数\nfunction module.func1()\n    io.write(&quot;这是一个公有函数！\\n&quot;)\nend\n \nlocal function func2()\n    print(&quot;这是一个私有函数！&quot;)\nend\n \nfunction module.func3()\n    func2()\nend\n \nreturn module\r\n由上可知，模块的结构就是一个 table\r\n的结构，因此可以像操作调用 table\r\n里的元素那样来操作调用模块里的常量或函数。其中：\r\n\r\nfunc1 声明为程序块的全局变量，我们以这样的方式实现了\r\npublic 属性，可以在引入后随意调用.\r\nfunc2 则声明为程序块的局部变量，即表示一个 private\r\n函数，因此是不能从外部访问模块里的这个私有函数，必须通过模块里的函数来调用.\r\n\r\n面向对象\r\n利用function实现面向对象\r\n闭包\r\n一句话说就是，在函数中引用外部函数来进行嵌套的函数。\r\ndef outer(x):\n    def inner(y):\n        return x + y\n    return inner\n\nprint(outer(6)(5))\n\n&gt;&gt;&gt; 11\r\n如代码所示，在outer函数内，又定义了一个inner函数，并且inner函数又引用了外部函数outer的变量x，这就是一个闭包了。在输出时，outer(6)(5),第一个括号传进去的值返回inner函数，其实就是返回6\r\n+ y，所以再传第二个参数进去，就可以得到返回值，6 + 5。\r\n实现\r\n-- 元类\nRectangle &#x3D; &#123;area &#x3D; 0, length &#x3D; 0, breadth &#x3D; 0&#125;\n\n-- 派生类的方法 new\nfunction Rectangle:new (o,length,breadth)\n  o &#x3D; o or &#123;&#125;\n  setmetatable(o, self)\n  self.__index &#x3D; self  -- 子类没设置area这三个属性时，会导回Rectangle\n  self.length &#x3D; length or 0\n  self.breadth &#x3D; breadth or 0\n  self.area &#x3D; length*breadth;\n  return o\nend\n\n-- 派生类的方法 printArea\nfunction Rectangle:printArea ()\n  print(&quot;矩形面积为 &quot;,self.area)\nend\r\n\r\nLua中的self - 知乎\r\n(zhihu.com)\r\n\r\n利用table实现\r\n\r\n封装：指能够把一个实体的信息、功能、响应都装入一个单独的对象中的特性\r\n\r\ntable已经完备\r\n\r\n继承：继承的方法允许在不改动原程序的基础上对其进行扩充，这样使得原功能得以保存，而新功能也得以扩展。这有利于减少重复编码，提高软件的开发效率。\r\n\r\n我们需要自己实现clone/copy函数\r\n\r\n多态：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。\r\n\r\nLua function已完备\r\n\r\n\r\n-- clone function\nfunction clone(tb)\n    local ins &#x3D; &#123;&#125;\n    for key, var in pairs(tb) do\n        ins[key] &#x3D; var\n    end\n    return ins\nend\n-- copy function\nfunction copy(dist, tb)\n    for key, var in pairs(tb) do\n        dist[key] &#x3D; var\n    end\nend\n\n-- define original table\ntable &#x3D; &#123;&#125;\ntable.funHello &#x3D; function(tb)\n    print(&quot;Hello &quot;..tb.name)\nend\ntable.new &#x3D; function(name)\n    local self &#x3D; clone(table);\n    self.name &#x3D; name\n    return self\nend\n\n-- 实例化\nlocal tb1 &#x3D; table.new(&quot;World&quot;)\ntb1:funHello(tb1)  -- 事实上，常规地使用 . 或者 : 来引用funHello是几乎完全一样的，但是为了提升可读性，我们需要做出区分\n\n-- 继承\ntb2 &#x3D; &#123;&#125;\ntb2.new &#x3D; function(name)\n    local self &#x3D; table.new(name)\n    copy(self, tb2)\n    return self\nend\n\ntb2.tb2Hello &#x3D; function()\n    print(&quot;tb2 Hello&quot;)\nend\ntb2.funHello &#x3D; function()\n    print(&quot;tb2 fun Hello&quot;)\nend\n\nlocal m &#x3D; tb2.new(&quot;Lili&quot;)\nm:funHello()\nm:tb2Hello()\r\n错误处理\r\n程序运行中错误处理是必要的，在我们进行文件操作，数据转移及web service\r\n调用过程中都会出现不可预期的错误。如果不注重错误信息的处理，就会造成信息泄露，程序无法运行等情况。\r\n这里我们主要着眼运行时错误。\r\nRaise Error\r\nLua主要使用两个函数：assert 和 error\r\n来错误。\r\n\r\nassert (v [, message])\r\n\r\nRaises an error if the value of its argument v is false\r\n(i.e., nil or false);\r\n\r\nIn case of error, message is the error object; when\r\nabsent, it defaults to \"assertion failed!\"\r\n\r\notherwise, returns all its arguments.\r\n\r\n\r\nassert首先检查第一个参数，若没问题，assert不做任何事情；否则，assert以第二个参数作为错误信息抛出。\r\n\r\n\r\n\r\nerror (message [, level])\r\nRaises an error (see §2.3) with\r\nmessage as the error object. This function never\r\nreturns.\r\nUsually, error adds some information about the error\r\nposition at the beginning of the message, if the message is a string.\r\nThe level argument specifies how to get the error position.\r\nWith level 1 (the default), the error position is where the\r\nerror function was called. Level 2 points the error to\r\nwhere the function that called error was called; and so on.\r\nPassing a level 0 avoids the addition of error position information to\r\nthe message.\r\n\r\n功能：终止正在执行的函数，并返回message的内容作为错误信息(error函数永远都不会返回)\r\n通常情况下，error会附加一些错误位置的信息到message头部。\r\nLevel参数指示获得错误的位置:\r\n\r\nLevel=1[默认]：为调用error位置(文件+行号)\r\nLevel=2：指出哪个调用error的函数的函数\r\nLevel=0:不添加错误位置信息\r\n\r\n\r\n\r\nlocal function add(a,b)\n   assert(type(a) &#x3D;&#x3D; &quot;number&quot;, &quot;a 不是一个数字&quot;)\n   assert(type(b) &#x3D;&#x3D; &quot;number&quot;, &quot;b 不是一个数字&quot;)\n   return a+b\nend\nadd(10)\r\nProcess Error\r\npcall\r\npcall接收一个函数和要传递给后者的参数，并执行。最后根据执行结果是否有错误返回true或者或false及errorinfo\r\n&gt; if pcall(function_name, ….) then\n-- 没有错误\nelse\n-- 存在错误\nend\n\n&gt; pcall(function(i) print(i) end, 33)\n33\ntrue\n\n&gt; pcall(function(i) print(i) error(&#39;error..&#39;) end, 33)\n33\nfalse   stdin:1: error..\r\npcall会以一种\"保护模式\"来调用第一个参数，因此pcall可以捕获函数执行中的任何错误。\r\n不过，通常在错误发生时，我们往往希望落得更多的调试信息，而不只是发生错误的位置。但pcall返回时，它已经销毁了调用桟的部分内容。为了获取更多信息，我们可以直接使用的办法：xpcall\r\nxpcall\r\n\r\nxpcall (f, msgh [, arg1, ···])\r\nThis function is similar to pcall,\r\nexcept that it sets a new message handler msgh.\r\n\r\nxpcall接收第二个参数——一个错误处理函数，当错误发生时，Lua会在调用桟展开（unwind）前调用错误处理函数，于是就可以在这个函数中使用\r\ndebug 库来获取关于错误的额外信息了。\r\ndebug库提供了两个通用的错误处理函数:\r\n\r\ndebug.debug：提供一个Lua提示符，让用户来检查错误的原因\r\ndebug.traceback：根据调用桟来构建一个扩展的错误消息\r\n\r\nfunction myfunction ()\n   n &#x3D; n&#x2F;nil\nend\n\nfunction myerrorhandler( err )\n   print( &quot;ERROR:&quot;, err )\nend\n\nstatus &#x3D; xpcall( myfunction, myerrorhandler )\nprint( status )\n\n-- ERROR:  test.lua:10: attempt to perform arithmetic on a nil value (global &#39;n&#39;)     \t\t -- from xpcall(..)\n-- false \t\t-- from print( status )\r\ndebug\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n方法\r\n用途\r\n\r\n\r\n\r\n\r\ntraceback ([thread,] [message [, level]])\r\n如果 message 存在且不是字符串或 nil，那么函数不做任何处理直接返回\r\nmessage。 否则，traceback将返回调用栈的栈回溯信息。\r\n字符串可选项 message 被添加在栈回溯信息的开头。 数字可选项\r\nlevel 指明从栈的哪一层开始回溯 （默认为 1 ，即调用 traceback\r\n的那里）。\r\n\r\n\r\ngetinfo ([thread,] f [, what]):\r\n返回关于一个函数信息的表。\r\n你可以直接提供该函数，也可以用一个数字 f\r\n表示该函数——它表示运行在指定线程的调用栈对应层次上的函数： 0\r\n层表示当前函数（getinfo 自身）； 1 层表示调用 getinfo 的函数\r\n（除非是尾调用，这种情况不计入栈）等等。 如果 f\r\n是一个比活动函数数量还大的数字， getinfo 返回 nil。\r\n\r\n\r\ngetupvalue (f, up)\r\n此函数返回函数 f 的第 up 个上值的名字和值。\r\n如果该函数没有那个上值，返回 nil 。以 '('\r\n（开括号）打头的变量名表示没有名字的变量 （去除了调试信息的代码块）\r\n\r\n\r\nsetupvalue (f, up, value):\r\n这个函数将 value 设为函数 f 的第 up 个上值。\r\n如果函数没有那个上值，返回 nil 否则，返回该上值的名字。\r\n\r\n\r\n\r\nfunction newCounter ()\n    local n &#x3D; 0\n    local k &#x3D; 0\n    return function ()\n        k &#x3D; n\n        n &#x3D; n + 1\n        return n\n    end\nend\n  \ncounter &#x3D; newCounter()\nprint(counter())\nprint(counter())\n\nlocal i &#x3D; 1\nrepeat\n    name, val &#x3D; debug.getupvalue(counter, i)\n    if name then\n        print (&quot;index&quot;, i, name, &quot;&#x3D;&quot;, val)\n        \n        if(name &#x3D;&#x3D; &quot;n&quot;) then\n            debug.setupvalue (counter,2,10)\n        end\n        i &#x3D; i + 1\n    end -- if\nuntil not name\n\nprint(counter())\r\n垃圾回收\r\n概述\r\nLua 采用了自动内存管理。\r\n这意味着你不用操心新创建的对象需要的内存如何分配出来，\r\n也不用考虑在对象不再被使用后怎样释放它们所占用的内存。\r\nLua\r\n运行了一个垃圾收集器来收集所有死对象\r\n（即在 Lua 中不可能再访问到的对象）来完成自动内存管理的工作。 Lua\r\n中所有用到的内存，如：字符串、表、用户数据、函数、线程、\r\n内部结构等，都服从自动管理。\r\nLua 实现了一个增量标记-扫描收集器。\r\n它使用这两个数字来控制垃圾收集循环：\r\n垃圾收集器间歇率和垃圾收集器步进倍率。\r\n这两个数字都使用百分数为单位(例如：值 100 在内部表示 1)：\r\n\r\n垃圾收集器间歇率控制着收集器需要在开启新的循环前要等待多久。\r\n增大这个值会减少收集器的积极性。 当这个值比 100\r\n小的时候，收集器在开启新的循环前不会有等待。 设置这个值为 200\r\n就会让收集器等到总内存使用量达到之前的两倍时才开始新的循环。\r\n垃圾收集器步进倍率控制着收集器运作速度相对于内存分配速度的倍率。增大这个值不仅会让收集器更加积极，还会增加每个增量步骤的长度。\r\n不要把这个值设得小于\r\n100，那样的话收集器就工作的太慢了以至于永远都干不完一个循环。默认值是\r\n200，这表示收集器以内存分配的\"两倍\"速工作。如果你把步进倍率设为一个非常大的数字(比你的程序可能用到的字节数还大\r\n10%)，收集器的行为就像一个 stop-the-world 收集器。接着你若把间歇率设为\r\n200，收集器的行为就和过去的 Lua 版本一样了：每次 Lua\r\n使用的内存翻倍时，就做一次完整的收集。\r\n\r\n运用\r\n我们可以通过函数collectgarbage ([opt [, arg]])来控制垃圾收集器：\r\n\r\ncollectgarbage(\"setpause\", 200)： 内存增大 2\r\n倍（200/100）时自动释放一次内存 （200 是默认值）。\r\ncollectgarbage(\"setstepmul\",\r\n200)：收集器单步收集的速度相对于内存分配速度的倍率，设置 200\r\n的倍率等于 2 倍（200/100）。（200 是默认值）\r\ncollectgarbage(\"collect\"):\r\n做一次完整的垃圾收集循环。通过参数 opt 它提供了一组不同的功能：\r\ncollectgarbage(\"count\"): 以 K 字节数为单位返回\r\nLua 使用的总内存数。 这个值有小数部分，所以只需要乘上 1024 就能得到 Lua\r\n使用的准确字节数（除非溢出）。\r\ncollectgarbage(\"restart\"):\r\n重启垃圾收集器的自动运行。\r\ncollectgarbage(\"setpause\"): 将 arg 设为收集器的\r\n间歇率。 返回 间歇率 的前一个值。\r\ncollectgarbage(\"setstepmul\"): 返回 步进倍率\r\n的前一个值。\r\ncollectgarbage(\"step\"): 单步运行垃圾收集器。\r\n步长\"大小\"由 arg 控制。 传入 0 时，收集器步进（不可分割的）一步。 传入非\r\n0 值， 收集器收集相当于 Lua 分配这些多（K 字节）内存的工作。\r\n如果收集器结束一个循环将返回 true 。\r\ncollectgarbage(\"stop\"): 停止垃圾收集器的运行。\r\n在调用重启前，收集器只会因显式的调用运行。\r\n\r\n实例\r\nmytable &#x3D; &#123;&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;&#125;\nprint(collectgarbage(&quot;count&quot;))\n\nmytable &#x3D; nil\n\nprint(collectgarbage(&quot;count&quot;))\nprint(collectgarbage(&quot;collect&quot;))\nprint(collectgarbage(&quot;count&quot;))\r\n执行以上程序，输出结果如下(注意内存使用的变化)：\r\n20.9560546875\n20.9853515625\n0\n19.4111328125\r\nMain Origin\r\n\r\nLua Official Site：The Programming\r\nLanguage Lua\r\nLua 教程 |\r\n菜鸟教程 (runoob.com)\r\n\r\n","slug":"Language Learning/LUA/急速入门","date":"2022-12-23T04:23:23.000Z","categories_index":"Coding Language","tags_index":"LUA,Coding Language","author_index":"JBR_Bunjie"},{"id":"f8c8a85b34fcac6d0fefec2d2d2d9cd5","title":"Merge Sort - 归并排序","content":"Merge Sort 归并排序\r\nReference：\r\n1.5 归并排序\r\n| 菜鸟教程 (runoob.com)\r\n算法步骤：\r\n\r\n概述：\r\n\r\n\r\n\r\n申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；\r\n设定两个指针，最初位置分别为两个已经排序序列的起始位置；\r\n比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；\r\n重复步骤 3 直到某一指针达到序列尾；\r\n将另一序列剩下的所有元素直接复制到合并序列尾。\r\n\r\n\r\n\r\n图示：\r\n\r\n1:\r\n\r\n\r\nimg\r\n\r\n\r\n\r\n2:\r\n\r\n\r\nimg\r\n\r\n\r\n\r\n实现-迭代法：\r\nfunction mergeSort(arr) &#123;  &#x2F;&#x2F; 采用自上而下的递归方法\n    var len &#x3D; arr.length;\n    if(len &lt; 2) &#123;\n        return arr;\n    &#125;\n    var middle &#x3D; Math.floor(len &#x2F; 2),\n        left &#x3D; arr.slice(0, middle),\n        right &#x3D; arr.slice(middle);\n    return merge(mergeSort(left), mergeSort(right));\n&#125;\n\nfunction merge(left, right)\n&#123;\n    var result &#x3D; [];\n\n    while (left.length &amp;&amp; right.length) &#123;\n        if (left[0] &lt;&#x3D; right[0]) &#123;\n            result.push(left.shift());\n        &#125; else &#123;\n            result.push(right.shift());\n        &#125;\n    &#125;\n\n    while (left.length)\n        result.push(left.shift());\n\n    while (right.length)\n        result.push(right.shift());\n\n    return result;\n&#125;\r\n实现-递归法：\r\nimport java.util.Arrays;\n\n&#x2F;**\n * Created by chengxiao on 2016&#x2F;12&#x2F;8.\n *&#x2F;\npublic class MergeSort &#123;\n    public static void main(String []args)&#123;\n        int []arr &#x3D; &#123;9,8,7,6,5,4,3,2,1&#125;;\n        sort(arr);\n        System.out.println(Arrays.toString(arr));\n    &#125;\n    public static void sort(int []arr)&#123;\n        int []temp &#x3D; new int[arr.length];&#x2F;&#x2F;在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间\n        sort(arr,0,arr.length-1,temp);\n    &#125;\n    private static void sort(int[] arr,int left,int right,int []temp)&#123;\n        if(left&lt;right)&#123;\n            int mid &#x3D; (left+right)&#x2F;2;\n            sort(arr,left,mid,temp);&#x2F;&#x2F;左边归并排序，使得左子序列有序\n            sort(arr,mid+1,right,temp);&#x2F;&#x2F;右边归并排序，使得右子序列有序\n            merge(arr,left,mid,right,temp);&#x2F;&#x2F;将两个有序子数组合并操作\n        &#125;\n    &#125;\n    private static void merge(int[] arr,int left,int mid,int right,int[] temp)&#123;\n        int i &#x3D; left;&#x2F;&#x2F;左序列指针\n        int j &#x3D; mid+1;&#x2F;&#x2F;右序列指针\n        int t &#x3D; 0;&#x2F;&#x2F;临时数组指针\n        while (i&lt;&#x3D;mid &amp;&amp; j&lt;&#x3D;right)&#123;\n            if(arr[i]&lt;&#x3D;arr[j])&#123;\n                temp[t++] &#x3D; arr[i++];\n            &#125;else &#123;\n                temp[t++] &#x3D; arr[j++];\n            &#125;\n        &#125;\n        while(i&lt;&#x3D;mid)&#123;&#x2F;&#x2F;将左边剩余元素填充进temp中\n            temp[t++] &#x3D; arr[i++];\n        &#125;\n        while(j&lt;&#x3D;right)&#123;&#x2F;&#x2F;将右序列剩余元素填充进temp中\n            temp[t++] &#x3D; arr[j++];\n        &#125;\n        t &#x3D; 0;\n        &#x2F;&#x2F;将temp中的元素全部拷贝到原数组中\n        while(left &lt;&#x3D; right)&#123;\n            arr[left++] &#x3D; temp[t++];\n        &#125;\n    &#125;\n&#125;\r\n用例1：\r\n计算二分图（bipartite\r\ngraph）交叉点（crossing）的数量_imred的博客-CSDN博客_bipartite\r\ngraph\r\n","slug":"Algorithm/SORT/MergeSort/Merge Sort","date":"2022-12-23T04:23:23.000Z","categories_index":"Algorithm","tags_index":"Sort","author_index":"JBR_Bunjie"},{"id":"1223d7521828be4194e268189685670f","title":"创建Django项目","content":"Step 0.\r\nfigure out the environment of your computer\r\n\r\neditor: vs code\r\nOS: windows 11\r\nShell: powershell\r\n\r\nStep1. create the virtual\r\nenvironment\r\n\r\nwe create a new folder named \"django_test\"\r\nwe run this command\r\n\r\npython -m venv .&#x2F;venv\r\nso that we will see a folder in \"django_test\" named \"venv\" has been\r\ncreated, what happened?\r\n\r\nwhat is python -m ?\r\nwhat is venv?\r\n\r\nwe can have a pure new environment of python which help us a lot.\r\nfor example, we can use\r\npip freeze &gt; requirement.txt\r\n\r\nactive the virtual environment\r\n\r\nafter creating the venv folder, you can see there folders inside, and\r\nwe enter the \"Script\" folder and exec activate.ps1 in powershell, then\r\nyou should see the new command line like:\r\n(venv) PS C:\\Project\\django_test&gt;\r\nit means we have activated the virtual environment successfully.\r\nNow, you can use where command and you will see that the python.exe\r\nof venv folder was placed at the first place.\r\n(venv) PS C:\\Project\\django_test&gt; where.exe python\nC:\\Project\\django_test\\venv\\Scripts\\python.exe\nC:\\Users\\m1518\\AppData\\Local\\Programs\\Python\\Python310\\python.exe\nC:\\Users\\m1518\\AppData\\Local\\Microsoft\\WindowsApps\\python.exe\r\n特别的，当你在powershell下使用脚本时，可能会遇到如下问题：\r\n&lt;YouProjectPath&gt;\\venv\\Scripts&gt; .\\activate.ps1\n.\\activate.ps1 : 无法加载文件 &lt;YouProjectPath&gt;\\venv\\Scripts\\Activate.ps1，\n因为在此系统上禁止运行脚本。有关\n详细信息，请参阅 https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 \n中的 about_Execution_Policies。\n所在位置 行:1 字符: 1\n+ .\\activate.ps1\n+ ~~~~~~~~~~~~~~\n    + CategoryInfo          : SecurityError: (:) []，PSSecurityException\n    + FullyQualifiedErrorId : UnauthorizedAccess\r\n这是因为在默认情况下，PowerShell对脚本的管理策略时是 Restricted。\r\nRestricted 执行策略不允许任何脚本运行。AllSigned 和 RemoteSigned 执行策略可防止 Windows PowerShell 运行没有数字签名的脚本。本主题说明如何运行所选未签名脚本（即使在执行策略为 RemoteSigned 的情况下），还说明如何对 脚本进行签名以便您自己使用。有关 Windows PowerShell 执行策略的详细信息，请参阅 about_Execution_Policy。\r\n想了解 计算机上的现用执行策略，在PowerShell 然后输入\r\nget-executionpolicy\r\n默认情况下返回的是 Restricted\r\n以管理员身份打开PowerShell 输入\r\n**set-executionpolicy remotesigned**\r\n就可以正常在 PowerShell 中运行 ps1\r\n文件了\r\n\r\npowershell\r\n- Set-ExecutionPolicy unrestricted permission denied - Stack\r\nOverflow\r\n\r\n\r\n退出\r\n\r\n退出虚拟环境很简单，只需要执行 deactivate\r\n命令就行，这个命令也在虚拟环境的脚本目录下，因为激活时，将脚本目录设置到\r\nPATH 中了，所以可以直接使用\r\n当然也可以直接输入powershell或bash等来重启你的terminal\r\nStep 2. install Django\r\njust use these commands below:\r\npip install django\n\npip install django-fliter\n\n# pip install markdown\n\ncd ..\ndjango-admin startproject &lt;YourProjectName&gt;\ncd &lt;YourProjectName&gt;\r\nYou can see your project have been created well here.\r\nYou can start the server directly by using\r\npython manage.py runserver, you will see something.\r\nLinks\r\n\r\nwindows\r\n- Equivalent of cmd's \"where\" in powershell - Super User\r\nhttps://www.youtube.com/watch?v=F5mRW0jo-U4&amp;t=2866s\r\nvenv —\r\nCreation of virtual environments — Python 3.10.7 documentation\r\n\r\nCreate a Superuser\r\n(venv) PS C:\\Project\\django_test\\helloworld&gt; python manage.py createsuperuser\nUsername (leave blank to use &#39;m1518&#39;): \nEmail address: jbr_bunjie@outlook.com\nPassword: \nPassword (again): \nSuperuser created successfully.\r\n","slug":"Web Dev/Back End/django/CreateYourProject","date":"2022-12-23T04:23:23.000Z","categories_index":"Backend","tags_index":"Python,Django,Windows Powershell","author_index":"JBR_Bunjie"},{"id":"b14408b92d0c8809e1d3bbbaabf2879c","title":"Prim’s Minimum Spanning Tree","content":"\r\nPrim算法(Python实现)_JohnJim的博客-CSDN博客_prim算法python\r\n","slug":"Algorithm/Prim/Prim","date":"2022-12-22T04:23:23.000Z","categories_index":"Algorithm","tags_index":"MST","author_index":"JBR_Bunjie"},{"id":"a4d745e71ea13e3d21a3232d9b139847","title":"Chapter 1 of Computer Network","content":"1. Beginning\r\nQuestions\r\n\r\n\r\n什么是计算机网络？它是怎样发展起来的？\r\n计算机网络有那些功能？=&gt; 具体见\r\n网络上不同的计算机系统如何进行数据交换的？=&gt;\r\n具体见\r\n什么是网络协议?=&gt; 具体见\r\n如何进行差错控制，流量控制? =&gt; 具体见\r\n如何进行路由选择?=&gt; 具体见\r\n如何保证网络安全？=&gt; 具体见\r\n\r\n\r\nAnswers\r\n\r\n主要回答了问题1，其他内容略有涉及，但主要集中在接下来的其他章节\r\n\r\n\r\n计算机网络是计算机技术与通信技术的产物\r\n\r\n定义\r\n笼统定义:\r\n将若干台具有独立功能的计算机系统，用某种或多种通信介质连接起来，通过完善的网络协议，在数据交换的基础上，实现网络资源共享的系统称为计算机网络。\r\n\r\n\r\n一个网络中包含了多个独立的计算机系统。\r\n“独立”的含义是指每台计算机都可运行各自独立的操作系统，各计算机系统之间的地位平等，无主从之分，任何一台计算机不能干预或强行控制其他计算机的正常运行。\r\n数据交换是网络的最基本功能，各种资源共享都是建立在数据交换的基础上的。\r\n资源共享是网络最终目的。\r\n\r\n\r\n发展阶段\r\n初期；五十年代中期－六十年代中期；远程联机系统：世界上最早的计算机网络ARPANET（Internet的前身），由美国国防部高级计划研究署研制。ARPANET于1969年开通。最初仅连接美国本土的四个主机系统（加州大学洛杉矶分校，加州大学伯克利分校，斯坦福研究所，犹他大学），随后网络规模不断扩大，连接的主机数目越来越多，并由最初的纯军事网络演变成为面向教育，科研，商业的全球性网络。\r\n\r\n\r\nimage-20230302193235598\r\n\r\n\r\n\r\nimage-20230302195015269\r\n\r\n中期；六十年代末 -\r\n七十年代末；计算机—计算机网络：\r\n\r\n\r\nimage-20230302195429892\r\n\r\n\r\n\r\nimage-20230302195820874\r\n\r\n\r\n计算机—计算机网络与远程联机系统的本质区别：\r\n计—计网络以资源共享为目标，在网络协议的支持下，用户使用远方计算机系统的资源就好像使用本地计算机系统一样方便。几乎觉察不到地理位置的差别。\r\n\r\n后期；八十年代 - 至今；开放式标准化网络\r\n具有统一的网络体系结构，遵守国际标准化协议，便于网络互连，大规模生产，降低成本\r\n。如：\r\n\r\nOSI参考模型\r\n\r\nCCITT建议\r\nTCP/IP协议族\r\n\r\n2. Homework\r\n什么是计算机网络的拓扑结构？按照拓扑结构，计算机网络可以分为哪几种？各有什么特点？\r\n\r\n还可以按地理范围分类：\r\n\r\n局域网LAN\r\n城域网MAN\r\n广域网WAN\r\n\r\n\r\n\r\n计算机网络的拓扑结构是指：计算机网络拓扑是指通信子网节点间连接结构的拓扑形式，通过结点与线段间的几何关系表示网络结构，反映网络中各实体的结构关系。\r\n按照拓扑结构，计算机网络可以分为：\r\n\r\n星型网\r\n转输介质从一个中央结点向外辐射连接其他节点。\r\n任何两个结点之间的信息交换必须经过中央结点转发。\r\n中央结点的可靠性十分重要，一旦中央结点发生故障，会引起整个网络瘫痪\r\n\r\n\r\n\r\nimage-20230302201845313\r\n\r\n\r\n环形网\r\n\r\n网络上所有的结点通过传输介质连接成一个闭环，任何两个结点的数据交换必须沿环进行。\r\n一旦结点或链路发生故障，则环路断开，导致网络瘫痪\r\n\r\n\r\n\r\n\r\nimage-20230302201909929\r\n\r\n\r\n总线网络\r\n\r\n一条总线连接所有的结点，任何一个结点发送数据，其他节点都能收到。\r\n共享信道。\r\n任何结点故障都不会影响整个网络正常运行。\r\n\r\n\r\n\r\n\r\nimage-20230302201931552\r\n\r\n\r\n不规则型网\r\n\r\n每个结点至少要和其他两个结点连接。\r\n可靠性好：任何一个结点或一条链路发生故障都不会影响网络的连通性。\r\n布线灵活，几乎不受任何拓扑结构的约束。\r\n\r\n\r\n\r\n\r\n\r\nimage-20230302201943498\r\n\r\n\r\n小结:\r\n局域网: 总线型，星型，环型 广域网: 不规则型\r\n点—点通信: 星型、不规则型 独占信道 多点通信: 总线型、环型\r\n共享信道\r\n\r\n网络中任意两台计算机系统之间可以采取哪些方式进行通信？分别有哪些特点？\r\n\r\n两个计算机系统进行通信实际上是指两个分别位于不同计算机系统中的程序之间进行通信。\r\n\r\n存在两种方式：客户服务器方式和对等方式\r\n\r\n客户服务器方式：通常称为C/S方式\r\n\r\n客户端软件特点：\r\n被用户调用后运行，在打算通信时主动向远地服务器发起通信（服务请求）。因此，客户程序必须知道服务器程序的地址。\r\n不需要特殊的硬件和很复杂的操作系统。\r\n服务端软件特点：\r\n\r\n一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求。\r\n系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。\r\n一般需要强大的硬件和高级的操作系统支持。\r\n\r\n\r\n对等方式：通常称为P2P模式\r\n\r\n两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。对等连接方式从本质上看仍然是使用客户服务器方式，只是对等连接中的每一个主机既是客户又同时是服务器。\r\n\r\n\r\n数据交换交换的作用是什么？按照数据交换形式，计算机网络可以分为哪几种？各有什么特点？\r\n\r\n\r\n\r\nimage-20230302203719178\r\n\r\n\r\n数据交换是在多个数据终端设备之间，为任意两个终端设备建立数据通信临时互连通路的过程。其作用为接收来自源主机系统的数据，并向目的主机系统转发。\r\n数据交换有三种方式——电路交换、报文交换、分组交换\r\n\r\n电路交换：\r\n\r\n电路交换必定是面向连接的。\r\n电路交换三阶段：Ⅰ.建立连接 Ⅱ.通信 Ⅲ.释放连接\r\n信道资源独占，通信线路的利用率很低\r\n实时性好\r\n\r\n\r\n\r\n\r\n分组交换：\r\n\r\n优点：\r\n\r\n高效：动态分配传输带宽，对通信链路是逐段占用。\r\n灵活：以分组为传送单位和查找路由。\r\n迅速：不必先建立连接就能向其他主机发送分组。\r\n可靠：保证可靠性的网络协议；分布式的路由选择协议使网络有很好的生存性。\r\n\r\n\r\n缺点：\r\n\r\n分组在各结点存储转发时需要排队，这就会造成一定的时延。\r\n分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。\r\n\r\n\r\n报文交换：\r\n\r\n时延较长\r\n基于存储转发原理\r\n\r\n\r\n\r\n\r\nimage-20230302205659820\r\n\r\n阐述分组交换的工作过程，说明其特点。\r\n\r\n工作过程：\r\n\r\n首先，在发送端，我们先把较长的报文划分成较短的、固定长度的数据段。\r\n完成划分后，我们对每一个数据段的段首加入“首部”构成不同的“分组”。\r\n之后分组交换网以“分组”作为数据传输单元，依次把各组发送到接收端。\r\n在接收端，收到分组后会剥去其首部以还原成报文。\r\n最后，在接收端把收到的数据恢复成为原来的报文。\r\n\r\n特点：\r\n\r\n高效：动态分配传输带宽，对通信链路是逐段占用。\r\n灵活：以分组为传送单位和查找路由。\r\n迅速：不必先建立连接就能向其他主机发送分组。\r\n可靠：保证可靠性的网络协议；分布式的路由选择协议使网络有很好的生存性。\r\n\r\n分组在各结点存储转发时需要排队，这就会造成一定的时延。\r\n分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。\r\n\r\n\r\n请分别阐述你对“带宽”、“速率”、“吞吐量”、“时延”和“信道利用率”的认识，并说明信道利用率并非越高越好的原因。\r\n\r\n速率：“速率”即数据率或比特率，是计算机网络中最重要的一个性能指标。速率的单位是b/s,\r\n或kb/s, Mb/s等。“速率”往往是指额定速率或标称速率。\r\n带宽：“带宽”本来是指信号具有的频带宽度，单位是赫（或千赫、兆赫等），但现在，“带宽”体现了传输管道中可以传递数据的能力，它通常是数组信道所能传送的“最高数据率”的同义语，单位是“比特每秒”(bps,\r\nb/s, bit/s)，它还有多个不同大小的单位。\r\n吞吐量：“吞吐量”表示在单位时间内通过某个网络（或信道、接口）的数据量，它经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络，不过通常也受网络的带宽或网络的额定速率限制。\r\n时延：“时延”可分为处理时延、排队时延、传输时延和传播时延。\r\n\r\n传输时延（发送时延）是发送数据时，数据块从结点到进入传输介质所需的时间。\r\n\r\n\r\n\r\nimage-20230302211622698\r\n\r\n\r\n传播时延是电磁波在信道中需要传播一定的距离而花费的时间。\r\n\r\n\r\n\r\nimage-20230302211635670\r\n\r\n\r\n处理时延是交换结点为存储转发而进行一些必要的处理所花费的时间。\r\n排队时延是结点缓存队列中分组排队所经历的时延。\r\n数据经历的总时延就是发送时延、传播时延、处理时延和排队时延之和:\r\n总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延\r\n\r\n\r\n\r\n\r\nimage-20230302211812281\r\n\r\n\r\n注意：对于高速网络链路，我们提高的仅仅是数据的发送速率，不是比特在链路上的传播速率。\r\n提高链路带宽减小了数据的发送时延。\r\n\r\n\r\n信道利用率：信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。\r\n网络利用率：则是全网络的信道利用率的加权平均值。\r\n\r\n\r\n信道利用率并非越高越好，理由如下：\r\n\r\n根据排队论的理论，当某信道的利用率增大时，该信道引起的时延也就迅速增加。\r\n\r\n若令 D0 表示网络空闲时的时延，D\r\n表示网络当前的时延，则在适当的假定条件下，可以用以公式： \\[\r\nD=D_0/(1-U)\r\n\\] 来表示 D 和 D0之间的关系，其中 U 是信道利用率，数值在 0 到 1\r\n之间。\r\n由该公式可简单推知，信道利用率过高会导致时延增大，所以信道利用率并非越高越好\r\n\r\n\r\n\r\nimage-20230302212551910\r\n\r\nQuiz\r\n什么是计算机网络？从结构、分类等方面说说你对计算机网络的认识\r\n说说你对C/S模式和P2P模式的认识\r\n路由器的主要功能是什么？说说你对数据交换方式的认识\r\n\r\n\r\nimage-20230302203719178\r\n\r\n为什么说带宽增大速率就会提高？\r\n说说你对时延的认识\r\n信道利用率是不是越高越好？为什么？\r\n说说你对因特网的三级ISP的认识\r\n","slug":"Internet Protocol/ComputerNetwork/Chapter1_General","date":"2022-11-23T04:23:23.000Z","categories_index":"Protocol Theory","tags_index":"Computer Network","author_index":"JBR_Bunjie"},{"id":"1e6dfc30a649b3e508384cf6137376d2","title":"Chapter 2 of Computer Network","content":"\r\n课前思考\r\n如何在各自独立、相互平等的计算机系统之间有条不紊的通信？ ——建立秩序\r\n如何在结构相异、标准不同的计算机系统之间进行数据交换和资源共享？\r\n——建立共识\r\n\r\n1.课后习题\r\n1.阐述计算机网络体系结构的基本思想和主要特点。\r\n\r\n基本思想：将一个庞大、复杂的问题进行分解，产生若干个功能相对单一、结构比较简单、处理更为方便的局部问题，并基于此建立对应多个层级来解决问题。每层在自己下层所提供服务的支持下，通过自身内部功能实现一种或几种特定的服务。\r\n主要特点：\r\n\r\n耦合度低(独立性强)：每层只需调用下层接口即可获得下层的服务，无需关心下层的具体实现。即在上层看来，下层是具有特定功能的黑箱。　\r\n适应性强：只要每层提供的服务和接口不变，其内部实现细节可以任意改变。　\r\n易于实现和维护：把复杂的系统分解成若干个涉及范围小且功能简单的子系统，使得系统结构更加清晰，系统实现、调试和维护都变得简单和容易。\r\n\r\n\r\n2.结合定义，谈谈你对计算机网络体系结构的认识。\r\n首先，计算机网络体系结构的定义为：层、层间接口及协议的集合被称为计算机网络体系结构。\r\n这个定义与基于分层思想所需要解决的三个问题深度绑定的\r\n而分层思想有三个主要问题：\r\n\r\n确定分层与功能，即确定网络体系结构应该具哪些层次，以及每层应该具有哪些功能。\r\n确定服务与接口，即确定每个层次为上层提供哪些服务，以及上层调用这些服务的接口规格。\r\n确定协议，即确定每层的必须遵守的规则，以便确保通信的两方可以达成高度默契。\r\n\r\n因此，计算机网络体系结构的设计与划分就必须解决这三方面的内容。即通过对分层结构、每层的功能及服务与层间接口和协议的设计，解决我们的主要问题。基于这些内容，我们自然得出了我们的定义。\r\n3.阐述你对OSI/RM、Internet模型和五层结构模型的认识。\r\n\r\nOSI/RM模型\r\n\r\nOSI/RM体系结构具有概念清楚、理论完整的特点，是一个理论上的国际标准，但却不是事实上的国际标准；\r\nOSI/RM模型具体架构：\r\n\r\n最高层为应用层，这是计算机用户以及各种应用程序和网络之间的接口，能\r\n直接向用户提供服务\r\n并完成用户希望在网络上完成的各种工作，本层为用户的\r\n应用进程 提供网络通信服务。\r\n第二层是表示层，会对上层数据或命令进行解释，以保证一个主机应用层信息可以被另一个主机的应用程序理解，使应用程序能够理解数据报文的真实含义。\r\n第三层是会话层，这是应用程序和网络之间的接口，负责在网络中的两节点之间建立、维持和终止通信向两个实体的表示层提供建立和使用连接的方法。\r\n第四层是传输层，这是通信子网与资源子网的分界层，同时也是通信子网和资源子网的接口和桥梁。本层向高层屏蔽数据通信的所有细节，为用户提供透明的报文传输，保证报文可靠的、正确的传输。提供端到端的可靠的透明数据传输，使上层服务用户不必关心通信子网的实现细节。\r\n第五层是网络层，这是通信子网中的最高层，在下两层的基础上向资源子网提供服务。在选择路由时，网络层将综合考虑优先权、网络拥塞程度、服务质量以及路由代价等决定从一个节点\r\n到另一个节点的最佳路径。将网络地址翻译成对应的物理地址，并通过路由选择算法为分组通过通信子网选择最适当的路径。\r\n第六层是数据链路层，本层负责建立和管理节点间的链路，控制网络层与物理层之间的通信。通过差错控制、流量控制方法，在不可靠的物理介质上提供可靠的数据传输。\r\n物理层是OSI的最底层，也是真正将数据在传输媒介上进行传输的层次。该层会为上层实现在物理介质上正确、透明的传送比特流。规定激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性，为上层协议提供一个传输数据的物理媒体。在物理介质上正确地、透明地传送比特流。即在源结点将1、0转化为强弱不同的电信号并进行传输,在目的结点，将强弱不同的电信号转化为1、0，也就是数模转换与模数转换。\r\n\r\n\r\nInternet模型\r\n\r\n因为模型中两个核心协议为TCP和IP协议，Internet模型也称为TCP/IP模型。\r\nTCP/IP协议簇是一个四层体系结构，具有简单易用特点，是事实上的国际标准。\r\nTCP/IP协议标准完全开放，可免费使用，且独立于特定计算机硬件及操作系统。\r\n独立于网络硬件系统，可以运行在广域网，更适合于互联网。\r\n网络地址统一分配，网络中每一设备和终端都具有一个唯一地址。\r\n高层协议标准化，可以提供多种多样可靠网络服务。\r\nTCP/IP协议具体架构：（以OSI/RM七层模型为标准）\r\n\r\n应用层：大体对应OSI参考模型的应用层、表示层和会话层。该层协议主要包括:\r\n&gt; - FTP（文件传输协议） &gt; - SMTP(简单报文传输协议) &gt; -\r\nTELNET(远程网络登陆协议) &gt; - DNS(域名服务)\r\n&gt; - HTTP（超文本传输协议）\r\n传输层：大体上对应OSI的传输层。该层协议包括：\r\n\r\n\r\nTCP(传输控制协议Transmission control\r\nprotocol)：可靠的，面向连接的协议。将报文以字节流形式从源主机进程发到目的主机进程。\r\nUDP(用户数据报协议User Datagram protocol\r\n)：不可靠的，无连接的协议。\r\n\r\n\r\n网际层：大体上对应OSI的网络层。该层的协议是\r\n\r\nIP(INTERNET PROTOCOL) Internet\r\n体系结构的核心协议。把IP分组以数据报方式从源主机发送到目的主机。\r\n\r\n网络接口层：大体上对应OSI的物理层和链路层。\r\n\r\nInternet体系结构的网络接口层也称为子网层，具有开放的特点。子网协议有：\r\n\r\n以太网协议\r\nFDDI\r\nPPP\r\nSLIP\r\nToken Bus (802.4)\r\n百兆，千兆，万兆以太网\r\n\r\n\r\n\r\n\r\n五层结构模型\r\n\r\n五层体系结构是结合了OSI/RM和TCP/IP协议簇的优点而提出来的一个五层结构的模型，但其存在意义只是为了学术学习研究，没有具体的实际意义。\r\n五层模型结构从上到下依次为：应用层、传输层、网络层、数据链路层、物理层\r\n\r\n\r\n2.课堂提问\r\n1.说说你对计算机网络体系结构的理解\r\n基于1.1及1.2中的认识，我们划分出计算机网络的体系结构\r\n补充部分\r\n\r\n从定义到实现：\r\n计算机网络体系结构是关于计算机网络及其部件所应完成功能的精确定义。\r\n实现(implementation)是在遵循这种体系结构的前提下用合适的硬件或软件完成这些功能的过程。\r\n体系结构是抽象的，实现则是具体的，是真正在运行的计算机硬件和软件。\r\n\r\n\r\n\r\nimage-20230303142731465\r\n\r\n\r\n实体：任何可发送或接收信息的硬件或软件进程。\r\n接口：同系统内相邻层之间的交互通道，也称为服务访问点SAP（Service\r\nAccess Point）。\r\n协议：控制对等层实体间进行数据交换的规则、约定和标准。\r\n服务：为保证上层对等实体间的通信，由下层向上层提供的功能。\r\n\r\n协议的影响范围是对应的那一层(系统间的对等层)，有“协议是水平的”之说\r\n服务的影响范围上下相邻层，有“服务是垂直的”之说\r\n\r\n\r\nimage-20230303143700028\r\n\r\n2.说说你对网络协议的理解\r\n\r\n网络协议(network\r\nprotocol，简称协议)，是为进行网络数据交换而建立的规则、标准或约定。\r\n也就是说，对等实体间的共识就是协议。\r\n\r\n协议：网络对等实体间为完成数据交换所必须遵循的规则、约定和标准。\r\n在构建通信协议时，存在三要素：语法、语义和时序（同步）。\r\n\r\n语法是指协议元素与数据的组合结构，也就是 报文格式。\r\n语义是指对协议中各协议元素的含义的解释。\r\n时序（也称为同步）是指在通信过程中，通信两方操作的执行顺序与规则。\r\n\r\n语法规定了报文格式，语义赋予了报文特定内涵；时序则通过控制具有特定语义的报文的交换，从而实现了计算机间的通信。\r\n\r\n语法是语义的载体，时序又是对语义的有序组织。正是基于这样的关系，计算机在通信时才得以保持高度默契。\r\n\r\n在定义好协议后，便可以依据协议内容进行数据(信息报文)的传输：\r\n\r\n\r\nimage-20230303145337491\r\n\r\n\r\n两个端系统之间的数据通信过程本质上就是PDU的不断封装和解封过程:\r\n\r\n在源系统，数据在自上而下逐层递交的过程就是PDU不断封装的过程；\r\n在目的系统，当数据到达后自下而上递交的过程就是PDU不断拆封的过程。\r\n\r\nPDU具体变化可参考3.1\r\n\r\n3.说说你对OSI/RM与TCP/IP两个模型的理解\r\n1.3\r\n4.说说你对应用层的认识，举例说说你所知道的应用层协议\r\n1.3\r\n3.重点内容补充\r\n3.1\r\n两主机间互传数据过程\r\n\r\n计算机间通信的本质在于信息报文的交换。\r\n\r\n\r\n基于五层体系结构模型，注意数据链路层同时加装了首部与尾部，而其他层只有首部；最下层的物理层不会加装任何首、尾部，但会将数据正式转化为比特流\r\n\r\n\r\n\r\nimage-20230303150649221\r\n\r\n3.2\r\n基于OSI/RM模型的层次解析图\r\n\r\n\r\nimage-20230303151058783\r\n\r\n3.3 三种主要模型比较\r\n\r\n\r\nimage-20230303152536659\r\n\r\n特别的，我们以OSI/RM模型为基准，对照地看待TCP/IP时，有如1.3的内容\r\n","slug":"Internet Protocol/ComputerNetwork/Chapter2_Structure","date":"2022-11-23T04:23:23.000Z","categories_index":"Protocol Theory","tags_index":"Computer Network","author_index":"JBR_Bunjie"},{"id":"5ebead784411a9c38007c0b8eb5465fb","title":"Chapter 3 of Computer Network","content":"0. 课前思考\r\n1.\r\n如何在模拟介质中传输数字信号？\r\n2. 如何保证通信双方协调通信？\r\n3.\r\n如何让物理媒介传输更多的信息？\r\n1. 课堂提问\r\n1.谈谈你对数据、信号、信息以及信息量的认识\r\n\r\n数据：事件的某些属性规范化后的表现形式，它能被识别，也可以被描述。\r\n信号：数据的具体表现形式，具有确定的物理描述。\r\n信息：事件中包含的有意义的内容。\r\n\r\n信息是用来消除随机不确定性的东西。——《通讯的数学理论》，1948，香农\r\n\r\n信息量：信息的度量。信息量与事件出现的概率有关：\\[I = I[P(x)]\\]\r\n\r\n信息量是事件出现概率的函数：概率愈小，信息量愈大；反之，也成立:\r\n\\[\r\nP = 1; I = 0;\\\\\r\nP = 0; I = ∞;\r\n\\]\r\n若干个互相独立事件构成的信息量等于各独立事件信息量的和:\r\n\\[\r\nI[P_1(x), P_2(x),...,P_n(x)] = I[P_1(x)] + I[P_2(x)] + ... + I[P_n(x)];\r\n\\]\r\n信息量运算公式： \\[\r\nI(M) = -\\log_m \\frac{1}{M}\r\n\\]\r\n\r\n\r\n2.说说你对通信系统模型的认识，数字通信有什么优点？\r\n3.说说你对码元、信号传输速率和信息传输速率的认识\r\n\r\n\r\nimage-20230303190142849\r\n\r\n\r\n\r\nimage-20230303190414163\r\n\r\n\r\n\r\nimage-20230303190703464\r\n\r\n\r\n\r\nimage-20230303190735154\r\n\r\n4.有哪几种数据传输方式？各有什么特点？\r\n5.什么是信源编码？为什么要进行信源编码？\r\n\r\n信源编码目的：将模拟信号转变为适合在数字信道上传输的数字信号\r\n信源编码作用：\r\n\r\n数据压缩\r\n模拟信号数字化\r\n\r\n\r\n6.信源编码包括哪几个过程？\r\no\r\n抽样：对模拟信号进行时间上的离散化处理，即每隔一段时间（通常时间间隔是一个固定值）对模拟信号抽取一个样值。\r\no\r\n量化：为将连续的无限多种可能的样值变为有限的取值，并使用相应的数字序列表示，用有限位数的0、1数字序列表示被抽取的样值。\r\no\r\n编码：将量化的结果按一定的码型转换成相应的二进制码组，获得能够在数字信道上传输的数字信号。\r\n7.为什么说根据奈奎斯特定理，数字化后对带宽频率的需求大大提高了？\r\n奎：如果媒体传输的最大频率为f，那么接受方只要以2f次的频率进行采样，就能完整地重现原信号。\r\n8.说说你非归零编码、曼彻斯特编码和差分曼彻斯特编码的认识。\r\n9.说说你对频分复用、时分复用、码分复用的认识。\r\n核心：一路信号独占一个信道对于充分发挥信道利用率、扩大通信的普及范围是极为不利的，也是不可想象。\r\n10.说说你对宽带接入技术的认识\r\n11.说说你对物理层协议的认识\r\n2. 课后作业\r\n1.阐述通信系统模型结构、指出各部分的主要作用和功能\r\n通信系统模型一般具有六个结构，包括：\r\n\r\n信源：把各种信息转换成原始物理信号，如计算机，FAX，电话机等。\r\n变换器：将原始物理信号转换成适合在信道上传输的信号，如MODEM,TA,光电转换器等。\r\n信道：传输信号的一条通路。通常一条物理线路可构成一个或多个信道。\r\n反变换器：具有与发送设备具有反向功能，目的是从受到减损的接收信号中正确恢复出原始物理信号\r\n信宿：将原始物理信号还原成原始信息，如扬声器\r\n噪声源：信道自身的噪声以及周围环境对信道的干扰。如热噪声，闪电，强电磁场干扰等。\r\n\r\n通过这些结构，我们就能将消息转换为物理信号（原始物理信号），原始物理信号经过各种发送设备的加工修饰后变得强壮，它能够较为顺利地通过信道到达接收设备处。\r\n2.数据通信方式有哪几种？各有什么特点？\r\n3.阐述信源编码的目的、作用和主要过程。\r\n4.阐述数字数据编码的目的和作用，并对二进制字符串“01101001”分别给出非归零、曼彻斯特和差分曼彻斯特编码。\r\n5.阐述多路复用的目的和作用，分别说明频分、时分和码分复用的原理和特点。\r\n","slug":"Internet Protocol/ComputerNetwork/Chapter3_PhysicsLayer","date":"2022-11-23T04:23:23.000Z","categories_index":"Protocol Theory","tags_index":"Computer Network","author_index":"JBR_Bunjie"},{"id":"13957a375b1f4d8dbb85454bdce75343","title":"Chapter 5 of Computer Network","content":"1. 课堂提问\r\n1. 说说你对网桥的认识\r\n2.\r\n网络中形成环后会有什么后果？如何处理？\r\n3. 说说你对VLAN的认识\r\n4.\r\n说说你对虚电路和数据报的理解\r\n","slug":"Internet Protocol/ComputerNetwork/Chapter5","date":"2022-11-23T04:23:23.000Z","categories_index":"Protocol Theory","tags_index":"Computer Network","author_index":"JBR_Bunjie"},{"id":"57d5800b0ce1e7689f82868780b3f764","title":"Chapter 6 of Computer Network","content":"1. 课堂提问\r\n1.\r\n说说你对静态路由和动态路由的认识\r\n2.\r\n说说你对D-V算法与L-S路由算法的理解\r\n3.\r\n超网IP地址与子网划分的IP地址有什么显著区别？\r\n4.\r\n除了具体的功能不同外，ICMP与ARP还有什么显著的区别？\r\n5. 说说你对ARP及免费ARP的认识\r\n","slug":"Internet Protocol/ComputerNetwork/Chapter6","date":"2022-11-23T04:23:23.000Z","categories_index":"Protocol Theory","tags_index":"Computer Network","author_index":"JBR_Bunjie"},{"id":"d778590aa45aa75bc76fcb4037112854","title":"Chapter 4 of Computer Network","content":"0. 课前思考\r\n1.\r\n如何才能做到向高层屏蔽物理通信的细节？\r\n构建对等层级，在走向上层之前进行装箱拆箱\r\n2.\r\n如何发现和纠正传输过程中发生的数据错误？\r\n确认、校验、重发\r\n3.\r\n如何加快或减缓数据传输的速率？\r\n1. 课堂提问\r\n1.\r\n从提供的主要服务、具有的主要功能和不同的传输方式等方面，说说你对数据链路层的认识\r\n2.\r\n说说你对数据链路层需要解决的基本问题的理解\r\n\r\n为实现可靠数据传输，数据链路层有许多问题需要解决，其中以下三个是最基本的共性问题：\r\n封装成帧：发送结点的数据链路层将网络层的数据报文添加首部和尾部后封装成帧。\r\n透明传输：数据报文中的任意数据都可以得到传输，高层应用无需担心特殊字符的传输问题。\r\n差错控制：接收方只接收无差错的数据帧。\r\n\r\n3.\r\n从应用场景、协议组成、帧格式和运行过程等方面，说说你对PPP协议的理解。\r\n4.\r\n从配置、格式和工作原理等方面,说说你对HDLC协议的理解。\r\n5.\r\n从应用场景、协议组成、帧格式和运行过程等方面，说说你对PPP协议的理解。\r\n6.\r\n说说你所认识的纯ALOHA和时隙ALOHA\r\n7.\r\n在CSMA/CD中，可能会发生哪几种碰撞？发生碰撞后如何处理？\r\n8.\r\n根据原理，说说CSMA/CA是如何解决隐蔽节点和暴露节点的。\r\n","slug":"Internet Protocol/ComputerNetwork/Chapter4","date":"2022-11-23T04:23:23.000Z","categories_index":"Protocol Theory","tags_index":"Computer Network","author_index":"JBR_Bunjie"},{"id":"7c3d41f90666b48d6b76a1cfaa71f837","title":"Python装饰器","content":"装饰器\r\n1、闭包\r\n要想了解装饰器，首先要了解一个概念，闭包。\r\n什么是闭包，一句话说就是，在函数中再嵌套一个函数，并且引用外部函数的变量，这就是一个闭包了。光说没有概念，直接上一个例子。\r\ndef outer(x):\n    def inner(y):\n        return x + y\n    return inner\n\nprint(outer(6)(5))\n\n# output: 11\r\n如代码所示，在outer函数内，又定义了一个inner函数，并且inner函数又引用了外部函数outer的变量x，这就是一个闭包了。在输出时，outer(6)(5),第一个括号传进去的值返回inner函数，其实就是返回6\r\n+ y，所以再传第二个参数进去，就可以得到返回值，6 + 5。\r\n2.@符号\r\n含义解释\r\n@符号会使用一个简短的方式来生成一个被装饰的函数，具体过程可以理解为：\r\n# 装饰函数：\ndef a_new_decorator(a_func):\n    def wrapTheFunction():\n        print(&quot;I am doing some boring work before executing a_func()&quot;)\n \n        a_func()\n \n        print(&quot;I am doing some boring work after executing a_func()&quot;)\n \n    return wrapTheFunction\n \n# 需要被装饰的目标函数：\ndef a_function_requiring_decoration():\n    print(&quot;I am the function which needs some decoration to remove my foul smell&quot;)\n\n# 当前 a_function_requiring_decoration 函数的执行结果\n# outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;\n\n\n# 可行的装饰方式：\na_function_requiring_decoration &#x3D; a_new_decorator(a_function_requiring_decoration)\n#now a_function_requiring_decoration is wrapped by wrapTheFunction()\n\n#---------或者：\n@a_new_decorator\ndef a_function_requiring_decoration():\n    &quot;&quot;&quot;Now the func is wrapped&quot;&quot;&quot;\n    print(&quot;I am the function which needs some decoration to remove my foul smell&quot;)\n\n# 不管是怎么修饰，都可以在修饰后，执行得到：\na_function_requiring_decoration()\n#outputs:I am doing some boring work before executing a_func()\n#        I am the function which needs some decoration to remove my foul smell\n#        I am doing some boring work after executing a_func()\r\n也就是说：@a_new_decorator 就是\r\na_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)的简写\r\n一个小问题\r\n在上方的代码执行完后，如果再打印：\r\nprint(a_function_requiring_decoration.__name__)\n# Output: wrapTheFunction\r\n为啥？\r\n修饰的实际过程是怎么样的吗？-&gt;就上方的例子而言，该装饰器的修饰过程是：a = a_new_decorator(a)，而a实际上只是一个地址的指向，现在a指向的位置是哪里？\r\n是decorator执行结束时，return的wrapTheFunction，也就是说，a所指向的函数被新的a_new_decorator代替了。\r\n为了解决“名字”的问题，我们可以再用一个装饰器functools.wraps：\r\nfrom functools import wraps\n \ndef a_new_decorator(a_func):\n    @wraps(a_func)\n    def wrapTheFunction():\n        print(&quot;I am doing some boring work before executing a_func()&quot;)\n        a_func()\n        print(&quot;I am doing some boring work after executing a_func()&quot;)\n    return wrapTheFunction\n \n@a_new_decorator\ndef a_function_requiring_decoration():\n    print(&quot;I am the function which needs some decoration to remove my foul smell&quot;)\n \nprint(a_function_requiring_decoration.__name__)\n# Output: a_function_requiring_decoration\r\n@wraps接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表等等的功能。这可以让我们在装饰器里面访问在装饰之前的函数的属性。\r\n3、装饰器\r\n解决了两个前置目标后，我们实际上就已经理解了什么是装饰器了\r\n而python对装饰器的定义是：\r\n接下来就讲装饰器，其实装饰器就是一个闭包，装饰器是闭包的一种应用。什么是装饰器呢，简言之，python装饰器就是用于拓展原来函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，使用python装饰器的好处就是在不用更改原函数的代码前提下给函数增加新的功能。使用时，再需要的函数前加上@demo即可。\r\ndef debug(func):\n    def wrapper():\n        print(&quot;[DEBUG]: enter &#123;&#125;()&quot;.format(func.__name__))\n        return func()\n    return wrapper\n\n@debug\ndef hello():\n    print(&quot;hello&quot;)\n\nhello()\n-----------------------------\n&gt;&gt;&gt;[DEBUG]: enter hello()\n&gt;&gt;&gt;hello\r\n例子中的装饰器给函数加上一个进入函数的debug模式，不用修改原函数代码就完成了这个功能，可以说是很方便了。\r\n3、带参数的装饰器\r\n上面例子中的装饰器是不是功能太简单了，那么装饰器可以加一些参数吗，当然是可以的，另外装饰的函数当然也是可以传参数的。\r\ndef logging(level):\n    def outwrapper(func):\n        def wrapper(*args, **kwargs):\n            print(&quot;[&#123;0&#125;]: enter &#123;1&#125;()&quot;.format(level, func.__name__))\n            return func(*args, **kwargs)\n        return wrapper\n    return outwrapper\n\n@logging(level&#x3D;&quot;INFO&quot;)\ndef hello(a, b, c):\n    print(a, b, c)\n\nhello(&quot;hello,&quot;,&quot;good&quot;,&quot;morning&quot;)\n-----------------------------\n&gt;&gt;&gt;[INFO]: enter hello()\n&gt;&gt;&gt;hello, good morning\r\n如上，装饰器中可以传入参数，先形成一个完整的装饰器，然后再来装饰函数，当然函数如果需要传入参数也是可以的，用不定长参数符号就可以接收，例子中传入了三个参数。\r\n@logging(level&#x3D;&quot;INFO&quot;) \n可以看做是 \nhello &#x3D; logging(level&#x3D;&quot;INFO&quot;)(hello)\n\n# 这里的hello是函数对象，python中一切皆是对象，函数也可以像变量一样传递，加括号后hello()才是执行函数。于是这里就变成了hello &#x3D; outwrapper(hello)\n# 而outwrapper() 的返回是 wrapper，hello 就等于 wrapper，执行 hello() 就等价于执行 wrapper()，而等号右边的 hello 已经作为参数传递给 outrapper() 了\r\n4、类装饰器\r\n装饰器也不一定只能用函数来写，也可以使用类装饰器，用法与函数装饰器并没有太大区别，实质是使用了类方法中的call魔法方法来实现类的直接调用。\r\nclass logging(object):\n    def __init__(self, func):\n        self.func &#x3D; func\n\n    def __call__(self, *args, **kwargs):\n        print(&quot;[DEBUG]: enter &#123;&#125;()&quot;.format(self.func.__name__))\n        return self.func(*args, **kwargs)\n\n@logging\ndef hello(a, b, c):\n    print(a, b, c)\n\nhello(&quot;hello,&quot;,&quot;good&quot;,&quot;morning&quot;)\t\n-----------------------------\n&gt;&gt;&gt;[DEBUG]: enter hello()\n&gt;&gt;&gt;hello, good morning\r\n​ 类装饰器也是可以带参数的，如下实现\r\nclass logging(object):\n    def __init__(self, level):\n        self.level &#x3D; level\n\n    def __call__(self, func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            print(&quot;[&#123;0&#125;]: enter &#123;1&#125;()&quot;.format(self.level, func.__name__))\n            return func(*args, **kwargs)\n        return wrapper\n\n@logging(level&#x3D;&quot;TEST&quot;)\ndef hello(a, b, c):\n    print(a, b, c)\n\nhello(&quot;hello,&quot;,&quot;good&quot;,&quot;morning&quot;)\n-----------------------------\n&gt;&gt;&gt;[TEST]: enter hello()\n&gt;&gt;&gt;hello, good morning\r\n好了，如上就是装饰器的一些概念和大致的用法啦，想更深入的了解装饰器还是需要自己在平时的练习和应用中多体会，本篇只是给出一个概念，谢谢~\r\n编写装饰器\r\nproperty装饰器\r\n既要保护类的封装特性，又要让开发者可以使用“对象.属性”的方式操作操作类属性，除了使用\r\nproperty() 函数，Python\r\n还提供了 @property\r\n装饰器。通过 @property\r\n装饰器，可以直接通过方法名来访问方法，不需要在方法名后添加一对“()”小括号\r\n@property\r\n的语法格式如下：\r\n@property\ndef 方法名(self)\n  代码块\r\n例如，定义一个矩形类，并定义用 @property 修饰的方法操作类中的 area\r\n私有属性，代码如下：\r\nclass Rect:   \n    def __init__(self,area):    \n        self.__area &#x3D; area\n    @property \n    def area(self):    \n        return self.__arearect &#x3D; Rect(30)  # 直接通过方法名来访问 area 方法\nprint(&quot;矩形的面积是：&quot;,rect.area)  # 运行结果: 30\r\n上面程序中，使用 ＠property 修饰了 area()\r\n方法，这样就使得该方法变成了 area 属性的 getter\r\n方法。需要注意的是，如果类中只包含该方法，那么 area\r\n属性将是一个只读属性。\r\n也就是说，在使用 Rect 类时，无法对 area\r\n属性重新赋值，即运行如下代码会报错：\r\nrect.area &#x3D; 90\nprint(&quot;修改后的面积：&quot;,rect.area)\r\n运行结果为：\r\nTraceback (most recent call last):\nFile &quot;C:\\Users\\mengma\\Desktop\\1.py&quot;, line 10, in &lt;module&gt; rect.area &#x3D; 90\nAttributeError: can&#39;t set attribute\r\n而要想实现修改 area 属性的值，还需要为 area 属性添加 setter\r\n方法，也就需要用到 setter 装饰器\r\nsetter装饰器\r\n它的语法格式如下：\r\n@方法名.setter\ndef 方法名(self, value):\n    代码块\r\n例如，为 Rect 类中的 area 方法添加 setter 方法，代码如下：\r\n@area.setter\ndef area(self, value):  \n    self.__area &#x3D; value\r\n再次运行如下代码：\r\nrect.area &#x3D; 90\nprint(&quot;修改后的面积：&quot;,rect.area)  #运行结果 area: 90\r\n这样，area 属性就有了 getter 和 setter\r\n方法，该属性就变成了具有读写功能的属性。\r\n除此之外，还可以使用 deleter 装饰器来删除指定属性\r\ndeleter装饰器\r\n语法格式\r\n@方法名.deleter\ndef 方法名(self):\n  代码块\r\n例如，在 Rect 类中，给 area() 方法添加 deleter\r\n方法，实现代码如下：\r\n@area.deleter\ndef area(self):\n\tself.__area &#x3D; 0\r\n然后运行如下代码：\r\ndel rect.areaprint(&quot;删除后的area值为：&quot;,rect.area)  # 运行结果 area: 0\r\nAll in one: property() 函数\r\nproperty() 函数的作用是在新式类中返回属性值。\r\n语法\r\nclass property([fget[, fset[, fdel[, doc]]]])\r\n参数\r\n\r\nfget -- 获取属性值的函数\r\nfset -- 设置属性值的函数\r\nfdel -- 删除属性值函数\r\ndoc -- 属性描述信息\r\n\r\n返回值\r\n返回新式类属性。\r\n实例\r\nclass C(object):\n    def __init__(self):\n        self._x &#x3D; None\n \n    def getx(self):\n        return self._x\n \n    def setx(self, value):\n        self._x &#x3D; value\n \n    def delx(self):\n        del self._x\n \n    x &#x3D; property(getx, setx, delx, &quot;I&#39;m the &#39;x&#39; property.&quot;)\r\n如果 c 是 C 的实例化, then =&gt;\r\n\r\nc.{object} 将触发 getter\r\nc.{object} = value 将触发 setter\r\ndel c.{object} 触发 deleter\r\n\r\n如果给定 doc 参数，其将成为这个属性值的 docstring，否则 property\r\n函数就会复制 fget 函数的 docstring（如果有的话）\r\n@wraps()\r\n相当于：\r\ndef Wraps(fWrap):\n    def TmpWraps(func):\n        def WrapsDecorator(*args, **kwargs):\n            WrapsDecorator.__name__&#x3D;fWrap.__name__\n            WrapsDecorator.__doc__&#x3D;fWrap.__doc__\n            return func(*args, **kwargs)\n        return WrapsDecorator\n    return TmpWraps\r\n示例代码如下：\r\ndef Wraps(fWrap):\n    def TmpWraps(func):\n        def WrapsDecorator(*args, **kwargs):\n            WrapsDecorator.__name__&#x3D;fWrap.__name__\n            WrapsDecorator.__doc__&#x3D;fWrap.__doc__\n            return func(*args, **kwargs)\n        return WrapsDecorator\n    return TmpWraps\n\n\ndef NewDecorator(level):\n    def TmpDecorator(func):\n        def anotherFunc():\n            &#39;&#39;&#39;it&#39;s another function&#39;&#39;&#39;\n            pass\n        #from functools import wraps\n        #@wraps(anotherFunc)\n        @Wraps(anotherFunc)\n        def NewFibonacci(*args, **kwargs):\n            print(&#39;[%s]func: %s is called, %s&#39;%(level,func.__name__,NewFibonacci.__doc__))\n            from time import time\n            start &#x3D; time()\n            rst&#x3D;func(*args, **kwargs)\n            end&#x3D;time()\n            print(&#39;cost time: %.2fs&#39;%(end-start))\n            return rst\n        return NewFibonacci\n    return TmpDecorator\n\n\n@NewDecorator(&#39;log&#39;)\ndef Fibonacci_print(num&#x3D;10):\n    if num &lt;&#x3D; 0:\n        return\n    minNum,maxNum&#x3D;0,1\n    while num &gt; 0:\n        tmpNum&#x3D;minNum\n        print(tmpNum, end&#x3D;&#39;,&#39;)\n        minNum&#x3D;maxNum\n        maxNum+&#x3D;tmpNum\n        num-&#x3D;1\n\nFibonacci_print()\nprint(Fibonacci_print.__name__)\r\n输出为：\r\n[log]func: Fibonacci_print is called, it&#39;s another function\n0,1,1,2,3,5,8,13,21,34,cost time: 0.07s\nanotherFunc\r\n再论 @wraps(func) 装饰器实现原理。\r\n纠正下楼上 @DragonZ\r\n描述的基本代码框架，应该是如下：\r\ndef Wraps(fWrap):\n    def TmpWraps(func):\n        def WrapsDecorator(*args, **kwargs):\n            return func(*args, **kwargs)\n            WrapsDecorator.__name__&#x3D;fWrap.__name__\n            WrapsDecorator.__doc__&#x3D;fWrap.__doc__\n        return WrapsDecorator\n    return TmpWraps\r\n并且该装饰器不仅仅只是复制了__name__ 和 doc\r\n函数元信息，还有更多其他信息，正确的实现代码如下：\r\ndef mywraps(fwrap):\n    def TmpWraps(func):\n        def dec(**args):\n            return func(**args)\n        meta_info&#x3D;[&#39;__module__&#39;, &#39;__name__&#39;, &#39;__qualname__&#39;, &#39;__doc__&#39;, &#39;__annotations__&#39;]\n        for meta in meta_info:\n            setattr(dec,meta,getattr(fwrap,meta))\n        #逐个获取fwrap函数的元信息，并复制到dec函数上\n        return dec\n    return TmpWraps\r\n另外，针对类装饰器，可能下面这样解释，会对初学者更加友好：\r\n装饰器还可以通过类来实现，其实主要是利用类的以下特点来变相实现函数装饰器功能：\r\n函数调用语语法f()等同于类的实例化，即调用类的__init__函数创建对象\r\n对象的调用obj()等同于运行对象的__call__魔法函数\r\n通过类实现装饰器，可以避免函数装饰器超过2层的嵌套情况，因为如果有三层的话，最外层函数可以认为是在调用类的__init__函数，这样可以让代码更易读和维护\r\n本质，只要实现类的__init__和__call__魔法函数，并在__init__函数内接受装饰器参数，在__call__函数内实现具体装饰器结构即可\r\n下面举例，用类实现带参装饰器，可以观察下不同\r\nfrom functools import wraps \n#定义一个装饰器名称的类\nclass  with_para_decorator: \n    #在类的__init__函数内接受装饰器参数，并赋值给类的实例参数，这样可以让其他函数随时使用\n    #当然，如果装饰器没有参数，此处不转a,b即可，相当于类无参实例化\n    def __init__(self,a,b):    \n        self.a&#x3D;a\n        self.b&#x3D;b\n    #在类的__call__函数内接受被装饰函数，并具体定义装饰器\n    def __call__(self,func):   \n    @wraps(func)   \n    def wrap_function(arg1,arg2):  \n        print(&#39;装饰带参数的函数，函数传的参数为：&#123;0&#125;, &#123;1&#125;&#39;.format(arg1,arg2))\n        print(&#39;带参数的装饰器，装饰器传的参数为：&#123;0&#125;, &#123;1&#125;&#39;.format(self.a,self.b))\n        return func(arg1,arg2)   \n    return wrap_function\n#使用装饰器\n@with_para_decorator(1,2)  \ndef need_decorate(a,b):   \npass\nneed_decorate(4,5) \r\n以上代码具体原理解析如下：\r\n\r\n@with_para_decorator(1,2)，因为是类的名称，相当于使用(1,2)参数创建并返回该类的一个实例对象，比如是\r\nobj\r\n此时，语法变为@obj，相当于need_decorate=obj(need_decorate)，此时会调用obj.__call__魔法函数，而我们在该魔法函数具体实现了装饰器功能\r\n可以看到，其本质的运行原理，和函数装饰器没区别，只是将三层函数嵌套，变成了一个__init__函数和__call__函数的两层嵌套\r\n对比下来，可以看到，类装饰器，代码更加直观\r\n\r\nLink:\r\n\r\nPython\r\n函数装饰器 | 菜鸟教程 (runoob.com)\r\npython 装饰器详解 -\r\n知乎 (zhihu.com)\r\nfunctools\r\n— Higher-order functions and operations on callable objects — Python\r\n3.10.7 documentation\r\n什么是闭包？闭包的优缺点？\r\n| 菜鸟教程 (runoob.com)\r\n闭包\r\n- JavaScript | MDN (mozilla.org)\r\n\r\n","slug":"Language Learning/Python/装饰器","date":"2022-02-13T04:07:03.000Z","categories_index":"Python","tags_index":"Python,装饰器","author_index":"JBR_Bunjie"},{"id":"27c6570818e84ff29315fbf9edc38ab5","title":"Linux系统命令","content":"查看linux下的所有用户的方法是：可以通过查看/etc/passwd文件来实现。/etc/passwd文件包含了每个用户的基本信息，当我们在系统中创建了一个新用户，新用户的详细信息就会被添加到这个文件中。\r\n从了解你的计算机开始\r\n检查计算机硬件\r\n&gt; cat &#x2F;etc&#x2F;os-rel\n&gt; cat &#x2F;proc&#x2F;cpuinfo # 查看CPU信息 \n&gt; cat &#x2F;proc&#x2F;cpuinfo | grep &quot;model name&quot; # 仅查看CPU内核\n\n&gt; cat &#x2F;proc&#x2F;meminfo # 查看内存\n&gt; cat &#x2F;proc&#x2F;meminfo | grep MemTotal # 仅查看内存大小\n\n&gt; fdisk -l # 硬盘大小 \n&gt; fdisk -l | grep Disk # 仅查看Disk信息\n\n&gt; lsusb -tv # 列出所有USB设备的linux系统信息命令\n&gt; lspci -tv # 列出所有PCI设备\r\n了解计算机当前操作系统相关信息\r\n&gt; uname -a # 查看内核&#x2F;操作系统&#x2F;CPU信息 \n&gt; hostname # 查看计算机名称\n&gt; cat &#x2F;etc&#x2F;issue # 查看操作系统版本，是数字1不是字母L\n&gt; env # 查看环境变量资源\n&gt; df -h # 查看各分区使用情况\r\n检测当前计算机进程\r\n&gt; top # 实时显示: 进程PID 用户 CPU占用率 等等信息\n&gt; ps -ef # 查看所有进程\n&gt; free -m # 查看内存使用量和交换区使用量\n&gt; lsmod # 列出加载的内核模块\r\n防火墙\r\n&gt; firewall-cmd --state # 查看火墙状态\r\n软件\r\n&gt; rpm -qa # 查看所有安装的软件包\r\n环境变量\r\n&gt; env # 查看环境变量资源\r\n# uname -a # 查看内核&#x2F;操作系统&#x2F;CPU信息 \n# head -n 1 &#x2F;etc&#x2F;issue # 查看操作系统版本 \n# cat &#x2F;proc&#x2F;cpuinfo # 查看CPU信息 \n# hostname # 查看计算机名 \n# lsmod # 列出加载的内核模块 \n# env # 查看环境变量资源 \n# free -m # 查看内存使用量和交换区使用量 \n# df -h # 查看各分区使用情况 \n# du -sh &lt;目录名&gt; # 查看指定目录的大小 \n# grep MemTotal &#x2F;proc&#x2F;meminfo # 查看内存总量 \n# grep MemFree &#x2F;proc&#x2F;meminfo # 查看空闲内存量 \n# uptime # 查看系统运行时间、用户数、负载 \n# cat &#x2F;proc&#x2F;loadavg # 查看系统负载磁盘和分区 \n# mount | column -t # 查看挂接的分区状态 \n# fdisk -l # 查看所有分区 \n# swapon -s # 查看所有交换分区 \n# hdparm -i &#x2F;dev&#x2F;hda # 查看磁盘参数(仅适用于IDE设备) \n# dmesg | grep IDE # 查看启动时IDE设备检测状况网络 \n# ifconfig # 查看所有网络接口的属性 \n# iptables -L # 查看防火墙设置 \n# route -n # 查看路由表 \n# netstat -lntp # 查看所有监听端口 \n# netstat -antp # 查看所有已经建立的连接 \n# netstat -s # 查看网络统计信息进程 \n# ps -ef # 查看所有进程 \n# top # 实时显示进程状态用户 \n# w # 查看活动用户 \n# id &lt;用户名&gt; # 查看指定用户信息 \n# last # 查看用户登录日志 \n# cut -d: -f1 &#x2F;etc&#x2F;passwd # 查看系统所有用户 \n# cut -d: -f1 &#x2F;etc&#x2F;group # 查看系统所有组 \n# crontab -l # 查看当前用户的计划任务服务 \n# chkconfig –list # 列出所有系统服务 \n# chkconfig –list | grep on # 列出所有启动的系统服务程序 \n# rpm -qa # 查看所有安装的软件包\n# du -sh # 查看指定目录的大小\n# 十五、grep MemTotal &#x2F;proc&#x2F;meminfo # 查看内存总量\n# 十六、grep MemFree &#x2F;proc&#x2F;meminfo # 查看空闲内存量\n# 十七、uptime # 查看系统运行时间、用户数、负载\n# 十八、cat &#x2F;proc&#x2F;loadavg # 查看系统负载磁盘和分区\n# 十九、mount | column -t # 查看挂接的分区状态\n# 二十、fdisk -l # 查看所有分区\n# 二十一、swapon -s # 查看所有交换分区\n# 二十二、hdparm -i &#x2F;dev&#x2F;hda # 查看磁盘参数(仅适用于IDE设备)\n# 二十三、dmesg | grep IDE # 查看启动时IDE设备检测状况网络\n# 二十四、ifconfig # 查看所有网络接口的属性\n# 二十五、iptables -L # 查看防火墙设置\n# 二十六、route -n # 查看路由表\n# 二十七、netstat -lntp # 查看所有监听端口\n# 二十八、netstat -antp # 查看所有已经建立的连接\n# 二十九、netstat -s # 查看网络统计信息进程\n# 三十、ps -ef # 查看所有进程\n# 三十一、top # 实时显示进程状态用户\n# 三十二、w # 查看活动用户\n# 三十三、id # 查看指定用户信息\n# 三十四、last # 查看用户登录日志\n# 三十五、cut -d: -f1 &#x2F;etc&#x2F;passwd # 查看系统所有用户\n# 三十六、cut -d: -f1 &#x2F;etc&#x2F;group # 查看系统所有组\n# 三十七、crontab -l # 查看当前用户的计划任务服务\n# 三十七、chkconfig –list # 列出所有系统服务\n# 三十八、chkconfig –list | grep on # 列出所有启动的系统服务程序\n# 三十九、rpm -qa # 查看所有安装的软件包\n# 四十、cat &#x2F;proc&#x2F;cpuinfo ：查看CPU相关参数的linux系统命令\n# 四十一、cat &#x2F;proc&#x2F;partitions ：查看linux硬盘和分区信息的系统信息命令\n# 四十二、cat &#x2F;proc&#x2F;meminfo ：查看linux系统内存信息的linux系统命令\n# 四十三、cat &#x2F;proc&#x2F;version ：查看版本，类似uname -r\n# 四十四、cat &#x2F;proc&#x2F;ioports ：查看设备io端口\n# 四十五、cat &#x2F;proc&#x2F;interrupts ：查看中断\n# 四十六、cat &#x2F;proc&#x2F;pci ：查看pci设备的信息\n# 四十七、cat &#x2F;proc&#x2F;swaps ：查看所有swap分区的信息\r\nhead 命令可用于查看文件的开头部分的内容，有一个常用的参数\r\n-n 用于显示行数，默认为 10，即显示 10 行的内容。\r\nnohup：Linux nohup\r\n命令 | 菜鸟教程 (runoob.com)\r\nnohup Command [ Arg … ] [　&amp; ]\r\nCommand：要执行的命令。\r\nArg：一些参数，可以指定输出文件。\r\n&amp;：让命令在后台执行，终端退出后命令仍旧执行。\r\n了解\r\ntar命令\r\ntar命令语句范式：\r\ntar [options][archive-file] [file or dir to be archived] #\r\nls命令\r\nmv命令\r\nCat命令\r\nCat Command in\r\nLinux {15 Commands with Examples} | phoenixNAP KB\r\nrm命令\r\ntouch命令：\r\nLinux\r\ntouch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。\r\nls -l 可以显示档案的时间记录。\r\n语法\r\ntouch [-acfm][-d&lt;日期时间&gt;][-r&lt;参考文件或目录&gt;] [-t&lt;日期时间&gt;][--help][--version][文件或目录…]\r\n\r\n参数说明：\r\na 改变档案的读取时间记录。\r\nm 改变档案的修改时间记录。\r\nc 假如目的档案不存在，不会建立新的档案。与 --no-create\r\n的效果一样。\r\nf 不使用，是为了与其他 unix 系统的相容性而保留。\r\nr 使用参考档的时间记录，与 --file 的效果一样。\r\nd 设定时间与日期，可以使用各种不同的格式。\r\nt 设定档案的时间记录，格式与 date 指令相同。\r\n--no-create 不会建立新档案。\r\n--help 列出指令格式。\r\n--version 列出版本讯息。\r\n\r\ngetsebool命令:\r\n\r\n\r\nimage-20210918233125352\r\n\r\n将enforcing修改为permissive或者disabled\r\nkill命令\r\ncat command\r\nCat (concatenate) command is very frequently used in Linux. It reads\r\ndata from the file and gives their content as output. It helps us to\r\ncreate, view, concatenate files.\r\nrpm命令\r\ngrep命令\r\n| 字符：\r\nmake命令：\r\n查看命令路径：\r\ntype python3\n# -------\nwhere python3\n# -------\nwhereis python3\r\n启动服务\r\nsudo service ssh start\n\n#检测：\n#ssh localhost\r\n重启服务\r\nsudo service sshd restart\r\n系统控制命令：\r\n\r\nreboot\r\nshutdown\r\n\r\n","slug":"Softwares/Linux/LinuxSystemInfo/Linux学习-系统","date":"2022-01-16T03:07:03.000Z","categories_index":"Linux","tags_index":"Linux","author_index":"JBR_Bunjie"},{"id":"621559a04c513067db5b60b8cc5426d0","title":"直接利用命令行传输文件","content":"FTP命令\r\nftp ftp.kernel.org #发起链接请求 \r\n参数：\r\n\r\n-d 详细显示指令执行过程，便于排错或分析程序执行的情形。\r\n-i 关闭互动模式，不询问任何问题。\r\n-g 关闭本地主机文件名称支持特殊字符的扩充特性。\r\n-n 不使用自动登陆。\r\n-v 显示指令执行过程。\r\n\r\n几个简单的命令：\r\nls # 显示全部内容\n\nget &lt;filename&gt; # 下载\nmget &lt;filename&gt; # 批量下载\n\nput &lt;filename&gt; # 上传\nmput &lt;filename&gt; # 批量上传\n\ncdup # 快速移动到当前目录的父目录\n\ndelete # 删除\nmdelete # p\r\n详细可以看-&gt;How\r\nto Use the FTP Command on Linux (howtogeek.com)\r\n顺便，关于sftp...\r\nThe FTP commands we have described above will work just the same in\r\nan SFTP session, with the following exceptions.\r\n\r\nTo delete a file use rm (FTP uses\r\ndelete)\r\nTo delete multiple files use rm (FTP uses\r\nmdelete)\r\nTo move to the parent directory use cd .. (FTP uses\r\ncdup)\r\n\r\n\r\nscp命令\r\n推荐：Linux scp\r\ncommand help and examples (computerhope.com)\r\nscp命令(secure copy)用于 Linux 之间进行的文件和目录复制。\r\nscp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令\r\nscp 是加密的，rcp\r\n是不加密的，scp 是 rcp 的加强版\r\n语法\r\n# scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file] [-l limit] [-o ssh_option] [-P port] [-S program][[user@]host1:]file1 [...] [[user@]host2:]file2\r\n简易写法:\r\n#scp [可选参数] file_source file_target \r\n参数说明：\r\n\r\n-1： 强制scp命令使用协议ssh1\r\n-2： 强制scp命令使用协议ssh2\r\n-4： 强制scp命令只使用IPv4寻址\r\n-6： 强制scp命令只使用IPv6寻址\r\n-B： 使用批处理模式（传输过程中不询问传输口令或短语）\r\n-C： 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）\r\n-p：保留原文件的修改时间，访问时间和访问权限。\r\n-q： 不显示传输进度条。\r\n-r： 递归复制整个目录。\r\n-v：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。\r\n-c cipher：\r\n以cipher将数据传输进行加密，这个选项将直接传递给ssh。\r\n-F ssh_config：\r\n指定一个替代的ssh配置文件，此参数直接传递给ssh。\r\n-i identity_file：\r\n从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。\r\n-l limit： 限定用户所能使用的带宽，以Kbit/s为单位。\r\n-o ssh_option： 如果习惯于使用ssh_config(5)中的参数传递方式，\r\n-P port：注意是大写的P, port是指定数据传输用到的端口号\r\n-S program：\r\n指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。\r\n\r\n实例\r\n1、从本地复制到远程\r\n命令格式：\r\nscp local_file remote_username@remote_ip:remote_folder \n#或者 \nscp local_file remote_username@remote_ip:remote_file \n#或者 \nscp local_file remote_ip:remote_folder \n#或者 \nscp local_file remote_ip:remote_file \r\n解释：\r\n\r\n第1,2个指定了用户名，命令执行后需要再输入密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名；\r\n第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名；\r\n\r\n应用实例：\r\nscp &#x2F;home&#x2F;space&#x2F;music&#x2F;1.mp3 root@www.runoob.com:&#x2F;home&#x2F;root&#x2F;others&#x2F;music \nscp &#x2F;home&#x2F;space&#x2F;music&#x2F;1.mp3 root@www.runoob.com:&#x2F;home&#x2F;root&#x2F;others&#x2F;music&#x2F;001.mp3 \nscp &#x2F;home&#x2F;space&#x2F;music&#x2F;1.mp3 www.runoob.com:&#x2F;home&#x2F;root&#x2F;others&#x2F;music \nscp &#x2F;home&#x2F;space&#x2F;music&#x2F;1.mp3 www.runoob.com:&#x2F;home&#x2F;root&#x2F;others&#x2F;music&#x2F;001.mp3 \r\n复制目录命令格式：\r\nscp -r local_folder remote_username@remote_ip:remote_folder \n#或者 \nscp -r local_folder remote_ip:remote_folder \r\n\r\n第1个指定了用户名，命令执行后需要再输入密码；\r\n第2个没有指定用户名，命令执行后需要输入用户名和密码；\r\n\r\n应用实例：\r\nscp -r &#x2F;home&#x2F;space&#x2F;music&#x2F; root@www.runoob.com:&#x2F;home&#x2F;root&#x2F;others&#x2F; \nscp -r &#x2F;home&#x2F;space&#x2F;music&#x2F; www.runoob.com:&#x2F;home&#x2F;root&#x2F;others&#x2F; \r\n上面命令将本地 music 目录复制到远程 others 目录下。\r\n2、从远程复制到本地\r\n从远程复制到本地，只要将从本地复制到远程的命令的后2个参数调换顺序即可，如下实例\r\n应用实例：\r\nscp root@www.runoob.com:&#x2F;home&#x2F;root&#x2F;others&#x2F;music &#x2F;home&#x2F;space&#x2F;music&#x2F;1.mp3 \nscp -r www.runoob.com:&#x2F;home&#x2F;root&#x2F;others&#x2F; &#x2F;home&#x2F;space&#x2F;music&#x2F;\r\n说明\r\n1.如果远程服务器防火墙有为scp命令设置了指定的端口，我们需要使用 -P\r\n参数来设置命令的端口号，命令格式如下：\r\n#scp 命令使用端口号 4588\nscp -P 4588 remote@www.runoob.com:&#x2F;usr&#x2F;local&#x2F;sin.sh &#x2F;home&#x2F;administrator\r\n2.使用scp命令要确保使用的用户具有可读取远程服务器相应文件的权限，否则scp命令是无法起作用的。\r\n\r\ncurl命令\r\nofficial site：curl\r\nsource code：curl/curl: A\r\ncommand line tool and library for transferring data with URL syntax,\r\nsupporting DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP,\r\nIMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP,\r\nSMB, SMBS, SMTP, SMTPS, TELNET and TFTP. libcurl offers a myriad of\r\npowerful features (github.com)\r\nofficial tutorial：curl -\r\nTutorial\r\nthird party tutorial：\r\ncurl\r\n的用法指南 - 阮一峰的网络日志 (ruanyifeng.com)\r\nCurl Cookbook\r\n(catonmat.net)\r\n不带有任何参数时，curl 就是发出 GET 请求。\r\ncurl https:&#x2F;&#x2F;www.example.com\r\n上面命令向www.example.com发出 GET\r\n请求，服务器返回的内容会在命令行输出。\r\n-A\r\n-A参数指定客户端的用户代理标头，即User-Agent。curl\r\n的默认用户代理字符串是curl/[version]。\r\ncurl -A &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;76.0.3809.100 Safari&#x2F;537.36&#39; https:&#x2F;&#x2F;google.com\r\n上面命令将User-Agent改成 Chrome 浏览器。\r\ncurl -A &#39;&#39; https:&#x2F;&#x2F;google.com\r\n上面命令会移除User-Agent标头。\r\n也可以通过-H参数直接指定标头，更改User-Agent。\r\ncurl -H &#39;User-Agent: php&#x2F;1.0&#39; https:&#x2F;&#x2F;google.com\r\n-b\r\n-b参数用来向服务器发送 Cookie。\r\ncurl -b &#39;foo&#x3D;bar&#39; https:&#x2F;&#x2F;google.com\r\n上面命令会生成一个标头Cookie: foo=bar，向服务器发送一个名为foo、值为bar的\r\nCookie。\r\ncurl -b &#39;foo1&#x3D;bar;foo2&#x3D;bar2&#39; https:&#x2F;&#x2F;google.com\r\n上面命令发送两个 Cookie。\r\ncurl -b cookies.txt https:&#x2F;&#x2F;www.google.com\r\n上面命令读取本地文件cookies.txt，里面是服务器设置的\r\nCookie（参见-c参数），将其发送到服务器。\r\n-c\r\n-c参数将服务器设置的 Cookie 写入一个文件。\r\ncurl -c cookies.txt https:&#x2F;&#x2F;www.google.com\r\n上面命令将服务器的 HTTP 回应所设置 Cookie\r\n写入文本文件cookies.txt。\r\n-d\r\n-d参数用于发送 POST 请求的数据体。\r\ncurl -d&#39;login&#x3D;emma＆password&#x3D;123&#39;-X POST https:&#x2F;&#x2F;google.com&#x2F;login\n# 或者\ncurl -d &#39;login&#x3D;emma&#39; -d &#39;password&#x3D;123&#39; -X POST  https:&#x2F;&#x2F;google.com&#x2F;login\r\n使用-d参数以后，HTTP\r\n请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为\r\nPOST 方法，因此可以省略-X POST。\r\n-d参数可以读取本地文本文件的数据，向服务器发送。\r\ncurl -d &#39;@data.txt&#39; https:&#x2F;&#x2F;google.com&#x2F;login\r\n上面命令读取data.txt文件的内容，作为数据体向服务器发送。\r\n--data-urlencode\r\n--data-urlencode参数等同于-d，发送 POST\r\n请求的数据体，区别在于会自动将发送的数据进行 URL 编码。\r\ncurl --data-urlencode &#39;comment&#x3D;hello world&#39; https:&#x2F;&#x2F;google.com&#x2F;login\r\n上面代码中，发送的数据hello world之间有一个空格，需要进行\r\nURL 编码。\r\n-e\r\n-e参数用来设置 HTTP\r\n的标头Referer，表示请求的来源。\r\ncurl -e &#39;https:&#x2F;&#x2F;google.com?q&#x3D;example&#39; https:&#x2F;&#x2F;www.example.com\r\n上面命令将Referer标头设为https://google.com?q=example。\r\n-H参数可以通过直接添加标头Referer，达到同样效果。\r\ncurl -H &#39;Referer: https:&#x2F;&#x2F;google.com?q&#x3D;example&#39; https:&#x2F;&#x2F;www.example.com\r\n-F\r\n-F参数用来向服务器上传二进制文件。\r\ncurl -F &#39;file&#x3D;@photo.png&#39; https:&#x2F;&#x2F;google.com&#x2F;profile\r\n上面命令会给 HTTP\r\n请求加上标头Content-Type: multipart/form-data，然后将文件photo.png作为file字段上传。\r\n-F参数可以指定 MIME 类型。\r\ncurl -F &#39;file&#x3D;@photo.png;type&#x3D;image&#x2F;png&#39; https:&#x2F;&#x2F;google.com&#x2F;profile\r\n上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME\r\n类型设为application/octet-stream。\r\n-F参数也可以指定文件名。\r\ncurl -F &#39;file&#x3D;@photo.png;filename&#x3D;me.png&#39; https:&#x2F;&#x2F;google.com&#x2F;profile\r\n上面命令中，原始文件名为photo.png，但是服务器接收到的文件名为me.png。\r\n-G\r\n-G参数用来构造 URL 的查询字符串。\r\ncurl -G -d &#39;q&#x3D;kitties&#39; -d &#39;count&#x3D;20&#39; https:&#x2F;&#x2F;google.com&#x2F;search\r\n上面命令会发出一个 GET 请求，实际请求的 URL\r\n为https://google.com/search?q=kitties&amp;count=20。如果省略--G，会发出一个\r\nPOST 请求。\r\n如果数据需要 URL\r\n编码，可以结合--data--urlencode参数。\r\ncurl -G --data-urlencode &#39;comment&#x3D;hello world&#39; https:&#x2F;&#x2F;www.example.com\r\n-H\r\n-H参数添加 HTTP 请求的标头。\r\ncurl -H &#39;Accept-Language: en-US&#39; https:&#x2F;&#x2F;google.com\r\n上面命令添加 HTTP 标头Accept-Language: en-US。\r\ncurl -H &#39;Accept-Language: en-US&#39; -H &#39;Secret-Message: xyzzy&#39; https:&#x2F;&#x2F;google.com\r\n上面命令添加两个 HTTP 标头。\r\ncurl -d &#39;&#123;&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;&#125;&#39; -H &#39;Content-Type: application&#x2F;json&#39; https:&#x2F;&#x2F;google.com&#x2F;login\r\n上面命令添加 HTTP\r\n请求的标头是Content-Type: application/json，然后用-d参数发送\r\nJSON 数据。\r\n-i\r\n-i参数打印出服务器回应的 HTTP 标头。\r\ncurl -i https:&#x2F;&#x2F;www.example.com\r\n上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。\r\n-I\r\n-I参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP\r\n标头打印出来。\r\ncurl -I https:&#x2F;&#x2F;www.example.com\r\n上面命令输出服务器对 HEAD 请求的回应。\r\n--head参数等同于-I。\r\ncurl --head https:&#x2F;&#x2F;www.example.com\r\n-k\r\n-k参数指定跳过 SSL 检测。\r\ncurl -k https:&#x2F;&#x2F;www.example.com\r\n上面命令不会检查服务器的 SSL 证书是否正确。\r\n-L\r\n-L参数会让 HTTP 请求跟随服务器的重定向。curl\r\n默认不跟随重定向。\r\ncurl -L -d &#39;tweet&#x3D;hi&#39; https:&#x2F;&#x2F;api.twitter.com&#x2F;tweet\r\n--limit-rate\r\n--limit-rate用来限制 HTTP\r\n请求和回应的带宽，模拟慢网速的环境。\r\ncurl --limit-rate 200k https:&#x2F;&#x2F;google.com\r\n上面命令将带宽限制在每秒 200K 字节。\r\n-o\r\n-o参数将服务器的回应保存成文件，等同于wget命令。\r\ncurl -o example.html https:&#x2F;&#x2F;www.example.com\r\n上面命令将www.example.com保存成example.html。\r\n-O\r\n-O参数将服务器回应保存成文件，并将 URL\r\n的最后部分当作文件名。\r\ncurl -O https:&#x2F;&#x2F;www.example.com&#x2F;foo&#x2F;bar.html\r\n上面命令将服务器回应保存成文件，文件名为bar.html。\r\n-s\r\n-s参数将不输出错误和进度信息。\r\ncurl -s https:&#x2F;&#x2F;www.example.com\r\n上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。\r\n如果想让 curl 不产生任何输出，可以使用下面的命令。\r\ncurl -s -o &#x2F;dev&#x2F;null https:&#x2F;&#x2F;google.com\r\n-S\r\n-S参数指定只输出错误信息，通常与-s一起使用。\r\ncurl -s -o &#x2F;dev&#x2F;null https:&#x2F;&#x2F;google.com\r\n上面命令没有任何输出，除非发生错误。\r\n-u\r\n-u参数用来设置服务器认证的用户名和密码。\r\ncurl -u &#39;bob:12345&#39; https:&#x2F;&#x2F;google.com&#x2F;login\r\n上面命令设置用户名为bob，密码为12345，然后将其转为\r\nHTTP 标头Authorization: Basic Ym9iOjEyMzQ1。\r\ncurl 能够识别 URL 里面的用 户名和密码。\r\ncurl https:&#x2F;&#x2F;bob:12345@google.com&#x2F;login\r\n上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP\r\n标头。\r\ncurl -u &#39;bob&#39; https:&#x2F;&#x2F;google.com&#x2F;login\r\n上面命令只设置了用户名，执行后，curl 会提示用户输入密码。\r\n-v\r\n-v参数输出通信的整个过程，用于调试。\r\ncurl -v https:&#x2F;&#x2F;www.example.com\r\n--trace参数也可以用于调试，还会输出原始的二进制数据。\r\ncurl --trace - https:&#x2F;&#x2F;www.example.com\r\n-x\r\n-x参数指定 HTTP 请求的代理。\r\ncurl -x socks5:&#x2F;&#x2F;james:cats@myproxy.com:8080 https:&#x2F;&#x2F;www.example.com\r\n上面命令指定 HTTP 请求通过myproxy.com:8080的 socks5\r\n代理发出。\r\n如果没有指定代理协议，默认为 HTTP。\r\ncurl -x james:cats@myproxy.com:8080 https:&#x2F;&#x2F;www.example.com\r\n上面命令中，请求的代理使用 HTTP 协议。\r\n-X\r\n-X参数指定 HTTP 请求的方法。\r\ncurl -X POST https:&#x2F;&#x2F;www.example.com\r\n上面命令对https://www.example.com发出 POST 请求。\r\n\r\nwget命令\r\nWget - GNU Project -\r\nFree Software Foundation\r\n","slug":"Softwares/Linux/Linux学习-命令行下载或上传","date":"2022-01-15T03:07:03.000Z","categories_index":"Linux","tags_index":"FTP,SCP","author_index":"JBR_Bunjie"},{"id":"2679faecf929a89d04089c85f6582773","title":"从Json杀到Yaml","content":"从Json杀到Yaml\r\nJson介绍\r\n什么是Json？\r\n\r\nJSON (JavaScript Object Notation) is a lightweight\r\ndata-interchange format. It is easy for humans to read and write. It is\r\neasy for machines to parse and generate. It is based on a subset of the\r\nJavaScript Programming Language Standard ECMA-262 3rd Edition - December\r\n1999. JSON is a text format that is completely language independent but\r\nuses conventions that are familiar to programmers of the C-family of\r\nlanguages, including C, C++, C#, Java, JavaScript, Perl, Python, and\r\nmany others. These properties make JSON an ideal data-interchange\r\nlanguage.\r\n\r\nJson是一种轻量级数据交换格式。它有着可读性高，易于机器解析和生成的优点，它是编程语言Js\r\n第三版ECMA-262规范的一个子集。JSON\r\n是一种完全独立于语言的文本格式，但是却使用了C系程序员熟悉的相关约定如C,\r\nC++, C#, Java, JavaScript, Perl, Python, and many others。这些特性使\r\nJSON 成为一种理想的数据交换语言。\r\n\r\n\r\nJson语法\r\nJson is built on two structures:\r\n\r\nA collection of name/value pairs. In various languages, this is\r\nrealized as an object, record, struct, dictionary, hash table,\r\nkeyed list, or associative array.\r\nAn ordered list of values. In most languages, this is realized as an\r\narray, vector, list, or sequence.\r\n\r\nThese are universal data structures. Virtually all modern programming\r\nlanguages support them in one form or another. It makes sense that a\r\ndata format that is interchangeable with programming languages also be\r\nbased on these structures.\r\n这些是通用的数据结构。几乎所有的现代编程语言都以这样或那样的形式支持它们。所以一个可以融入编程语言的数据格式自然也应当基于这些结构来设计。\r\n&#123;\n    &quot;object1&quot;: [\n    &#123; &quot;key1.1&quot;:&quot;value1.1&quot; , &quot;key1.2&quot;:&quot;value1.2&quot; &#125;, \n    &#123; &quot;key2.1&quot;:&quot;value2.1&quot; , &quot;key2.2&quot;:&quot;value2.2&quot; &#125;, \n    ...\n    ],\n    &quot;object2&quot;:&quot;valueForObject2&quot;,\n    &quot;object3&quot;: ...\n&#125;\r\nJson整体是一个对象Object，其中内容是无序的name/value键值对集合，name以string构建，value可以以array,\r\nstring, number, object,\r\ntrue,\r\nfalse和null中的任意一种来构建。array中的元素一般为Object的对象，value又可以直接调用Object，如此便形成嵌套。name与value以\r\n:分隔。\r\n当我们引用Json数据时，我们对Object中的键值使用点计法取名引用，对数组数据用一般引用数组的办法Array[\r\nn ]来引用\r\n\r\n原生Json并不支持注释，如果一定需要使用注释，可以查阅Json\r\nschema或者换用JSON5，虽然JSON5是第三方库，但仍然严格符合JS标准，并且JSON5.parse与JSON.parse的解析结果一致。当然，你也可以直接换用换用下面的Yaml\r\n\r\nYaml介绍\r\n\r\nYAML Ain't Markup Language, YAML is a human\r\nfriendly data serialization language for all programming languages.\r\n\r\n有意思的是，虽然YAML是YAML Ain't Markup\r\nLanguage的缩写，但是这个缩写中的YAML其实是Yet Another Markup\r\nLanguage的缩写，即：这是一个标记语言。正式名称改为了“不是标记语言”，这一点颇为有趣，也耐人寻味——强调其以数据作为重心，而非标记语言。\r\n截止2021.9.27，Yaml的最新版本为1.2.1(发布于2009.10.1)\r\n到2021.10.1，Yaml发布了最新版：1.2.2\r\n\r\nWe are excited to announce the release of Revision 1.2.2 of the YAML 1.2\r\nSpecification. This revision comes 12 years to the day after the previous revision.\r\n\r\n如果你没有耐心啃最新的文档的话，你只需要看一句话：No normative\r\nchanges from the 1.2.1 revision. YAML 1.2 has not been changed. 就行\r\nyaml优点\r\n\r\nThe design goals for YAML are, in decreasing priority: + YAML is\r\neasily readable by humans.（易读 + YAML data is portable between\r\nprogramming languages.（跨语言 + YAML matches the native data structures\r\nof agile languages.（与当前语言的数据结构兼容 + YAML has a consistent\r\nmodel to support generic tools.（支持通用工具 + YAML supports one-pass\r\nprocessing. + YAML is expressive and extensible. + YAML is easy to\r\nimplement and use.\r\n\r\n\r\nYAML中没有额外的定界符，所以相比JSON更轻量级。\r\n没有额外定界符，所以更易读（不过这一点颇为激进，时至今日仍有很多开发者无法接受这种以缩进来界定结构的做法，因为经常出现“一个空格引发的悲剧”）\r\nYAML使数据更易于理解，因此常用于配置文件中（很经常看见别人将.properties改为.yaml）\r\nYAML是JSON\r\n的超集，对于合法的JSON代码，同样可以被YAML解析，这样对于使用JSON和YAML的应用来说，可以使用一个解析器完成两种解析。\r\n然而其并没有如期望中那样受欢迎，具体而言，因为不同的序列化语言都有其特定的适宜语言或者场景（下文可以提到），并且相较于其他广泛使用的序列化语言，YAML有一些不足。\r\n\r\nYAML使用场景\r\n对于序列化语言来说，使用场景如下：\r\n\r\n与服务器之间传输数据\r\n使用一个配置文件来配置应用，这些文件声明对应参数和相应取值\r\n在同一个应用不同组件之间转换数据\r\n中间数据存储：针对此类场景，YAML有一些明确的优势相比于其他同类语言。也是为什么现在越来越多的开发者使用其的地方。\r\n\r\nYAML语法：\r\nYaml与Json一样同时支持对象和数组，但是Yaml将其余的所有值全部归为“纯量”\r\n# yaml代码示例：\nlanguages:\n  - Ruby\n  - Perl\n  - Python \n  # 以 - 开头的行表示构成一个数组\nwebsites:\n  YAML: yaml.org \n  Ruby: ruby-lang.org \n  Python: python.org \n  Perl: use.perl.org\n  # 对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格。\n\ncompanies:\n    -\n        id: 1\n        name: company1\n        price: 200W\n    -\n        id: 2\n        name: company2\n        price: 500W\n        # 意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成。\r\n转换为 json 为：\r\n&#123; \n  languages: [&#39;Ruby&#39;, &#39;Perl&#39;, &#39;Python&#39;],\n  websites: &#123;\n    YAML: &#39;yaml.org&#39;,\n    Ruby: &#39;ruby-lang.org&#39;,\n    Python: &#39;python.org&#39;,\n    Perl: &#39;use.perl.org&#39; \n  companies: [&#123;\n      \tid: 1,\n      \tname: company1,\n      \tprice: 200W\n  \t  &#125;, &#123;\n    \tid: 2,\n    \tname: company2,\n    \tprice: 500W\n\t&#125;]\n  &#125; \n&#125;\r\nyaml相比json？\r\n\r\nofficial document:\r\nBoth JSON and YAML aim to be human readable data interchange formats.\r\nHowever, JSON and YAML have different priorities. JSON’s foremost design\r\ngoal is simplicity and universality. Thus, JSON is trivial to generate\r\nand parse, at the cost of reduced human readability. It also uses a\r\nlowest common denominator information model, ensuring any JSON data can\r\nbe easily processed by every modern programming environment.\r\n\r\nJson和Yaml的目标都是人类可读的数据交换格式。但是，Json和Yaml对于目标有不同的优先级。Json格式设计的首要目标是simplicity和universality。因此Json容易生成和解析，代价就是减少可读性。\r\n\r\nIn contrast, YAML’s foremost design goals are human readability and\r\nsupport for serializing\r\narbitrary native\r\ndata structures. Thus, YAML allows for extremely readable files, but\r\nis more complex to generate and parse. In addition, YAML ventures beyond\r\nthe lowest common denominator data types, requiring more complex\r\nprocessing when crossing between different programming environments.\r\nYAML中有很多方式来体系化数据层级，因此处理时会相对复杂些。性能上相对于XML和JSON会有差别。\r\n\r\nyaml与yml区别?\r\n.yaml与.yml都是yaml格式的拓展名，虽然.yaml才是官方推荐的拓展格式，但是到目前为止，yml仍然被广泛使用：GitHub上\r\n.yml相关总提交次数为1千3百万次，而.yaml总次数仅为5百万次\r\n贴一个比较古早的stackoverflow的问题链接：configuration\r\nfiles - Is it .yaml or .yml? - Stack Overflow\r\n如果你不太想看的话，以下由简略版本：\r\n\r\n正方：I like .yml, it's 25% faster to write. ☝😆. Personally, I'm\r\nfine with whichever is the \"standard\"\r\n反方：Some people like to stick to 3 letter extensions as it was back\r\nin the old days when file systems were still limited to short names\r\n\r\n但是我仍然推荐使用yaml，作为官方推荐的拓展格式，它也许可以帮你避免很多意料之外的error。\r\n关于配置文件：是.yaml还是.yml？\r\n| 码农家园 (codenong.com)\r\n本来找到了原文，但是链接丢了(((φ(◎ロ◎;)φ)))，坏欸\r\n\r\n参考资料：\r\n\r\nJSON\r\nJSON Schema\r\n| The home of JSON Schema (json-schema.org) \r\nJSON5 | JSON for\r\nHumans\r\nThe JSON5 Data\r\nInterchange Format\r\nThe Official YAML Web\r\nSite\r\nYAML File\r\nFormat\r\nYAML Documentation · YAML\r\nYAMLlint\r\n- The YAML Validator\r\nyaml/yaml: YAML language and\r\ncommunity information (github.com)\r\n\r\n\r\n\r\n","slug":"Language Learning/从json杀到yaml","date":"2021-11-16T08:15:04.000Z","categories_index":"Programming Language Learning","tags_index":"Json","author_index":"JBR_Bunjie"},{"id":"2679faecf929a89d04089c85f6582773","title":"从Json杀到Yaml","content":"从Json杀到Yaml\r\nJson介绍\r\n什么是Json？\r\n\r\nJSON (JavaScript Object Notation) is a lightweight\r\ndata-interchange format. It is easy for humans to read and write. It is\r\neasy for machines to parse and generate. It is based on a subset of the\r\nJavaScript Programming Language Standard ECMA-262 3rd Edition - December\r\n1999. JSON is a text format that is completely language independent but\r\nuses conventions that are familiar to programmers of the C-family of\r\nlanguages, including C, C++, C#, Java, JavaScript, Perl, Python, and\r\nmany others. These properties make JSON an ideal data-interchange\r\nlanguage.\r\n\r\nJson是一种轻量级数据交换格式。它有着可读性高，易于机器解析和生成的优点，它是编程语言Js\r\n第三版ECMA-262规范的一个子集。JSON\r\n是一种完全独立于语言的文本格式，但是却使用了C系程序员熟悉的相关约定如C,\r\nC++, C#, Java, JavaScript, Perl, Python, and many others。这些特性使\r\nJSON 成为一种理想的数据交换语言。\r\n\r\n\r\nJson语法\r\nJson is built on two structures:\r\n\r\nA collection of name/value pairs. In various languages, this is\r\nrealized as an object, record, struct, dictionary, hash table,\r\nkeyed list, or associative array.\r\nAn ordered list of values. In most languages, this is realized as an\r\narray, vector, list, or sequence.\r\n\r\nThese are universal data structures. Virtually all modern programming\r\nlanguages support them in one form or another. It makes sense that a\r\ndata format that is interchangeable with programming languages also be\r\nbased on these structures.\r\n这些是通用的数据结构。几乎所有的现代编程语言都以这样或那样的形式支持它们。所以一个可以融入编程语言的数据格式自然也应当基于这些结构来设计。\r\n&#123;\n    &quot;object1&quot;: [\n    &#123; &quot;key1.1&quot;:&quot;value1.1&quot; , &quot;key1.2&quot;:&quot;value1.2&quot; &#125;, \n    &#123; &quot;key2.1&quot;:&quot;value2.1&quot; , &quot;key2.2&quot;:&quot;value2.2&quot; &#125;, \n    ...\n    ],\n    &quot;object2&quot;:&quot;valueForObject2&quot;,\n    &quot;object3&quot;: ...\n&#125;\r\nJson整体是一个对象Object，其中内容是无序的name/value键值对集合，name以string构建，value可以以array,\r\nstring, number, object,\r\ntrue,\r\nfalse和null中的任意一种来构建。array中的元素一般为Object的对象，value又可以直接调用Object，如此便形成嵌套。name与value以\r\n:分隔。\r\n当我们引用Json数据时，我们对Object中的键值使用点计法取名引用，对数组数据用一般引用数组的办法Array[\r\nn ]来引用\r\n\r\n原生Json并不支持注释，如果一定需要使用注释，可以查阅Json\r\nschema或者换用JSON5，虽然JSON5是第三方库，但仍然严格符合JS标准，并且JSON5.parse与JSON.parse的解析结果一致。当然，你也可以直接换用换用下面的Yaml\r\n\r\nYaml介绍\r\n\r\nYAML Ain't Markup Language, YAML is a human\r\nfriendly data serialization language for all programming languages.\r\n\r\n有意思的是，虽然YAML是YAML Ain't Markup\r\nLanguage的缩写，但是这个缩写中的YAML其实是Yet Another Markup\r\nLanguage的缩写，即：这是一个标记语言。正式名称改为了“不是标记语言”，这一点颇为有趣，也耐人寻味——强调其以数据作为重心，而非标记语言。\r\n截止2021.9.27，Yaml的最新版本为1.2.1(发布于2009.10.1)\r\n到2021.10.1，Yaml发布了最新版：1.2.2\r\n\r\nWe are excited to announce the release of Revision 1.2.2 of the YAML 1.2\r\nSpecification. This revision comes 12 years to the day after the previous revision.\r\n\r\n如果你没有耐心啃最新的文档的话，你只需要看一句话：No normative\r\nchanges from the 1.2.1 revision. YAML 1.2 has not been changed. 就行\r\nyaml优点\r\n\r\nThe design goals for YAML are, in decreasing priority: + YAML is\r\neasily readable by humans.（易读 + YAML data is portable between\r\nprogramming languages.（跨语言 + YAML matches the native data structures\r\nof agile languages.（与当前语言的数据结构兼容 + YAML has a consistent\r\nmodel to support generic tools.（支持通用工具 + YAML supports one-pass\r\nprocessing. + YAML is expressive and extensible. + YAML is easy to\r\nimplement and use.\r\n\r\n\r\nYAML中没有额外的定界符，所以相比JSON更轻量级。\r\n没有额外定界符，所以更易读（不过这一点颇为激进，时至今日仍有很多开发者无法接受这种以缩进来界定结构的做法，因为经常出现“一个空格引发的悲剧”）\r\nYAML使数据更易于理解，因此常用于配置文件中（很经常看见别人将.properties改为.yaml）\r\nYAML是JSON\r\n的超集，对于合法的JSON代码，同样可以被YAML解析，这样对于使用JSON和YAML的应用来说，可以使用一个解析器完成两种解析。\r\n然而其并没有如期望中那样受欢迎，具体而言，因为不同的序列化语言都有其特定的适宜语言或者场景（下文可以提到），并且相较于其他广泛使用的序列化语言，YAML有一些不足。\r\n\r\nYAML使用场景\r\n对于序列化语言来说，使用场景如下：\r\n\r\n与服务器之间传输数据\r\n使用一个配置文件来配置应用，这些文件声明对应参数和相应取值\r\n在同一个应用不同组件之间转换数据\r\n中间数据存储：针对此类场景，YAML有一些明确的优势相比于其他同类语言。也是为什么现在越来越多的开发者使用其的地方。\r\n\r\nYAML语法：\r\nYaml与Json一样同时支持对象和数组，但是Yaml将其余的所有值全部归为“纯量”\r\n# yaml代码示例：\nlanguages:\n  - Ruby\n  - Perl\n  - Python \n  # 以 - 开头的行表示构成一个数组\nwebsites:\n  YAML: yaml.org \n  Ruby: ruby-lang.org \n  Python: python.org \n  Perl: use.perl.org\n  # 对象键值对使用冒号结构表示 key: value，冒号后面要加一个空格。\n\ncompanies:\n    -\n        id: 1\n        name: company1\n        price: 200W\n    -\n        id: 2\n        name: company2\n        price: 500W\n        # 意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成。\r\n转换为 json 为：\r\n&#123; \n  languages: [&#39;Ruby&#39;, &#39;Perl&#39;, &#39;Python&#39;],\n  websites: &#123;\n    YAML: &#39;yaml.org&#39;,\n    Ruby: &#39;ruby-lang.org&#39;,\n    Python: &#39;python.org&#39;,\n    Perl: &#39;use.perl.org&#39; \n  companies: [&#123;\n      \tid: 1,\n      \tname: company1,\n      \tprice: 200W\n  \t  &#125;, &#123;\n    \tid: 2,\n    \tname: company2,\n    \tprice: 500W\n\t&#125;]\n  &#125; \n&#125;\r\nyaml相比json？\r\n\r\nofficial document:\r\nBoth JSON and YAML aim to be human readable data interchange formats.\r\nHowever, JSON and YAML have different priorities. JSON’s foremost design\r\ngoal is simplicity and universality. Thus, JSON is trivial to generate\r\nand parse, at the cost of reduced human readability. It also uses a\r\nlowest common denominator information model, ensuring any JSON data can\r\nbe easily processed by every modern programming environment.\r\n\r\nJson和Yaml的目标都是人类可读的数据交换格式。但是，Json和Yaml对于目标有不同的优先级。Json格式设计的首要目标是simplicity和universality。因此Json容易生成和解析，代价就是减少可读性。\r\n\r\nIn contrast, YAML’s foremost design goals are human readability and\r\nsupport for serializing\r\narbitrary native\r\ndata structures. Thus, YAML allows for extremely readable files, but\r\nis more complex to generate and parse. In addition, YAML ventures beyond\r\nthe lowest common denominator data types, requiring more complex\r\nprocessing when crossing between different programming environments.\r\nYAML中有很多方式来体系化数据层级，因此处理时会相对复杂些。性能上相对于XML和JSON会有差别。\r\n\r\nyaml与yml区别?\r\n.yaml与.yml都是yaml格式的拓展名，虽然.yaml才是官方推荐的拓展格式，但是到目前为止，yml仍然被广泛使用：GitHub上\r\n.yml相关总提交次数为1千3百万次，而.yaml总次数仅为5百万次\r\n贴一个比较古早的stackoverflow的问题链接：configuration\r\nfiles - Is it .yaml or .yml? - Stack Overflow\r\n如果你不太想看的话，以下由简略版本：\r\n\r\n正方：I like .yml, it's 25% faster to write. ☝😆. Personally, I'm\r\nfine with whichever is the \"standard\"\r\n反方：Some people like to stick to 3 letter extensions as it was back\r\nin the old days when file systems were still limited to short names\r\n\r\n但是我仍然推荐使用yaml，作为官方推荐的拓展格式，它也许可以帮你避免很多意料之外的error。\r\n关于配置文件：是.yaml还是.yml？\r\n| 码农家园 (codenong.com)\r\n本来找到了原文，但是链接丢了(((φ(◎ロ◎;)φ)))，坏欸\r\n\r\n参考资料：\r\n\r\nJSON\r\nJSON Schema\r\n| The home of JSON Schema (json-schema.org) \r\nJSON5 | JSON for\r\nHumans\r\nThe JSON5 Data\r\nInterchange Format\r\nThe Official YAML Web\r\nSite\r\nYAML File\r\nFormat\r\nYAML Documentation · YAML\r\nYAMLlint\r\n- The YAML Validator\r\nyaml/yaml: YAML language and\r\ncommunity information (github.com)\r\n\r\n\r\n\r\n","slug":"Language Learning/MARK LANGUAGE/从json杀到yaml","date":"2021-11-16T08:15:04.000Z","categories_index":"Programming Language Learning","tags_index":"Json","author_index":"JBR_Bunjie"},{"id":"0ff372827a992c33dc9a7dba52ce9123","title":"建立一个FTP服务器吧!","content":"建立一个FTP服务器吧！\r\n\r\n注意你所购买的云服务商的文档，\r\n比如这里的：\r\n\r\n\r\n主动模式：放通端口21。\r\n被动模式：放通端口21，及 修改配置文件\r\n中设置的 pasv_min_port 到 pasv_max_port\r\n之间的所有端口，本文放通端口为40000 - 45000。\r\n\r\n云服务器\r\nLinux 云服务器搭建 FTP 服务-最佳实践-文档中心-腾讯云\r\n(tencent.com)\r\n\r\nInstall vsftpd\r\n&gt;# Install\n&gt;sudo apt update\n&gt;sudo apt install vsftpd\n&gt;sudo cp &#x2F;etc&#x2F;vsftpd.conf &#x2F;etc&#x2F;vsftpd.conf.orig\n\n&gt;# Firwall rules\n&gt;sudo ufw allow ftp-data\n&gt;sudo ufw allow ftp\n&gt;sudo ufw status\n\n&gt;# Preparing Space for Files\n&gt;sudo mkdir -p mapftp\n&gt;sudo chown nobody:nogroup mapftp\n&gt;echo &quot;vsftpd test file&quot; | sudo tee mapftp&#x2F;test.log\n&gt;sudo mkdir mapftp&#x2F;maps&#x2F;\n&gt;sudo chmod a+rwx mapftp&#x2F;maps&#x2F;\r\nConfigure Anonymous Access\r\n\r\nEdit /etc/vsftpd.conf\r\nChange the following:\r\n\r\n\r\nanonymous_enable=YES to allow anonymous access\r\nwrite_enable=YES to enable uploading\r\nanon_upload_enable=YES to enable anonymous\r\nuploading\r\nanon_mkdir_write_enable=YES to enable anonymous\r\ndirectory creation\r\n\r\n\r\nAppend the following to the end: 1.anon_umask=022 so\r\nthat new file will be readable by groups and other users. Uploaded files\r\nwill have a permittion set to the value of file_open_mode\r\n(by default, 0666) subtracted by anon_umask.\r\n\r\n\r\nanon_other_write_enable=YES to enable anonymous\r\ndeletion and renaming\r\nanon_root=xxx/mapftp sets the root folder for anonymous\r\nlogins\r\nno_anon_password=YES stops prompting for a password on\r\nthe command line.\r\nhide_ids=YES shows the user and group as\r\nftp:ftp, regardless of the owner.\r\npasv_min_port=40000 and\r\npasv_max_port=50000 limits the range of ports that can be\r\nused for passive FTP\r\n\r\n\r\nOptionally changes the listening port:\r\n\r\n\r\nlisten_port= followed by port number\r\n\r\nConclusion\r\nOn Linux, use the ftp command to access the server, e.g.\r\nftp -p 192.168.0.2 then followed by anonymous\r\nas the username. On Windows, use Windows Explorer or other FTP\r\ntools.\r\n\r\n了解FTP\r\n什么是ftp？\r\nFTP即：File Transfer\r\nProtocol，即ftp，可以直译为“文件传输协议”。但是由于FTP本身是使用明文进行数据传输，所以有了更多加密版本的FTP协议如：FTPS(FTP\r\nover SSL)，SFTP：Secure FTP(FTP over SSH)等\r\n部署FTP服务器\r\n以windows作为服务端——filezilla实现\r\n推荐视频教程：FileZilla：如何快速搭建FTP服务器\r\n\r\nFilezilla\r\nSever只支持Windows平台，而Client同时支持Windows，Linux，Mac\r\n设置Filezilla时需要注意：你添加的Port不是实际使用时的端口，是管理端口，所以不论设为什么值，只要不和当前系统已有端口重合都是可以的\r\nFilezilla使用多用户管理机制，不过你在正式使用之前需要先创建用户。在Edit-User-general中创建\r\n\r\n这个单个用户并不意味着是单个自然人，多个人是可以共享一个用户名和密码的，这里的用户主要是用于区分访问种类与权限而非界定访问的实际个人\r\n用户与用户之间可以设置不同目录来访问不同的资源：shared folders中管理，但是每一个用户都需要一个根目录\r\n当你添加一个非根目录的时候，需要手动指定它在访问时所在的目录——即电脑本地的文件路径和访问到的文件路径并不是不统一的。但是根目录是无需指定路径的，或者说根目录的路径是/\r\n注意用户的权限管理，记得设置用户密码\r\n\r\nhome会占用网址的路径，它不需要指定路径，对于home外的目录，添加之后，需要指定新的路径\r\n\r\n需要注意的是，ftp服务中的添加的目录与本机文件的实际目录是可以没有关系的\r\n​\r\n例如，对两个同级目录，你可以将一个目录赋在另一个目录的路径的子路径中\r\n配置路径地址时，注意使用反斜杠\r\n\r\n\r\n以Linux作为服务端——vsftpd实现\r\n在云服务器上部署ftp服务\r\n这里采用了阿里云服务器的CentOS7系统，版本是7.6\r\n使用了常用的vsftpd包来搭建ftp服务\r\nvsftpd项目地址：vsftpd - Secure, fast\r\nFTP server for UNIX-like systems (security.appspot.com)\r\n\r\n安装ftp服务\r\n请注意，本文可能仅适用于CentOS，其他的Linux发行版与CentOS虽同为Linux系统，但是也有诸多不同\r\n例如，第5步需要修改的vsftpd.conf文件，CentOS系统下它会出现在\r\n/etc/vsftpd 文件夹下，而Ubuntu系统下它则会直接出现在 /etc 文件夹下\r\n如果你需要以本教程做参考的话，请不要照搬本教程。比如将CentOS的包管理工具yum替换为你当前Linux发行版下的包管理工具\r\n\r\n\r\n安装vsftpd\r\n\r\nyum install -y vsftpd\r\n\r\n设置vsftpd开机启动\r\n\r\nsystemctl enable vsftpd\r\n\r\n启动vsftpd服务\r\n\r\nsystemctl start vsftpd\r\n\r\n检验服务是否启动\r\n\r\nnetstat -antup | grep ftp\r\n配置vsftpd\r\n建立用户并为他配置用户专属文件夹\r\n\r\n执行以下命令，为 FTP 服务创建一个 Linux 用户，本文以 ftpuser\r\n为例。\r\nuseradd ftpuser\r\n当你创建了一个新的用户的时候，Linux回味这个用户在 /home\r\n目录下建立一个以用户名为名的文件夹，并且这个目录这就是此后用户登陆时的默认路径\r\n~所代指的路径\r\n执行以下命令，设置 ftpuser 用户的密码。\r\npasswd ftpuser\r\n输入密码后请按Enter确认设置，密码默认不显示，本文以JBRBunjie为例。\r\n执行以下命令，创建 FTP\r\n服务使用的文件目录，本文以/var/ftp/test为例。\r\nmkdir &#x2F;var&#x2F;ftp&#x2F;test\r\n\r\n事实上，这个目录是哪里都可以的。只是一定要记得这个目录路径是什么，因为这个路径过会儿是会写入配置文件的。当客户机访问服务器时，实际地址就是这个地址\r\n\r\n执行以下命令，修改目录权限。\r\nchown -R ftpuser:ftpuser &#x2F;var&#x2F;ftp&#x2F;test\r\n\r\n你也可以直接新开一个终端，并以ftpuser身份登录\r\n这样子可以省去很多没必要的麻烦，因为在ftpuser身份下创建的所以文件的owner都是ftpuser，就可以省略用户权限配置这一步\r\n\r\n\r\n修改vsftpd.conf配置文件，并设置chroot\r\n\r\n打开要修改的文件：\r\nvim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf\r\n按i切换至编辑模式以修改配置文件vsftpd.conf：\r\n\r\n\r\n注意：\r\nFTP\r\n可通过主动模式和被动模式与客户端机器进行连接并传输数据。由于大多数客户端机器的防火墙设置及无法获取真实\r\nIP 等原因，一般选择被动模式搭建 FTP\r\n服务。以下修改以设置被动模式为例，如需选择主动模式，可以参看腾讯云的文档：设置\r\nFTP 主动模式。\r\n\r\n\r\n修改以下配置参数，取消它们前面的#注释或者修改对应值，和本地用户的登录权限，设置指定例外用户列表文件的路径，并开启监听\r\nIPv4 sockets。\r\n# Allow anonymous FTP? (Beware - allowed by default if you comment this out).\n# 是否运行匿名用户登录\nanonymous_enable&#x3D;NO\n\n# Uncomment this to allow local users to log in.\n# When SELinux is enforcing check for SE bool ftp_home_dir\n# 取消此注释来运行本地用户登录\nlocal_enable&#x3D;YES\n\n# You may specify an explicit list of local users to chroot() to their home directory. If chroot_local_user is YES, then this list becomes a list of users to NOT chroot(). (Warning! chroot&#39;ing can be very dangerous. If using chroot, make sure that the user does not have write access to the top level directory within the chroot)\n# 如果两个配置项都为yes，那么, 凡是加在文件chroot_list中的用户都是不受限止的用户，即, 可以浏览其主目录的上级目录.\n# 如果不希望某用户能够浏览其主目录上级目录中的内容,可以如上设置,然后在文件vsftpd.chroot_list中去掉或不添加该用户即可。\n\n# 也可以如下配置\n# chroot_local_user＝NO\n# chroot_list_enable&#x3D;YES(这行必须要有, 否则文件vsftpd.chroot_list不会起作用)\n# 则所有用户都能够访问上级目录，你可以把所有不希望有这种浏览其主目录之上的各目录权限的用户添加到文件chroot_list中即可(一行一个用户名，此时, 在该文件中的用户都是不可以浏览其主目录之外的目录的)\nchroot_local_user&#x3D;YES\nchroot_list_enable&#x3D;YES\n# chroot_list路径\nchroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list\n\n# When &quot;listen&quot; directive is enabled, vsftpd runs in standalone mode and\n# listens on IPv4 sockets. This directive cannot be used in conjunction\n# with the listen_ipv6 directive.\n# 监听IPv4 sockets\nlisten&#x3D;YES\r\n在listen_ipv6=YES行首添加#来将此功能注释掉\r\n# This directive enables listening on IPv6 sockets. By default, listening\n# on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6\n# and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6\n# sockets. If you want that (perhaps because you want to listen on specific\n# addresses) then you must run two copies of vsftpd with two configuration\n# files.\n# Make sure, that one of the listen options is commented !!\n\n# 关闭监听 IPv6 sockets。\n# listen_ipv6&#x3D;YES\r\n添加以下配置参数，开启被动模式，设置本地用户登录后所在目录，以及云服务器建立数据传输可使用的端口范围值\r\nlocal_root&#x3D;&#x2F;var&#x2F;ftp&#x2F;test\nallow_writeable_chroot&#x3D;YES\npasv_enable&#x3D;YES\npasv_address&#x3D;xxx.xx.xxx.xx #请修改为您的 Linux 云服务器公网 IP\npasv_min_port&#x3D;40000\npasv_max_port&#x3D;45000\r\n按 Esc 后输入 :wq! 保存后退出。\r\n创建chroot_list文件\r\nvim &#x2F;etc&#x2F;vsftpd&#x2F;chroot_list\r\n\r\n按 i\r\n进入编辑模式，输入用户名，一个用户名占据一行，\r\n设置完成后按 Esc 并输入 :wq\r\n保存后退出。\r\n您若没有设置例外用户的需求，可跳过此步骤，输入\r\n:wq 退出文件。或者直接改用 touch\r\n命令来创建文件\r\n\r\n重启 FTP 服务。\r\nsystemctl restart vsftpd\r\n\r\n设置云服务器安全组\r\n增加新的策略：\r\n\r\n开放ftp 21端口\r\n开放你在vsftpd.config中所配置的端口范围(pasv_min_port -\r\npasv_max_port) 40000 - 45000\r\n\r\n示例：\r\n\r\n\r\nimage-20211002181804382\r\n\r\n\r\n如果你使用的不是云服务器，你只需要将本地的防火墙指定端口打开就行\r\n\r\n验证 FTP 服务\r\n您可通过 FTP 客户端软件、浏览器或文件资源管理器等工具验证 FTP\r\n服务。\r\n\r\n打开客户端的 IE 浏览器，选择【工具】&gt;【Internet\r\n选项】&gt;【高级】，根据您选择的 FTP 模式进行修改：\r\n\r\n主动模式：取消勾选【使用被动 FTP】\r\n被动模式：勾选【使用被动 FTP】\r\n\r\n\r\nimage-20211002180657770\r\n\r\n\r\n打开计算机的ftp客户端，如果是windows电脑可以直接使用file explorer，在路径栏中访问\"ftp://xxx.xxx.xxx.xxx（你服务器的地址）\"\r\n在弹出的“登录身份”窗口中输入 配置\r\nvsftpd 中已设置的用户名及密码。本文使用的用户名为\r\nftpuser，密码为 JBRBunjie\r\n成功登录后，即可上传及下载文件\r\n\r\n更进一步：为多用户配置不同根目录\r\n埋坑\r\n总之仍然是对vsftpd配置文件进行修改来实现\r\n\r\n踩坑集合\r\nLinux 系统环境下\r\n550\r\nNo such file or directory / 550 create directory operation failed\r\n查看当前用户：\r\n如果你能连上远程地址，但是根本看不到文件内容，并且当你输入正确密码时仍然报错：550\r\n建议排查的东西：\r\n\r\n你配置的目录是否正确：/etc/vsftpd/vsftpd.conf 中的\r\nlocal_root 是否是你实际配置的目录\r\nftpuser 是否拥有操作当前\r\nlocal_root=/var/ftp/test 目录及内层文件的权限\r\nls -l [option: existed folder in current menu]\r\n服务是否启动\r\nnetstat -antup | grep ftp\r\n修改了配置项但还没有重启服务\r\nsystemctl restart vsftpd\r\n检查SELinux服务：\r\ngetsebool -a | grep ftp\r\n如果这条语句的结果是\r\n\r\n\r\nimage-20210918235447255\r\n\r\n代表SELinux安全服务处于disabled状态，不是这里的错，大概率还是上面四条错误\r\n但是如果是下面这样\r\n\r\n\r\n\r\nimage-20210918235240645\r\n\r\n​ ——几乎所有与ftp相关的服务都被关闭掉了\r\n​ 那几乎可以肯定是在这里出错了\r\n​ 解决办法是修改/etc/selinux/config配置文件：\r\nvim &#x2F;etc&#x2F;selinux&#x2F;config\r\n​\r\n把SELINUX默认的permissive或enforcing改为disabled\r\n\r\n\r\nimage-20210918235654741\r\n\r\n\r\n什么是SELinux？\r\nSecurity-Enhanced Linux (SELinux) is a security architecture for\r\nLinux® systems that allows administrators\r\nto have more control over who can access the system. It was originally\r\ndeveloped by the United States National Security Agency (NSA) as a\r\nseries of patches to the Linux kernel using\r\nLinux Security Modules (LSM).\r\nSELinux was released to the open source community in 2000, and was\r\nintegrated into the upstream Linux kernel in 2003.\r\n\r\n\" SELinux(Security-Enhanced Linux)\r\n是美国国家安全局（NSA）对于强制访问控制的实现，是\r\nLinux历史上最杰出的新安全子系统 \"\r\n\r\n\r\n\r\n最后办法：重启计算机，因为你之前修改的配置文件可能并没有生效\r\n\r\n553 Could not create file\r\n解决方法\r\n\r\n执行以下命令，检查服务器磁盘空间的使用率。\r\ndf -h\r\n\r\n如果磁盘空间不足，将会导致文件无法上传，建议删除磁盘容量较大的文件。\r\n如果磁盘空间正常，请执行下一步。\r\n\r\n执行以下命令，检查 FTP 目录是否有写的权限。\r\nls -l &#x2F;home&#x2F;test      \n# &#x2F;home&#x2F;test 为 FTP 目录，请修改为您实际的 FTP 目录。\r\n\r\n若返回结果中没有\r\nw，则表示该用户没有写的权限，请执行下一步。\r\n若返回结果中已有 w，(⊙﹏⊙)，那我建议你重装系统（\r\n\r\n执行以下命令，对 FTP 目录加上写的权限。\r\nchmod +w &#x2F;home&#x2F;test \n# &#x2F;home&#x2F;test 为 FTP 目录，请修改为您实际的 FTP 目录。\r\n执行以下命令，重新检查写的权限是否设置成功。\r\nls -l &#x2F;home&#x2F;test   \n# &#x2F;home&#x2F;test 为 FTP 目录，请修改为您实际的 FTP 目录。\r\n\r\n设置 FTP 主动模式\r\n主动模式需修改的配置如下，其余配置保持默认设置：\r\nanonymous_enable&#x3D;NO      #禁止匿名用户登录\n\nlocal_enable&#x3D;YES         #支持本地用户登录\n\nchroot_local_user&#x3D;YES    #全部用户被限制在主目录\nchroot_list_enable&#x3D;YES   #启用例外用户名单\nchroot_list_file&#x3D;&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list  #指定用户列表文件，该列表中的用户不被锁定在主目录\n\nlisten&#x3D;YES               #监听IPv4 sockets\n\n#在行首添加#注释掉以下参数\n#listen_ipv6&#x3D;YES         #关闭监听IPv6 sockets\n\n#添加下列参数\nallow_writeable_chroot&#x3D;YES\nlocal_root&#x3D;&#x2F;var&#x2F;ftp&#x2F;test #设置本地用户登录后所在的目录\r\n按 Esc 后输入 :wq\r\n保存后退出，并前往这里&gt;继续完成 vsftpd\r\n配置。\r\n参考资料：\r\n部分资源与拓展阅读\r\nFileZilla - The free FTP\r\nsolution (filezilla-project.org)\r\nWhat is\r\nSELinux? (redhat.com)\r\nWhat is\r\nLinux? (redhat.com)\r\nhttps://www.redhat.com/en/topics/linux/what-is-the-linux-kernel\r\n进一步配置：\r\nvsftpd添加用户并分配不同权限\r\n- 云+社区 - 腾讯云 (tencent.com)\r\n","slug":"Deploy/FTPDeploy/FTP部署","date":"2021-10-05T03:07:03.000Z","categories_index":"配置方法","tags_index":"FTP","author_index":"JBR_Bunjie"},{"id":"f859a0dc217f052fa5c43eafb964028a","title":"私有Git仓库搭建","content":"云服务器上的私有Git仓库搭建\r\n\r\n环境：\r\n阿里云服务器CentOS7.6\r\n部署Git\r\n安装Git：\r\n非CentOS安装Git：\r\n绝大多数Linux发行版安装Git只需要一条命令——参看：Git官方指南\r\n关于CentOS安装：\r\n与绝大部分Linux系统不同，redhat发行的系统通过包管理工具yum最高只能安装到1.8.3版本，需要使用更高版本的话都只能通过源码编译安装\r\n\r\nRed Hat Enterprise Linux, Oracle Linux, CentOS, Scientific Linux, et\r\nal.\r\nRHEL and derivatives typically ship older versions of git. You can download a tarball and build from source, or\r\nuse a 3rd-party repository such as the IUS\r\nCommunity Project to obtain a more recent version of git.\r\n\r\n下载源码\r\n首先我们先选择要安装的Git版本，我选择了2.33.0，下载并传到服务器上\r\n\r\n\r\nimage-20211001150441411\r\n\r\n解压，编译，安装\r\n# 查看git版本\ngit --version\n \n# 卸载\n# yum remove git\nyum eras\n\n# 进入源码目录\n$ cd git-2.33.0\n\n# 安装工具和依赖\n$ yum install libcurl-devel\n$ yum install expat-devel\n$ yum install openssl-devel\n \n# 编译\n$ make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git all\n# 编译内容带&#x2F;usr&#x2F;locak&#x2F;git目录\n$ make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git install\n# 在&#x2F;usr&#x2F;local&#x2F;git目录完成安装，请注意，这个不是git的默认路径，所以我们还需要为git的bin中文件建立软连接到&#x2F;usr&#x2F;bin中\r\n\r\n关于编译命令：make\r\nmake all：编译所有的目标\r\nmake install：安装已编译好的程序\r\n请注意！\r\nBy default, make install will install all the files in\r\n/usr/local/bin, /usr/local/lib etc. You can\r\nspecify an installation prefix other than\r\n/usr/local' using--prefix', for instance\r\n--prefix=$HOME\r\n\r\n添加到环境变量\r\n# 将git路径加入bashrc配置\n$ echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&quot; &gt;&gt;&#x2F;etc&#x2F;bashrc\n \n# 应用bashrc\n$ source &#x2F;etc&#x2F;bashrc\n\n# 验证结果\n$ git --version\n# git version 2.33.0\r\n建立软连接\r\nln -s &#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&#x2F;git-upload-pack &#x2F;usr&#x2F;bin&#x2F;git-upload-pack\nln -s &#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&#x2F;git-r-pack &#x2F;usr&#x2F;bin&#x2F;git-receive-pack\n# 一定要注意抓取地址和目标地址都要调换！\n# 如果没有在&#x2F;usr&#x2F;bin目录添加这两个文件的话，会因为没有处理请求的命令，报出没有权限的错\r\n创建仓库：\r\ncd &#x2F;home&#x2F;git # 进入git用户目录\n# 这个目录下会有三个以.记来隐藏的文件，请不要删除\n\n# 请以git用户的身份执行以下命令，否则还要执行修改用户目录权限的命令\n# 否则当客户端在以git身份执行clone等操作时会因为没有权限而失败\ngit init --bare yourRepositoryName.git # 这个命令有多个版本，如：git init yourRepositoryName.git, git init -bare youreRepositoryName.git 请注意区分\r\n在客户端克隆仓库：\r\ngit clone git@server-IP:&#x2F;home&#x2F;git&#x2F;test.git\r\n完成！\r\n\r\n\r\nimage-20211003154821032\r\n\r\n限制git用户登录：\r\n有的时候我们并不希望用户直接通过git用户的账号以及密码来直接通过SSH登录Linux主机，我们该怎么做？\r\n方法一：禁止Git用户通过ssh直接登录\r\n但是很显然我们不能使用这种方法——当我们禁止Git用户登录时，绝大部分正常的Git操作包括git\r\nclone，git pull等都无法正常进行了\r\n方法二：禁止Git用户进入bash\r\n编辑/etc/passwd这个文件，在文件末尾可以找到类似这样的行：\r\n# 原行： \ngit:x:1002:1002::&#x2F;home&#x2F;git:&#x2F;bin&#x2F;sh      \n----------------------------------------------------------\n# 更改为：\ngit:x:1002:1002::&#x2F;home&#x2F;git:&#x2F;usr&#x2F;bin&#x2F;git-shell\r\n把/bin/sh改为/usr/bin/git-shell，这样git这个账户就只能用来克隆或者推送数据到git仓库中了，而不能用它来登录到主机。\r\n\r\n当我们引用git-shell时，我们仍然需要使用 ln\r\n命令来为我们安装于 /usr/local/git 下的文件创建软链接：\r\nln -s &#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&#x2F;git-shell &#x2F;usr&#x2F;bin&#x2F;git-shell\r\n\r\n重启服务器：\r\n之后，当我们再次通过git用户登录时，便会报：\r\nfatal: Interactive git shell is not enabled.\nhint: ~&#x2F;git-shell-commands should exist and have read and execute access.\nConnection to x.x.x.x closed.\r\n添加工作空间：\r\n一般来讲，bare仓库不像是普通的仓库那样会在根目录中保存文件，bare仓库不保存文件并将.git文件夹下的全部内容直接暴露在当前仓库根目录中，且不包含工作区\r\n工作空间示例：\r\n\r\n\r\nimage-20211003155529616\r\n\r\n要查看工作空间，我们需要使用一个钩子：post-receive钩子\r\n有了这个钩子，我们要在裸仓库内看到用户提交的工作空间很简单了。只需要创建/编写post-receivek即可：\r\n在服务器裸仓库内\r\ncd hooks\r\n创建并编辑post-receive\r\nvim post-receive\r\n输入内容：\r\n#!&#x2F;bin&#x2F;sh\ngit --work-tree&#x3D;#工作空间# --git-dir&#x3D;#Git仓库地址# checkout -f\r\n例如，我此处的配置是：\r\n#!&#x2F;bin&#x2F;sh\ngit --work-tree&#x3D;&#x2F;home&#x2F;git&#x2F;gitWorkspace&#x2F;testWorkspace --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;test.git checkout -f\r\n\r\n工作空间：服务器上空目录地址，git用户需要有读写权限。\r\nGit仓库地址：服务器上本仓库地址。\r\n\r\n赋予执行权限：\r\nchmod +x post-receive\n# 用ls -alc\r\n\r\n\r\nimage-20211003171322547\r\n\r\n之后，用户push提交后，–work-tree参数定义的工作空间就可以看到用户提交的具体内容：\r\n\r\n\r\nimage-20211003165533697\r\n\r\n\r\n参考内容：\r\n教程中提到的webstie\r\nGit Website (git-scm.com)\r\nGit\r\nDownload Page(git-scm.com)\r\nIndex of\r\n/pub/software/scm/git/ (kernel.org)\r\nIUS\r\nGit - Git 钩子\r\n(git-scm.com)\r\n拓展资料\r\nall\r\nabout \"bare\" repos -- what, why, and how to fix a non-bare push\r\n(htmlpreview.github.io)\r\ngit\r\n- Where are the files in a bare repository? - Stack Overflow\r\nGit\r\n- Getting Git on a Server (git-scm.com)\r\nAccessing\r\nfiles of a repository from the Git server - Stack Overflow\r\n\r\n\r\n","slug":"Deploy/SetupPrivateGitRepository/Setup Private Git Repository ","date":"2021-10-05T03:05:03.000Z","categories_index":"配置方法","tags_index":"Git","author_index":"JBR_Bunjie"},{"id":"fc9433631750b4e2a27c5cd3c21a72be","title":"Python编程入门","content":"Python 3 Basic Grammar\r\nTraining\r\n为什么是python？\r\n一个最重要的原因——简单，快速，容易上手：\r\n你也可以通过著名的开发语言排行榜TIOBE来直观感受Python有多么热门index | TIOBE - The Software\r\nQuality Company\r\npython官网：Welcome to Python.org\r\npython社区（PYPI）：PyPI · The Python Package Index\r\npython最大的优势：开发效率高\r\npython最大的劣势：运行效率低\r\n开发效率与运行效率间的取舍是动态语言不可能绕过的问题，Python选择了开发效率换运行效率。\r\n但是python支持嵌入c，c++等高效率的低级语言，可以在一定程度上缓解这个问题\r\n配置你的电脑环境：\r\n安装Python\r\n3.8（Python会自带一个编辑器\"IDLE\"，不过只提供了基础的代码编写功能）\r\n你可以通过我\r\n关于IDE，我会推荐推荐使用Jet\r\nBrains公司出品的Pycharm。当然，宇宙第一IDE——Visual\r\nStudio也是不错的选择\r\n\r\n关于Python的版本：\r\nPython3中的更新与c/c++的新标准，Java的新版本等有相通之处；\r\n\r\n每次Python更新都会推出很多新的feature，3.7版本中更新了这些内容：https://docs.python.org/zh-cn/3.7/whatsnew/3.7.html，如果你需要了解当前版本更新了什么，最好的办法当然是去阅读Python的官方文档，当然，你也可以直接在Python自带的ide：idle来查阅Python的版本变化信息。在idle中，你可以按照Help\r\n&gt;&gt;&gt; Python Docs &gt;&gt; What’s New In Python\r\n3.7的路径来查看\r\n\r\n简单来说，python的更新会添加新的语法，提升python的稳定性(一般)，少数情况下会删除旧的语法与功能（3.10的兼容性差大概就是这么来的）\r\n截止本文完成时，Python已经推出了发布3.11版本的计划，并且已经推出了Python3.11的文档：What’s New In\r\nPython 3.11 — Python 3.11.0a0 documentation\r\n\r\n正式开始！\r\n从命令行开始！\r\n\r\n\r\nimage-20210923234720280\r\n\r\n这时，cmd就进入了python的编写模式，支持python\r\n当前版本的所有语法，和python自带的编辑器\r\n\r\n当然，你也可以使用windows的powershell，不过相对于cmd而言，powershell更加复杂，而且有各种莫名其妙的限制\r\n\r\n\r\n注意，如果你在cmd中输入python后打开的是windows\r\n商店，这是你操作系统的环境变量出了问题，请在edit the system environment\r\nvariables下仔细检查Path中python条目下的环境变量指向的地址！\r\n\r\n现在尝试打印Hello World吧\r\n所有你需要做的只是输入\r\nprint(&quot;Hello World&quot;)\r\ncmd就会显示：\r\n\r\n\r\nimage-20210329193537197\r\n\r\n简单吧！相信你一定会爱上python这门简单的语言的\r\n如果你要回到cmd的初始状态，只需要用 quit() 即可\r\n\r\n\r\nimage-20210329193638362\r\n\r\n\r\n什么时候需要使用到命令行？\r\n比如我现在已经编写完成了一个基于python的脚本。在命令行中，我们甚至无需要进入python的编辑模式，只需输入python\r\n+\r\n文件路径即可直接执行。一般来说，启动一个ide是很耗费时间的，而这就是我们节约时间的手段。\r\n\r\n\r\nimage-20210923235953188\r\n\r\n在pycharm中继续：\r\nPyCharm介绍\r\n官网：PyCharm: the\r\nPython IDE for Professional Developers by JetBrains\r\n至于为什么选用它，建议逼乎一下😂\r\n新建项目\r\n\r\n\r\nimage-20210329193807978\r\n\r\n对pycharm的一些初始设置：\r\n\r\n设置编码：（都改为utf-8）\r\n设置新建文件的默认代码和内容：\r\n\r\n你可以在PyCharm的官网上找到所有的File template variables：File\r\ntemplate variables | PyCharm (jetbrains.com)\r\n在console里执行命令：\r\n前面已经提到过在命令行中执行Python代码，这当然是运行已经编写好的Python程序或脚本的好办法。但是命令行中执行程序后就立刻输出结果并结束程序，那要是程序结束后我还想继续执行更多操作怎么办？\r\n这时候你可能需要用到Python Console功能\r\npycharm中的console就是一个pychon的直接运行环境，这里允许你以解释性的形式逐句输入并运行python代码。值得一提的是，在PyCharm中运行你的Python文件时，默认输出到Python\r\nConsole中，这意味着你可以在程序结束完成之后接着输入更多内容\r\n\r\n当你有不确定的代码需要验证的时候，不妨先复制到console里试一试！\r\n\r\n数据类型：\r\n在学习语法之前，你需要了解构成程序的要素是什么\r\n如果你有过其它语言的编程经验的话，你可能会说“数据结构+算法”\r\n但是如果你纯新手的话，那这可能难以理解。那么我会说，程序是由符合当前编程语言语法的语句依次执行生成的，构建程序的基本内容是数据的运算与处理\r\n很显然，就数据的处理而言，直接使用 1 + 2\r\n等既定的数据常量是远远不够的——我们需要应付更多变的情况——这就要用到变量\r\nPython变量命名规则\r\n和其它语言一样，Python也有自己的变量命名规则\r\n\r\n第一个字符必须是字母表中字母或下划线 **_**\r\n标识符的其他的部分由字母、数字和下划线组成\r\n标识符对大小写敏感\r\n注意避开python自己的保留字符\r\n你可以通过以下语句来查询Python保留的关键字符\r\nimport keyword \nkeyword.kwlist\r\n\r\n示例： \r\n关于变量的基本数据类型：\r\n在 Python\r\n中，变量就是变量，它没有类型，我们所说的\"类型\"是变量所指的内存中对象的类型。\r\nPython\r\n中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。\r\n\r\n不过Python中的确存在这些“基本数据类型”如：int，float之类的，并且它们之间都存在着严格的限制\r\n你可以使用 type() 函数来检查当前变量的数据类型：\r\n\r\n标准数据类型：\r\n\r\n不可变数据（3\r\n个）：Number（数字）、String（字符串）、Tuple（元组）；\r\n可变数据（3\r\n个）：List（列表）、Dictionary（字典）、Set（集合）。\r\n\r\n共六种\r\n关于可变与不可变数据：\r\n什么是不可变数据？\r\n在Python中，我们可以设立变量 a = 1，之后我们可以对 a\r\n的值做出改变，比如又执行语句 a = 2，这时 a\r\n当然就不再指向1，但是1这个“内容”本身并没有改变。\r\n而可变数据则是可以改变数据的具体内容：如语句 a = [1, 2]，我们可以将 a\r\n中的[0], [1]等数据单独拎出来并做出改变而并不改变 a 本身的指向\r\n这些“指向”，“内容”都是基于内存地址来说的。\r\n不可变数据类型：\r\n当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。\r\n可变数据类型\r\n：当该数据类型的对应变量的值发生了改变，那么它对应的内存地址不发生改变，对于这种数据类型，就称可变数据类型。\r\n你可以用\r\nid(变量名)来查验对应变量的内存地址是否发生变化\r\n数字：\r\nint float...\r\n列表：Python中功能最强大的数据类型\r\n用“[ ]”来定义列表！\r\n列表支持：\r\n\r\n列表间的拼接\r\n定义以列表为元素的列表\r\n将整个列表赋给新列表（也可以使用copy()函数：)\r\n通过append()，entend()，insert()，实现增\r\n通过pop()，remove()，实现删\r\n支持通过截取来获取列表内容（截取参看字符串\r\n\r\n元组：”常量列表“\r\n不能改变元素个数的列表，列表中一切涉及改变元素个数改变的功能全部NG\r\n用 “( )\" 来定义一个元组\r\n\r\n元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：\r\n\r\n\r\nimage-20210402174032001\r\n\r\n\r\n字符串：特化列表\r\n\r\npython允许直接把字符/字符串存储到一个变量中\r\n\r\n&gt;&gt;&gt; a &#x3D; &quot;bunjie&quot;\n&gt;&gt;&gt; a[-1]\n&#39;e&#39;\n&gt;&gt;&gt; a[0]\n&#39;b&#39;\n&gt;&gt;&gt; a[1]\n&#39;u&#39;\n&gt;&gt;&gt; a[:]\n&#39;bunjie&#39;\n&gt;&gt;&gt; a[0:1]\n&#39;b&#39;\n&gt;&gt;&gt; a[0:5]\n&#39;bunji&#39;\n&gt;&gt;&gt; a[0:6]\n&#39;bunjie&#39;\n&gt;&gt;&gt; a[0:7]\n&#39;bunjie&#39; #没有报错\n&gt;&gt;&gt; a[-1:-2]\n&#39;&#39;\n&gt;&gt;&gt; a[:-1]\n&#39;bunji&#39;\n&gt;&gt;&gt; a[:-6]\n&#39;&#39;\n&gt;&gt;&gt; a[:-5]\n&#39;b&#39;\r\n\r\n\r\nimage-20210402171810502\r\n\r\n字典：\r\n使用键值对进行匹配，类似c语言中的“枚举类型”，以键值对构建数据内容\r\n&#123;key: value, ...&#125;\r\nd &#x3D; &#123;key1 : value1, key2 : value2, key3 : value3 &#125;\nprint(d[key1])\n# 输出：value1\n\nD &#x3D; &#123;&#125; # 我们可以使用大括号来创建空字典\r\n字典可能是所有数据类型中最高效的，因为取元素时直接采用key来定点查找而不是像是list等数据类型依次迭代查找\r\n集合：\r\n是的，就是集合论中的集合\r\n总体来说，集合这种数据类型我们使用得较少，做可以使用大括号 {\r\n} 或者 set()\r\n函数创建集合，注意：创建一个空集合必须用 set() 而不是\r\n{ }，因为 { }\r\n是用来创建一个空字典。\r\n创建格式：\r\nparame1 &#x3D; &#123;value01, value02, ...&#125; # 注意格式\nparame2 &#x3D; set() # set只允许单个参数，我们一般使用set来创建空集合\r\n\r\n根据我们中学时所学到的知识，我们知道：集合具有确定性、互异性、无序性\r\n根据这些性质，我们获知：单个确定数据只会出现一次。所以如果出现重复的值，集合会把相同的合并。\r\n\r\n语法：\r\n关于注释：\r\n什么是注释？\r\n注释是你在程序中插入的解释性的文字，单纯的只是为了方便别人和自己理解当前程序。程序在运行时会忽略所有被注释的部分，所以你留下的注释并不会对程序功能造成任何实际上的影响\r\npython中的注释方式：\r\n\r\n以 #\r\n作为单行注释，在pycharm中，你可以使用 ctrl + /\r\n来快速注释一整行:\r\n# 这是一个单行注释\r\n以一对三个连续的单引号''' '''，或一对三个连续的双引号\"\"\" \"\"\"来作为多行注释\r\n&quot;&quot;&quot;\n这是一个多行注释\n&quot;&quot;&quot;\n\n&#39;&#39;&#39;\n这也是一个多行注释\n&#39;&#39;&#39;\r\n\r\n关于缩进：\r\nPython没有\r\n&#123; &#125;，它采用精确的缩进来确定控制语句的执行范围！\r\n一个项目里最好只采用 tab 和 space\r\n两种中的一种缩进，如果在一个控制体里使用了两种缩进格式是会报错的\r\n个人建议使用 tab 作为缩进\r\n\r\n\r\nimage-20210330153314699\r\n\r\npython没有分号：“ ; ”， 语句间几乎没有大括号，代价是精确的缩进！\r\n条件控制语句\r\n为什么使用条件控制？\r\n当然是为了以一个程序去应对多种可能性\r\n例如：我们解决除法运算时，我们当然需要以除数不为零来分类，但是我们不可能因为这一点就开发两个程序，并且要求用户根据除数是什么来选择运行那个程序——这就要求我们在设计程序的时候为某些特定情况运行特定代码\r\nPython中的条件控制语句长什么样？\r\nPython中if语句的一般形式如下所示：\r\nif condition_1:    \n    statement_block_1 \nelif condition_2:    \n    statement_block_2\n# 更多情况使用elif condiition_3: ... 并以此类推\nelse:\n    statement_block_3\r\n\r\n如果 \"condition_1\" 为 True 将执行 \"statement_block_1\" 块语句\r\n如果 \"condition_1\" 为False，将判断\r\n\"condition_2\"\r\n如果\"condition_2\" 为 True 将执行 \"statement_block_2\" 块语句\r\n如果\r\n\"condition_1\"与\"condition_2\"均为False，那么将执行\"statement_block_3\"块语句\r\n\r\n\r\n1、每个条件后面要使用冒号\r\n:，表示接下来是满足条件后要执行的语句块。\r\n2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。\r\n3、在Python中没有switch – case语句。\r\n\r\n循环语句：\r\n循环的意义有点类似于乘法之于加法，它提供了一种解出某一个条件下的最终结果的方式。借助循环，计算机能够非常高效的完成人很难或无法完成的事情，比如说，在大量文件中查找包含某个搜索词的文档，对几十万条销售数据进行统计汇总等。\r\nwhile循环：\r\nwhile 判断条件(condition)：    \n\t执行语句(statements)……\n# 每次循环之前都会进行一次condition是否为真的判断，如果结果为false，则立即停止循环\r\nfor循环：\r\nfor &lt;variable&gt; in &lt;sequence&gt;:\n    &lt;statements&gt;\nelse:\n    &lt;statements&gt;\r\n例一：\r\n例二：\r\n基础语法到此结束！\r\n附录1：python包的获取和管理\r\n类似于Node的npm，Linux中的yum，apt等，python有自己的包管理工具——pip，这也是Python安装时自带的\r\n但是直接从pypi上获取包的速度太慢长城防火墙，所以我们要借用一些国内的镜像网站，比如清华大学的清华源镜像网站\r\n你可以从console(非python的编辑模式)里用python的pip语句指定国内的镜像源来直接安装包，如：\r\npip install numpy -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;\n# -i代表当前安装操作使用后面的临时源\r\n不过我们也可以通过 ctrl + shift + s 打开pycharm的 settings 进入\r\nProject: (你当前的项目名) &gt;&gt; Python InterPreter\r\n来直接安装包。记得在manage repository中添加国内的python源的地址\r\n\r\n国内Python源建议使用清华源：https://pypi.tuna.tsinghua.edu.cn/simple/\r\n\r\n附录2：Python运算符\r\n运算符：（python的语法糖很大一部分集中在多种多样的运算符，这也是让书写python代码速度起飞的重要原因！）\r\n（虽然刚接触的时候会因为大量的运算符而痛苦😀）\r\n运算符手册：\r\n算数运算符：（相比c语言多了幂运算于取整运算）\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n运算符\r\n描述\r\n实例\r\n\r\n\r\n\r\n\r\n+\r\n加 - 两个对象相加\r\na + b 输出结果 31\r\n\r\n\r\n-\r\n减 - 得到负数或是一个数减去另一个数\r\na - b 输出结果 -11\r\n\r\n\r\n*\r\n乘 -\r\n两个数相乘或是返回一个被重复若干次的字符串\r\na * b 输出结果 210\r\n\r\n\r\n/\r\n除 - x 除以 y\r\nb / a 输出结果 2.1\r\n\r\n\r\n%\r\n取模 - 返回除法的余数\r\nb % a 输出结果 1\r\n\r\n\r\n**\r\n幂 - 返回x的y次幂\r\na**b 为10的21次方\r\n\r\n\r\n//\r\n取整除 - 向下取接近商的整数\r\n&gt;&gt;&gt; 9//2 4\r\n&gt;&gt;&gt; -9//2 -5\r\n\r\n\r\n\r\n比较运算符：（和c语言相同）\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n运算符\r\n描述\r\n实例\r\n\r\n\r\n\r\n\r\n==\r\n等于 - 比较对象是否相等\r\n(a == b) 返回 False。\r\n\r\n\r\n!=\r\n不等于 - 比较两个对象是否不相等\r\n(a != b) 返回 True。\r\n\r\n\r\n&gt;\r\n大于 - 返回x是否大于y\r\n(a &gt; b) 返回 False。\r\n\r\n\r\n&lt;\r\n小于 -\r\n返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。\r\n(a &lt; b) 返回 True。\r\n\r\n\r\n&gt;=\r\n大于等于 - 返回x是否大于等于y。\r\n(a &gt;= b) 返回 False。\r\n\r\n\r\n&lt;=\r\n小于等于 - 返回x是否小于等于y。\r\n(a &lt;= b) 返回 True。\r\n\r\n\r\n\r\n赋值运算：\r\n\r\n\r\n\r\n运算符\r\n描述\r\n实例\r\n\r\n\r\n\r\n\r\n=\r\n简单的赋值运算符\r\nc = a + b 将 a + b 的运算结果赋值为 c\r\n\r\n\r\n+=\r\n加法赋值运算符\r\nc += a 等效于 c = c + a\r\n\r\n\r\n-=\r\n减法赋值运算符\r\nc -= a 等效于 c = c - a\r\n\r\n\r\n*=\r\n乘法赋值运算符\r\nc = a 等效于 c = c  a\r\n\r\n\r\n/=\r\n除法赋值运算符\r\nc /= a 等效于 c = c / a\r\n\r\n\r\n%=\r\n取模赋值运算符\r\nc %= a 等效于 c = c % a\r\n\r\n\r\n**=\r\n幂赋值运算符\r\nc = a 等效于 c = c \r\na\r\n\r\n\r\n//=\r\n取整除赋值运算符\r\nc //= a 等效于 c = c // a\r\n\r\n\r\n\r\n\r\n特别提醒！ python中没有像c语言一样的自加运算！\r\n\r\n位运算符：（和c语言相同）\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n运算符\r\n描述:(下表中变量 a 为 60，b 为\r\n13二进制格式如下：)\r\n实例\r\n\r\n\r\n\r\n\r\n&amp;\r\n按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\r\n(a &amp; b) 输出结果 12 ，二进制解释：\r\n0000 1100\r\n\r\n\r\n|\r\n按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\r\n(a | b) 输出结果 61 ，二进制解释： 0011\r\n1101\r\n\r\n\r\n^\r\n按位异或运算符：当两对应的二进位相异时，结果为1\r\n(a ^ b) 输出结果 49 ，二进制解释： 0011\r\n0001\r\n\r\n\r\n~\r\n按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x\r\n类似于 -x-1\r\n(~a ) 输出结果 -61 ，二进制解释： 1100\r\n0011， 在一个有符号二进制数的补码形式。\r\n\r\n\r\n&lt;&lt;\r\n左移动运算符：运算数的各二进位全部左移若干位，由\"&lt;&lt;\"右边的数指定移动的位数，高位丢弃，低位补0。\r\na &lt;&lt; 2 输出结果 240 ，二进制解释：\r\n1111 0000\r\n\r\n\r\n&gt;&gt;\r\n右移动运算符：把\"&gt;&gt;\"左边的运算数的各二进位全部右移若干位，\"&gt;&gt;\"右边的数指定移动的位数\r\na &gt;&gt; 2 输出结果 15 ，二进制解释：\r\n0000 1111\r\n\r\n\r\n\r\n逻辑运算符：\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n运算符\r\n逻辑表达式\r\n描述（令a=10， b=20）\r\n实例\r\n\r\n\r\n\r\n\r\nand\r\nx and y\r\n布尔\"与\" - 如果 x 为 False，x and y 返回 x\r\n的值，否则返回 y 的计算值。\r\n(a and b) 返回 20。\r\n\r\n\r\nor\r\nx or y\r\n布尔\"或\" - 如果 x 是 True，它返回 x\r\n的值，否则它返回 y 的计算值。(与“与运算恰好相反”)\r\n(a or b) 返回 10。\r\n\r\n\r\nnot\r\nnot x\r\n布尔\"非\" - 如果 x 为 True，返回 False\r\n。如果 x 为 False，它返回 True。\r\nnot(a and b) 返回 False\r\n\r\n\r\n\r\n\r\n补充说明：\r\n\r\n成员运算符：\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n运算符\r\n描述\r\n实例\r\n\r\n\r\n\r\n\r\nin\r\n如果在指定的序列中找到值返回\r\nTrue，否则返回 False。\r\nx 在 y 序列中 , 如果 x 在 y 序列中返回\r\nTrue。\r\n\r\n\r\nnot in\r\n如果在指定的序列中没有找到值返回\r\nTrue，否则返回 False。\r\nx 不在 y 序列中 , 如果 x 不在 y 序列中返回\r\nTrue。\r\n\r\n\r\n\r\n身份运算符：\r\n（有种 == 和 != 的感觉，但是确实不一样！）\r\nis 用于判断两个变量引用对象是否为同一个， ==\r\n用于判断引用变量的值是否相等。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n运算符\r\n描述（注：id ()\r\n函数用于获取对象内存地址。）\r\n实例\r\n\r\n\r\n\r\n\r\nis\r\nis\r\n是判断两个标识符是不是引用自一个对象\r\nx is y, 类似\r\nid(x) == id(y) , 如果引用的是同一个对象则返回\r\nTrue，否则返回 False\r\n\r\n\r\nis not\r\nis not\r\n是判断两个标识符是不是引用自不同对象\r\nx is not y ， 类似\r\nid(a) != id(b)。如果引用的不是同一个对象则返回结果\r\nTrue，否则返回 False。\r\n\r\n\r\n\r\n\r\n\r\nimage-20210402163932528\r\n\r\nPython运算符优先级\r\n以下表格列出了从最高到最低优先级的所有运算符：\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n运算符\r\n描述\r\n\r\n\r\n\r\n\r\n**\r\n指数 (最高优先级)\r\n\r\n\r\n~ + -\r\n按位翻转, 一元加号和减号\r\n(最后两个的方法名为 +@ 和 -@)\r\n\r\n\r\n* / % //\r\n乘，除，求余数和取整除\r\n\r\n\r\n+ -\r\n加法减法\r\n\r\n\r\n&gt;&gt; &lt;&lt;\r\n右移，左移运算符\r\n\r\n\r\n&amp;\r\n位 'AND'\r\n\r\n\r\n^ |\r\n位运算符\r\n\r\n\r\n&lt;= &lt; &gt; &gt;=\r\n比较运算符\r\n\r\n\r\n== !=\r\n等于运算符\r\n\r\n\r\n= %= /= //= -= += *= **=\r\n赋值运算符\r\n\r\n\r\nis is not\r\n身份运算符\r\n\r\n\r\nin not in\r\n成员运算符\r\n\r\n\r\nnot and or\r\n逻辑运算符\r\n\r\n\r\n\r\n最后（传教）:我即使是死了，钉在棺材里了，也要在墓里，用这腐朽的声带喊出：“vocaloid\r\nforever！！！\"\r\n最后的最后：都看到这里了，不听支歌吗?(❁'◡'❁)\r\n\r\n\r\n参考资料：\r\n\r\nPython3 教程\r\n| 菜鸟教程 (runoob.com)\r\n\r\n","slug":"Language Learning/Python/PythonBasicGrammar/PythonBasicGrammar","date":"2021-09-26T09:22:04.000Z","categories_index":"Programming Language Learning","tags_index":"Python","author_index":"JBR_Bunjie"},{"id":"9ec39e11b1bab83a62560ea633cdc96a","title":"更新你的Git版本","content":"那么现在，如果我的就电脑上已经安装了一个version为2.31.1的git\r\n问题来了，如何将它更新至最新版本呢，\r\nHow\r\nto upgrade Git on Windows to the latest version - Stack Overflow\r\n如果你迫切想要知道解决方法的话，那么，你可以直接运行这个命令\r\n\r\nC:\\&gt; git update-git-for-windows\r\n\r\n这个命令对于当前版本&gt;2.16.1的Git有效\r\n对于Git版本在2.14到2.16.1之间的，请使用如下命令：\r\n\r\nC;\\&gt; git update\r\n\r\n\r\n\r\nimage-20210907170607746\r\n\r\n至于更低的，就只能先卸载旧版本再重装了，它太古董了\r\n等待你的进程完成即可\r\n\r\n\r\nimage-20210907171745526\r\n\r\n","slug":"Softwares/updateGit/updateGit","date":"2021-09-07T15:59:53.000Z","categories_index":"配置方法","tags_index":"Git","author_index":"JBR_Bunjie"},{"id":"cadb81dd6adf93defe9d2e5bccb01250","title":"美化你的GitHub主页！","content":"一般来说，GitHub主页是很简陋枯燥又单调的：\r\n\r\n\r\nimage-20210907192522519\r\n\r\n但是也许你也见过别人的完全不同的主页：\r\n\r\n\r\nimg\r\n\r\n欸？他的主页怎么有一个markdown文件作为公示栏来展示？怎么做到的？\r\n答案是GitHub的官方彩蛋（后门）：\r\n当↗当↗当↗当↘\r\n\r\n\r\nimage-20210907193059189\r\n\r\n\r\n请注意：你需要创建一个公共仓库，这样才会被GitHub所捕捉到，如果这是私密仓库的话是不会在主页上出现的\r\n\r\n然后你会在这个新创建的仓库的页面右侧看到\r\n\r\n\r\nimage-20210907193619068\r\n\r\n此时，这个“彩蛋”会立即生效\r\n\r\n\r\nimage-20210907194151912\r\n\r\n如果想要有一个不一样的GitHub主页，就需要使用这个小小的“彩蛋”来定制你的主页\r\n当然，你也可以引入很多组件来深度定制你的GitHub主页：比如：\r\ngithub-readme-stats/readme_cn.md\r\nat master · anuraghazra/github-readme-stats\r\n","slug":"Softwares/Git/beautifyGithubHome/beautifyGithubHome","date":"2021-09-07T15:58:53.000Z","categories_index":"工具美化","tags_index":"GitHub","author_index":"JBR_Bunjie"},{"id":"6adf345a8e80c4aa1ee89482b75933eb","title":"Hello World, Hello Hexo","content":"hexo website：Hexo\r\nHexo从开箱到弃用\r\nHexo的基础配置\r\n安装hexo-cli\r\nnpm install hexo-cli -g\r\n完成hexo的部署：\r\nnpm install hexo-cli -g\nhexo init &lt;name&gt; # 注意：hexo必须要在空文件夹下完成初始化，如果没有&lt;name&gt;，则在当前目录下完成初始化，否则新建一个&lt;name&gt;文件夹初始化 \ncd &lt;name&gt; # 根据上个命令初始化的文件夹使用\nnpm install # 安装依赖\nhexo server # 启动hexo服务器，这时候便可以访问所有 source&#x2F; 下的所有文章页面了\r\n创建新的页面：\r\nhexo new [layout] &lt;name&gt; # 创建一个新的post页面，会出现在source文件夹下，内涵一个index.md\n# 我们可以直接对这个md文件进行编辑，hexo会自动将这个文件渲染为一个html页面\r\n\r\n创建新文件夹或者页面时请注意 \\_config.yml 中\r\n# Directory 下项目的配置\r\n\r\n再次运行hexo：\r\nhexo clean # 清除之前hexo的缓存\nhexo g # g或generate 根据md文件生成html等文件\nhexo s # s或server 启动hexo服务器\r\n配置Hexo快速部署：\r\nOne-Command\r\nDeployment | Hexo\r\n以git为例：\r\n安装hexo的git插件：\r\nnpm install hexo-deployer-git --save\r\n修改Hexo中的\\_config.yml文件：\r\ndeploy:\n  type: git\n  repo: &lt;repository url&gt; # https:&#x2F;&#x2F;bitbucket.org&#x2F;JohnSmith&#x2F;johnsmith.bitbucket.io\n  branch: [branch]\n  message: [message]\n \n# 例如，我自己的仓库配置如下：\ndeploy:\n  type: git\n  repo: git@github.com:JBR-Bunjie&#x2F;JBR-Bunjie.github.io.git\n  branch: master\r\n配置完成之后，我们便可以使用命令：\r\nhexo deploy\r\n来直接将我们编写的Hexo文档推送到所有远端托管地址上了\r\n\r\n在使用git来推送之前，你需要先完成本地git工具对远程仓库的权限等配置\r\n\r\n安装别的博客框架\r\n当然，你需要先选定一个博客框架才行\r\n比如如果想要安装aurora，我会选择直接去查阅aurora的官方文档来了解aurora的具体配置项\r\nHome | Hexo Aurora\r\n(tridiamond.tech)\r\n但是当我们想要更替当前Hexo框架时，我们需要同时修改Hexo项目的\\_config.yml和Hexo框架的的\\_config.xxx.yml，例如：Aurora的\\_config.aurora.yml\r\n# 修改项：\n\ntheme: &lt;yourThemeName&gt;  \r\n\r\n\r\n","slug":"Softwares/Hexo使用","date":"2021-09-07T14:09:05.000Z","categories_index":"配置方法","tags_index":"使用hexo来搭建你的博客！","author_index":"JBR_Bunjie"}]